boolean smallCpu = ( Math . max ( arg ) < sysCPUSizeForUberSlot ) ;
int skipComponents = 0 ;
final INodesInPath iip = dir . getINodesInPath ( arg ) ;
INodesInPath inodesInPath = fsdir . getMutableINodesInPath ( arg ) ;
INodesInPath inodesInPath = fsdir . getMutableINodesInPath ( arg ) ;
return type != null ? new DiffReportEntry ( arg ) : null ;
return type . equals ( arg ) && fullPath . equals ( arg ) ;
return fullPath . hashCode ( arg ) ;
return type . getLabel ( arg ) +  T  + fullPath ;
return to == null || ( from != null && Snapshot . ID_COMPARATOR . compare ( arg ) < 0 ) ;
computeDiffInDir ( arg ) ;
inode . destroySubtreeAndCollectBlocks ( arg ) ;
deletedProcesser . process ( arg ) ;
deletedProcesser . process ( arg ) ;
fsDir . unprotectedReplaceINodeFile ( arg ) ;
final INodeReference ref = new INodeReference ( arg ) ;
dir . verifyMaxComponentLength ( arg ) ;
dir . verifyMaxComponentLength ( arg ) ;
checkOwner ( arg ) ;
checkOwner ( arg ) ;
inodeMap . put ( arg ) ;
LightWeightGSet < INode , INode > map = new LightWeightGSet < INode , INode > ( arg ) ;
Snapshot s = fileDiffList . searchSnapshotById ( arg ) ;
nmClientAsync . startContainer ( arg ) ;
nmClientAsync . getContainerStatus ( arg ) ;
resourceManager = new AMRMClientAsync ( arg ) ;
nmClientAsync = new NMClientAsync ( arg ) ;
byte [ ] uuid = StringUtils . getUuidBytes ( arg ) ;
FileContext fc = FileContext . getFileContext ( arg ) ;
appAttempt . rmContext . getAMRMTokenSecretManager ( arg ) . applicationMasterFinished ( arg ) ;
store . setDispatcher ( arg ) ;
final int totalRetry = 256 ;
RemoteIterator < CachePool > iter = server . listCachePools ( arg ) ;
CachePool pool = iter . next ( arg ) ;
builder . addEntries ( arg ) ;
return response . getEntriesCount ( arg ) ;
return new InvalidPoolError ( arg ) ;
CachePool pool = null ;
final FSPermissionChecker pc = getPermissionChecker ( arg ) ;
return namesystem . addCachePool ( arg ) ;
final int numFiles = 3 ;
String historyUrl = WebAppUtil . getSchemePrefix ( arg ) + JobHistoryUtils . getHistoryUrl ( arg ) ;
Text line ;
URI tmp = null ;
FileStatus linkStatus = dfs . getFileLinkStatus ( arg ) ;
containerListener = new NMCallbackHandler ( arg ) ;
FSPermissionChecker pc = getPermissionChecker ( arg ) ;
app . safeToReportTerminationToUser . set ( arg ) ;
url = result . toASCIIString ( arg ) . substring ( arg ) ;
return fs . canonicalizeUri ( arg ) ;
IOException e = lastException ;
scheduledSize = 0 ;
commandName . replaceAll ( arg ) ;
StorageBlockReport [ ] reports = getBlockReportsCorruptSingleBlockGS ( arg ) ;
s . incrementBlocksScheduled ( arg ) ;
DatanodeDescriptor [ ] ret = ( DatanodeDescriptor [ ] ) invocation . callRealMethod ( arg ) ;
return new CachePoolInfo ( arg ) . setOwnerName ( arg ) . setGroupName ( arg ) . setMode ( arg ) . setWeight ( arg ) ;
return kind . equals ( arg ) || kind . equals ( arg ) ;
Configuration testConf = new Configuration ( arg ) ;
Configuration testConf = new Configuration ( arg ) ;
MBeans . register ( arg ) ;
getIncrementalBRMapForStorage ( arg ) . putBlockInfo ( arg ) ;
getIncrementalBRMapForStorage ( arg ) . putBlockInfo ( arg ) ;
return StorageType . DEFAULT ;
Replica replica ;
replica = blockReceiver . getReplicaInfo ( arg ) ;
replica = datanode . data . recoverClose ( arg ) ;
headIndex = dd . getHead ( arg ) . findStorageInfo ( arg ) ;
BlockInfo temp = dd . getHead ( arg ) ;
temp = dd . getHead ( arg ) ;
headIndex = dd . getHead ( arg ) . findStorageInfo ( arg ) ;
dn . getStorageInfos ( arg ) [ 0 ] . setUtilization ( arg ) ;
datanode . getStorageInfos ( arg ) [ 0 ] . setUtilization ( arg ) ;
dn . getStorageInfos ( arg ) [ 0 ] . setUtilization ( arg ) ;
dn . getStorageInfos ( arg ) [ 0 ] . setUtilization ( arg ) ;
return binfo ;
StorageLocation location = new StorageLocation ( arg ) ;
ArrayList < StorageLocation > locations ;
locations = new ArrayList < StorageLocation > ( arg ) ;
locations = new ArrayList < StorageLocation > ( arg ) ;
RemoteIterator < CacheDirectiveEntry > iter = server . listCacheDirectives ( arg ) ;
RemoteIterator < CachePoolEntry > iter = server . listCachePools ( arg ) ;
return new ServerSideCacheEntriesIterator ( arg ) ;
return new ServerSideCachePoolIterator ( arg ) ;
RemoteIterator < CacheDirectiveEntry > entries = nnRpc . listCacheDirectives ( arg ) ;
ExitUtil . terminate ( arg ) ;
ExitUtil . terminate ( arg ) ;
AppAddedSchedulerEvent appAddedEvent1 = new AppAddedSchedulerEvent ( arg ) ;
AppRemovedSchedulerEvent appRemovedEvent1 = new AppRemovedSchedulerEvent ( arg ) ;
SchedulerEvent event = new AppAddedSchedulerEvent ( arg ) ;
AppAddedSchedulerEvent appAddedEvent = new AppAddedSchedulerEvent ( arg ) ;
AppRemovedSchedulerEvent appRemovedEvent1 = new AppRemovedSchedulerEvent ( arg ) ;
AppRemovedSchedulerEvent appRemovedEvent2 = new AppRemovedSchedulerEvent ( arg ) ;
AppRemovedSchedulerEvent appRemovedEvent3 = new AppRemovedSchedulerEvent ( arg ) ;
scheduler . addApplication ( arg ) ;
scheduler . addApplication ( arg ) ;
AppAddedSchedulerEvent appAddedEvent2 = new AppAddedSchedulerEvent ( arg ) ;
AppRemovedSchedulerEvent appRemovedEvent1 = new AppRemovedSchedulerEvent ( arg ) ;
AppAddedSchedulerEvent appAddedEvent = new AppAddedSchedulerEvent ( arg ) ;
SchedulerEvent event = new AppAddedSchedulerEvent ( arg ) ;
AppAddedSchedulerEvent appEvent1 = new AppAddedSchedulerEvent ( arg ) ;
AppAddedSchedulerEvent appEvent1 = new AppAddedSchedulerEvent ( arg ) ;
AppAttemptRemovedSchedulerEvent appAttemptRemovedEvent = ( AppAttemptRemovedSchedulerEvent ) event ;
doneApplicationAttempt ( arg ) ;
AppAttemptAddedSchedulerEvent appAddedEvent1 = new AppAttemptAddedSchedulerEvent ( arg ) ;
SchedulerEvent event1 = new AppAttemptAddedSchedulerEvent ( arg ) ;
SchedulerEvent event1 = new AppAttemptAddedSchedulerEvent ( arg ) ;
SchedulerEvent event2 = new AppAttemptAddedSchedulerEvent ( arg ) ;
AppAttemptRemovedSchedulerEvent appRemovedEvent1 = new AppAttemptRemovedSchedulerEvent ( arg ) ;
SchedulerEvent event = new AppAttemptAddedSchedulerEvent ( arg ) ;
AppAttemptRemovedSchedulerEvent event = new AppAttemptRemovedSchedulerEvent ( arg ) ;
event = new AppAttemptRemovedSchedulerEvent ( arg ) ;
scheduler . addApplicationAttempt ( arg ) ;
AppAttemptAddedSchedulerEvent appAddedEvent1 = new AppAttemptAddedSchedulerEvent ( arg ) ;
AppAttemptRemovedSchedulerEvent appRemovedEvent1 = new AppAttemptRemovedSchedulerEvent ( arg ) ;
fs . addApplicationAttempt ( arg ) ;
AppAttemptAddedSchedulerEvent appAddedEvent = new AppAttemptAddedSchedulerEvent ( arg ) ;
AppAttemptRemovedSchedulerEvent appRemovedEvent1 = new AppAttemptRemovedSchedulerEvent ( arg ) ;
AppAttemptRemovedSchedulerEvent appRemovedEvent2 = new AppAttemptRemovedSchedulerEvent ( arg ) ;
AppAttemptRemovedSchedulerEvent appRemovedEvent3 = new AppAttemptRemovedSchedulerEvent ( arg ) ;
scheduler . addApplicationAttempt ( arg ) ;
scheduler . addApplicationAttempt ( arg ) ;
AppAttemptAddedSchedulerEvent appAddedEvent2 = new AppAttemptAddedSchedulerEvent ( arg ) ;
scheduler . addApplicationAttempt ( arg ) ;
scheduler . addApplicationAttempt ( arg ) ;
scheduler . addApplicationAttempt ( arg ) ;
AppAttemptRemovedSchedulerEvent appRemovedEvent1 = new AppAttemptRemovedSchedulerEvent ( arg ) ;
AppAttemptAddedSchedulerEvent appAddedEvent = new AppAttemptAddedSchedulerEvent ( arg ) ;
SchedulerEvent event = new AppAttemptAddedSchedulerEvent ( arg ) ;
event = new AppAttemptAddedSchedulerEvent ( arg ) ;
SchedulerEvent event = new AppAttemptAddedSchedulerEvent ( arg ) ;
AppAttemptAddedSchedulerEvent appEvent1 = new AppAttemptAddedSchedulerEvent ( arg ) ;
AppAttemptAddedSchedulerEvent appEvent1 = new AppAttemptAddedSchedulerEvent ( arg ) ;
AppRemovedSchedulerEvent appRemovedEvent = ( AppRemovedSchedulerEvent ) event ;
doneApplication ( arg ) ;
AppAddedSchedulerEvent appAddedEvent1 = new AppAddedSchedulerEvent ( arg ) ;
SchedulerEvent event1 = new AppAddedSchedulerEvent ( arg ) ;
SchedulerEvent event1 = new AppAddedSchedulerEvent ( arg ) ;
SchedulerEvent event2 = new AppAddedSchedulerEvent ( arg ) ;
AppRemovedSchedulerEvent appRemovedEvent1 = new AppRemovedSchedulerEvent ( arg ) ;
SchedulerEvent event = new AppAddedSchedulerEvent ( arg ) ;
AppRemovedSchedulerEvent event = new AppRemovedSchedulerEvent ( arg ) ;
event = new AppRemovedSchedulerEvent ( arg ) ;
scheduler . addApplication ( arg ) ;
AppAddedSchedulerEvent appAddedEvent1 = new AppAddedSchedulerEvent ( arg ) ;
AppRemovedSchedulerEvent appRemovedEvent1 = new AppRemovedSchedulerEvent ( arg ) ;
fs . addApplication ( arg ) ;
AppAddedSchedulerEvent appAddedEvent = new AppAddedSchedulerEvent ( arg ) ;
AppRemovedSchedulerEvent appRemovedEvent1 = new AppRemovedSchedulerEvent ( arg ) ;
AppRemovedSchedulerEvent appRemovedEvent2 = new AppRemovedSchedulerEvent ( arg ) ;
AppRemovedSchedulerEvent appRemovedEvent3 = new AppRemovedSchedulerEvent ( arg ) ;
scheduler . addApplication ( arg ) ;
scheduler . addApplication ( arg ) ;
AppAddedSchedulerEvent appAddedEvent2 = new AppAddedSchedulerEvent ( arg ) ;
scheduler . addApplication ( arg ) ;
scheduler . addApplication ( arg ) ;
scheduler . addApplication ( arg ) ;
AppRemovedSchedulerEvent appRemovedEvent1 = new AppRemovedSchedulerEvent ( arg ) ;
AppAddedSchedulerEvent appAddedEvent = new AppAddedSchedulerEvent ( arg ) ;
SchedulerEvent event = new AppAddedSchedulerEvent ( arg ) ;
event = new AppAddedSchedulerEvent ( arg ) ;
SchedulerEvent event = new AppAddedSchedulerEvent ( arg ) ;
AppAddedSchedulerEvent appEvent1 = new AppAddedSchedulerEvent ( arg ) ;
AppAddedSchedulerEvent appEvent1 = new AppAddedSchedulerEvent ( arg ) ;
logWriter . closeWriter ( arg ) ;
writer . closeWriter ( arg ) ;
hostName = endpoints . get ( arg ) . getHost ( arg ) ;
