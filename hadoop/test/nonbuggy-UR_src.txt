blockReader . close ( arg ) ;
reader . close ( arg ) ;
IOUtils . cleanup ( arg ) ;
IOUtils . cleanup ( arg ) ;
Assert . assertSame ( arg ) ;
ss . close ( arg ) ;
assertSame ( arg ) ;
Util . replace ( arg ) ;
Util . replace ( arg ) ;
return ( arg ) cl . loadClass ( arg ) ;
return getParent ( arg ) == null ;
return getParent ( arg ) == null ;
final int c = search ( arg ) ;
return ( arg ) ;
return null ;
int total = 0 ;
return total ;
int n = 0 ;
conf . getCredentials ( arg ) . addToken ( arg ) ;
conf . getCredentials ( arg ) . addToken ( arg ) ;
conf . getCredentials ( arg ) . addToken ( arg ) ;
Resource resource = mock ( arg ) ;
out . write ( arg ) ;
WebServicesTestUtils . checkStringMatch ( arg ) ;
WebServicesTestUtils . checkStringMatch ( arg ) ;
Token < ApplicationTokenIdentifier > token = new Token < ApplicationTokenIdentifier > ( arg ) ;
WebServicesTestUtils . checkStringMatch ( arg ) ;
WebServicesTestUtils . checkStringMatch ( arg ) ;
return 0 ;
request . setHostName ( arg ) ;
request . setHostName ( arg ) ;
allocateRequest = BuilderUtils . newAllocateRequest ( arg ) ;
INodeDirectoryWithQuota node = ( INodeDirectoryWithQuota ) inodes [ i ] ;
throw RPCUtil . getRemoteException ( arg ) ;
throw RPCUtil . getRemoteException ( arg ) ;
Assert . assertTrue ( arg ) ;
Assert . assertTrue ( arg ) ;
assertTrue ( arg ) ;
assertTrue ( arg ) ;
assertTrue ( arg ) ;
return fsTokens ;
ClientRMProtocol client ;
Token < ApplicationTokenIdentifier > appToken = new Token < ApplicationTokenIdentifier > ( arg ) ;
Token < ApplicationTokenIdentifier > token = new Token < ApplicationTokenIdentifier > ( arg ) ;
Token < ApplicationTokenIdentifier > token = new Token < ApplicationTokenIdentifier > ( arg ) ;
Token < ApplicationTokenIdentifier > token = new Token < ApplicationTokenIdentifier > ( arg ) ;
return s ;
this . application = client . getNewApplication ( arg ) ;
rootMetrics = QueueMetrics . forQueue ( arg ) ;
return value ;
return value ;
return value ;
throw e ;
throw RPCUtil . getRemoteException ( arg ) ;
Call call = new Call ( arg ) ;
stop ( arg ) ;
return s ;
return ms ;
assertEquals ( arg ) ;
return ms ;
return d ;
return fs . rename ( arg ) ;
throw new IOException ( arg ) ;
throw new AssertionError ( arg ) ;
return false ;
assertEquals ( arg ) ;
FSDataOutputStream fos = null ;
fos = new FSDataOutputStream ( arg ) ;
return ms ;
return ns ;
return s ;
return m ;
server = new HttpServer ( arg ) ;
DatanodeDescriptor [ ] targets = new DatanodeDescriptor [ 0 ] ;
return client . getFileInfo ( arg ) ;
return ( arg ) >= len ;
return state ;
DatanodeDescriptor targets [ ] = { val } ;
DatanodeDescriptor [ ] targets = chooseTarget ( arg ) ;
DatanodeDescriptor [ ] targets = chooseTarget ( arg ) ;
DatanodeDescriptor [ ] targets = replicator . chooseTarget ( arg ) ;
dnId . setStorageID ( arg ) ;
node . setStorageID ( arg ) ;
node . setStorageID ( arg ) ;
assert ( arg ) ;
assert ( arg ) ;
getConfig ( arg ) . set ( arg ) ;
getConfig ( arg ) . set ( arg ) ;
fos . write ( arg ) ;
data = new byte [ count ] ;
return new BlockListAsLongs ( arg ) ;
StorageBlockReport [ ] report = { val } ;
StorageBlockReport [ ] report = { val } ;
StorageBlockReport [ ] report = { val } ;
return s ;
return null ;
return host ( arg ) . equals ( arg ) && path ( arg ) . equals ( arg ) ;
INodeFileUnderConstruction file = mock ( arg ) ;
INodeFileUnderConstruction file = mock ( arg ) ;
INodeFileUnderConstruction file = mock ( arg ) ;
INodeFileUnderConstruction file = mock ( arg ) ;
INodeFileUnderConstruction file = mock ( arg ) ;
return entry ;
info = iter . next ( arg ) ;
info = it . next ( arg ) ;
int port = server . getPort ( arg ) ;
LOG . info ( arg ) ;
final List < Map < String , BlockListAsLongs >> result = new ArrayList < Map < String , BlockListAsLongs >> ( arg ) ;
LOG . debug ( arg ) ;
this . wait ( arg ) ;
info . writeTo ( arg ) ;
info . writeTo ( arg ) ;
return this . clientToAMSecretManager ;
