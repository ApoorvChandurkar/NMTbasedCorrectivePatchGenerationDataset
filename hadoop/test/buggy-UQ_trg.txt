boolean smallCpu = ( Math . max ( arg ) <= sysCPUSizeForUberSlot ) ;
int skipComponents = 1 ;
final INodesInPath iip = dir . getLastINodeInPath ( arg ) ;
INodesInPath inodesInPath = fsdir . getINodesInPath4Write ( arg ) ;
INodesInPath inodesInPath = fsdir . getINodesInPath4Write ( arg ) ;
return type == null ? null : new DiffReportEntry ( arg ) ;
return type . equals ( arg ) && Arrays . equals ( arg ) ;
return Arrays . hashCode ( arg ) ;
return type . getLabel ( arg ) +  T  + getRelativePathString ( arg ) ;
return Snapshot . ID_COMPARATOR . compare ( arg ) < 0 ;
computeDiffRecursively ( arg ) ;
return inode . destroyAndCollectBlocks ( arg ) ;
deletedNum += deletedProcesser . process ( arg ) ;
deletedNum += deletedProcesser . process ( arg ) ;
fsDir . replaceINodeFile ( arg ) ;
final INodeReference ref = new INodeReference . DstReference ( arg ) ;
dir . verifySnapshotName ( arg ) ;
dir . verifySnapshotName ( arg ) ;
checkSuperuserPrivilege ( arg ) ;
checkSuperuserPrivilege ( arg ) ;
addToInodeMapUnprotected ( arg ) ;
GSet < INode , INodeWithAdditionalFields > map = new LightWeightGSet < INode , INodeWithAdditionalFields > ( arg ) ;
Snapshot s = fileDiffList . getSnapshotById ( arg ) ;
nmClientAsync . startContainerAsync ( arg ) ;
nmClientAsync . getContainerStatusAsync ( arg ) ;
resourceManager = AMRMClientAsync . createAMRMClientAsync ( arg ) ;
nmClientAsync = NMClientAsync . createNMClientAsync ( arg ) ;
byte [ ] uuid = ClientId . getClientId ( arg ) ;
fs . mkdirs ( arg ) ;
appAttempt . removeTokens ( arg ) ;
store . setRMDispatcher ( arg ) ;
final int totalRetry = 10000 ;
RemoteIterator < CachePoolInfo > iter = server . listCachePools ( arg ) ;
CachePoolInfo pool = iter . next ( arg ) ;
builder . addElements ( arg ) ;
return response . getElementsCount ( arg ) ;
return new InvalidPoolNameError ( arg ) ;
boolean success = false ;
final FSPermissionChecker pc = isPermissionEnabled ? getPermissionChecker ( arg ) : null ;
namesystem . addCachePool ( arg ) ;
final int numFiles = 2 ;
String historyUrl = MRWebAppUtil . getApplicationWebURLOnJHSWithScheme ( arg ) ;
Text line = new Text ( arg ) ;
URI tmp ;
FileStatus linkStatus = null ;
containerListener = createNMCallbackHandler ( arg ) ;
final FSPermissionChecker pc = getPermissionChecker ( arg ) ;
app . successfullyUnregistered . set ( arg ) ;
url = result . toASCIIString ( arg ) ;
return fs . getCanonicalUri ( arg ) ;
IOException e = lastException . get ( arg ) ;
setScheduledSize ( arg ) ;
commandName = commandName . replaceAll ( arg ) ;
StorageBlockReport [ ] reports = getBlockReports ( arg ) ;
s . getDatanodeDescriptor ( arg ) . incrementBlocksScheduled ( arg ) ;
DatanodeStorageInfo [ ] ret = ( DatanodeStorageInfo [ ] ) invocation . callRealMethod ( arg ) ;
return PBHelper . convert ( arg ) ;
return kind . equals ( arg ) || kind . equals ( arg ) || kind . equals ( arg ) ;
Job job = Job . getInstance ( arg ) ;
Job job = Job . getInstance ( arg ) ;
nameNodeStatusBeanName = MBeans . register ( arg ) ;
addPendingReplicationBlockInfo ( arg ) ;
addPendingReplicationBlockInfo ( arg ) ;
throw new IllegalStateException ( arg ) ;
final String storageUuid ;
storageUuid = blockReceiver . getStorageUuid ( arg ) ;
storageUuid = datanode . data . recoverClose ( arg ) ;
headIndex = dd . getBlockListHeadForTesting ( arg ) . findStorageInfo ( arg ) ;
BlockInfo temp = dd . getBlockListHeadForTesting ( arg ) ;
temp = dd . getBlockListHeadForTesting ( arg ) ;
headIndex = dd . getBlockListHeadForTesting ( arg ) . findStorageInfo ( arg ) ;
dn . getStorageInfos ( arg ) [ 0 ] . setUtilizationForTesting ( arg ) ;
datanode . getStorageInfos ( arg ) [ 0 ] . setUtilizationForTesting ( arg ) ;
dn . getStorageInfos ( arg ) [ 0 ] . setUtilizationForTesting ( arg ) ;
dn . getStorageInfos ( arg ) [ 0 ] . setUtilizationForTesting ( arg ) ;
return binfo . getStorageUuid ( arg ) ;
StorageLocation location = StorageLocation . parse ( arg ) ;
List < StorageLocation > locations ;
locations = DataNode . getStorageLocations ( arg ) ;
locations = DataNode . getStorageLocations ( arg ) ;
BatchedEntries < CacheDirectiveEntry > entries = server . listCacheDirectives ( arg ) ;
BatchedEntries < CachePoolEntry > entries = server . listCachePools ( arg ) ;
return namesystem . listCacheDirectives ( arg ) ;
return namesystem . listCachePools ( arg ) ;
RemoteIterator < CacheDirectiveEntry > entries = new CacheDirectiveIterator ( arg ) ;
throw e ;
throw e ;
AppAttemptAddedSchedulerEvent appAddedEvent1 = new AppAttemptAddedSchedulerEvent ( arg ) ;
AppAttemptRemovedSchedulerEvent appRemovedEvent1 = new AppAttemptRemovedSchedulerEvent ( arg ) ;
SchedulerEvent event = new AppAttemptAddedSchedulerEvent ( arg ) ;
AppAttemptAddedSchedulerEvent appAddedEvent = new AppAttemptAddedSchedulerEvent ( arg ) ;
AppAttemptRemovedSchedulerEvent appRemovedEvent1 = new AppAttemptRemovedSchedulerEvent ( arg ) ;
AppAttemptRemovedSchedulerEvent appRemovedEvent2 = new AppAttemptRemovedSchedulerEvent ( arg ) ;
AppAttemptRemovedSchedulerEvent appRemovedEvent3 = new AppAttemptRemovedSchedulerEvent ( arg ) ;
scheduler . addApplicationAttempt ( arg ) ;
scheduler . addApplicationAttempt ( arg ) ;
AppAttemptAddedSchedulerEvent appAddedEvent2 = new AppAttemptAddedSchedulerEvent ( arg ) ;
AppAttemptRemovedSchedulerEvent appRemovedEvent1 = new AppAttemptRemovedSchedulerEvent ( arg ) ;
AppAttemptAddedSchedulerEvent appAddedEvent = new AppAttemptAddedSchedulerEvent ( arg ) ;
SchedulerEvent event = new AppAttemptAddedSchedulerEvent ( arg ) ;
AppAttemptAddedSchedulerEvent appEvent1 = new AppAttemptAddedSchedulerEvent ( arg ) ;
AppAttemptAddedSchedulerEvent appEvent1 = new AppAttemptAddedSchedulerEvent ( arg ) ;
AppRemovedSchedulerEvent appRemovedEvent = ( AppRemovedSchedulerEvent ) event ;
doneApplication ( arg ) ;
AppAddedSchedulerEvent appAddedEvent1 = new AppAddedSchedulerEvent ( arg ) ;
SchedulerEvent event1 = new AppAddedSchedulerEvent ( arg ) ;
SchedulerEvent event1 = new AppAddedSchedulerEvent ( arg ) ;
SchedulerEvent event2 = new AppAddedSchedulerEvent ( arg ) ;
AppRemovedSchedulerEvent appRemovedEvent1 = new AppRemovedSchedulerEvent ( arg ) ;
SchedulerEvent event = new AppAddedSchedulerEvent ( arg ) ;
AppRemovedSchedulerEvent event = new AppRemovedSchedulerEvent ( arg ) ;
event = new AppRemovedSchedulerEvent ( arg ) ;
scheduler . addApplication ( arg ) ;
AppAddedSchedulerEvent appAddedEvent1 = new AppAddedSchedulerEvent ( arg ) ;
AppRemovedSchedulerEvent appRemovedEvent1 = new AppRemovedSchedulerEvent ( arg ) ;
fs . addApplication ( arg ) ;
AppAddedSchedulerEvent appAddedEvent = new AppAddedSchedulerEvent ( arg ) ;
AppRemovedSchedulerEvent appRemovedEvent1 = new AppRemovedSchedulerEvent ( arg ) ;
AppRemovedSchedulerEvent appRemovedEvent2 = new AppRemovedSchedulerEvent ( arg ) ;
AppRemovedSchedulerEvent appRemovedEvent3 = new AppRemovedSchedulerEvent ( arg ) ;
scheduler . addApplication ( arg ) ;
scheduler . addApplication ( arg ) ;
AppAddedSchedulerEvent appAddedEvent2 = new AppAddedSchedulerEvent ( arg ) ;
scheduler . addApplication ( arg ) ;
scheduler . addApplication ( arg ) ;
scheduler . addApplication ( arg ) ;
AppRemovedSchedulerEvent appRemovedEvent1 = new AppRemovedSchedulerEvent ( arg ) ;
AppAddedSchedulerEvent appAddedEvent = new AppAddedSchedulerEvent ( arg ) ;
SchedulerEvent event = new AppAddedSchedulerEvent ( arg ) ;
event = new AppAddedSchedulerEvent ( arg ) ;
SchedulerEvent event = new AppAddedSchedulerEvent ( arg ) ;
AppAddedSchedulerEvent appEvent1 = new AppAddedSchedulerEvent ( arg ) ;
AppAddedSchedulerEvent appEvent1 = new AppAddedSchedulerEvent ( arg ) ;
AppAttemptRemovedSchedulerEvent appAttemptRemovedEvent = ( AppAttemptRemovedSchedulerEvent ) event ;
doneApplicationAttempt ( arg ) ;
AppAttemptAddedSchedulerEvent appAddedEvent1 = new AppAttemptAddedSchedulerEvent ( arg ) ;
SchedulerEvent event1 = new AppAttemptAddedSchedulerEvent ( arg ) ;
SchedulerEvent event1 = new AppAttemptAddedSchedulerEvent ( arg ) ;
SchedulerEvent event2 = new AppAttemptAddedSchedulerEvent ( arg ) ;
AppAttemptRemovedSchedulerEvent appRemovedEvent1 = new AppAttemptRemovedSchedulerEvent ( arg ) ;
SchedulerEvent event = new AppAttemptAddedSchedulerEvent ( arg ) ;
AppAttemptRemovedSchedulerEvent event = new AppAttemptRemovedSchedulerEvent ( arg ) ;
event = new AppAttemptRemovedSchedulerEvent ( arg ) ;
scheduler . addApplicationAttempt ( arg ) ;
AppAttemptAddedSchedulerEvent appAddedEvent1 = new AppAttemptAddedSchedulerEvent ( arg ) ;
AppAttemptRemovedSchedulerEvent appRemovedEvent1 = new AppAttemptRemovedSchedulerEvent ( arg ) ;
fs . addApplicationAttempt ( arg ) ;
AppAttemptAddedSchedulerEvent appAddedEvent = new AppAttemptAddedSchedulerEvent ( arg ) ;
AppAttemptRemovedSchedulerEvent appRemovedEvent1 = new AppAttemptRemovedSchedulerEvent ( arg ) ;
AppAttemptRemovedSchedulerEvent appRemovedEvent2 = new AppAttemptRemovedSchedulerEvent ( arg ) ;
AppAttemptRemovedSchedulerEvent appRemovedEvent3 = new AppAttemptRemovedSchedulerEvent ( arg ) ;
scheduler . addApplicationAttempt ( arg ) ;
scheduler . addApplicationAttempt ( arg ) ;
AppAttemptAddedSchedulerEvent appAddedEvent2 = new AppAttemptAddedSchedulerEvent ( arg ) ;
scheduler . addApplicationAttempt ( arg ) ;
scheduler . addApplicationAttempt ( arg ) ;
scheduler . addApplicationAttempt ( arg ) ;
AppAttemptRemovedSchedulerEvent appRemovedEvent1 = new AppAttemptRemovedSchedulerEvent ( arg ) ;
AppAttemptAddedSchedulerEvent appAddedEvent = new AppAttemptAddedSchedulerEvent ( arg ) ;
SchedulerEvent event = new AppAttemptAddedSchedulerEvent ( arg ) ;
event = new AppAttemptAddedSchedulerEvent ( arg ) ;
SchedulerEvent event = new AppAttemptAddedSchedulerEvent ( arg ) ;
AppAttemptAddedSchedulerEvent appEvent1 = new AppAttemptAddedSchedulerEvent ( arg ) ;
AppAttemptAddedSchedulerEvent appEvent1 = new AppAttemptAddedSchedulerEvent ( arg ) ;
logWriter . close ( arg ) ;
writer . close ( arg ) ;
hostName = endpoints . size ( arg ) == 0 ? connector . getHost ( arg ) : endpoints . get ( arg ) . getHost ( arg ) ;
