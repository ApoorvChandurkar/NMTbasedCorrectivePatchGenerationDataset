Peer peer = null ;
peer = peerCache . get ( arg ) ;
tcpPeerServer = new TcpPeerServer ( arg ) ;
peerServer . close ( arg ) ;
String user = UserGroupInformation . getCurrentUser ( arg ) . getShortUserName ( arg ) ;
String user = UserGroupInformation . getCurrentUser ( arg ) . getShortUserName ( arg ) ;
closeBlockReader ( arg ) ;
closeBlockReader ( arg ) ;
SocketAndStreams sockAndStreams = null ;
sockAndStreams = socketCache . get ( arg ) ;
ss = secureResources . getStreamingSocket ( arg ) ;
IOUtils . closeSocket ( arg ) ;
IOUtils . closeSocket ( arg ) ;
throw new SocketException ( arg ) ;
builder . setDelegationToken ( arg ) ;
if ( token == null ) builder . clearDelegationToken ( arg ) ;
builder . setDelegationToken ( arg ) ;
if ( token == null ) builder . clearDelegationToken ( arg ) ;
return p . getNextExpiryTs ( arg ) ;
builder . setNextExpiryTs ( arg ) ;
builder . setDelegationToken ( arg ) ;
if ( token == null ) builder . clearDelegationToken ( arg ) ;
builder . setDelegationToken ( arg ) ;
if ( token == null ) builder . clearDelegationToken ( arg ) ;
return p . getNextExpiryTs ( arg ) ;
builder . setNextExpiryTs ( arg ) ;
return COMMON_VERSION_INFO . _getBranch ( arg ) ;
return COMMON_VERSION_INFO . _getBuildVersion ( arg ) ;
return COMMON_VERSION_INFO . _getDate ( arg ) ;
return COMMON_VERSION_INFO . _getRevision ( arg ) ;
return COMMON_VERSION_INFO . _getSrcChecksum ( arg ) ;
return COMMON_VERSION_INFO . _getUrl ( arg ) ;
return COMMON_VERSION_INFO . _getUser ( arg ) ;
return COMMON_VERSION_INFO . _getVersion ( arg ) ;
return YARN_VERSION_INFO . _getBranch ( arg ) ;
return YARN_VERSION_INFO . _getBuildVersion ( arg ) ;
return YARN_VERSION_INFO . _getDate ( arg ) ;
return YARN_VERSION_INFO . _getRevision ( arg ) ;
return YARN_VERSION_INFO . _getSrcChecksum ( arg ) ;
return YARN_VERSION_INFO . _getUrl ( arg ) ;
return YARN_VERSION_INFO . _getUser ( arg ) ;
return YARN_VERSION_INFO . _getVersion ( arg ) ;
return version != null ? version . branch ( arg ) : Unknown ;
return version != null ? version . date ( arg ) : Unknown ;
return version != null ? version . revision ( arg ) : Unknown ;
return version != null ? version . srcChecksum ( arg ) : Unknown ;
return version != null ? version . url ( arg ) : Unknown ;
return version != null ? version . user ( arg ) : Unknown ;
return version != null ? version . version ( arg ) : Unknown ;
return version != null ? version . branch ( arg ) : Unknown ;
return version != null ? version . date ( arg ) : Unknown ;
return version != null ? version . revision ( arg ) : Unknown ;
return version != null ? version . srcChecksum ( arg ) : Unknown ;
return version != null ? version . url ( arg ) : Unknown ;
return version != null ? version . user ( arg ) : Unknown ;
return version != null ? version . version ( arg ) : Unknown ;
Iterator < Entry < DatanodeID , Value >> iter = multimap . entries ( arg ) . iterator ( arg ) ;
Entry < DatanodeID , Value > entry = iter . next ( arg ) ;
PeerCache cache = PeerCache . getInstance ( arg ) ;
cache . clear ( arg ) ;
PeerCache cache = PeerCache . getInstance ( arg ) ;
HashSet < FakePeer > peers = new HashSet < FakePeer > ( arg ) ;
cache . clear ( arg ) ;
PeerCache cache = PeerCache . getInstance ( arg ) ;
cache . clear ( arg ) ;
PeerCache cache = PeerCache . getInstance ( arg ) ;
cache . clear ( arg ) ;
file = ( INodeFile ) file . recordModification ( arg ) . left ;
if ( conf . domainSocketPath == null ) return null ;
final Diff combined = new Diff ( arg ) ;
combined . combinePostDiff ( arg ) ;
Diff diff = dirNode . getLastSnapshotDiff ( arg ) . getDiff ( arg ) ;
Diff diff = dirNode . getLastSnapshotDiff ( arg ) . getDiff ( arg ) ;
totalBytes += segmentsToMerge . get ( arg ) . getRawDataLength ( arg ) ;
totalBytes-= inputBytesOfThisMerge - tempSegment . getRawDataLength ( arg ) ;
List < CompressAwarePath > disk = new ArrayList < CompressAwarePath > ( arg ) ;
INodeFileSnapshot deletedWithLink = ( INodeFileSnapshot ) deleted ;
deletedWithLink . setBlocks ( arg ) ;
totalBytes += segmentsToMerge . get ( arg ) . getLength ( arg ) ;
totalBytes-= inputBytesOfThisMerge - tempSegment . getLength ( arg ) ;
List < Path > disk = new ArrayList < Path > ( arg ) ;
sdir . deleteSnapshotDiff ( arg ) ;
int laterDiffIndex = diffs . size ( arg ) ;
SnapshotDiff sdiff = diffs . get ( arg ) ;
checkAndAddLatestSnapshotDiff ( arg ) . checkAndInitINode ( arg ) ;
List < SnapshotDiff > diffs = sNode . getSnapshotDiffs ( arg ) ;
SnapshotDiff sdiff = diffs . get ( arg ) ;
ChildrenDiff diff = dirNode . getLastSnapshotDiff ( arg ) . getDiff ( arg ) ;
diff = dirNode . getLastSnapshotDiff ( arg ) . getDiff ( arg ) ;
diff = dirNode . getLastSnapshotDiff ( arg ) . getDiff ( arg ) ;
ChildrenDiff diff = dirNode . getLastSnapshotDiff ( arg ) . getDiff ( arg ) ;
diff = dirNode . getLastSnapshotDiff ( arg ) . getDiff ( arg ) ;
diff = dirNode . getLastSnapshotDiff ( arg ) . getDiff ( arg ) ;
( ( INodeFile ) inode ) . collectSubtreeBlocksAndClear ( arg ) ;
result [ i ] = ( SnapshottableDirectoryStatus ) PBHelper . convert ( arg ) ;
SnapshotDiffReport diffs = null ;
return diffs ;
SnapshotDiffReport diffs = new SnapshotDiffReport ( arg ) ;
namenode . getNamesystem ( arg ) . getBlockManager ( arg ) . getDatanodeManager ( arg ) . setAvoidStaleDataNodesForWrite ( arg ) ;
namenode . getNamesystem ( arg ) . getBlockManager ( arg ) . getDatanodeManager ( arg ) . setAvoidStaleDataNodesForWrite ( arg ) ;
final INodeDirectory parent = oldnode . getParent ( arg ) ;
return snapshottable ? new INodeDirectorySnapshottable ( arg ) : ( withSnapshot ? INodeDirectoryWithSnapshot . newInstance ( arg ) : dir ) ;
return ( arg ) super . recordModification ( arg ) ;
return getCurrentINode ( arg ) ;
return diffs=+ diffs ;
final int n = super . destroySubtreeAndCollectBlocks ( arg ) ;
DirectoryDiff sdiff = parent . new DirectoryDiff ( arg ) ;
parentWithSnapshot . getDiffs ( arg ) . insert ( arg ) ;
INode nodeInCreated = diff . searchCreated ( arg ) ;
INode nodeInDeleted = diff . searchDeleted ( arg ) ;
nodeInCreated = diff . searchCreated ( arg ) ;
nodeInCreated = diff . searchCreated ( arg ) ;
fsn . getFSDirectory ( arg ) . getINode ( arg ) . dumpTreeRecursively ( arg ) ;
fsn . getFSDirectory ( arg ) . getINode ( arg ) . dumpTreeRecursively ( arg ) ;
fsn . getFSDirectory ( arg ) . getINode ( arg ) . dumpTreeRecursively ( arg ) ;
return com.ibm.security.auth.module.AIXLoginModule ;
snapshottableParent = ( INodeDirectorySnapshottable ) parent ;
INode root = loadINode ( arg ) ;
return latest == null ? this : replaceSelf4INodeDirectoryWithSnapshot ( arg ) . recordModification ( arg ) ;
return latest == null ? this : parent . replaceChild4INodeFileWithSnapshot ( arg ) . recordModification ( arg ) ;
return latest == null ? this : parent . replaceChild4INodeFileUcWithSnapshot ( arg ) . recordModification ( arg ) ;
return parent . saveChild2Snapshot ( arg ) ;
final DirectoryDiff d = getDiffs ( arg ) . addSnapshotDiff ( arg ) ;
return saveSelf2Snapshot ( arg ) ;
clearReferences ( arg ) ;
clearReferences ( arg ) ;
fdRef ( arg ) ;
fdUnref ( arg ) ;
fdRef ( arg ) ;
fdUnref ( arg ) ;
fdRef ( arg ) ;
fdUnref ( arg ) ;
fdRef ( arg ) ;
fdUnref ( arg ) ;
fdRef ( arg ) ;
fdUnref ( arg ) ;
fdRef ( arg ) ;
fdUnref ( arg ) ;
fdRef ( arg ) ;
fdUnref ( arg ) ;
bits = status . get ( arg ) ;
fdRef ( arg ) ;
fdUnref ( arg ) ;
fdRef ( arg ) ;
fdUnref ( arg ) ;
FileDescriptor fds [ ] = new FileDescriptor [ fis . length ] ;
fdRef ( arg ) ;
fdUnref ( arg ) ;
fdRef ( arg ) ;
fdUnref ( arg ) ;
fdRef ( arg ) ;
fdUnref ( arg ) ;
return getFileReplication ( arg ) ;
final long fileId = ( Long ) m . get ( arg ) ;
snapshotName = args . removeFirst ( arg ) ;
replaceChild ( arg ) ;
replaceChild ( arg ) ;
ssINode1 = INodeFile . valueOf ( arg ) ;
updateCountForINodeWithQuota ( arg ) ;
nodeToUpdate . accessTime = atime ;
nodeToUpdate . modificationTime = modtime ;
setChildren ( arg ) ;
assertChildrenNonNull ( arg ) ;
assertChildrenNonNull ( arg ) ;
copy . setChildren ( arg ) ;
diffs . clear ( arg ) ;
final INodeDirectory parent = ( INodeDirectory ) pathComponents [ pos - 1 ] ;
Preconditions . checkArgument ( arg ) ;
final INodeDirectory copy = currentDir instanceof INodeDirectoryWithQuota ? new INodeDirectoryWithQuota ( arg ) : new INodeDirectory ( arg ) ;
final INodeFile snapshotINode = in . readBoolean ( arg ) ? ( INodeFile ) loader . loadINodeWithLocalName ( arg ) : null ;
return in . readBoolean ( arg ) ? ( INodeDirectory ) loader . loadINodeWithLocalName ( arg ) : null ;
boolean hasToken = false ;
String tokenString = webhdfs . getRenewToken ( arg ) . encodeToUrlString ( arg ) ;
String tokenString = webhdfs . getRenewToken ( arg ) . encodeToUrlString ( arg ) ;
return isInLatestSnapshot ( arg ) ? parent . replaceChild4INodeFileWithSnapshot ( arg ) . recordModification ( arg ) : this ;
return isInLatestSnapshot ( arg ) ? parent . replaceChild4INodeFileUcWithSnapshot ( arg ) . recordModification ( arg ) : this ;
return isInLatestSnapshot ( arg ) ? parent . saveChild2Snapshot ( arg ) : this ;
final int filesRemoved ;
node . addSpaceConsumed ( arg ) ;
total += child . destroyAndCollectBlocks ( arg ) ;
total += ( ( FileWithSnapshot ) this ) . getDiffs ( arg ) . clear ( arg ) ;
currentINode . addNamespaceConsumed ( arg ) ;
int removedNum = 0 ;
removedNum ++ ;
removedNum += previous . combinePosteriorAndCollectBlocks ( arg ) ;
return removedNum ;
removedNum += c . destroyAndCollectBlocks ( arg ) ;
int removedNum = 0 ;
return removedNum ;
n += lastDiff . diff . destroyCreatedList ( arg ) ;
total += diff . destroyAndCollectBlocks ( arg ) ;
deletedNum += deletedProcesser . process ( arg ) ;
deletedNum += deletedProcesser . process ( arg ) ;
final INode newNode = loadINode ( arg ) ;
final INode root = loadINode ( arg ) ;
clearReferences ( arg ) ;
clearReferences ( arg ) ;
removed . snapshotINode . clearReferences ( arg ) ;
List < INode > createdList = getCreatedList ( arg ) ;
List < INode > deletedList = getDeletedList ( arg ) ;
final List < INode > created = getCreatedList ( arg ) ;
final List < INode > created = getCreatedList ( arg ) ;
final List < INode > deleted = getDeletedList ( arg ) ;
final int c = diff . searchCreatedIndex ( arg ) ;
INode d = postDiff . getChildrenDiff ( arg ) . searchDeleted ( arg ) ;
insertCreated ( arg ) ;
insertDeleted ( arg ) ;
FSPermissionChecker pc = new FSPermissionChecker ( arg ) ;
return Quota . Counts . newInstance ( arg ) ;
return Quota . Counts . newInstance ( arg ) ;
lastDiff . diff . destroyCreatedList ( arg ) ;
RegistrationResponse regResponse ;
regResponse = this . resourceTracker . registerNodeManager ( arg ) . getRegistrationResponse ( arg ) ;
final long fileId = ( Long ) m . get ( arg ) ;
SnapshotTestHelper . dumpTreeRecursively ( arg ) ;
nodeHeartBeatResponse . setResponseId ( arg ) ;
boolean waitForEver = ( rmConnectWaitMS == null ) ;
ConcurrentMap < ContainerId , Container > containers = getNMContext ( arg ) . getContainers ( arg ) ;
containerLaunchContext . setContainerId ( arg ) ;
appAttempt . getSubmissionContext ( arg ) . getAMContainerSpec ( arg ) . setResource ( arg ) ;
namenode . createSnapshot ( arg ) ;
dfs . createSnapshot ( arg ) ;
snapshotManager . createSnapshot ( arg ) ;
namesystem . createSnapshot ( arg ) ;
return getParent ( arg ) . getFullPathName ( arg ) + Path . SEPARATOR + HdfsConstants . DOT_SNAPSHOT_DIR + Path . SEPARATOR + this . getLocalName ( arg ) ;
snapshotManager . removeSnapshottableDirs ( arg ) ;
snapshottables . add ( arg ) ;
SchedulingMode defaultSchedulingMode = SchedulingMode . getDefault ( arg ) ;
schedulingMode = new FairSchedulingMode ( arg ) ;
queue1 . setSchedulingMode ( arg ) ;
ByteBuffer portInfo = response . getAllServiceResponse ( arg ) . get ( arg ) ;
startResp . setAllServiceResponse ( arg ) ;
startResp . setAllServiceResponse ( arg ) ;
startResp . setAllServiceResponse ( arg ) ;
startResp . setAllServiceResponse ( arg ) ;
response . setAllServiceResponse ( arg ) ;
File scriptFile = Shell . appendScriptExtension ( arg ) ;
File scriptFile = Shell . appendScriptExtension ( arg ) ;
allocateRequest . setAskList ( arg ) ;
cacheDirectory = getUserAppCachePath ( arg ) ;
counts . add ( arg ) ;
counts . add ( arg ) ;
purgeLogsFrom = editLogs . get ( arg ) . getLastTxId ( arg ) + 1 ;
int count = getXceiverCountWithoutServer ( arg ) ;
this . mapCounters [ i ] = new Counters ( arg ) ;
this . reduceCounters = new Counters ( arg ) ;
finalOut . write ( arg ) ;
WebServicesTestUtils . checkStringEqual ( arg ) ;
WebServicesTestUtils . checkStringEqual ( arg ) ;
Token < ApplicationTokenIdentifier > appMasterToken = new Token < ApplicationTokenIdentifier > ( arg ) ;
amTokens = request . getContainerLaunchContext ( arg ) . getContainerTokens ( arg ) ;
WebServicesTestUtils . checkStringEqual ( arg ) ;
WebServicesTestUtils . checkStringEqual ( arg ) ;
inodeMap . put ( arg ) ;
inodeMap . put ( arg ) ;
purgeLogsFrom = editLogs . get ( arg ) . getFirstTxId ( arg ) ;
int count = dn . getXceiverCount ( arg ) - 1 ;
return EMPTY_COUNTERS ;
Counters current = EMPTY_COUNTERS ;
this . mapCounters [ i ] = EMPTY_COUNTERS ;
this . reduceCounters = EMPTY_COUNTERS ;
amContainerEnv = request . getContainerLaunchContext ( arg ) . getEnvironment ( arg ) ;
cleanupContainersOnResync ( arg ) ;
startContainers ( arg ) ;
base . setWritable ( arg ) ;
base . setWritable ( arg ) ;
if ( FileUtil . canRead ( arg ) && fsImage . exists ( arg ) ) return fsImage ;
FileUtil . setWritable ( arg ) ;
FileUtil . setWritable ( arg ) ;
FileUtil . setExecutable ( arg ) ;
FileUtil . setExecutable ( arg ) ;
FileUtil . setExecutable ( arg ) ;
FileUtil . setExecutable ( arg ) ;
FileUtil . setExecutable ( arg ) ;
FileUtil . setExecutable ( arg ) ;
FileUtil . setWritable ( arg ) ;
FileUtil . setWritable ( arg ) ;
FileUtil . setWritable ( arg ) ;
FileUtil . setWritable ( arg ) ;
FileUtil . setExecutable ( arg ) ;
FileUtil . setExecutable ( arg ) ;
FileUtil . setExecutable ( arg ) ;
if ( sd . getRoot ( arg ) . canRead ( arg ) && fsImage . exists ( arg ) ) return fsImage ;
data_fail . setWritable ( arg ) ;
failedDir . setWritable ( arg ) ;
currentDir . setExecutable ( arg ) ;
currentDir . setExecutable ( arg ) ;
currentDir . setExecutable ( arg ) ;
currentDir . setExecutable ( arg ) ;
currentDir . setExecutable ( arg ) ;
currentDir . setExecutable ( arg ) ;
dir . setWritable ( arg ) ;
dir . setWritable ( arg ) ;
logDir . setWritable ( arg ) ;
logDir . setWritable ( arg ) ;
sd0 . setExecutable ( arg ) ;
sd0 . setExecutable ( arg ) ;
sd0 . setExecutable ( arg ) ;
String user = submissionContext . getAMContainerSpec ( arg ) . getUser ( arg ) ;
context . setMaxAppAttempts ( arg ) ;
addToInodeMapUnprotected ( arg ) ;
addToInodeMapUnprotected ( arg ) ;
namesystem . dir . addToInodeMapUnprotected ( arg ) ;
return newPath . toString ( arg ) ;
throw YarnRemoteExceptionPBImpl . unwrapAndThrowException ( arg ) ;
throw YarnRemoteExceptionPBImpl . unwrapAndThrowException ( arg ) ;
throw YarnRemoteExceptionPBImpl . unwrapAndThrowException ( arg ) ;
throw YarnRemoteExceptionPBImpl . unwrapAndThrowException ( arg ) ;
throw new YarnRemoteException ( arg ) ;
throw RPCUtil . unwrapAndThrowException ( arg ) ;
throw RPCUtil . unwrapAndThrowException ( arg ) ;
throw RPCUtil . unwrapAndThrowException ( arg ) ;
throw RPCUtil . unwrapAndThrowException ( arg ) ;
throw RPCUtil . unwrapAndThrowException ( arg ) ;
throw RPCUtil . unwrapAndThrowException ( arg ) ;
throw RPCUtil . unwrapAndThrowException ( arg ) ;
throw RPCUtil . unwrapAndThrowException ( arg ) ;
throw RPCUtil . unwrapAndThrowException ( arg ) ;
throw RPCUtil . unwrapAndThrowException ( arg ) ;
throw RPCUtil . unwrapAndThrowException ( arg ) ;
throw RPCUtil . unwrapAndThrowException ( arg ) ;
throw RPCUtil . unwrapAndThrowException ( arg ) ;
throw RPCUtil . unwrapAndThrowException ( arg ) ;
throw new YarnRemoteException ( arg ) ;
clc . setContainerTokens ( arg ) ;
amTokens = request . getContainerLaunchContext ( arg ) . getContainerTokens ( arg ) ;
final long delta = 1500 ;
return token . decodeIdentifier ( arg ) ;
ContainerLaunchContext container = BuilderUtils . newContainerLaunchContext ( arg ) ;
ContainerLaunchContext container = BuilderUtils . newContainerLaunchContext ( arg ) ;
container = BuilderUtils . newContainer ( arg ) ;
return BuilderUtils . newResource ( arg ) ;
return BuilderUtils . newResource ( arg ) ;
Resource containerNeed = BuilderUtils . newResource ( arg ) ;
return BuilderUtils . newApplicationReport ( arg ) ;
ContainerLaunchContext amContainer = BuilderUtils . newContainerLaunchContext ( arg ) ;
throw new IllegalNameException ( arg ) ;
Path file = FileContextTestHelper . getTestRootPath ( arg ) ;
startReq . setContainer ( arg ) ;
startRequest . setContainer ( arg ) ;
scRequest . setContainer ( arg ) ;
long pmemBytes = container . container . getResource ( arg ) . getMemory ( arg ) * 1024 * 1024L ;
request . setContainer ( arg ) ;
startRequest . setContainer ( arg ) ;
startRequest . setContainer ( arg ) ;
startRequest . setContainer ( arg ) ;
startRequest . setContainer ( arg ) ;
startRequest . setContainer ( arg ) ;
startRequest . setContainer ( arg ) ;
request . setContainer ( arg ) ;
return evt . getType ( arg ) == ContainersLauncherEventType . LAUNCH_CONTAINER && wcf . cId == evt . getContainer ( arg ) . getContainer ( arg ) . getId ( arg ) ;
startRequest . setContainer ( arg ) ;
return evt . getType ( arg ) == ContainerEventType . RESOURCE_LOCALIZED && c . getContainer ( arg ) . getId ( arg ) == evt . getContainerID ( arg ) ;
startRequest . setContainer ( arg ) ;
request . setContainer ( arg ) ;
startRequest . setContainer ( arg ) ;
testUnauthorizedUser ( arg ) ;
startRequest . setContainer ( arg ) ;
attemptId . setApplicationId ( arg ) ;
attemptId . setApplicationId ( arg ) ;
resourceManager = new AMRMClientAsync ( arg ) ;
AMRMClientImpl amClient = null ;
amClient = new AMRMClientImpl ( arg ) ;
rmClient = new AMRMClientImpl ( arg ) ;
ContainerToken containerToken = BuilderUtils . newContainerToken ( arg ) ;
return new DelegationTokenPBImpl ( arg ) ;
return new DelegationTokenPBImpl ( arg ) ;
return new DelegationTokenPBImpl ( arg ) ;
DelegationToken dToken = BuilderUtils . newDelegationToken ( arg ) ;
DelegationToken dToken = BuilderUtils . newDelegationToken ( arg ) ;
DelegationToken protoToken = request . getDelegationToken ( arg ) ;
DelegationToken protoToken = request . getDelegationToken ( arg ) ;
ClientToken clientToken = application . getClientToken ( arg ) ;
DelegationToken mrDelegationToken ;
DelegationToken historyToken = BuilderUtils . newDelegationToken ( arg ) ;
DelegationToken token = recordFactory . newRecordInstance ( arg ) ;
DelegationToken token = getDelegationToken ( arg ) ;
return new DelegationTokenPBImpl ( arg ) ;
return new DelegationTokenPBImpl ( arg ) ;
return new DelegationTokenPBImpl ( arg ) ;
return new ContainerTokenPBImpl ( arg ) ;
return new ClientTokenPBImpl ( arg ) ;
Token < ContainerTokenIdentifier > token = ProtoUtils . convertFromProtoFormat ( arg ) ;
ContainerToken containerToken = newToken ( arg ) ;
ContainerToken containerToken = BuilderUtils . newContainerToken ( arg ) ;
ContainerToken containerToken = request . getContainerToken ( arg ) ;
ContainerToken containerToken = BuilderUtils . newContainerToken ( arg ) ;
ContainerToken token = request . getContainerToken ( arg ) ;
ContainerToken containerToken = BuilderUtils . newContainerToken ( arg ) ;
ContainerToken containerToken = BuilderUtils . newContainerToken ( arg ) ;
ContainerToken containerToken = BuilderUtils . newContainerToken ( arg ) ;
ContainerToken containerToken = BuilderUtils . newContainerToken ( arg ) ;
ContainerToken containerToken = BuilderUtils . newContainerToken ( arg ) ;
ContainerToken containerToken1 = BuilderUtils . newContainerToken ( arg ) ;
ContainerToken containerToken2 = BuilderUtils . newContainerToken ( arg ) ;
ContainerToken containerToken = BuilderUtils . newContainerToken ( arg ) ;
ContainerToken containerToken = BuilderUtils . newContainerToken ( arg ) ;
ContainerToken containerToken = BuilderUtils . newContainerToken ( arg ) ;
ContainerToken containerToken = BuilderUtils . newContainerToken ( arg ) ;
ContainerToken containerToken = BuilderUtils . newContainerToken ( arg ) ;
ContainerToken containerToken = BuilderUtils . newContainerToken ( arg ) ;
ContainerToken containerToken = BuilderUtils . newContainerToken ( arg ) ;
DelegationToken protoToken = request . getDelegationToken ( arg ) ;
DelegationToken protoToken = request . getDelegationToken ( arg ) ;
ClientToken clientToken = null ;
ContainerToken containerToken = containerTokenSecretManager . createContainerToken ( arg ) ;
ContainerToken containerToken = request . getContainerToken ( arg ) ;
ContainerToken containerToken = request . getContainerToken ( arg ) ;
DelegationToken dToken = BuilderUtils . newDelegationToken ( arg ) ;
DelegationToken token = getDelegationToken ( arg ) ;
DelegationToken delegationToken1 = response1 . getRMDelegationToken ( arg ) ;
DelegationToken delegationToken2 = response2 . getRMDelegationToken ( arg ) ;
ClientToken clientToken = appReport . getClientToken ( arg ) ;
DelegationToken delegationToken = response . getRMDelegationToken ( arg ) ;
Token containerToken = BuilderUtils . newContainerToken ( arg ) ;
ApplicationId appId = BuilderUtils . newApplicationId ( arg ) ;
ApplicationId applicationId = BuilderUtils . newApplicationId ( arg ) ;
ApplicationId appId = BuilderUtils . newApplicationId ( arg ) ;
ContainerTokenIdentifier containerTokenIdentifier = BuilderUtils . newContainerTokenIdentifier ( arg ) ;
return BuilderUtils . newContainerToken ( arg ) ;
org . apache . hadoop . yarn . api . records . Token dToken = BuilderUtils . newDelegationToken ( arg ) ;
org . apache . hadoop . yarn . api . records . Token dToken = BuilderUtils . newDelegationToken ( arg ) ;
org . apache . hadoop . yarn . api . records . Token mrDToken = BuilderUtils . newDelegationToken ( arg ) ;
org . apache . hadoop . yarn . api . records . Token historyToken = BuilderUtils . newDelegationToken ( arg ) ;
ApplicationId appId = BuilderUtils . newApplicationId ( arg ) ;
Resource testCapability1 = BuilderUtils . newResource ( arg ) ;
Resource testCapability2 = BuilderUtils . newResource ( arg ) ;
Resource testCapability3 = BuilderUtils . newResource ( arg ) ;
Resource testCapability4 = BuilderUtils . newResource ( arg ) ;
Resource testCapability5 = BuilderUtils . newResource ( arg ) ;
AllocateResponse response = BuilderUtils . newAllocateResponse ( arg ) ;
ApplicationId appId = BuilderUtils . newApplicationId ( arg ) ;
return BuilderUtils . newContainer ( arg ) ;
this . resource = BuilderUtils . newResource ( arg ) ;
this . applicationAttemptId = BuilderUtils . newApplicationAttemptId ( arg ) ;
return BuilderUtils . newDelegationToken ( arg ) ;
Token containerToken = BuilderUtils . newContainerToken ( arg ) ;
Token containerToken = BuilderUtils . newContainerToken ( arg ) ;
ApplicationId a5 = BuilderUtils . newApplicationId ( arg ) ;
ContainerId c6 = BuilderUtils . newContainerId ( arg ) ;
throw new YarnException ( arg ) ;
throw new YarnException ( arg ) ;
throw new YarnException ( arg ) ;
throw new YarnException ( arg ) ;
throw new YarnException ( arg ) ;
throw new YarnException ( arg ) ;
throw new YarnException ( arg ) ;
YarnRemoteException mockException = mock ( arg ) ;
return new YarnRemoteException ( arg ) ;
return new YarnRemoteException ( arg ) ;
throw new YarnRemoteException ( arg ) ;
throw new YarnRemoteException ( arg ) ;
throw new YarnRemoteException ( arg ) ;
throw new YarnRemoteException ( arg ) ;
final YarnException yarnException = new YarnException ( arg ) ;
Class < ? extends Throwable > exception = YarnRemoteException . class ;
Class < ? extends Throwable > exception = YarnRemoteException . class ;
throw new YarnException ( arg ) ;
throw new YarnException ( arg ) ;
throw new YarnException ( arg ) ;
throw new YarnException ( arg ) ;
throw new YarnException ( arg ) ;
throw new YarnException ( arg ) ;
throw new YarnException ( arg ) ;
throw new YarnException ( arg ) ;
throw new YarnException ( arg ) ;
YarnException e = new YarnException ( arg ) ;
throw new YarnException ( arg ) ;
throw new YarnException ( arg ) ;
throw new YarnException ( arg ) ;
throw new YarnException ( arg ) ;
response . setReboot ( arg ) ;
rebootResponse . setReboot ( arg ) ;
response . setReboot ( arg ) ;
return reboot ;
return reboot ;
return reboot ;
( ( INodeDirectoryWithQuota ) inodes [ i ] ) . verifyQuota ( arg ) ;
final Snapshot snapshot = snapshotsByNames . remove ( arg ) ;
rebootResponse . setResync ( arg ) ;
NodeManager nm = new TestNodeManager ( arg ) ;
service . unregister ( arg ) ;
service . register ( arg ) ;
service . register ( arg ) ;
svc . register ( arg ) ;
svc . register ( arg ) ;
svc . register ( arg ) ;
svc . unregister ( arg ) ;
svc . unregister ( arg ) ;
service . register ( arg ) ;
svc . register ( arg ) ;
service . register ( arg ) ;
Credentials appMasterCreds = appMaster . credentials ;
yarnRunner . addHistoyToken ( arg ) ;
yarnRunner . addHistoyToken ( arg ) ;
yarnRunner . addHistoyToken ( arg ) ;
yarnRunner . addHistoyToken ( arg ) ;
yarnRunner . addHistoyToken ( arg ) ;
MasterKey masterKey = regNMResponse . getMasterKey ( arg ) ;
resourceManager = new AMRMClientAsync < ContainerRequest > ( arg ) ;
request . setFinishApplicationStatus ( arg ) ;
request . setFinishApplicationStatus ( arg ) ;
ShuffleScheduler < Text , Text > ss = mock ( arg ) ;
ShuffleScheduler < Text , Text > ss = mock ( arg ) ;
ShuffleScheduler < Text , Text > ss = mock ( arg ) ;
Iterable < TokenProto > iterable = getTokenProtoIterable ( arg ) ;
RMTokenSelector tokenSelector = new RMTokenSelector ( arg ) ;
AMRMProtocol realRM = amClient . rmClient ;
AMRMProtocol mockRM = mock ( arg ) ;
final ClientRMProtocol rmClient = getRmClient ( arg ) ;
final ClientRMProtocol rmClient = getRmClient ( arg ) ;
final ContainerManager containerManager = nm . getContainerManager ( arg ) ;
ClientRMProtocol client = getClientRMService ( arg ) ;
ClientRMProtocol clientRMWithDT = null ;
ContainerManager client = ( ContainerManager ) yarnRPC . getProxy ( arg ) ;
yarnClient = new YarnClientImpl ( arg ) ;
AMRMClientImpl < ContainerRequest > amClient = null ;
amClient = new AMRMClientImpl < ContainerRequest > ( arg ) ;
amClient = new AMRMClientImpl < StoredContainerRequest > ( arg ) ;
AMRMClientImpl < StoredContainerRequest > amClient = null ;
amClient = new AMRMClientImpl < StoredContainerRequest > ( arg ) ;
yarnClient = new YarnClientImpl ( arg ) ;
rmClient = new AMRMClientImpl < ContainerRequest > ( arg ) ;
nmClient = new NMClientImpl ( arg ) ;
Token < ApplicationTokenIdentifier > appToken = appAttempt . getApplicationToken ( arg ) ;
ApplicationTokenSecretManager appTokenMgr = new ApplicationTokenSecretManager ( arg ) ;
report . setClientToken ( arg ) ;
setupTokensAndEnv ( arg ) ;
org . apache . hadoop . yarn . api . records . Token clientToken = null ;
appAttempt . clientToken = new Token < ClientTokenIdentifier > ( arg ) ;
ClientToAMTokenSecretManagerInRM clientTokenMgr = new ClientToAMTokenSecretManagerInRM ( arg ) ;
org . apache . hadoop . yarn . api . records . QueueInfo queueInfo = super . getQueueInfo ( arg ) ;
FileUtil . setExecutable ( arg ) ;
FileUtil . setExecutable ( arg ) ;
FileUtil . setExecutable ( arg ) ;
FileUtil . setExecutable ( arg ) ;
FileUtil . setExecutable ( arg ) ;
FileUtil . setExecutable ( arg ) ;
Token < ClientToAMTokenIdentifier > token = ProtoUtils . convertFromProtoFormat ( arg ) ;
return ProtoUtils . convertFromProtoFormat ( arg ) ;
org . apache . hadoop . security . token . Token < ContainerTokenIdentifier > token = ProtoUtils . convertFromProtoFormat ( arg ) ;
Token < ContainerTokenIdentifier > token = ProtoUtils . convertFromProtoFormat ( arg ) ;
Token < RMDelegationTokenIdentifier > token1 = ProtoUtils . convertFromProtoFormat ( arg ) ;
Token < RMDelegationTokenIdentifier > token2 = ProtoUtils . convertFromProtoFormat ( arg ) ;
Token < ClientToAMTokenIdentifier > token = ProtoUtils . convertFromProtoFormat ( arg ) ;
Token < RMDelegationTokenIdentifier > token1 = ProtoUtils . convertFromProtoFormat ( arg ) ;
ByteBuffer portInfo = response . getAllServiceResponse ( arg ) . get ( arg ) ;
startResp . setAllServiceResponse ( arg ) ;
startResp . setAllServiceResponse ( arg ) ;
startResp . setAllServiceResponse ( arg ) ;
startResp . setAllServiceResponse ( arg ) ;
shuffleHandler . initApp ( arg ) ;
response . setAllServiceResponse ( arg ) ;
return startResponse . getAllServiceResponse ( arg ) ;
asyncClient . getClusterAvailableResources ( arg ) ;
return us ;
return h ;
return TimeUnit . DAYS ;
return TimeUnit . NANOSECONDS ;
return TimeUnit . MILLISECONDS ;
return TimeUnit . SECONDS ;
return TimeUnit . HOURS ;
ContainerManagementProtocol proxy = null ;
ContainerManagementProtocol proxy = null ;
nmClientAsync = NMClientAsync . createNMClientAsync ( arg ) ;
NMCommunicator nmCommunicator = null ;
masterKeyId = in . readInt ( arg ) ;
int keyId = identifier . getMastKeyId ( arg ) ;
containerManager . startContainer ( arg ) ;
localFS . delete ( arg ) ;
localFS . rename ( arg ) ;
final AbstractINodeDiff < N , D > previous = diffs . get ( arg ) ;
final AbstractINodeDiff < N , D > last = getLast ( arg ) ;
FSImageSerialization . writeINodeDirectory ( arg ) ;
INodeDirectory dirCopy = null ;
INodeDirectory snapshotINode = loadSnapshotINodeInDirectoryDiff ( arg ) ;
final INodeFile snapshotINode = in . readBoolean ( arg ) ? loader . loadINodeWithLocalName ( arg ) . asFile ( arg ) : null ;
return in . readBoolean ( arg ) ? loader . loadINodeWithLocalName ( arg ) . asDirectory ( arg ) : null ;
getContext ( arg ) . getNMTokens ( arg ) . put ( arg ) ;
nmTokens . put ( arg ) ;
nmTokens . put ( arg ) ;
HdfsFileStatusProto . Builder builder = HdfsFileStatusProto . newBuilder ( arg ) . setLength ( arg ) . setFileType ( arg ) . setBlockReplication ( arg ) . setBlocksize ( arg ) . setModificationTime ( arg ) . setAccessTime ( arg ) . setPermission ( arg ) . setOwner ( arg ) . setGroup ( arg ) . setFileId ( arg ) . setPath ( arg ) ;
Resource desiredFairShare = Resources . max ( arg ) ;
computeFairShares ( arg ) ;
TarArchiveInputStream tis = new TarArchiveInputStream ( arg ) ;
p = FSLinkResolver . qualifySymlinkTarget ( arg ) ;
throw new UnsupportedFileSystemException ( arg ) ;
throw new UnsupportedFileSystemException ( arg ) ;
throw new UnsupportedFileSystemException ( arg ) ;
final int EXPECTED_TXNS_FIRST_SEG = 11 ;
int messageType = xdr . readInt ( arg ) ;
int invalidMessageType = 3 ;
int procedure = rpcCall . getProcedure ( arg ) ;
int procedure = rpcCall . getProcedure ( arg ) ;
dataState = DUMPED ;
lb = startFileInternal ( arg ) ;
Set < String > allRacks = new HashSet < String > ( arg ) ;
currentUser = UserGroupInformation . getCurrentUser ( arg ) ;
throw new YarnRuntimeException ( arg ) ;
AMRMClientImpl < StoredContainerRequest > amClient = null ;
amClient = ( AMRMClientImpl < StoredContainerRequest > ) AMRMClient . < StoredContainerRequest > createAMRMClient ( arg ) ;
List < ? extends Collection < StoredContainerRequest >> matches = amClient . getMatchingRequests ( arg ) ;
StoredContainerRequest storedRequest = matches . get ( arg ) . iterator ( arg ) . next ( arg ) ;
int iterationsLeft = 2 ;
AMRMClient < StoredContainerRequest > amClient = null ;
amClient = AMRMClient . < StoredContainerRequest > createAMRMClient ( arg ) ;
StoredContainerRequest testRequest = testSet . iterator ( arg ) . next ( arg ) ;
AMRMClientImpl < StoredContainerRequest > amClient = null ;
amClient = new AMRMClientImpl < StoredContainerRequest > ( arg ) ;
StoredContainerRequest storedContainer1 = new StoredContainerRequest ( arg ) ;
int iterationsLeft = 2 ;
iterationsLeft = 2 ;
Path nodeRemovePath = getNodePath ( arg ) ;
return counter . getAndIncrement ( arg ) & 0x7FFFFFFF ;
ContainerLaunchContext amContainer = Records . newRecord ( arg ) ;
appContext . setUnmanagedAM ( arg ) ;
RegisterApplicationMasterRequest req = Records . newRecord ( arg ) ;
amTokens = request . getContainerLaunchContext ( arg ) . getTokens ( arg ) ;
AllocateResponse response1 = amService . allocate ( arg ) ;
response1 = amService . allocate ( arg ) ;
response1 = amService . allocate ( arg ) ;
response1 = amService . allocate ( arg ) ;
AllocateResponse response2 = amService . allocate ( arg ) ;
response1 = amService . allocate ( arg ) ;
response2 = amService . allocate ( arg ) ;
response2 = amService . allocate ( arg ) ;
AllocateResponse response = amService . allocate ( arg ) ;
response = amService . allocate ( arg ) ;
response = amService . allocate ( arg ) ;
response = amService . allocate ( arg ) ;
Client . setCallId ( arg ) ;
FSPermissionChecker checker = new FSPermissionChecker ( arg ) ;
nm . getContainerManager ( arg ) . startContainer ( arg ) ;
getContainerManager ( arg ) . startContainer ( arg ) ;
containerManager . startContainer ( arg ) ;
callbackHandler . registerAsyncClient ( arg ) ;
final int sizeLimit = ran . nextInt ( arg ) ;
final String snapshotPath ;
return startFileInt ( arg ) ;
return h ;
return us ;
return TimeUnit . HOURS ;
return TimeUnit . MINUTES ;
return TimeUnit . DAYS ;
return TimeUnit . NANOSECONDS ;
return TimeUnit . MICROSECONDS ;
return TimeUnit . MILLISECONDS ;
return TimeUnit . SECONDS ;
checkTraverse ( arg ) ;
boolean inSasl = false ;
String availableAuthMethods ;
Token < AMRMTokenIdentifier > amrmToken = application . getAMRMToken ( arg ) ;
fsImpl . createSymlink ( arg ) ;
return fsImpl . getLinkTarget ( arg ) ;
return fsImpl . supportsSymlinks ( arg ) ;
long accessTime = status . getAccessTime ( arg ) ;
SchedulerUtils . validateResourceRequests ( arg ) ;
SchedulerUtils . validateBlacklistRequest ( arg ) ;
final int childrenNum = ( childrenNumLong == null ) ? 0 : childrenNumLong . intValue ( arg ) ;
HashMap < String , List < OneBlockInfo >> nodeToBlocks = new HashMap < String , List < OneBlockInfo >> ( arg ) ;
HashMap < String , List < OneBlockInfo >> nodeToBlocks = new HashMap < String , List < OneBlockInfo >> ( arg ) ;
Procedure procedure = Procedure . fromValue ( arg ) ;
return h ;
return us ;
return TimeUnit . SECONDS ;
return TimeUnit . MICROSECONDS ;
return TimeUnit . MILLISECONDS ;
return TimeUnit . HOURS ;
return TimeUnit . MINUTES ;
return TimeUnit . NANOSECONDS ;
String target = readLink ( arg ) ;
String target = readLink ( arg ) ;
AuthMethod authMethod = AuthMethod . SIMPLE ;
processRpcRequestPacket ( arg ) ;
return confPrincipal ;
final UserGroupInformation serverUgi = UserGroupInformation . createRemoteUser ( arg ) ;
long totalMBExpect = metrics . getAvailableMB ( arg ) + metrics . getAllocatedMB ( arg ) ;
long totalMBExpect = metrics . getReservedMB ( arg ) + metrics . getAvailableMB ( arg ) + metrics . getAllocatedMB ( arg ) ;
List < String > command = new ArrayList < String > ( arg ) ;
boolean waitTimeValid = ( duration >= connectionWaitSecs * 1000 ) && ( duration < ( connectionWaitSecs * 1000 + delta ) ) ;
return getProto ( arg ) . toString ( arg ) . replaceAll ( arg ) . replaceAll ( arg ) ;
return getProto ( arg ) . toString ( arg ) . replaceAll ( arg ) . replaceAll ( arg ) ;
return getProto ( arg ) . toString ( arg ) . replaceAll ( arg ) . replaceAll ( arg ) ;
return getProto ( arg ) . toString ( arg ) . replaceAll ( arg ) . replaceAll ( arg ) ;
return getProto ( arg ) . toString ( arg ) . replaceAll ( arg ) . replaceAll ( arg ) ;
return getProto ( arg ) . toString ( arg ) . replaceAll ( arg ) . replaceAll ( arg ) ;
return getProto ( arg ) . toString ( arg ) . replaceAll ( arg ) . replaceAll ( arg ) ;
return getProto ( arg ) . toString ( arg ) . replaceAll ( arg ) . replaceAll ( arg ) ;
return getProto ( arg ) . toString ( arg ) . replaceAll ( arg ) . replaceAll ( arg ) ;
return getProto ( arg ) . toString ( arg ) . replaceAll ( arg ) . replaceAll ( arg ) ;
return getProto ( arg ) . toString ( arg ) . replaceAll ( arg ) . replaceAll ( arg ) ;
return getProto ( arg ) . toString ( arg ) . replaceAll ( arg ) . replaceAll ( arg ) ;
return getProto ( arg ) . toString ( arg ) . replaceAll ( arg ) . replaceAll ( arg ) ;
return getProto ( arg ) . toString ( arg ) . replaceAll ( arg ) . replaceAll ( arg ) ;
return getProto ( arg ) . toString ( arg ) . replaceAll ( arg ) . replaceAll ( arg ) ;
return getProto ( arg ) . toString ( arg ) . replaceAll ( arg ) . replaceAll ( arg ) ;
return getProto ( arg ) . toString ( arg ) . replaceAll ( arg ) . replaceAll ( arg ) ;
return getProto ( arg ) . toString ( arg ) . replaceAll ( arg ) . replaceAll ( arg ) ;
return getProto ( arg ) . toString ( arg ) . replaceAll ( arg ) . replaceAll ( arg ) ;
return getProto ( arg ) . toString ( arg ) . replaceAll ( arg ) . replaceAll ( arg ) ;
return getProto ( arg ) . toString ( arg ) . replaceAll ( arg ) . replaceAll ( arg ) ;
return getProto ( arg ) . toString ( arg ) . replaceAll ( arg ) . replaceAll ( arg ) ;
return getProto ( arg ) . toString ( arg ) . replaceAll ( arg ) . replaceAll ( arg ) ;
return getProto ( arg ) . toString ( arg ) . replaceAll ( arg ) . replaceAll ( arg ) ;
return getProto ( arg ) . toString ( arg ) . replaceAll ( arg ) . replaceAll ( arg ) ;
return getProto ( arg ) . toString ( arg ) . replaceAll ( arg ) . replaceAll ( arg ) ;
return getProto ( arg ) . toString ( arg ) . replaceAll ( arg ) . replaceAll ( arg ) ;
return getProto ( arg ) . toString ( arg ) . replaceAll ( arg ) . replaceAll ( arg ) ;
return getProto ( arg ) . toString ( arg ) . replaceAll ( arg ) . replaceAll ( arg ) ;
return getProto ( arg ) . toString ( arg ) . replaceAll ( arg ) . replaceAll ( arg ) ;
return getProto ( arg ) . toString ( arg ) . replaceAll ( arg ) . replaceAll ( arg ) ;
return getProto ( arg ) . toString ( arg ) . replaceAll ( arg ) . replaceAll ( arg ) ;
return getProto ( arg ) . toString ( arg ) . replaceAll ( arg ) . replaceAll ( arg ) ;
return getProto ( arg ) . toString ( arg ) . replaceAll ( arg ) . replaceAll ( arg ) ;
return getProto ( arg ) . toString ( arg ) . replaceAll ( arg ) . replaceAll ( arg ) ;
return getProto ( arg ) . toString ( arg ) . replaceAll ( arg ) . replaceAll ( arg ) ;
return getProto ( arg ) . toString ( arg ) . replaceAll ( arg ) . replaceAll ( arg ) ;
return getProto ( arg ) . toString ( arg ) . replaceAll ( arg ) . replaceAll ( arg ) ;
return getProto ( arg ) . toString ( arg ) . replaceAll ( arg ) . replaceAll ( arg ) ;
return getProto ( arg ) . toString ( arg ) . replaceAll ( arg ) . replaceAll ( arg ) ;
return getProto ( arg ) . toString ( arg ) . replaceAll ( arg ) . replaceAll ( arg ) ;
return getProto ( arg ) . toString ( arg ) . replaceAll ( arg ) . replaceAll ( arg ) ;
return getProto ( arg ) . toString ( arg ) . replaceAll ( arg ) . replaceAll ( arg ) ;
return getProto ( arg ) . toString ( arg ) . replaceAll ( arg ) . replaceAll ( arg ) ;
return getProto ( arg ) . toString ( arg ) . replaceAll ( arg ) . replaceAll ( arg ) ;
return getProto ( arg ) . toString ( arg ) . replaceAll ( arg ) . replaceAll ( arg ) ;
return getProto ( arg ) . toString ( arg ) . replaceAll ( arg ) . replaceAll ( arg ) ;
return getProto ( arg ) . toString ( arg ) . replaceAll ( arg ) . replaceAll ( arg ) ;
return getProto ( arg ) . toString ( arg ) . replaceAll ( arg ) . replaceAll ( arg ) ;
return getProto ( arg ) . toString ( arg ) . replaceAll ( arg ) . replaceAll ( arg ) ;
return getProto ( arg ) . toString ( arg ) . replaceAll ( arg ) . replaceAll ( arg ) ;
return getProto ( arg ) . toString ( arg ) . replaceAll ( arg ) . replaceAll ( arg ) ;
return getProto ( arg ) . toString ( arg ) . replaceAll ( arg ) . replaceAll ( arg ) ;
return getProto ( arg ) . toString ( arg ) . replaceAll ( arg ) . replaceAll ( arg ) ;
return getProto ( arg ) . toString ( arg ) . replaceAll ( arg ) . replaceAll ( arg ) ;
return getProto ( arg ) . toString ( arg ) . replaceAll ( arg ) . replaceAll ( arg ) ;
return getProto ( arg ) . toString ( arg ) . replaceAll ( arg ) . replaceAll ( arg ) ;
return getProto ( arg ) . toString ( arg ) . replaceAll ( arg ) . replaceAll ( arg ) ;
return getProto ( arg ) . toString ( arg ) . replaceAll ( arg ) . replaceAll ( arg ) ;
return getProto ( arg ) . toString ( arg ) . replaceAll ( arg ) . replaceAll ( arg ) ;
return getProto ( arg ) . toString ( arg ) . replaceAll ( arg ) . replaceAll ( arg ) ;
return getProto ( arg ) . toString ( arg ) . replaceAll ( arg ) . replaceAll ( arg ) ;
return getProto ( arg ) . toString ( arg ) . replaceAll ( arg ) . replaceAll ( arg ) ;
return getProto ( arg ) . toString ( arg ) . replaceAll ( arg ) . replaceAll ( arg ) ;
return getProto ( arg ) . toString ( arg ) . replaceAll ( arg ) . replaceAll ( arg ) ;
return getProto ( arg ) . toString ( arg ) . replaceAll ( arg ) . replaceAll ( arg ) ;
String authority = pathPattern . toUri ( arg ) . getAuthority ( arg ) ;
authority = fc . getFSofPath ( arg ) . getUri ( arg ) . getAuthority ( arg ) ;
String scheme = pathPattern . toUri ( arg ) . getScheme ( arg ) ;
scheme = fc . getFSofPath ( arg ) . getUri ( arg ) . getScheme ( arg ) ;
f [ i ] . seralize ( arg ) ;
( ( HdfsDataOutputStream ) fos ) . hsync ( arg ) ;
( ( HdfsDataOutputStream ) fos ) . hsync ( arg ) ;
HackedKeytab keytab = new HackedKeytab ( arg ) ;
loginContext . login ( arg ) ;
loginContext . login ( arg ) ;
return h ;
return us ;
return TimeUnit . MICROSECONDS ;
return TimeUnit . HOURS ;
return TimeUnit . MINUTES ;
return TimeUnit . SECONDS ;
return TimeUnit . NANOSECONDS ;
return TimeUnit . MILLISECONDS ;
return TimeUnit . DAYS ;
return us ;
return h ;
return TimeUnit . NANOSECONDS ;
return TimeUnit . MICROSECONDS ;
return TimeUnit . DAYS ;
return TimeUnit . HOURS ;
return TimeUnit . MILLISECONDS ;
return TimeUnit . SECONDS ;
int ret = c2 . getContainer ( arg ) . getPriority ( arg ) . compareTo ( arg ) ;
store . setDispatcher ( arg ) ;
checkAvailableForRead ( arg ) ;
String nodesReportStr = baos . toString ( arg ) ;
List < ApplicationReport > reports = client . getApplications ( arg ) ;
boolean bypassFilter = applicationTypes . isEmpty ( arg ) ;
nextOffset = fos . getPos ( arg ) ;
Credentials credentials = attemptState . getAppAttemptTokens ( arg ) ;
Credentials credentials = getTokensFromAppAttempt ( arg ) ;
Credentials credentials = getTokensFromAppAttempt ( arg ) ;
appAttempt . removeTokens ( arg ) ;
appAttempt . removeTokens ( arg ) ;
List < Token < ? >> appAttemptToken1 = generateTokens ( arg ) ;
List < Token < ? >> appAttemptToken2 = generateTokens ( arg ) ;
primary . getExpectedLocation ( arg ) . addBlockToBeRecovered ( arg ) ;
int datanodeNum = blkUC . getExpectedLocations ( arg ) . length ;
datanodeNum = blkUC . getExpectedLocations ( arg ) . length ;
return new PathCacheEntriesIterator ( arg ) ;
nextKey = elementToNextKey ( arg ) ;
RemoteIterator < CachePoolInfo > iter = server . listCachePools ( arg ) ;
CachePoolInfo pool = iter . next ( arg ) ;
builder . addElements ( arg ) ;
return response . getElementsCount ( arg ) ;
return new CachePoolInfo ( arg ) . setOwnerName ( arg ) . setGroupName ( arg ) . setMode ( arg ) . setWeight ( arg ) ;
ListPathCacheEntriesRequestProto req = ListPathCacheEntriesRequestProto . newBuilder ( arg ) . setPrevId ( arg ) . setPool ( arg ) . setMaxReplies ( arg ) . build ( arg ) ;
rpcProxy . addCachePool ( arg ) ;
return new InvalidPoolNameError ( arg ) ;
CacheEntry cacheEntry = RetryCache . waitForCompletion ( arg ) ;
boolean success = false ;
namesystem . addCachePool ( arg ) ;
conn = ( HttpURLConnection ) URLUtils . openConnection ( arg ) ;
conn = ( HttpURLConnection ) URLUtils . openConnection ( arg ) ;
conn = ( HttpURLConnection ) URLUtils . openConnection ( arg ) ;
URLUtils . SOCKET_TIMEOUT = INITIAL_SOCKET_TIMEOUT ;
URLUtils . SOCKET_TIMEOUT = SHORT_SOCKET_TIMEOUT ;
List < INode > removedINodes = new ArrayList < INode > ( arg ) ;
List < INode > removedINodes = new ArrayList < INode > ( arg ) ;
return blockList == null ? 0 : blockList . listCount ( arg ) ;
ContainerStatus status = SchedulerUtils . createAbnormalContainerStatus ( arg ) ;
RpcAuthInfo verifier = RpcAuthInfo . read ( arg ) ;
return size != 0 ? this . readFixedOpaque ( arg ) : null ;
RpcAuthInfo verifier = new RpcAuthInfo ( arg ) ;
RpcAuthSys authSys = null ;
addIfService ( arg ) ;
Iterator < Entry < PathCacheDirective , PathCacheEntry >> iter = entriesByDirective . entrySet ( arg ) . iterator ( arg ) ;
Entry < PathCacheDirective , PathCacheEntry > entry = iter . next ( arg ) ;
PathCacheEntry existing = entriesById . get ( arg ) ;
out . writeFixedOpaque ( arg ) ;
NativeIO . POSIX . getMemlockLimit ( arg ) ;
long ulimit = NativeIO . POSIX . getMemlockLimit ( arg ) ;
final long memlockLimit = NativeIO . POSIX . getMemlockLimit ( arg ) ;
return Collections . unmodifiableSet ( arg ) ;
return bytearr . length ;
this . writeVariableOpaque ( arg ) ;
RpcAcceptedReply . voidReply ( arg ) ;
RpcAcceptedReply . voidReply ( arg ) ;
RpcAcceptedReply . voidReply ( arg ) ;
return credential ;
RpcAcceptedReply . voidReply ( arg ) ;
RpcAcceptedReply . voidReply ( arg ) ;
RpcAcceptedReply . voidReply ( arg ) ;
RpcAcceptedReply . voidReply ( arg ) ;
RpcAcceptedReply . voidReply ( arg ) ;
RpcCall . write ( arg ) ;
RpcAcceptedReply . voidReply ( arg ) ;
return RpcAcceptedReply . voidReply ( arg ) ;
RpcAcceptedReply . voidReply ( arg ) ;
return RpcAcceptedReply . voidReply ( arg ) ;
RpcAcceptedReply . voidReply ( arg ) ;
out = response . send ( arg ) ;
return new VoidResponse ( arg ) ;
RpcCall . write ( arg ) ;
final DatanodeDescriptor targets [ ] = blockplacement . chooseTarget ( arg ) ;
LocatedBlock lBlk = LocatedBlock . createLocatedBlock ( arg ) ;
return new DatanodeStorageInfo ( arg ) ;
List < DatanodeDescriptor > liveNodes = new LinkedList < DatanodeDescriptor > ( arg ) ;
List < Fallible < PathBasedCacheEntry >> output = server . addPathBasedCacheDirectives ( arg ) ;
ListPathBasedCacheEntriesResponseProto response ;
ListPathBasedCacheEntriesRequestProto . Builder builder = ListPathBasedCacheEntriesRequestProto . newBuilder ( arg ) . setPrevId ( arg ) ;
ArrayList < Fallible < PathBasedCacheEntry >> results = new ArrayList < Fallible < PathBasedCacheEntry >> ( arg ) ;
return new Fallible < PathBasedCacheEntry > ( arg ) ;
return new Fallible < PathBasedCacheEntry > ( arg ) ;
return new Fallible < PathBasedCacheEntry > ( arg ) ;
PathBasedCacheEntry existing = entriesByDirective . get ( arg ) ;
return new Fallible < PathBasedCacheEntry > ( arg ) ;
return new Fallible < PathBasedCacheEntry > ( arg ) ;
return new Fallible < PathBasedCacheEntry > ( arg ) ;
ArrayList < Fallible < PathBasedCacheEntry >> results = new ArrayList < Fallible < PathBasedCacheEntry >> ( arg ) ;
Iterator < Entry < PathBasedCacheDirective , PathBasedCacheEntry >> iter = entriesByDirective . entrySet ( arg ) . iterator ( arg ) ;
List < Fallible < PathBasedCacheEntry >> results = null ;
return namesystem . listPathBasedCacheEntries ( arg ) ;
List < Fallible < PathBasedCacheEntry >> results = dfs . addPathBasedCacheDirective ( arg ) ;
PathBasedCacheEntry entry = results . get ( arg ) . get ( arg ) ;
RemoteIterator < PathBasedCacheEntry > iter = dfs . listPathBasedCacheEntries ( arg ) ;
List < Fallible < Long >> results = dfs . removePathBasedCacheEntries ( arg ) ;
List < Fallible < PathBasedCacheEntry >> fallibles = nnRpc . addPathBasedCacheDirectives ( arg ) ;
RemoteIterator < PathBasedCacheEntry > entries = nnRpc . listPathBasedCacheEntries ( arg ) ;
PathBasedCacheEntry entry = entries . next ( arg ) ;
List < Fallible < Long >> fallibles = nnRpc . removePathBasedCacheEntries ( arg ) ;
List < Fallible < PathBasedCacheEntry >> addResults2 = proto . addPathBasedCacheDirectives ( arg ) ;
RemoteIterator < PathBasedCacheEntry > iter = proto . listPathBasedCacheEntries ( arg ) ;
iter = proto . listPathBasedCacheEntries ( arg ) ;
iter = proto . listPathBasedCacheEntries ( arg ) ;
iter = proto . listPathBasedCacheEntries ( arg ) ;
List < Fallible < Long >> removeResults1 = proto . removePathBasedCacheEntries ( arg ) ;
iter = proto . listPathBasedCacheEntries ( arg ) ;
List < String > existingStorageIDsList = req . getExistingStorageIDsList ( arg ) ;
GetAdditionalDatanodeRequestProto req = GetAdditionalDatanodeRequestProto . newBuilder ( arg ) . setSrc ( arg ) . setBlk ( arg ) . addAllExistings ( arg ) . addAllExistingStorageIDs ( arg ) . addAllExcludes ( arg ) . setNumAdditionalNodes ( arg ) . setClientName ( arg ) . build ( arg ) ;
builder . addAllTargets ( arg ) . addAllTargetStorageIDs ( arg ) ;
List < String > storageIDs = targetStorageIDsList . get ( arg ) . getStorageIDsList ( arg ) ;
return DatanodeStorageProto . newBuilder ( arg ) . setState ( arg ) . setStorageType ( arg ) . setStorageID ( arg ) . build ( arg ) ;
return dfs . namenode . listCachePools ( arg ) ;
return dfs . namenode . listPathBasedCacheDescriptors ( arg ) ;
return new Fallible < PathBasedCacheDescriptor > ( arg ) ;
return new Fallible < PathBasedCacheDescriptor > ( arg ) ;
return new Fallible < PathBasedCacheDescriptor > ( arg ) ;
return new Fallible < PathBasedCacheDescriptor > ( arg ) ;
return new Fallible < PathBasedCacheDescriptor > ( arg ) ;
return new Fallible < PathBasedCacheDescriptor > ( arg ) ;
return new Fallible < PathBasedCacheDescriptor > ( arg ) ;
return new Fallible < Long > ( arg ) ;
return new Fallible < Long > ( arg ) ;
return new Fallible < Long > ( arg ) ;
return new Fallible < Long > ( arg ) ;
return new Fallible < Long > ( arg ) ;
return new Fallible < Long > ( arg ) ;
commitOffset = getNextOffsetUnprotected ( arg ) ;
return response = new WRITE3Response ( arg ) ;
return response = new WRITE3Response ( arg ) ;
nonSequentialWriteInMemory += count ;
String RMWebAppURL = YarnConfiguration . getRMWebAppURL ( arg ) ;
appAttempt . clientTokenMasterKey = appAttempt . rmContext . getClientToAMTokenSecretManager ( arg ) . registerApplication ( arg ) ;
this . masterKeys . put ( arg ) ;
SecretKey clientTokenKey1 = clientToAMTokenMgr . registerApplication ( arg ) ;
SecretKey clientTokenKey2 = clientToAMTokenMgr . registerApplication ( arg ) ;
resourceManager . addContainerRequest ( arg ) ;
resourceManager . stop ( arg ) ;
resourceManager . unregisterApplicationMaster ( arg ) ;
resourceManager . stop ( arg ) ;
RegisterApplicationMasterResponse response = resourceManager . registerApplicationMaster ( arg ) ;
resourceManager . addContainerRequest ( arg ) ;
return DatanodeIDProto . newBuilder ( arg ) . setIpAddr ( arg ) . setHostName ( arg ) . setDatanodeUuid ( arg ) . setXferPort ( arg ) . setInfoPort ( arg ) . setIpcPort ( arg ) . build ( arg ) ;
String secondNode = cluster . getDataNodes ( arg ) . get ( arg ) . getDatanodeUuid ( arg ) ;
return jsonMapper . readValue ( arg ) ;
return jsonMapper . readValue ( arg ) ;
int requestSize = xdrOut . size ( arg ) ;
XDR response = new XDR ( arg ) ;
XDR response = new XDR ( arg ) ;
WebAppUtil . setJHSWebAppURLWithoutScheme ( arg ) ;
WebAppUtil . setJHSWebAppURLWithoutScheme ( arg ) ;
Resource available = Resources . roundUp ( arg ) ;
cleanupContainers ( arg ) ;
entriesById . remove ( arg ) ;
return -addPath ;
return -listPaths ;
return -removePath ;
return raw + padding ;
nmClientAsync . getContainerStatusAsync ( arg ) ;
cleanUpApplications ( arg ) ;
HttpConfig . setSecure ( arg ) ;
HttpConfig . setSecure ( arg ) ;
pool . writeTo ( arg ) ;
this . pool = CachePool . readXmlFrom ( arg ) ;
pool = CachePool . readFrom ( arg ) ;
pool . writeXmlTo ( arg ) ;
pool . writeTo ( arg ) ;
InetSocketAddress secInfoSocAddr = NetUtils . createSocketAddr ( arg ) ;
loadQueue ( arg ) ;
resourceManager . getResourceScheduler ( arg ) . allocate ( arg ) ;
PathBasedCacheDirective directive = new PathBasedCacheDirective ( arg ) ;
PathBasedCacheDirective directive = new PathBasedCacheDirective ( arg ) ;
iter = proto . listPathBasedCacheDescriptors ( arg ) ;
int numExpectedElements = 12 ;
numExpectedElements = 22 ;
PathBasedCacheDirective directive = new PathBasedCacheDirective . Builder ( arg ) . setPath ( arg ) . setPool ( arg ) . build ( arg ) ;
return new EqualsBuilder ( arg ) . append ( arg ) . append ( arg ) . append ( arg ) . isEquals ( arg ) ;
return new HashCodeBuilder ( arg ) . append ( arg ) . append ( arg ) . append ( arg ) . hashCode ( arg ) ;
return new EqualsBuilder ( arg ) . append ( arg ) . append ( arg ) . isEquals ( arg ) ;
return new HashCodeBuilder ( arg ) . append ( arg ) . append ( arg ) . hashCode ( arg ) ;
AddPathBasedCacheDirectiveOp op = AddPathBasedCacheDirectiveOp . getInstance ( arg ) . setPath ( arg ) . setPool ( arg ) ;
PathBasedCacheDirective directive = new PathBasedCacheDirective . Builder ( arg ) . setPath ( arg ) . setPool ( arg ) . build ( arg ) ;
HdfsFileStatus dirStatus ;
dlisting = dfsClient . listPaths ( arg ) ;
dlisting = dfsClient . listPaths ( arg ) ;
int start = hasWindowsDrive ( arg ) ? 3 : 0 ;
int start = hasWindowsDrive ( arg ) ? 3 : 0 ;
blockLogInfo ( arg ) ;
if ( cacheReplicationManager != null ) cacheReplicationManager . close ( arg ) ;
namesystem . getCacheReplicationManager ( arg ) . processCacheReport ( arg ) ;
IOException e = lastException ;
scheduledSize = 0 ;
FSPermissionChecker pc = getPermissionChecker ( arg ) ;
InetSocketAddress secInfoSocAddr = NetUtils . createSocketAddr ( arg ) ;
FileStatus linkStatus = dfs . getFileLinkStatus ( arg ) ;
Block [ ] blocks = new Block [ locs . length ] ;
blocks [ i ] = locs [ i ] . getLocatedBlock ( arg ) . getBlock ( arg ) . getLocalBlock ( arg ) ;
return new BlockCommand ( arg ) ;
String file = test.txt ;
String text = ( ( Text ) field . getFirstChild ( arg ) ) . getData ( arg ) ;
String text = ( ( Text ) field . getFirstChild ( arg ) ) . getData ( arg ) ;
String text = ( ( Text ) field . getFirstChild ( arg ) ) . getData ( arg ) . trim ( arg ) ;
String text = ( ( Text ) field . getFirstChild ( arg ) ) . getData ( arg ) . trim ( arg ) ;
BlockListAsLongs blocks = dn . getFSDataset ( arg ) . getCacheReport ( arg ) ;
long cacheUsed = fsd . getCacheUsed ( arg ) ;
cacheUsed = fsd . getCacheUsed ( arg ) ;
return new BlockPlacementStatusDefault ( arg ) ;
return conf . getTrimmedStringCollection ( arg ) ;
HAUtil . setAllRpcAddresses ( arg ) ;
DFSClient dfsClient = clientCache . get ( arg ) ;
DFSClient dfsClient = clientCache . get ( arg ) ;
DFSClient dfsClient = clientCache . get ( arg ) ;
DFSClient dfsClient = clientCache . get ( arg ) ;
DFSClient dfsClient = clientCache . get ( arg ) ;
DFSClient dfsClient = clientCache . get ( arg ) ;
DFSClient dfsClient = clientCache . get ( arg ) ;
DFSClient dfsClient = clientCache . get ( arg ) ;
DFSClient dfsClient = clientCache . get ( arg ) ;
DFSClient dfsClient = clientCache . get ( arg ) ;
DFSClient dfsClient = clientCache . get ( arg ) ;
DFSClient dfsClient = clientCache . get ( arg ) ;
DFSClient dfsClient = clientCache . get ( arg ) ;
DFSClient dfsClient = clientCache . get ( arg ) ;
DFSClient dfsClient = clientCache . get ( arg ) ;
DFSClient dfsClient = clientCache . get ( arg ) ;
DFSClient dfsClient = clientCache . get ( arg ) ;
DFSClient dfsClient = clientCache . get ( arg ) ;
DFSClient dfsClient = clientCache . get ( arg ) ;
cache . get ( arg ) ;
doReturn ( arg ) . when ( arg ) . findTimestampedDirectories ( arg ) ;
haService = new RMHAProtocolService ( arg ) ;
return nmTokens . get ( arg ) ;
nmTokens . put ( arg ) ;
NMTokenCache . setNMToken ( arg ) ;
NMTokenCache . setNMToken ( arg ) ;
app . rmContext . getStateStore ( arg ) . storeApplication ( arg ) ;
return ( arg ) ? this . origTrackingUrl : this . proxiedTrackingUrl ;
store . storeApplicationAttempt ( arg ) ;
event = new RMAppStoredEvent ( arg ) ;
event = new RMAppStoredEvent ( arg ) ;
RMAppEvent event = new RMAppStoredEvent ( arg ) ;
return h ;
return TimeUnit . DAYS ;
return TimeUnit . MILLISECONDS ;
return TimeUnit . MICROSECONDS ;
return TimeUnit . SECONDS ;
return TimeUnit . NANOSECONDS ;
return TimeUnit . MINUTES ;
return iterators . get ( arg ) . hasNext ( arg ) ;
return perNode ;
boolean goodTarget = false ;
OpenFileCtx openFileCtx = openFileMap . get ( arg ) ;
OpenFileCtx openFileCtx = openFileMap . get ( arg ) ;
OpenFileCtx openFileCtx = openFileMap . get ( arg ) ;
OpenFileCtx openFileCtx = openFileMap . get ( arg ) ;
RpcProgramMountd mountd = ( RpcProgramMountd ) nfs3 . getMountBase ( arg ) . getRpcProgram ( arg ) ;
ListPathBasedCacheDescriptorsResponseProto response ;
return new EqualsBuilder ( arg ) . append ( arg ) . append ( arg ) . append ( arg ) . isEquals ( arg ) ;
return new HashCodeBuilder ( arg ) . append ( arg ) . append ( arg ) . append ( arg ) . hashCode ( arg ) ;
AddPathBasedCacheDirectiveOp op = AddPathBasedCacheDirectiveOp . getInstance ( arg ) . setPath ( arg ) . setReplication ( arg ) . setPool ( arg ) ;
return namesystem . listPathBasedCacheDescriptors ( arg ) ;
RemoteIterator < PathBasedCacheDescriptor > iter = dfs . listPathBasedCacheDescriptors ( arg ) ;
dfs . getClient ( arg ) . removePathBasedCacheDescriptor ( arg ) ;
RemoteIterator < PathBasedCacheDescriptor > iter = dfs . listPathBasedCacheDescriptors ( arg ) ;
PathBasedCacheDescriptor entry = iter . next ( arg ) ;
dfs . removePathBasedCacheDescriptor ( arg ) ;
proto . removePathBasedCacheDescriptor ( arg ) ;
proto . removePathBasedCacheDescriptor ( arg ) ;
RemoteIterator < PathBasedCacheDescriptor > dit = dfs . listPathBasedCacheDescriptors ( arg ) ;
dit = dfs . listPathBasedCacheDescriptors ( arg ) ;
RemoteIterator < PathBasedCacheDescriptor > entries = nnRpc . listPathBasedCacheDescriptors ( arg ) ;
dfs . removePathBasedCacheDescriptor ( arg ) ;
RemoteIterator < PathBasedCacheDescriptor > iter = dfs . listPathBasedCacheDescriptors ( arg ) ;
descriptor = client . addPathBasedCacheDirective ( arg ) ;
AtMostOnceOp op = new RemovePathBasedCacheDescriptorOp ( arg ) ;
return usedBytes . get ( arg ) ;
current = verifyExpectedCacheUsage ( arg ) ;
DirectoryDiff priorDiff = diffList . getDiff ( arg ) ;
throw new UnknownHostException ( arg ) ;
return BlockWithLocationsProto . newBuilder ( arg ) . setBlock ( arg ) . addAllStorageUuids ( arg ) . build ( arg ) ;
return new StorageReport [ 0 ] ;
long curDnCacheUsed = fsd . getDnCacheUsed ( arg ) ;
TableListing tableListing = new TableListing . Builder ( arg ) . addField ( arg ) . addField ( arg ) . addField ( arg ) . build ( arg ) ;
mlocker . mlock ( arg ) ;
blockManager . getDatanodeManager ( arg ) . setSendCachingCommands ( arg ) ;
blockManager . getDatanodeManager ( arg ) . setSendCachingCommands ( arg ) ;
MappableBlock . mlocker = mlocker ;
isUber = uberEnabled && smallNumMapTasks && smallNumReduceTasks && smallInput && smallMemory && smallCpu && notChainJob && isValidUberMaxReduces ;
List < String > childNodes = zkClient . getChildren ( arg ) ;
List < String > childNodes = zkClient . getChildren ( arg ) ;
return connectionList ;
Connection connection = server . getConnections ( arg ) . get ( arg ) ;
hasInitedToken = false ;
WebHdfsFileSystem fs = spy ( arg ) ;
return addSuffix ( arg ) ;
dfs . addPathBasedCacheDirective ( arg ) ;
MBeans . register ( arg ) ;
NativeIO . POSIX . posixFadviseIfPossible ( arg ) ;
NativeIO . POSIX . posixFadviseIfPossible ( arg ) ;
NativeIO . POSIX . posixFadviseIfPossible ( arg ) ;
NativeIO . POSIX . posixFadviseIfPossible ( arg ) ;
NativeIO . POSIX . posixFadviseIfPossible ( arg ) ;
long ulimit = NativeIO . getMemlockLimit ( arg ) ;
NativeIO . POSIX . cacheManipulator . mlock ( arg ) ;
final long memlockLimit = NativeIO . getMemlockLimit ( arg ) ;
NativeIO . POSIX . cacheTracker = tracker ;
NativeIO . POSIX . cacheManipulator = prevCacheManipulator ;
NativeIO . POSIX . cacheManipulator = prevCacheManipulator ;
NativeIO . POSIX . posixFadviseIfPossible ( arg ) ;
NativeIO . POSIX . posixFadviseIfPossible ( arg ) ;
AllocateResponse lastResponse = responseMap . get ( arg ) ;
responseMap . put ( arg ) ;
return new PathBasedCacheDirective . Builder ( arg ) . setId ( arg ) . setPath ( arg ) . setReplication ( arg ) . setPool ( arg ) . build ( arg ) ;
return kind . equals ( arg ) || kind . equals ( arg ) || kind . equals ( arg ) ;
this . nnAddrs = DFSUtil . resolve ( arg ) ;
Map < String , Map < String , InetSocketAddress >> map = DFSUtil . getHaNnHttpAddresses ( arg ) ;
InetSocketAddress [ ] addrs = DFSUtil . resolve ( arg ) ;
return other != null && getNsQuota ( arg ) == other . getNsQuota ( arg ) && getDsQuota ( arg ) == other . getDsQuota ( arg ) && getPermissionLong ( arg ) == other . getPermissionLong ( arg ) ;
return new BatchedPathDirectiveEntries ( arg ) ;
rescanPathBasedCacheEntries ( arg ) ;
PathBasedCacheEntry entry = entriesById . get ( arg ) ;
PathBasedCacheEntry entry = new PathBasedCacheEntry ( arg ) ;
List < PathBasedCacheEntry > entries = entriesByPath . get ( arg ) ;
entries = new LinkedList < PathBasedCacheEntry > ( arg ) ;
INodeFileUnderConstruction cons = FSImageSerialization . readINodeUnderConstruction ( arg ) ;
final INodeFileUnderConstruction uc = ( INodeFileUnderConstruction ) file ;
boolean remove = pendingFile . removeLastBlock ( arg ) ;
pendingFile . setLastBlock ( arg ) ;
final INodeFileUnderConstruction pendingFile = ( INodeFileUnderConstruction ) inodes [ inodes . length - 1 ] . asFile ( arg ) ;
final INodeFileUnderConstruction pendingFile = ( INodeFileUnderConstruction ) inodes [ inodes . length - 1 ] . asFile ( arg ) ;
final MutableBlockCollection mbc = mock ( arg ) ;
INodeFileUnderConstruction fileNode = ( INodeFileUnderConstruction ) cluster . getNamesystem ( arg ) . getFSDirectory ( arg ) . getINode4Write ( arg ) . asFile ( arg ) ;
INode fooNode = fooRef . asFile ( arg ) ;
node . setDatanodeUuid ( arg ) ;
node . setDatanodeUuid ( arg ) ;
final String storageID = DatanodeStorage . newStorageID ( arg ) ;
final URLConnectionFactory connectionFactory = URLConnectionFactory . DEFAULT_CONNECTION_FACTORY ;
initConnectionFactoryAndTokenAspect ( arg ) ;
fs . connectionFactory = URLConnectionFactory . DEFAULT_CONNECTION_FACTORY ;
final Procedure portmapProc = Procedure . fromValue ( arg ) ;
@ SuppressWarnings ( arg ) HashMap < String , PortmapMapping > map = ( HashMap < String , PortmapMapping > ) Whitebox . getInternalState ( arg ) ;
( ( INodeDirectoryWithQuota ) inodes [ i ] . asDirectory ( arg ) ) . verifyQuota ( arg ) ;
( ( INodeDirectoryWithQuota ) dir ) . setSpaceConsumed ( arg ) ;
fsDir . rootDir . setQuota ( arg ) ;
( ( INodeDirectoryWithQuota ) this ) . addSpaceConsumed2Cache ( arg ) ;
this . addSpaceConsumed2Cache ( arg ) ;
INode dirNode = fsdir . getINode ( arg ) ;
INode dirNode = fsdir . getINode ( arg ) ;
RemoteIterator < CachePoolInfo > iter = server . listCachePools ( arg ) ;
return new BatchedCachePoolInfo ( arg ) ;
return entryId == other . entryId ;
return cacheManager . getDnCacheCapacity ( arg ) ;
return cacheManager . getDnCacheUsed ( arg ) ;
nextEntryId = in . readLong ( arg ) ;
loadEntries ( arg ) ;
saveEntries ( arg ) ;
BatchedListEntries < CachePoolInfo > results ;
RemoteIterator < CachePoolInfo > iter = dfs . listCachePools ( arg ) ;
RemoteIterator < CachePoolInfo > pit = dfs . listCachePools ( arg ) ;
CachePoolInfo info = pit . next ( arg ) ;
info = pit . next ( arg ) ;
RemoteIterator < CachePoolInfo > iter = dfs . listCachePools ( arg ) ;
RemoteIterator < CachePoolInfo > iter = dfs . listCachePools ( arg ) ;
return new HttpServer . Builder ( arg ) . setName ( arg ) . setBindAddress ( arg ) . setPort ( arg ) . setFindPort ( arg ) . build ( arg ) ;
return new HttpServer . Builder ( arg ) . setName ( arg ) . setBindAddress ( arg ) . setPort ( arg ) . setFindPort ( arg ) . setConf ( arg ) . build ( arg ) ;
return new HttpServer . Builder ( arg ) . setName ( arg ) . setBindAddress ( arg ) . setPort ( arg ) . setFindPort ( arg ) . setConf ( arg ) . setACL ( arg ) . build ( arg ) ;
return new HttpServer . Builder ( arg ) . setName ( arg ) . setBindAddress ( arg ) . setPort ( arg ) . setFindPort ( arg ) . setConf ( arg ) . setPathSpec ( arg ) . build ( arg ) ;
return new HttpServer . Builder ( arg ) . setName ( arg ) . setBindAddress ( arg ) . setPort ( arg ) . setFindPort ( arg ) . build ( arg ) ;
HttpServer myServer = new HttpServer . Builder ( arg ) . setName ( arg ) . setBindAddress ( arg ) . setPort ( arg ) . setFindPort ( arg ) . setConf ( arg ) . setACL ( arg ) . build ( arg ) ;
HttpServer myServer = new HttpServer . Builder ( arg ) . setName ( arg ) . setBindAddress ( arg ) . setPort ( arg ) . setFindPort ( arg ) . build ( arg ) ;
HttpServer server = new HttpServer . Builder ( arg ) . setName ( arg ) . setBindAddress ( arg ) . setPort ( arg ) . setFindPort ( arg ) . build ( arg ) ;
httpServer . defineFilter ( arg ) ;
HttpServer server = new HttpServer . Builder ( arg ) . setName ( arg ) . setBindAddress ( arg ) . setPort ( arg ) . setFindPort ( arg ) . build ( arg ) ;
server = new HttpServer . Builder ( arg ) . setName ( arg ) . setBindAddress ( arg ) . setPort ( arg ) . setFindPort ( arg ) . build ( arg ) ;
this . port = this . webApp . httpServer ( arg ) . getPort ( arg ) ;
proxyServer = new HttpServer . Builder ( arg ) . setName ( arg ) . setBindAddress ( arg ) . setPort ( arg ) . setFindPort ( arg ) . setConf ( arg ) . setACL ( arg ) . build ( arg ) ;
proxyServer = new HttpServer . Builder ( arg ) . setName ( arg ) . setBindAddress ( arg ) . setPort ( arg ) . setFindPort ( arg ) . setConf ( arg ) . setACL ( arg ) . build ( arg ) ;
int proxyPort = proxy . proxy . proxyServer . getPort ( arg ) ;
return this instanceof FileWithSnapshot ? Util . getBlockReplication ( arg ) : getFileReplication ( arg ) ;
Util . collectBlocksAndClear ( arg ) ;
return new CacheDirectiveInfo . Builder ( arg ) . setId ( arg ) . setPath ( arg ) . setReplication ( arg ) . setPool ( arg ) . build ( arg ) ;
return new CacheDirectiveStats . Builder ( arg ) . setBytesNeeded ( arg ) . setBytesCached ( arg ) . setFilesAffected ( arg ) . build ( arg ) ;
return new EqualsBuilder ( arg ) . append ( arg ) . append ( arg ) . append ( arg ) . append ( arg ) . isEquals ( arg ) ;
return new HashCodeBuilder ( arg ) . append ( arg ) . append ( arg ) . append ( arg ) . append ( arg ) . hashCode ( arg ) ;
directive = new CacheDirectiveInfo . Builder ( arg ) . setId ( arg ) . setPath ( arg ) . setReplication ( arg ) . setPool ( arg ) . build ( arg ) ;
byte flags = ( byte ) ( ( ( directive . getPath ( arg ) != null ) ? 0x1 : 0 ) | ( ( directive . getReplication ( arg ) != null ) ? 0x2 : 0 ) | ( ( directive . getPool ( arg ) != null ) ? 0x4 : 0 ) ) ;
CacheDirectiveInfo directive = new CacheDirectiveInfo . Builder ( arg ) . setPath ( arg ) . setReplication ( arg ) . setPool ( arg ) . build ( arg ) ;
TableListing . Builder tableBuilder = new TableListing . Builder ( arg ) . addField ( arg ) . addField ( arg ) . addField ( arg ) . addField ( arg ) ;
return RMServerUtils . verifyAccess ( arg ) ;
haService . transitionToStandby ( arg ) ;
rm . haService . monitorHealth ( arg ) ;
rm . haService . transitionToStandby ( arg ) ;
rm . haService . transitionToActive ( arg ) ;
rm . haService . transitionToActive ( arg ) ;
rm . haService . transitionToStandby ( arg ) ;
rm . haService . transitionToActive ( arg ) ;
rm1 . getHAService ( arg ) . transitionToActive ( arg ) ;
rm2 . getHAService ( arg ) . transitionToActive ( arg ) ;
Map < String , BlockListAsLongs > perVolumeBlockLists = dn . getFSDataset ( arg ) . getBlockReports ( arg ) ;
Map < String , BlockListAsLongs > blockReportMap = new HashMap < String , BlockListAsLongs > ( arg ) ;
List < Map < String , BlockListAsLongs >> blocks = cluster . getAllBlockReports ( arg ) ;
List < Map < String , BlockListAsLongs >> blocksList = cluster . getAllBlockReports ( arg ) ;
Map < String , BlockListAsLongs > perVolumeBlockLists = dn . getFSDataset ( arg ) . getBlockReports ( arg ) ;
Map < String , BlockListAsLongs > perVolumeBlockLists = dn . getFSDataset ( arg ) . getBlockReports ( arg ) ;
infoSecurePort = secInfoSocAddr . getPort ( arg ) ;
this . infoServer = ( secureResources == null ) ? builder . build ( arg ) : builder . setConnector ( arg ) . build ( arg ) ;
return queueMgr . getMaxResources ( arg ) ;
int queueMaxApps = queueMgr . getQueueMaxApps ( arg ) ;
FSQueue highestQueueWithAppsNowRunnable = ( queue . getNumRunnableApps ( arg ) == queueMgr . getQueueMaxApps ( arg ) - 1 ) ? queue : null ;
Configuration conf = createConfiguration ( arg ) ;
scheduler . getQueueManager ( arg ) . placementPolicy = new QueuePlacementPolicy ( arg ) ;
scheduler . getQueueManager ( arg ) . placementPolicy = new QueuePlacementPolicy ( arg ) ;
return new CacheDirectiveStats . Builder ( arg ) . setBytesNeeded ( arg ) . setBytesCached ( arg ) . setFilesAffected ( arg ) . setHasExpired ( arg ) . build ( arg ) ;
return bytesNeeded ;
long cachedTotal = 0 ;
return new CachePoolStats . Builder ( arg ) . setBytesNeeded ( arg ) . setBytesCached ( arg ) . setFilesAffected ( arg ) . build ( arg ) ;
tableBuilder . addField ( arg ) . addField ( arg ) . addField ( arg ) ;
String [ ] row = new String [ 5 ] ;
return fileDiffs == null ? file : new INodeFileWithSnapshot ( arg ) ;
return fileDiffs == null ? file : new INodeFileWithSnapshot ( arg ) ;
INodeFileWithSnapshot sfoo = ( INodeFileWithSnapshot ) fsdir . getINode ( arg ) . asFile ( arg ) ;
INodeFileWithSnapshot snode = ( INodeFileWithSnapshot ) fsdir . getINode ( arg ) . asFile ( arg ) ;
INodeFileWithSnapshot bar1 = ( INodeFileWithSnapshot ) fsdir . getINode4Write ( arg ) . asFile ( arg ) ;
INodeFileWithSnapshot bar = ( INodeFileWithSnapshot ) barWithCount . asFile ( arg ) ;
INodeFileWithSnapshot bar1 = ( INodeFileWithSnapshot ) fsdir . getINode4Write ( arg ) . asFile ( arg ) ;
INodeFileWithSnapshot bar = ( INodeFileWithSnapshot ) barWithCount . asFile ( arg ) ;
bar = ( INodeFileWithSnapshot ) barWithCount . asFile ( arg ) ;
INodeFileWithSnapshot barNode = ( INodeFileWithSnapshot ) fsdir . getINode4Write ( arg ) ;
INodeFileWithSnapshot metaChangeFile2SCopy = ( INodeFileWithSnapshot ) children . get ( arg ) ;
Iterable < ContainerProto > iterable = getProtoIterable ( arg ) ;
return HAServiceState . ACTIVE == haState ;
adminService . transitionToStandby ( arg ) ;
return Objects . equal ( arg ) && Objects . equal ( arg ) && Objects . equal ( arg ) && Objects . equal ( arg ) ;
List < AclEntry > actual = ACL4 . getEntries ( arg ) ;
throw ( arg ) getCauseForInvalidToken ( arg ) ;
return YarnConfiguration . RM_RPC_ADDRESS_CONF_KEYS . contains ( arg ) ? addSuffix ( arg ) : prefix ;
verifyAndSetAllRpcAddresses ( arg ) ;
SchedulerEvent event1 = new AppAddedSchedulerEvent ( arg ) ;
scheduler . addApplication ( arg ) ;
fs . addApplication ( arg ) ;
AppRemovedSchedulerEvent appRemoveEvent = ( AppRemovedSchedulerEvent ) schedulerEvent ;
( ( INodeDirectoryWithSnapshot ) current ) . getSnapshotDirectory ( arg ) ;
replaceSelf ( arg ) . saveSelf2Snapshot ( arg ) ;
return sf . getSnapshotINode ( arg ) ;
INodeDirectoryWithSnapshot . destroyDstSubtree ( arg ) ;
INodeDirectoryWithSnapshot barNode = ( INodeDirectoryWithSnapshot ) fsdir . getINode ( arg ) ;
INodeDirectoryWithSnapshot fooDir = ( INodeDirectoryWithSnapshot ) fooWC . getReferredINode ( arg ) . asDirectory ( arg ) ;
INodeDirectoryWithSnapshot fooNode = ( INodeDirectoryWithSnapshot ) wc . getReferredINode ( arg ) . asDirectory ( arg ) ;
INodeDirectoryWithSnapshot fooNode = ( INodeDirectoryWithSnapshot ) wc . getReferredINode ( arg ) . asDirectory ( arg ) ;
INodeDirectoryWithSnapshot dir2Node = ( INodeDirectoryWithSnapshot ) fsdir . getINode4Write ( arg ) ;
INodeDirectoryWithSnapshot dir1Node = ( INodeDirectoryWithSnapshot ) fsdir . getINode4Write ( arg ) ;
INodeDirectoryWithSnapshot barNode = ( INodeDirectoryWithSnapshot ) fsdir . getINode4Write ( arg ) ;
INodeDirectoryWithSnapshot dir2Node = ( INodeDirectoryWithSnapshot ) fsdir . getINode4Write ( arg ) ;
INodeDirectoryWithSnapshot foo = ( INodeDirectoryWithSnapshot ) fooWithCount . asDirectory ( arg ) ;
INodeDirectoryWithSnapshot foo = ( INodeDirectoryWithSnapshot ) fooWithCount . asDirectory ( arg ) ;
foo = ( INodeDirectoryWithSnapshot ) fooWithCount . asDirectory ( arg ) ;
List < DirectoryDiff > fooDiffs = ( ( INodeDirectoryWithSnapshot ) fooNode . asDirectory ( arg ) ) . getDiffs ( arg ) . asList ( arg ) ;
fooDiffs = ( ( INodeDirectoryWithSnapshot ) fooNode . asDirectory ( arg ) ) . getDiffs ( arg ) . asList ( arg ) ;
diffList = ( ( INodeDirectoryWithSnapshot ) subdir2Node ) . getDiffs ( arg ) . asList ( arg ) ;
INodeDirectoryWithSnapshot fooNode = ( INodeDirectoryWithSnapshot ) fsdir . getINode4Write ( arg ) ;
diffList = ( ( INodeDirectoryWithSnapshot ) fsdir . getINode ( arg ) ) . getDiffs ( arg ) ;
Map < String , ReceivedDeletedBlockInfo [ ] > blockArrays = Maps . newHashMap ( arg ) ;
blockArrays . put ( arg ) ;
long delta = ( scanTimeMs + intervalMs ) - curTimeMs ;
return info . setOwnerName ( arg ) . setGroupName ( arg ) . setMode ( arg ) . setWeight ( arg ) ;
return new CachePoolStats . Builder ( arg ) . setBytesNeeded ( arg ) . setBytesCached ( arg ) . setFilesNeeded ( arg ) . setFilesCached ( arg ) . build ( arg ) ;
directive = new CacheDirectiveInfo . Builder ( arg ) . setId ( arg ) . setPath ( arg ) . setReplication ( arg ) . setPool ( arg ) . setExpiration ( arg ) . build ( arg ) ;
this . info = CachePoolInfo . readXmlFrom ( arg ) ;
info = CachePoolInfo . readFrom ( arg ) ;
info . writeXmlTo ( arg ) ;
this . info = cachePoolInfoFromXml ( arg ) ;
info = CachePoolInfo . readFrom ( arg ) ;
cachePoolInfoToXml ( arg ) ;
builder . addField ( arg ) . addField ( arg ) . addField ( arg ) . addField ( arg ) ;
CachePoolInfo info = new CachePoolInfo ( arg ) . setOwnerName ( arg ) . setGroupName ( arg ) . setMode ( arg ) . setWeight ( arg ) ;
info . setOwnerName ( arg ) . setGroupName ( arg ) . setMode ( arg ) . setWeight ( arg ) ;
return new BlockReaderLocal ( arg ) ;
this . cachingStrategy . setDropBehind ( arg ) ;
this . cachingStrategy . setReadahead ( arg ) ;
( ( ResourceSchedulerWrapper ) rm . getResourceScheduler ( arg ) ) . addAMRuntime ( arg ) ;
( ( ResourceSchedulerWrapper ) rm . getResourceScheduler ( arg ) ) . addTrackedApp ( arg ) ;
( ( ResourceSchedulerWrapper ) rm . getResourceScheduler ( arg ) ) . removeTrackedApp ( arg ) ;
return d . getInfoAddr ( arg ) ;
return d . getInfoSecureAddr ( arg ) ;
String nodeRemovePath = getNodePath ( arg ) ;
return Sasl . createSaslServer ( arg ) ;
attemptsTableData . append ( arg ) . append ( arg ) . append ( arg ) . append ( arg ) . append ( arg ) . append ( arg ) . append ( arg ) . append ( arg ) . append ( arg ) . append ( arg ) . append ( arg ) . append ( arg ) . append ( arg ) . append ( arg ) . append ( arg ) . append ( arg ) . append ( arg ) . append ( arg ) . append ( arg ) ;
int ttl ;
ttl = Integer . parseInt ( arg ) ;
return new EqualsBuilder ( arg ) . append ( arg ) . append ( arg ) . append ( arg ) . append ( arg ) . append ( arg ) . isEquals ( arg ) ;
return new HashCodeBuilder ( arg ) . append ( arg ) . append ( arg ) . append ( arg ) . append ( arg ) . append ( arg ) . hashCode ( arg ) ;
return info . setOwnerName ( arg ) . setGroupName ( arg ) . setMode ( arg ) . setLimit ( arg ) ;
TableListing . Builder builder = new TableListing . Builder ( arg ) . addField ( arg ) . addField ( arg ) . addField ( arg ) . addField ( arg ) . addField ( arg ) ;
basePolicy = RetryPolicies . FAILOVER_FOREVER ;
basePolicy = new FailoverUptoMaximumTimePolicy ( arg ) ;
return this . amRmTokenSecretManager ;
return this . nmTokenSecretManager ;
rmDTSecretManager . recover ( arg ) ;
throw new RMNotYetActiveException ( arg ) ;
throw new RMNotYetActiveException ( arg ) ;
throw new RMNotYetActiveException ( arg ) ;
throw new RMNotYetActiveException ( arg ) ;
