closeBlockReader ( arg ) ;
closeBlockReader ( arg ) ;
IOUtils . closeSocket ( arg ) ;
IOUtils . closeSocket ( arg ) ;
assertSame ( arg ) ;
peerServer . close ( arg ) ;
Assert . assertSame ( arg ) ;
this . insertBefore ( arg ) ;
this . insertBefore ( arg ) ;
principalClass = com.ibm.security.auth.AIXPrincipal ;
return isCurrentFileDeleted ;
return isCurrentFileDeleted ;
final int c = searchCreatedIndex ( arg ) ;
return status . isOpen ( arg ) ;
return removed ? inodes [ pos ] : null ;
Quota . Counts counts = Quota . Counts . newInstance ( arg ) ;
return counts ;
Quota . Counts counts = Quota . Counts . newInstance ( arg ) ;
TokenCache . setJobToken ( arg ) ;
TokenCache . setJobToken ( arg ) ;
TokenCache . setJobToken ( arg ) ;
Resource resource = Resources . createResource ( arg ) ;
finalOut . write ( arg ) ;
WebServicesTestUtils . checkStringEqual ( arg ) ;
WebServicesTestUtils . checkStringEqual ( arg ) ;
Token < ApplicationTokenIdentifier > appMasterToken = new Token < ApplicationTokenIdentifier > ( arg ) ;
WebServicesTestUtils . checkStringEqual ( arg ) ;
WebServicesTestUtils . checkStringEqual ( arg ) ;
return grayListedTrackers ;
request . setResourceName ( arg ) ;
request . setResourceName ( arg ) ;
allocateRequest = AllocateRequest . newInstance ( arg ) ;
INodeDirectoryWithQuota node = ( INodeDirectoryWithQuota ) inodes [ i ] . asDirectory ( arg ) ;
throw new NMNotYetReadyException ( arg ) ;
throw new InvalidContainerException ( arg ) ;
validatePortVal ( arg ) ;
validatePortVal ( arg ) ;
if ( ! e . getMessage ( arg ) . startsWith ( arg ) ) throw e ;
if ( ! e . getMessage ( arg ) . startsWith ( arg ) ) throw e ;
if ( ! e . getMessage ( arg ) . startsWith ( arg ) ) throw e ;
return jobCredentials ;
ApplicationClientProtocol client ;
Token < AMRMTokenIdentifier > appToken = new Token < AMRMTokenIdentifier > ( arg ) ;
Token < AMRMTokenIdentifier > token = new Token < AMRMTokenIdentifier > ( arg ) ;
Token < AMRMTokenIdentifier > token = new Token < AMRMTokenIdentifier > ( arg ) ;
Token < AMRMTokenIdentifier > token = new Token < AMRMTokenIdentifier > ( arg ) ;
return h ;
this . application = client . createApplication ( arg ) . getApplicationSubmissionContext ( arg ) ;
rootMetrics = FSQueueMetrics . forQueue ( arg ) ;
return ordinal ( arg ) ;
return ordinal ( arg ) ;
return ordinal ( arg ) ;
throw new YarnRuntimeException ( arg ) ;
throw new java . net . ConnectException ( arg ) ;
final Call call = createCall ( arg ) ;
shutDown ( arg ) ;
return h ;
return us ;
long accessTime = status . getAccessTime ( arg ) ;
return h ;
return us ;
return doCall ( arg ) ;
fsImpl . createSymlink ( arg ) ;
return fsImpl . getLinkTarget ( arg ) ;
return fsImpl . supportsSymlinks ( arg ) ;
long accessTime = status . getAccessTime ( arg ) ;
HdfsDataOutputStream fos = null ;
fos = new HdfsDataOutputStream ( arg ) ;
return us ;
return h ;
return h ;
return us ;
server = new HttpServer . Builder ( arg ) . setName ( arg ) . setBindAddress ( arg ) . setPort ( arg ) . setFindPort ( arg ) . build ( arg ) ;
final DatanodeStorageInfo [ ] targets = { val } ;
return client . getFileLinkInfo ( arg ) ;
return xdr . buf . remaining ( arg ) >= len ;
return replyState ;
DatanodeStorageInfo targets [ ] = { val } ;
DatanodeStorageInfo [ ] targets = chooseTarget ( arg ) ;
DatanodeStorageInfo [ ] targets = chooseTarget ( arg ) ;
DatanodeStorageInfo [ ] targets = replicator . chooseTarget ( arg ) ;
dnId . setDatanodeUuid ( arg ) ;
node . setDatanodeUuid ( arg ) ;
node . setDatanodeUuid ( arg ) ;
if ( o instanceof OffsetRange ) {
Preconditions . checkState ( arg ) ;
WebAppUtil . setJHSWebAppURLWithoutScheme ( arg ) ;
WebAppUtils . setRMWebAppHostnameAndPort ( arg ) ;
writeCtx . writeData ( arg ) ;
byte [ ] rawData = new byte [ count ] ;
return cacheManager . getCachedBlocks ( arg ) ;
StorageBlockReport [ ] report = getBlockReports ( arg ) ;
StorageBlockReport [ ] report = getBlockReports ( arg ) ;
StorageBlockReport [ ] report = getBlockReports ( arg ) ;
return h ;
return node . getNodeManagerVersion ( arg ) ;
return getHost ( arg ) . equals ( arg ) && getPath ( arg ) . equals ( arg ) ;
INodeFile file = mockFileUnderConstruction ( arg ) ;
INodeFile file = mockFileUnderConstruction ( arg ) ;
INodeFile file = mockFileUnderConstruction ( arg ) ;
INodeFile file = mockFileUnderConstruction ( arg ) ;
INodeFile file = mockFileUnderConstruction ( arg ) ;
return directive ;
info = iter . next ( arg ) . getInfo ( arg ) ;
info = it . next ( arg ) . getInfo ( arg ) ;
int port = server . getConnectorAddress ( arg ) . getPort ( arg ) ;
LOG . info ( Namenode trash configuration: Deletion interval =  + ( this . deletionInterval
final List < Map < DatanodeStorage , BlockListAsLongs >> result = new ArrayList < Map < DatanodeStorage , BlockListAsLongs >> ( arg ) ;
LOG . trace ( arg ) ;
doRescan . await ( arg ) ;
FSImageSerialization . writeCachePoolInfo ( arg ) ;
FSImageSerialization . writeCachePoolInfo ( arg ) ;
return this . getRMContext ( arg ) . getClientToAMTokenSecretManager ( arg ) ;
