( ( DFSOutputStream ) ( out . getWrappedStream ( arg ) ) ) . hflush ( arg ) ;
( ( DistributedFileSystem ) fs ) . dfs . leaserenewer . interruptAndJoin ( arg ) ;
( ( FSVolume ) volume ) . shutdown ( arg ) ;
( ( JobConf ) conf ) . <unk> ( arg ) ;
( ( Log4JLogger ) FSNamesystem . LOG ) . getLogger ( arg ) . setLevel ( arg ) ;
( ( Log4JLogger ) FSNamesystem . LOG ) . getLogger ( arg ) . setLevel ( arg ) ;
( ( Log4JLogger ) FSNamesystem . LOG ) . getLogger ( arg ) . setLevel ( arg ) ;
( ( Log4JLogger ) Server . auditLOG ) . getLogger ( arg ) . setLevel ( arg ) ;
++ applications ;
++ task . numberUncompletedAttempts ;
<unk> applications ;
@ SuppressWarnings ( arg ) EventHandler < Event > <unk> = ( EventHandler < Event > ) <unk> . get ( arg ) ;
@ SuppressWarnings ( arg ) FSCounter c = ( FSCounter ) counter ;
@ SuppressWarnings ( arg ) TaskAttemptContext taskContext = new TaskAttemptContextImpl ( arg ) ;
@ SuppressWarnings ( arg ) final Map < String , Object > m = ( Map < String , Object > ) array [ i ] ;
@ SuppressWarnings ( arg ) final RoundRobinVolumesPolicy < FSVolumeInterface > policy = ( RoundRobinVolumesPolicy < FSVolumeInterface > ) ReflectionUtils . newInstance ( arg ) ;
@ SuppressWarnings ( arg ) final boolean b = np . rename ( arg ) ;
AMInfo amInfo = new AMInfo ( arg ) ;
<unk> <unk> = mock ( arg ) ;
AMRMProtocol rmClient = createRMClient ( arg ) ;
AMRMProtocol rmClient = createRMClient ( arg ) ;
<unk> <unk> = new <unk> ( arg ) ;
ApplicationAttemptId applicationAttemptId = container . getId ( arg ) . getAppAttemptId ( arg ) ;
ApplicationAttemptId applicationAttemptId = container . getId ( arg ) . getAppAttemptId ( arg ) ;
ApplicationAttemptId applicationAttemptId = containerId . getAppAttemptId ( arg ) ;
ApplicationAttemptId applicationAttemptId = containerId . getAppAttemptId ( arg ) ;
ApplicationAttemptId reservedApplication = <unk> . getContainer ( arg ) . getId ( arg ) . getAppAttemptId ( arg ) ;
ApplicationId appID = <unk> ( arg ) ;
ApplicationId appId = getAppId ( arg ) ;
ApplicationId <unk> = <unk> . getAppId ( arg ) ;
ApplicationId applicationId = <unk> . getContainerId ( arg ) . getAppId ( arg ) ;
ApplicationId applicationId = cs . getContainerId ( arg ) . getAppId ( arg ) ;
<unk> applicationReport = <unk> ( arg ) ;
ApplicationState state = ApplicationState . RUNNING ;
ApplicationState state = ApplicationState . valueOf ( arg ) ;
<unk> <unk> = mock ( arg ) ;
ApplicationTokenIdentifier identifier = new ApplicationTokenIdentifier ( arg ) ;
ApplicationTokenIdentifier identifier = new ApplicationTokenIdentifier ( arg ) ;
Args args = new Args ( arg ) ;
ArrayList < Block > <unk> = new ArrayList < Block > ( arg ) ;
ArrayList < CapacitySchedulerQueueInfo > queuesInfo = new ArrayList < CapacitySchedulerQueueInfo > ( arg ) ;
ArrayList < CapacitySchedulerQueueInfo > subQueues = ( csqinfo . qinfo == null ) ? csqinfo . <unk> . getSubQueues ( arg ) : csqinfo . qinfo . getSubQueues ( arg ) ;
ArrayList < DatanodeDescriptor > decommissioning = fsn . getDecommissioningNodes ( arg ) ;
ArrayList < DatanodeDescriptor > decommissioning = nn . getNamesystem ( arg ) . getDecommissioningNodes ( arg ) ;
ArrayList < DatanodeDescriptor > <unk> = fsn . getDecommissioningNodes ( arg ) ;
ArrayList < DatanodeDescriptor > results = getDatanodeListForReport ( arg ) ;
ArrayList < DatanodeDescriptor > results = getDatanodeListForReport ( arg ) ;
ArrayList < ScanInfoPerBlockPool > dirReports = new ArrayList < ScanInfoPerBlockPool > ( arg ) ;
Assert . assertEquals ( arg ) ;
Assert . assertEquals ( arg ) ;
Assert . assertEquals ( arg ) ;
Assert . assertEquals ( arg ) ;
Assert . assertEquals ( arg ) ;
Assert . assertEquals ( arg ) ;
Assert . assertEquals ( arg ) ;
Assert . assertEquals ( arg ) ;
Assert . assertEquals ( arg ) ;
Assert . assertEquals ( arg ) ;
Assert . assertEquals ( arg ) ;
Assert . assertEquals ( arg ) ;
Assert . assertEquals ( arg ) ;
Assert . assertEquals ( arg ) ;
Assert . assertEquals ( arg ) ;
Assert . assertEquals ( arg ) ;
Assert . assertEquals ( arg ) ;
Assert . assertEquals ( arg ) ;
Assert . assertEquals ( arg ) ;
Assert . assertEquals ( arg ) ;
Assert . assertEquals ( arg ) ;
Assert . assertEquals ( arg ) ;
Assert . assertEquals ( arg ) ;
Assert . assertEquals ( arg ) ;
Assert . assertEquals ( arg ) ;
Assert . assertEquals ( arg ) ;
Assert . assertEquals ( arg ) ;
Assert . assertEquals ( arg ) ;
Assert . assertEquals ( arg ) ;
Assert . assertEquals ( arg ) ;
Assert . assertEquals ( arg ) ;
Assert . assertEquals ( arg ) ;
Assert . assertEquals ( arg ) ;
Assert . assertEquals ( arg ) ;
Assert . assertEquals ( arg ) ;
Assert . assertEquals ( arg ) ;
Assert . assertEquals ( arg ) ;
Assert . assertEquals ( arg ) ;
Assert . assertEquals ( arg ) ;
Assert . assertEquals ( arg ) ;
Assert . assertEquals ( arg ) ;
Assert . assertEquals ( arg ) ;
Assert . assertEquals ( arg ) ;
Assert . assertEquals ( arg ) ;
Assert . assertEquals ( arg ) ;
Assert . assertEquals ( arg ) ;
Assert . assertEquals ( arg ) ;
Assert . assertEquals ( arg ) ;
Assert . assertEquals ( arg ) ;
Assert . assertEquals ( arg ) ;
Assert . assertEquals ( arg ) ;
Assert . assertEquals ( arg ) ;
Assert . assertEquals ( arg ) ;
Assert . assertEquals ( arg ) ;
Assert . assertEquals ( arg ) ;
Assert . assertEquals ( arg ) ;
Assert . assertEquals ( arg ) ;
Assert . assertEquals ( arg ) ;
Assert . assertEquals ( arg ) ;
Assert . assertEquals ( arg ) ;
Assert . assertEquals ( arg ) ;
Assert . assertEquals ( arg ) ;
Assert . assertEquals ( arg ) ;
Assert . assertEquals ( arg ) ;
Assert . assertEquals ( arg ) ;
Assert . assertEquals ( arg ) ;
Assert . assertEquals ( arg ) ;
Assert . assertEquals ( arg ) ;
Assert . assertEquals ( arg ) ;
Assert . assertEquals ( arg ) ;
Assert . assertEquals ( arg ) ;
Assert . assertEquals ( arg ) ;
Assert . assertEquals ( arg ) ;
Assert . assertEquals ( arg ) ;
Assert . assertFalse ( arg ) ;
Assert . assertFalse ( arg ) ;
Assert . assertFalse ( arg ) ;
Assert . assertFalse ( arg ) ;
Assert . assertFalse ( arg ) ;
Assert . assertFalse ( arg ) ;
Assert . assertFalse ( arg ) ;
Assert . assertNotNull ( arg ) ;
Assert . assertNotNull ( arg ) ;
Assert . assertNotNull ( arg ) ;
Assert . assertNotNull ( arg ) ;
Assert . assertNotNull ( arg ) ;
Assert . assertNotNull ( arg ) ;
Assert . assertNotNull ( arg ) ;
Assert . assertNotNull ( arg ) ;
Assert . assertNotNull ( arg ) ;
Assert . assertNotNull ( arg ) ;
Assert . assertNotNull ( arg ) ;
Assert . assertNotNull ( arg ) ;
Assert . assertNotNull ( arg ) ;
Assert . assertNotNull ( arg ) ;
Assert . assertNotNull ( arg ) ;
Assert . assertNotNull ( arg ) ;
Assert . assertNotNull ( arg ) ;
Assert . <unk> ( arg ) ;
Assert . assertNull ( arg ) ;
Assert . assertTrue ( arg ) ;
Assert . assertTrue ( arg ) ;
Assert . assertTrue ( arg ) ;
Assert . assertTrue ( arg ) ;
Assert . assertTrue ( arg ) ;
Assert . assertTrue ( arg ) ;
Assert . assertTrue ( arg ) ;
Assert . assertTrue ( arg ) ;
Assert . assertTrue ( arg ) ;
Assert . assertTrue ( arg ) ;
Assert . assertTrue ( arg ) ;
Assert . assertTrue ( arg ) ;
Assert . assertTrue ( arg ) ;
Assert . assertTrue ( arg ) ;
Assert . assertTrue ( arg ) ;
Assert . assertTrue ( arg ) ;
Assert . assertTrue ( arg ) ;
Assert . assertTrue ( arg ) ;
Assert . assertTrue ( arg ) ;
Assert . assertTrue ( arg ) ;
Assert . assertTrue ( arg ) ;
Assert . fail ( arg ) ;
Assert . fail ( arg ) ;
Assert . fail ( arg ) ;
Assert . fail ( arg ) ;
Assert . fail ( arg ) ;
Assert . fail ( arg ) ;
Assert . fail ( arg ) ;
Assert . fail ( arg ) ;
Assert . fail ( arg ) ;
Assert . fail ( arg ) ;
Assert . fail ( arg ) ;
Assert . fail ( arg ) ;
Assert . fail ( arg ) ;
Assert . fail ( arg ) ;
Assert . fail ( arg ) ;
Assert . fail ( arg ) ;
Assert . fail ( arg ) ;
Assert . fail ( arg ) ;
Assert . fail ( arg ) ;
Assert . fail ( arg ) ;
Assert . fail ( arg ) ;
Assert . fail ( arg ) ;
Assert . fail ( arg ) ;
Assert . fail ( arg ) ;
Assert . fail ( arg ) ;
Assert . fail ( arg ) ;
Assert . fail ( arg ) ;
Assert . fail ( arg ) ;
Assert . fail ( arg ) ;
Assert . fail ( arg ) ;
Assert . fail ( arg ) ;
Assert . fail ( arg ) ;
Assert . fail ( arg ) ;
Assert . fail ( arg ) ;
AsyncDispatcher dispatcher = new AsyncDispatcher ( arg ) ;
BPOfferService [ ] <unk> = dn . <unk> ( arg ) ;
BPOfferService bpos = new DataNode . BPOfferService ( arg ) ;
<unk> <unk> = backup . <unk> ( arg ) ;
Block b = datanode . data . getStoredBlock ( arg ) ;
<unk> fileINode = blocksMap . getINode ( arg ) ;
BlockInfo [ ] <unk> = fileINode . getBlocks ( arg ) ;
BlockInfo <unk> = fileINode . getBlocks ( arg ) [ <unk> ] ;
BlockInfo info = getBlockManager ( arg ) . addINode ( arg ) ;
BlockInfo lastBlock = fileINode . <unk> ( arg ) ;
BlockIterator blkIterator = blockManager . getCorruptReplicaBlockIterator ( arg ) ;
BlockIterator blkIterator = blockManager . getCorruptReplicaBlockIterator ( arg ) ;
<unk> <unk> = data . <unk> ( arg ) ;
<unk> [ ] locations = fs . getFileBlockLocations ( arg ) ;
BlockReader blockReader = <unk> . newBlockReader ( arg ) ;
BlockReader reader = BlockReader . newBlockReader ( arg ) ;
BlockReader reader = spy ( arg ) ;
BlockReader reader = spy ( arg ) ;
BlockReader reader = spy ( arg ) ;
BlockReceivedAndDeletedRequestProto . Builder builder = BlockReceivedAndDeletedRequestProto . newBuilder ( arg ) . setRegistration ( arg ) . setBlockPoolId ( arg ) ;
BlockReceivedAndDeletedRequestProto req = builder . build ( arg ) ;
BlockReportRequestProto . Builder builder = BlockReportRequestProto . newBuilder ( arg ) . setRegistration ( arg ) . setBlockPoolId ( arg ) ;
BlockReportRequestProto req = builder . build ( arg ) ;
BlockWriteStreams out = <unk> . <unk> ( arg ) ;
BlockWriteStreams streams = null ;
BookKeeperJournalManager bkjm = new BookKeeperJournalManager ( arg ) ;
BookKeeperJournalManager bkjm = new BookKeeperJournalManager ( arg ) ;
BookKeeperJournalManager bkjm = new BookKeeperJournalManager ( arg ) ;
BookKeeperJournalManager bkjm = new BookKeeperJournalManager ( arg ) ;
BookKeeperJournalManager bkjm = new BookKeeperJournalManager ( arg ) ;
BookKeeperJournalManager bkjm = new BookKeeperJournalManager ( arg ) ;
BookKeeperJournalManager bkjm = new BookKeeperJournalManager ( arg ) ;
BookKeeperJournalManager bkjm = new BookKeeperJournalManager ( arg ) ;
BookKeeperJournalManager bkjm = new BookKeeperJournalManager ( arg ) ;
BookieServer bookieToFail = bkutil . newBookie ( arg ) ;
BookieServer bookieToFail = bkutil . newBookie ( arg ) ;
BookieServer bookieToFail = newBookie ( arg ) ;
BookieServer bookieToFail = newBookie ( arg ) ;
BookieServer bookieToFail = newBookie ( arg ) ;
BookieServer bookieToFail = newBookie ( arg ) ;
BufferedReader reader = new BufferedReader ( arg ) ;
ByteBuffer <unk> = ByteBuffer . allocate ( arg ) ;
ByteBuffer <unk> = ByteBuffer . wrap ( arg ) ;
ByteRangeInputStream <unk> = new ByteRangeInputStream ( arg ) ;
Call call = calls . get ( arg ) ;
Call call = calls . remove ( arg ) ;
Call call = calls . remove ( arg ) ;
<unk> <unk> = <unk> . write ( arg ) ;
<unk> <unk> = nn . rollEditLog ( arg ) ;
ChecksumType type = ChecksumType . valueOf ( arg ) ;
ChecksumType type = checksumTypeMap . get ( arg ) ;
ChecksumTypeProto type = ChecksumTypeProto . valueOf ( arg ) ;
Class < ? > clazz = conf . getClass ( arg ) ;
Class < ? > test = <unk> . getClass ( arg ) ;
Class clazz = Class . forName ( arg ) ;
Class clazz = Class . forName ( arg ) ;
Class clazz = Class . forName ( arg ) ;
Class clazz = map . get ( arg ) ;
Class <unk> = Thread . <unk> ( arg ) . <unk> ( arg ) . loadClass ( arg ) ;
<unk> <unk> = RPC . getProxy ( arg ) ;
ClientNamenodeProtocolTranslatorPB translator = new ClientNamenodeProtocolTranslatorPB ( arg ) ;
<unk> client = getDFSClient ( arg ) ;
ClientProtocol namenode = DFSClient . createNamenode ( arg ) ;
ClientProtocol namenode = DFSUtil . createNamenode ( arg ) ;
ClientProtocol nn = DFSUtil . createNamenode ( arg ) ;
ClientRMProtocol applicationsManager = Mockito . mock ( arg ) ;
ClientRMProtocol applicationsManager = Mockito . mock ( arg ) ;
ClientRMProtocol <unk> = mock ( arg ) ;
<unk> <unk> = null ;
Cluster cluster = new Cluster ( arg ) ;
ClusterMetrics . getMetrics ( arg ) . <unk> ( arg ) ;
ClusterMetrics . getMetrics ( arg ) . <unk> ( arg ) ;
<unk> <unk> = item . getStatus ( arg ) ;
Collection < Block > blocks = namesystem . blockManager . excessReplicateMap . get ( arg ) ;
Collection < Block > <unk> = excessReplicateMap . get ( arg ) ;
Collection < Block > excessBlocks = excessReplicateMap . get ( arg ) ;
Collection < Block > excessBlocks = excessReplicateMap . get ( arg ) ;
Collection < Block > set = node2blocks . get ( arg ) ;
Collection < BlockInfo > <unk> = new <unk> < BlockInfo > ( arg ) ;
Collection < FSQueue > queues = scheduler . getQueueManager ( arg ) . getQueues ( arg ) ;
Collection < FSQueue > queues = scheduler . getQueueManager ( arg ) . getQueues ( arg ) ;
Collection < FSQueue > queues = scheduler . getQueueManager ( arg ) . getQueues ( arg ) ;
Collection < FSQueue > queues = scheduler . getQueueManager ( arg ) . getQueues ( arg ) ;
Collection < String > <unk> = conf . getStringCollection ( arg ) ;
Collection < String > dirNames = conf . getStringCollection ( arg ) ;
Collection < String > dirNames = conf . getStringCollection ( arg ) ;
Collection < String > <unk> = Collections . emptyList ( arg ) ;
Collection < String > <unk> = conf . getStringCollection ( arg ) ;
Collection < Token < ? extends <unk> >> tokens = <unk> . <unk> ( arg ) ;
Collection < URI > <unk> = FSImage . <unk> ( arg ) ;
Collection < URI > <unk> = FSNamesystem . getNamespaceEditsDirs ( arg ) ;
Collection < URI > editsToFormat = FSNamesystem . getNamespaceEditsDirs ( arg ) ;
Collection < URI > editsToFormat = new ArrayList < URI > ( arg ) ;
Collection < URI > namenodes = DFSUtil . getNsServiceRpcUris ( arg ) ;
Collection < URI > <unk> = FSNamesystem . getNamespaceEditsDirs ( arg ) ;
Collection < URI > <unk> = new ArrayList < URI > ( arg ) ;
<unk> < DatanodeInfo > <unk> = <unk> ? new DFSUtil . <unk> ( arg ) : DFSUtil . <unk> ;
CompressionEmulationUtil . <unk> ( arg ) ;
ConfigBuilder <unk> = new ConfigBuilder ( arg ) . add ( arg ) . add ( arg ) . add ( arg ) . add ( arg ) . add ( arg ) . add ( arg ) . save ( arg ) ;
Configuration <unk> = cluster . getConf ( arg ) ;
Configuration conf = HttpFSServerWebApp . get ( arg ) . get ( arg ) . getDefaultConfiguration ( arg ) ;
Configuration conf = HttpFSServerWebApp . get ( arg ) . get ( arg ) . getDefaultConfiguration ( arg ) ;
Configuration conf = ViewFileSystemTestSetup . configWithViewfsScheme ( arg ) ;
Configuration conf = new Configuration ( arg ) ;
Configuration conf = new Configuration ( arg ) ;
Configuration conf = new Configuration ( arg ) ;
Configuration conf = new Configuration ( arg ) ;
Configuration conf = new Configuration ( arg ) ;
Configuration conf = new Configuration ( arg ) ;
Configuration conf = new Configuration ( arg ) ;
Configuration conf = new Configuration ( arg ) ;
Configuration conf = new Configuration ( arg ) ;
Configuration conf = new HdfsConfiguration ( arg ) ;
Configuration <unk> = new Configuration ( arg ) ;
Configuration job = mr . createJobConf ( arg ) ;
<unk> <unk> = Mockito . mock ( arg ) ;
<unk> cId = recordFactory . newRecordInstance ( arg ) ;
ContainerManager proxy = getCMProxy ( arg ) ;
ContainerManager proxy = getCMProxy ( arg ) ;
<unk> containerManager = createContainerManager ( arg ) ;
ContainerTokenSecretManager containerTokenSecretManager = new ContainerTokenSecretManager ( arg ) ;
ContentSummary c = s . isDir ( arg ) ? getContentSummary ( arg ) : new ContentSummary ( arg ) ;
ContentSummary c = s . isDir ( arg ) ? getContentSummary ( arg ) : new ContentSummary ( arg ) ;
<unk> context = new NMContext ( arg ) ;
Counter c = group . getCounter ( arg ) ;
Counter c = group . getCounter ( arg ) ;
Counter <unk> = counters . getCounter ( arg ) ;
Counter <unk> = counters . <unk> ( arg ) ;
Counter <unk> = counters . getCounter ( arg ) ;
Counter <unk> = counters . getCounter ( arg ) ;
CounterGroup group = ( counters != null ) ? counters . getCounterGroup ( arg ) : null ;
CounterGroup group = entry . getValue ( arg ) . getCounters ( arg ) . getCounterGroup ( arg ) ;
CounterGroup group = new CounterGroup ( arg ) ;
Counters counters = JobImpl . newCounters ( arg ) ;
Counters counters = recordFactory . newRecordInstance ( arg ) ;
DFSClient . DFSDataInputStream <unk> = ( DFSClient . DFSDataInputStream ) in ;
DFSClient . DFSDataInputStream <unk> = ( DFSClient . DFSDataInputStream ) <unk> ;
DFSClient . DFSDataInputStream dis = ( DFSClient . DFSDataInputStream ) ( ( DistributedFileSystem ) <unk> ) . open ( arg ) ;
DFSClient client = dfsclient ;
DFSClient dfsclient = ( ( DistributedFileSystem ) fs ) . getClient ( arg ) ;
DFSDataInputStream <unk> = dis ;
DFSDataInputStream in = ( DFSDataInputStream ) ( ( DistributedFileSystem ) fs ) . open ( arg ) ;
DFSDataInputStream in = null ;
DFSDataInputStream stm = ( DFSDataInputStream ) fs . open ( arg ) ;
DFSTestUtil files = new DFSTestUtil ( arg ) ;
DFSTestUtil files = new DFSTestUtil ( arg ) ;
DFSTestUtil util = new DFSTestUtil ( arg ) ;
DFSTestUtil util = new DFSTestUtil ( arg ) ;
DFSTestUtil util = new DFSTestUtil ( arg ) ;
DFSTestUtil util = new DFSTestUtil ( arg ) ;
DFSTestUtil util = new DFSTestUtil ( arg ) ;
DFSTestUtil util = new DFSTestUtil ( arg ) ;
DFSTestUtil <unk> = new DFSTestUtil ( arg ) ;
DFSTestUtil <unk> = new DFSTestUtil ( arg ) ;
<unk> . addRenewAction ( arg ) ;
DataChecksum . Type type = DataChecksum . Type . valueOf ( arg ) ;
DataInputStream in = fs . open ( arg ) ;
DataNodeAdapter . setHeartbeatsDisabledForTests ( arg ) ;
DataNodeAdapter . setHeartbeatsDisabledForTests ( arg ) ;
DataNodeAdapter . <unk> ( arg ) ;
DataNodeAdapter . triggerDeletionReport ( arg ) ;
DataNodeAdapter . triggerDeletionReport ( arg ) ;
DataNodeAdapter . <unk> ( arg ) ;
DataOutputStream <unk> = writer . <unk> ( arg ) ;
DataOutputStream <unk> = new DataOutputStream ( arg ) ;
<unk> storage = null ;
<unk> . Sender . opWriteBlock ( arg ) ;
DataXceiverServer <unk> = ( DataXceiverServer ) <unk> . <unk> ( arg ) ;
DatanodeCommand [ ] cmd = dnp . sendHeartbeat ( arg ) ;
DatanodeCommand [ ] cmds ;
DatanodeCommand [ ] cmds = NameNodeAdapter . sendHeartBeat ( arg ) ;
DatanodeCommand [ ] cmds = nameNode . sendHeartbeat ( arg ) ;
DatanodeCommand [ ] cmds = nameNode . sendHeartbeat ( arg ) ;
DatanodeCommand [ ] cmds = nameNodeProto . sendHeartbeat ( arg ) ;
DatanodeCommand [ ] cmds = nameNodeProto . sendHeartbeat ( arg ) ;
DatanodeCommand [ ] cmds = sendHeartBeat ( arg ) ;
DatanodeCommand cmd ;
DatanodeCommand cmd ;
DatanodeCommand cmd = <unk> ( arg ) ;
DatanodeCommand <unk> = cluster . getNameNode ( arg ) . blockReport ( arg ) ;
DatanodeDescriptor [ ] nodes = namesystem . <unk> . toArray ( arg ) ;
DatanodeDescriptor client = <unk> . getDatanodeByHost ( arg ) ;
DatanodeDescriptor cur = null ;
DatanodeDescriptor dd = new DatanodeDescriptor ( arg ) ;
DatanodeDescriptor dd = new DatanodeDescriptor ( arg ) ;
DatanodeDescriptor dd = new DatanodeDescriptor ( arg ) ;
DatanodeDescriptor node = getDatanode ( arg ) ;
DatanodeDescriptor node = getDatanode ( arg ) ;
DatanodeDescriptor node = namesystem . getDatanode ( arg ) ;
DatanodeDescriptor <unk> = getDatanode ( arg ) ;
DatanodeDescriptor <unk> = getDatanodeByHost ( arg ) ;
DatanodeDescriptor nodeNotInMap = new DatanodeDescriptor ( arg ) ;
DatanodeDescriptor nodeNotInMap = new DatanodeDescriptor ( arg ) ;
DatanodeDescriptor nodeNotInMap = new DatanodeDescriptor ( arg ) ;
DatanodeDescriptor <unk> = namesystem . datanodeMap . get ( arg ) ;
DatanodeDescriptor <unk> = new DatanodeDescriptor ( arg ) ;
DatanodeDescriptor targets [ ] = replicator . chooseTarget ( arg ) ;
DatanodeDescriptor <unk> = new DatanodeDescriptor ( arg ) ;
DatanodeID dn = new DatanodeID ( arg ) ;
DatanodeID dnId = new DatanodeID ( arg ) ;
DatanodeID fakeDnId = new DatanodeID ( arg ) ;
DatanodeID fakeDnId = new DatanodeID ( arg ) ;
DatanodeID fakeDnId = new DatanodeID ( arg ) ;
DatanodeInfo d = new DatanodeInfo ( arg ) ;
DatanodeInfo <unk> = new DatanodeInfo ( arg ) ;
DatanodeProtocol <unk> = dn . getBPNamenode ( arg ) ;
DatanodeProtocol dnp = cluster . getNameNode ( arg ) ;
DatanodeProtocol fakeDNProt = mock ( arg ) ;
DatanodeProtocol fakeDNProt = mock ( arg ) ;
DatanodeProtocol mock = Mockito . mock ( arg ) ;
DatanodeProtocol namenode = dn . getBPNamenode ( arg ) ;
DatanodeProtocol namenode = dn . getBPNamenode ( arg ) ;
DatanodeProtocol nn = bpos . bpNamenode ;
DatanodeProtocol nn = getBPNamenode ( arg ) ;
DatanodeProtocolClientSideTranslatorPB <unk> = DataNodeAdapter . spyOnBposToNN ( arg ) ;
DatanodeProtocolClientSideTranslatorPB spy = DataNodeAdapter . spyOnBposToNN ( arg ) ;
DatanodeProtocolClientSideTranslatorPB spy = DataNodeAdapter . spyOnBposToNN ( arg ) ;
<unk> <unk> = dn . <unk> ( arg ) ;
DelayAnswer delayer = new DelayAnswer ( arg ) ;
DelayAnswer delayer = new DelayAnswer ( arg ) ;
<unk> . renewDelegationToken ( arg ) ;
<unk> dtSecretManager = dfsCluster . getNamesystem ( arg ) . getDelegationTokenSecretManager ( arg ) ;
<unk> < T > deserializer = factory . getDeserializer ( arg ) ;
<unk> < T > deserializer = factory . getDeserializer ( arg ) ;
<unk> rmDispatcher = new AsyncDispatcher ( arg ) ;
DistCp . copy ( arg ) ;
DistributedFileSystem dfs = ( DistributedFileSystem ) cluster . getFileSystem ( arg ) ;
DistributedFileSystem fs = ( DistributedFileSystem ) cluster . getFileSystem ( arg ) ;
ENGINE . stopProxy ( arg ) ;
EditLogInputStream <unk> = <unk> . <unk> ( arg ) ;
<unk> <unk> = <unk> . <unk> ( arg ) ;
EditLogValidation val = FSEditLogLoader . validateEditLog ( arg ) ;
EditLogValidation validation = FSEditLogLoader . validateEditLog ( arg ) ;
EditLogValidation validation = FSEditLogLoader . validateEditLog ( arg ) ;
Entry < SocketAddress , Socket > entry = iter . next ( arg ) ;
Enumeration e = netIF . <unk> ( arg ) ;
Enumeration names = <unk> . <unk> ( arg ) ;
ErrorReportRequestProto req = ErrorReportRequestProto . newBuilder ( arg ) . <unk> ( arg ) . setMsg ( arg ) . setRegistartion ( arg ) . build ( arg ) ;
ErrorSimulator . clearErrorSimulation ( arg ) ;
ErrorSimulator . clearErrorSimulation ( arg ) ;
ErrorSimulator . clearErrorSimulation ( arg ) ;
ErrorSimulator . clearErrorSimulation ( arg ) ;
ErrorSimulator . setErrorSimulation ( arg ) ;
ErrorSimulator . setErrorSimulation ( arg ) ;
ErrorSimulator . setErrorSimulation ( arg ) ;
EventHandler <unk> = dispatcher . getEventHandler ( arg ) ;
ExportedBlockKeys keys = bpRegistration . exportedKeys ;
ExtendedBlock b ;
ExtendedBlock block = ( ExtendedBlock ) args [ 0 ] ;
FSConstants . SafeModeAction action ;
FSCounter c = ( FSCounter ) counter ;
FSDataOutputStream dataOut = fs . create ( arg ) ;
FSDataOutputStream out = <unk> . createFile ( arg ) ;
FSDataOutputStream out = fs . create ( arg ) ;
FSDataOutputStream out = fs . create ( arg ) ;
FSDataOutputStream stm = createFile ( arg ) ;
FSDataset . BlockInputStreams <unk> = null ;
FSDataset <unk> = ( FSDataset ) datanodes . get ( arg ) . getFSDataset ( arg ) ;
FSDatasetInterface . Factory < ? > f = FSDatasetInterface . Factory . getFactory ( arg ) ;
FSDatasetInterface . Factory < ? > f = FSDatasetInterface . Factory . getFactory ( arg ) ;
FSDatasetInterface . Factory < ? > s = FSDatasetInterface . Factory . getFactory ( arg ) ;
FSDatasetInterface . Factory < ? > s = FSDatasetInterface . Factory . getFactory ( arg ) ;
FSDatasetInterface . Factory f = FSDatasetInterface . Factory . getFactory ( arg ) ;
FSDatasetInterface . Factory s = FSDatasetInterface . Factory . getFactory ( arg ) ;
FSDatasetInterface < ? > dataset = DataNodeTestUtils . getFSDataset ( arg ) ;
FSDatasetInterface < ? > dataset = DataNodeTestUtils . getFSDataset ( arg ) ;
FSDatasetInterface fsdataset = getSimulatedFSDataset ( arg ) ;
FSDatasetInterface fsdataset = getSimulatedFSDataset ( arg ) ;
FSDatasetInterface fsdataset = getSimulatedFSDataset ( arg ) ;
FSDatasetInterface fsdataset = getSimulatedFSDataset ( arg ) ;
FSDatasetInterface fsdataset = getSimulatedFSDataset ( arg ) ;
FSDatasetInterface fsdataset = getSimulatedFSDataset ( arg ) ;
FSEditLog . JournalAndStream jas = editLog . getJournals ( arg ) . get ( arg ) ;
FSEditLog . JournalAndStream jas = editLog . getJournals ( arg ) . get ( arg ) ;
FSEditLog editlog = new FSEditLog ( arg ) ;
FSEditLog editlog = new FSEditLog ( arg ) ;
FSEditLog editlog = new FSEditLog ( arg ) ;
FSEditLogOp op = FSEditLogOp . <unk> ( arg ) ;
FSEditLogOp op = <unk> . get ( arg ) ;
FSImage . LOG . debug ( arg ) ;
FSNamesystem . LOG . error ( arg ) ;
FSNamesystem . LOG . info ( arg ) ;
FSNamesystem . LOG . warn ( arg ) ;
FSNamesystem . LOG . warn ( arg ) ;
FSNamesystem . LOG . warn ( arg ) ;
FSNamesystem . LOG . warn ( arg ) ;
FSNamesystem fsn = new FSNamesystem ( arg ) ;
FSNamesystem fsn = new FSNamesystem ( arg ) ;
FSNamesystem fsn = new FSNamesystem ( arg ) ;
FSNamesystem fsn = new FSNamesystem ( arg ) ;
FSNamesystem fsn = new FSNamesystem ( arg ) ;
FSQueue queue = getQueue ( arg ) ;
FSQueue queue = queueMgr . getQueue ( arg ) ;
<unk> node = this . nodes . get ( arg ) ;
FSVolume fsv = ( FSVolume ) volumeList . get ( arg ) ;
FSVolume fsv = volumeList . get ( arg ) ;
FSVolume v ;
FSVolume v = dataSet . volumeMap . get ( arg ) . getVolume ( arg ) ;
FSVolume v = replicaInfo . getVolume ( arg ) ;
FSVolume v = replicaInfo . getVolume ( arg ) ;
FailoverController . failover ( arg ) ;
FailoverController . failover ( arg ) ;
FailoverController . failover ( arg ) ;
FailoverController . failover ( arg ) ;
FailoverController . failover ( arg ) ;
FailoverController . failover ( arg ) ;
FailoverController . failover ( arg ) ;
FailoverController . failover ( arg ) ;
FailoverController . failover ( arg ) ;
FailoverController . failover ( arg ) ;
FailoverController . failover ( arg ) ;
FailoverController . failover ( arg ) ;
FailoverController . failover ( arg ) ;
FailoverController . failover ( arg ) ;
FailoverController . failover ( arg ) ;
FailoverController . failover ( arg ) ;
FailoverController . failover ( arg ) ;
FailoverController . failover ( arg ) ;
FailoverController . failover ( arg ) ;
FailoverController . failover ( arg ) ;
File blockfile = dataset . findBlockFile ( arg ) ;
File blockfile = findBlockFile ( arg ) ;
File <unk> = volume . getBlockPoolSlice ( arg ) . getFinalizedDir ( arg ) ;
File contents [ ] = src . listFiles ( arg ) ;
File data = new File ( arg ) ;
File <unk> = FSDataset . <unk> ( arg ) ;
File <unk> = fs . getStorage ( arg ) . getStorageFile ( arg ) ;
File <unk> = editLog . <unk> ( arg ) ;
File f = ( File ) args [ 0 ] ;
File f = dataset . getFile ( arg ) ;
File finalizedDir = volumes . get ( arg ) . getBlockPoolSlice ( arg ) . getFinalizedDir ( arg ) ;
File finalizedDir = volumes . get ( arg ) . getBlockPoolSlice ( arg ) . getFinalizedDir ( arg ) ;
File finalizedDir = volumes . get ( arg ) . getBlockPoolSlice ( arg ) . getFinalizedDir ( arg ) ;
File <unk> = fs . getStorage ( arg ) . getStorageFile ( arg ) ;
File metaFile = getMetaFile ( arg ) ;
File metaFile = getMetaFile ( arg ) ;
File metaFile = new File ( arg ) ;
File metafile = <unk> ( arg ) ;
File metafile = getMetaFile ( arg ) ;
File <unk> = new File ( arg ) ;
File storageDir = MiniDFSCluster . getStorageDir ( arg ) ;
File storageDir = MiniDFSCluster . getStorageDir ( arg ) ;
File storageDir = MiniDFSCluster . getStorageDir ( arg ) ;
File storageDir = MiniDFSCluster . getStorageDir ( arg ) ;
File storageDir = MiniDFSCluster . getStorageDir ( arg ) ;
File storageDir = MiniDFSCluster . getStorageDir ( arg ) ;
File storageDir = MiniDFSCluster . getStorageDir ( arg ) ;
File storageDir = MiniDFSCluster . getStorageDir ( arg ) ;
File storageDir = MiniDFSCluster . getStorageDir ( arg ) ;
File storageDir = MiniDFSCluster . getStorageDir ( arg ) ;
File storageDir = MiniDFSCluster . getStorageDir ( arg ) ;
File storageDir = MiniDFSCluster . getStorageDir ( arg ) ;
File <unk> = FSDataset . createTmpFile ( arg ) ;
FileInputStream fis = new FileInputStream ( arg ) ;
FileReader fReader = null ;
FileReader fReader = null ;
FileReader fReader = null ;
FileReader fReader = null ;
FileReader fReader = null ;
FileStatus [ ] contents = FileContext . this . listStatus ( arg ) ;
FileStatus [ ] listing = FileContext . this . listStatus ( arg ) ;
FileStatus [ ] paths = fc . listStatus ( arg ) ;
FileStatus [ ] paths = fc1 . listStatus ( arg ) ;
FileStatus [ ] paths = fs . listStatus ( arg ) ;
FileStatus [ ] <unk> = fs . listStatus ( arg ) ;
FileStatus <unk> [ ] = srcFs . listStatus ( arg ) ;
FileSystem fs = TestDFSClientFailover . configureFailoverFs ( arg ) ;
FileSystem fs = TestDFSClientFailover . configureFailoverFs ( arg ) ;
FileSystem fs = TestDFSClientFailover . configureFailoverFs ( arg ) ;
FileSystem fs = TestDFSClientFailover . configureFailoverFs ( arg ) ;
FileSystem fs = configureFailoverFs ( arg ) ;
FileSystem fs = getFileSystem ( arg ) ;
FileSystem fs = null ;
FileUtil . copy ( arg ) ;
FileUtil . deleteContents ( arg ) ;
FileUtil . deleteContents ( arg ) ;
FileUtil . <unk> ( arg ) ;
FinishApplicationRequest req = Records . newRecord ( arg ) ;
FinishApplicationRequest req = Records . newRecord ( arg ) ;
FinishApplicationRequest request = recordFactory . newRecordInstance ( arg ) ;
FinishApplicationRequest request = recordFactory . newRecordInstance ( arg ) ;
FoundEditLog <unk> = lg . logs . get ( arg ) ;
FoundEditLog <unk> = <unk> . <unk> ( arg ) ;
FoundEditLog <unk> = lg . logs . get ( arg ) ;
FoundEditLog log = FSImageTestUtil . findLatestEditsLog ( arg ) ;
FoundEditLog log = FSImageTestUtil . findLatestEditsLog ( arg ) ;
FoundEditLog log = logs . get ( arg ) ;
FoundFSImage latestImage = inspector . getLatestImage ( arg ) ;
FoundFSImage latestImage = inspector . getLatestImage ( arg ) ;
FoundFSImage latestImage = inspector . getLatestImage ( arg ) ;
FoundFSImage <unk> = <unk> . image ;
FoundFSImage <unk> = getLatestImage ( arg ) ;
<unk> . LOG . info ( arg ) ;
FsDatasetSpi . Factory < ? > f = FsDatasetSpi . Factory . getFactory ( arg ) ;
FsDatasetSpi . Factory < ? > s = FsDatasetSpi . Factory . getFactory ( arg ) ;
FsDatasetSpi < ? > dataset = DataNodeTestUtils . getFSDataset ( arg ) ;
FsPermission fsPermission = getPermission ( arg ) ;
FsPermission fsPermission = getPermission ( arg ) ;
FsPermission fsPermission = getPermission ( arg ) ;
FsPermission permission = FsPermission . <unk> ( arg ) ;
FsShell shell = new FsShell ( arg ) ;
<unk> . <unk> ( arg ) ;
<unk> . <unk> ( arg ) ;
GenericTestUtils . assertExceptionContains ( arg ) ;
GenericTestUtils . assertExceptionContains ( arg ) ;
GetNewApplicationIdResponse resp = client . getNewApplicationId ( arg ) ;
GetNewApplicationIdResponse resp = client . getNewApplicationId ( arg ) ;
GetNewApplicationResponse <unk> = getApplication ( arg ) ;
GetNewApplicationResponse resp = client . <unk> ( arg ) ;
GetUserMappingsProtocolClientSideTranslatorPB translator = ( GetUserMappingsProtocolClientSideTranslatorPB ) NameNodeProxies . createNonHAProxy ( arg ) . getProxy ( arg ) ;
GetUserMappingsProtocolClientSideTranslatorPB translator = new GetUserMappingsProtocolClientSideTranslatorPB ( arg ) ;
GetUserMappingsProtocolPBClientImpl translator = ( GetUserMappingsProtocolPBClientImpl ) NameNodeProxies . createNonHAProxy ( arg ) . getProxy ( arg ) ;
GridmixJobSubmissionPolicy policy = GridmixJobSubmissionPolicy . <unk> ( arg ) ;
HAServiceProtocol proto = getProtocol ( arg ) ;
HAServiceProtocol proto = getProtocol ( arg ) ;
HAServiceProtocol proto = getProtocol ( arg ) ;
HAServiceProtocol proto = getProtocol ( arg ) ;
HAServiceProtocol proto = getProtocol ( arg ) ;
HAServiceProtocol proto = getProtocol ( arg ) ;
HAServiceProtocol proto = getProtocol ( arg ) ;
HAServiceProtocol proto = getProtocol ( arg ) ;
HAServiceProtocol proto = resolveTarget ( arg ) . getProxy ( arg ) ;
HAServiceProtocol proto = resolveTarget ( arg ) . getProxy ( arg ) ;
HAServiceProtocol proto = resolveTarget ( arg ) . getProxy ( arg ) ;
HAServiceProtocol proto = resolveTarget ( arg ) . getProxy ( arg ) ;
HAServiceProtocolHelper . transitionToActive ( arg ) ;
HAServiceProtocolHelper . transitionToStandby ( arg ) ;
HAServiceState state = null ;
HAServiceState toSvcState ;
HadoopRpcRequestProto rpcRequest = <unk> ( arg ) ;
HadoopRpcRequestProto rpcRequest = request . message ;
HdfsConstants . ReplicaState state = r . getState ( arg ) ;
HdfsFileStatus fStatus = cluster . getNameNode ( arg ) . getFileInfo ( arg ) ;
HeartbeatRequestProto req = HeartbeatRequestProto . newBuilder ( arg ) . setRegistration ( arg ) . setCapacity ( arg ) . setCapacity ( arg ) . setRemaining ( arg ) . setBlockPoolUsed ( arg ) . setXmitsInProgress ( arg ) . setXceiverCount ( arg ) . setFailedVolumes ( arg ) . build ( arg ) ;
HeartbeatRequestProto req = HeartbeatRequestProto . newBuilder ( arg ) . setRegistration ( arg ) . setCapacity ( arg ) . setCapacity ( arg ) . setRemaining ( arg ) . setBlockPoolUsed ( arg ) . setXmitsInProgress ( arg ) . setXceiverCount ( arg ) . setFailedVolumes ( arg ) . build ( arg ) ;
HttpServer http = new HttpServer ( arg ) ;
HttpServer http = new HttpServer ( arg ) ;
HttpServer server = createAndStartServer ( arg ) ;
HttpServer server = createAndStartServer ( arg ) ;
HttpServer server = createServer ( arg ) ;
HttpServer server = createServer ( arg ) ;
HttpURLConnection connection = ( HttpURLConnection ) url . openConnection ( arg ) ;
HttpURLConnection connection = ( HttpURLConnection ) url . openConnection ( arg ) ;
HttpURLConnection connection = openConnection ( arg ) ;
INode [ ] inodes = root . getExistingPathINodes ( arg ) ;
INode [ ] inodes = root . getExistingPathINodes ( arg ) ;
INode fileINode = blocksMap . getINode ( arg ) ;
INode fileINode = blocksMap . getINode ( arg ) ;
INode fileINode = blocksMap . getINode ( arg ) ;
INode inode = ( INodeFile ) blockManager . getINode ( arg ) ;
INode inode = blockManager . getINode ( arg ) ;
INode inode = dir . getINode ( arg ) ;
INode node ;
<unk> <unk> = <unk> . <unk> ( arg ) ;
INodeFile fileINode = block . getINode ( arg ) ;
INodeFile fileINode = blocksMap . getINode ( arg ) ;
INodeFile fileINode = blocksMap . getINode ( arg ) ;
INodeFile fileINode = blocksMap . getINode ( arg ) ;
INodeFile fileINode = blocksMap . getINode ( arg ) ;
INodeFile iFile = ( INodeFile ) storedBlock . getINode ( arg ) ;
INodeFile iFile = storedBlock . getINode ( arg ) ;
INodeFile inode = ( INodeFile ) blockManager . blocksMap . getINode ( arg ) ;
INodeFile inode = blockManager . blocksMap . getINode ( arg ) ;
INodeFile inode = dir . getFileINode ( arg ) ;
INodeFileWithLink <unk> = ( INodeFileWithLink ) fsdir . getINode ( arg ) ;
INodeFileWithLink ssInode = ( INodeFileWithLink ) fsdir . getINode ( arg ) ;
INodeFileWithLink ssInode = ( INodeFileWithLink ) fsdir . getINode ( arg ) ;
IOUtils . cleanup ( arg ) ;
IOUtils . cleanup ( arg ) ;
IOUtils . cleanup ( arg ) ;
IOUtils . <unk> ( arg ) ;
IOUtils . <unk> ( arg ) ;
ImageLoader <unk> = ImageLoader . <unk> . <unk> ( arg ) ;
<unk> info = <unk> . <unk> ( arg ) ;
InetAddress <unk> = hostResolver . getByName ( arg ) ;
InetSocketAddress addr = <unk> . getAddress ( arg ) ;
InetSocketAddress addr = <unk> . datanode . getSelfAddr ( arg ) ;
InetSocketAddress address = <unk> . getAddress ( arg ) ;
InetSocketAddress <unk> = new InetSocketAddress ( arg ) ;
InetSocketAddress <unk> = DFSUtil . getSocketAddress ( arg ) ;
InetSocketAddress <unk> = dn . getSelfAddr ( arg ) ;
InetSocketAddress <unk> = NetUtils . createSocketAddr ( arg ) ;
InetSocketAddress rmAddress = NetUtils . createSocketAddr ( arg ) ;
InetSocketAddress rmAddress = NetUtils . createSocketAddr ( arg ) ;
InetSocketAddress socAddr = DataNode . getStreamingAddr ( arg ) ;
InetSocketAddress socAddr = DataNode . getStreamingAddr ( arg ) ;
InetSocketAddress <unk> = datanode . getSelfAddr ( arg ) ;
InputStream in = fs . open ( arg ) ;
InputStream in = new <unk> ( arg ) ;
<unk> reader = null ;
<unk> < EditLogInputStream > <unk> = editlog . selectInputStreams ( arg ) ;
Iterator < DatanodeDescriptor > iter = first . isEmpty ( arg ) ? <unk> . iterator ( arg ) : first . iterator ( arg ) ;
Iterator < DatanodeDescriptor > iter = namesystem . blockManager . blocksMap . <unk> ( arg ) ;
Iterator < Entry < SocketAddress , Socket >> iter = multimap . entries ( arg ) . iterator ( arg ) ;
Iterator < FileStatus > list = <unk> ( arg ) ;
Iterator < FileStatus > <unk> = fc . listStatus ( arg ) ;
Iterator < FileStatus > <unk> = fc1 . listStatus ( arg ) ;
Iterator < FileStatus > statsItor = fc . listStatus ( arg ) ;
Iterator < FileStatus > statsItor = fc . listStatus ( arg ) ;
Iterator < FileStatus > <unk> = FileContext . this . listStatus ( arg ) ;
Iterator < LocatedFileStatus > itor = fs . listFiles ( arg ) ;
Iterator < LocatedFileStatus > itor = fs . listFiles ( arg ) ;
Iterator < Map . Entry < TaskAttemptId , Long >> iterator = <unk> . <unk> ( arg ) . iterator ( arg ) ;
Iterator < STATE > iter = <unk> . <unk> . iterator ( arg ) ;
Iterator < Socket > iter = socklist . iterator ( arg ) ;
Iterator < <unk> > iter = socklist . iterator ( arg ) ;
Iterator < String > keyIter = env . keySet ( arg ) . iterator ( arg ) ;
JSONArray arr = info . getJSONArray ( arg ) ;
JSONArray arr = info . getJSONArray ( arg ) ;
Job <unk> = cluster . getJob ( arg ) ;
Job job = cluster . getJob ( arg ) ;
Job job = new Job ( arg ) ;
Job jobs [ ] = cluster . <unk> ( arg ) ;
Job result = new Job ( arg ) ;
JobClient <unk> ;
JobClient client ;
JobClient client = new JobClient ( arg ) ;
JobClient client = new JobClient ( arg ) ;
JobClient client = new JobClient ( arg ) ;
JobClient client = new JobClient ( arg ) ;
JobConf conf = mr . createJobConf ( arg ) ;
JobConf conf = mr . createJobConf ( arg ) ;
JobConf conf = mr . createJobConf ( arg ) ;
JobConf jobConf = new JobConf ( arg ) ;
JobConf jobConf = new JobConf ( arg ) ;
JobHistoryParser parser = new JobHistoryParser ( arg ) ;
JobId jobId = Records . newRecord ( arg ) ;
JobId jobId = recordFactory . newRecordInstance ( arg ) ;
JobId jobId = recordFactory . newRecordInstance ( arg ) ;
JobImpl . incrAllCounters ( arg ) ;
JobImpl . incrAllCounters ( arg ) ;
<unk> <unk> = jobHistory . <unk> ( arg ) . <unk> ( arg ) ;
JobInfo token = new JobInfo ( arg ) ;
JobState jobCompleteSuccess = JobImpl . checkJobCompleteSuccess ( arg ) ;
JobState jobCompleteSuccess = JobImpl . checkJobCompleteSuccess ( arg ) ;
JobState <unk> = JobImpl . checkJobCompleteSuccess ( arg ) ;
JobState oldState = getState ( arg ) ;
JobStatus [ ] jobs = <unk> . <unk> ( arg ) ;
JobStatus status = client . getJobStatus ( arg ) ;
JobStatus status = clientServiceDelegate . getJobStatus ( arg ) ;
JobStatus status = getJobStatus ( arg ) ;
JournalAndStream jas = <unk> ( arg ) ;
JournalProtocolTranslatorPB translator = new JournalProtocolTranslatorPB ( arg ) ;
JournalRequestProto req = JournalRequestProto . newBuilder ( arg ) . setRegistration ( arg ) . <unk> ( arg ) . <unk> ( arg ) . <unk> ( arg ) . build ( arg ) ;
<unk> . create ( arg ) ;
KerberosInfo krbInfo = protocol . getAnnotation ( arg ) ;
KerberosInfo krbInfo = protocol . getAnnotation ( arg ) ;
KerberosName . <unk> ( arg ) ;
KerberosName <unk> = new KerberosName ( arg ) ;
KillApplicationRequest req = Records . newRecord ( arg ) ;
KillApplicationRequest request = recordFactory . newRecordInstance ( arg ) ;
<unk> <unk> = recordFactory . newRecordInstance ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . error ( arg ) ;
LOG . error ( arg ) ;
LOG . info ( arg ) ;
LOG . info ( arg ) ;
LOG . info ( arg ) ;
LOG . info ( arg ) ;
LOG . info ( arg ) ;
LOG . info ( arg ) ;
LOG . info ( arg ) ;
LOG . info ( arg ) ;
LOG . info ( arg ) ;
LOG . info ( arg ) ;
LOG . info ( arg ) ;
LOG . info ( arg ) ;
LOG . info ( arg ) ;
LOG . info ( arg ) ;
LOG . info ( arg ) ;
LOG . info ( arg ) ;
LOG . info ( arg ) ;
LOG . info ( arg ) ;
LOG . info ( arg ) ;
LOG . info ( arg ) ;
LOG . info ( arg ) ;
LOG . info ( arg ) ;
LOG . info ( arg ) ;
LOG . info ( arg ) ;
LOG . info ( arg ) ;
LOG . info ( arg ) ;
LOG . info ( arg ) ;
LOG . info ( arg ) ;
LOG . info ( arg ) ;
LOG . info ( arg ) ;
LOG . info ( arg ) ;
LOG . info ( arg ) ;
LOG . info ( arg ) ;
LOG . info ( arg ) ;
LOG . info ( arg ) ;
LOG . info ( arg ) ;
LOG . info ( arg ) ;
LOG . info ( arg ) ;
LOG . info ( arg ) ;
LOG . info ( arg ) ;
LOG . info ( arg ) ;
LOG . info ( arg ) ;
LOG . info ( arg ) ;
LOG . info ( arg ) ;
LOG . info ( arg ) ;
LOG . info ( arg ) ;
LOG . info ( arg ) ;
LOG . info ( arg ) ;
LOG . info ( arg ) ;
LOG . info ( arg ) ;
LOG . info ( arg ) ;
LOG . info ( arg ) ;
LOG . info ( arg ) ;
LOG . info ( arg ) ;
LOG . info ( arg ) ;
LOG . warn ( arg ) ;
LOG . warn ( arg ) ;
LOG . warn ( arg ) ;
<unk> c = <unk> ( arg ) ;
<unk> <unk> = cluster . getNamesystem ( arg ) . leaseManager ;
LineReader <unk> = new LineReader ( arg ) ;
List < ? > ranges = strToRanges ( arg ) ;
List < ? > ranges = strToRanges ( arg ) ;
List < ? > ranges = strToRanges ( arg ) ;
List < Container > <unk> = <unk> . getNewContainerList ( arg ) ;
List < Container > <unk> = <unk> . getNewContainerList ( arg ) ;
List < Container > allocatedContainers = new ArrayList < Container > ( arg ) ;
List < Container > allocatedContainers = scheduler . allocate ( arg ) . getAMResponse ( arg ) . getNewContainerList ( arg ) ;
List < Container > conts = am . allocate ( arg ) . getNewContainerList ( arg ) ;
List < Container > conts = am . allocate ( arg ) . getNewContainerList ( arg ) ;
List < Container > <unk> = new ArrayList < Container > ( arg ) ;
List < DatanodeDescriptor > nodes = nodes ( arg ) ;
List < DatanodeDescriptor > origNodes = nodes ( arg ) ;
List < DatanodeDescriptor > origNodes = nodes ( arg ) ;
List < DatanodeDescriptor > origNodes = nodes ( arg ) ;
List < DatanodeDescriptor > origNodes = nodes ( arg ) ;
List < FSQueueSchedulable > <unk> = this . getQueueSchedulables ( arg ) ;
List < FSQueueSchedulable > scheds = getQueueSchedulables ( arg ) ;
List < FSQueueSchedulable > scheds = this . getQueueSchedulables ( arg ) ;
List < FSVolume > volumeList = new ArrayList < FSVolume > ( arg ) ;
List < FSVolume > volumes = dataset . volumes . getVolumes ( arg ) ;
List < FSVolume > volumes = fds . getVolumes ( arg ) ;
List < FSVolume > volumes = fds . getVolumes ( arg ) ;
List < FSVolume > volumes = fds . getVolumes ( arg ) ;
List < FSVolume > volumes = fds . volumes . getVolumes ( arg ) ;
List < FSVolume > volumes = fds . volumes . getVolumes ( arg ) ;
List < FSVolume > volumes = fds . volumes . getVolumes ( arg ) ;
List < FSVolumeInterface > volumes = dataset . getVolumes ( arg ) ;
List < FSVolumeInterface > volumes = fds . getVolumes ( arg ) ;
List < FSVolumeInterface > volumes = fds . getVolumes ( arg ) ;
List < FSVolumeInterface > volumes = fds . getVolumes ( arg ) ;
List < File > editsFiles = <unk> . <unk> ( arg ) ;
List < FoundEditLog > <unk> = <unk> ( arg ) ;
List < FoundEditLog > logs = lg . logs ;
List < FoundEditLog > <unk> = new ArrayList < FoundEditLog > ( arg ) ;
List < FoundFSImage > <unk> = inspector . <unk> ( arg ) ;
List < INode > children = current . <unk> ( arg ) ;
List < INode > contents = dirInode . getChildren ( arg ) ;
List < INode > contents = dirInode . <unk> ( arg ) ;
List < InetSocketAddress > isas = null ;
List < Integer > blocksVolumendexes = new ArrayList < Integer > ( arg ) ;
List < Integer > <unk> = new ArrayList < Integer > ( arg ) ;
List < Integer > processList = new ArrayList < Integer > ( arg ) ;
List < Integer > processList = new ArrayList < Integer > ( arg ) ;
List < Job > <unk> = monitor . <unk> ( arg ) ;
List < LocatedBlock > <unk> = cluster . getNameNode ( arg ) . getBlockLocations ( arg ) . getLocatedBlocks ( arg ) ;
List < LocatedBlock > <unk> = cluster . getNameNode ( arg ) . getBlockLocations ( arg ) . getLocatedBlocks ( arg ) ;
List < LocatedBlock > <unk> = cluster . getNameNode ( arg ) . getBlockLocations ( arg ) . getLocatedBlocks ( arg ) ;
List < LocatedBlock > locatedBlocks = nn . getBlockLocations ( arg ) . getLocatedBlocks ( arg ) ;
List < Long > <unk> = request . getBlocksList ( arg ) ;
List < Map . Entry < String , Lease >> entries = new ArrayList < Map . Entry < String , Lease >> ( arg ) ;
List < PathData > <unk> = <unk> ( arg ) ;
List < <unk> > info = queue . getQueueSchedulable ( arg ) . <unk> ( arg ) ;
List < <unk> > <unk> = request . getBlocksList ( arg ) ;
List < <unk> > <unk> = srcRoot . <unk> ( arg ) ;
List < Socket > socklist = multimap . get ( arg ) ;
List < String > diagnostics = job . getDiagnostics ( arg ) ;
List < String > <unk> = <unk> . get ( arg ) ;
List < String > <unk> = new ArrayList < String > ( arg ) ;
List < String > layers = location . getLayers ( arg ) ;
List < String > layers = location . getLayers ( arg ) ;
List < String > <unk> = <unk> ( arg ) ;
List < String > <unk> = this . <unk> ( arg ) ;
List < TaskAttemptId > <unk> = new ArrayList ( arg ) ;
List < Token < ? >> <unk> = <unk> . getDelegationTokens ( arg ) ;
List < Token < ? >> <unk> = hdfs . getDelegationTokens ( arg ) ;
List reqs = <unk> ( arg ) ;
ListenableFuture < GetEditLogManifestResponseProto > <unk> = <unk> . getEditLogManifest ( arg ) ;
LocatedBlock <unk> = nameNode . addBlock ( arg ) ;
LocatedBlocks blocks = callGetBlockLocations ( arg ) ;
LocatedBlocks <unk> = cluster . getNameNode ( arg ) . getBlockLocations ( arg ) ;
LocatedBlocks <unk> = cluster . getNameNode ( arg ) . getBlockLocations ( arg ) ;
LocatedBlocks <unk> = cluster . getNameNode ( arg ) . getBlockLocations ( arg ) ;
LocatedBlocks locatedBlocks = cluster . getNameNode ( arg ) . getBlockLocations ( arg ) ;
LocatedBlocks <unk> = DFSClient . callGetBlockLocations ( arg ) ;
Log . debug ( arg ) ;
Log . debug ( arg ) ;
Log . info ( arg ) ;
Log . info ( arg ) ;
Log . info ( arg ) ;
Log . warn ( arg ) ;
LogAggregationService <unk> = new LogAggregationService ( arg ) ;
LogFileHandler . Reader <unk> [ ] = new LogFileHandler . Reader [ 2 ] ;
LoggedTask result = <unk> . get ( arg ) ;
LoggedTask result = taskMap . get ( arg ) ;
LoggedTask task = getOrMakeTask ( arg ) ;
LoggedTask task = getOrMakeTask ( arg ) ;
LoggedTask task = getOrMakeTask ( arg ) ;
LoggedTask task = <unk> ( arg ) ;
LoggedTaskAttempt attempt = getOrMakeTaskAttempt ( arg ) ;
LoggedTaskAttempt attempt = getOrMakeTaskAttempt ( arg ) ;
LoggedTaskAttempt attempt = getOrMakeTaskAttempt ( arg ) ;
LoggedTaskAttempt attempt = getOrMakeTaskAttempt ( arg ) ;
LoggedTaskAttempt attempt = getOrMakeTaskAttempt ( arg ) ;
<unk> . getLogger ( arg ) . warn ( arg ) ;
LoginContext login = new LoginContext ( arg ) ;
<unk> app = new <unk> ( arg ) ;
MRApps . addToEnvironment ( arg ) ;
MRApps . addToEnvironment ( arg ) ;
MRClientProtocol historyClient = ( MRClientProtocol ) rpc . getProxy ( arg ) ;
MRClientProtocol historyClient = <unk> ( arg ) ;
Map < AsyncLogger , ListenableFuture < GetEditLogManifestResponseProto >> calls = <unk> . <unk> ( arg ) ;
Map < AsyncLogger , <unk> > <unk> = <unk> . <unk> ( arg ) ;
Map < Path , String > localPaths = new HashMap < Path , String > ( arg ) ;
Map < Path , String > localPaths = <unk> . <unk> ( arg ) ;
Map < Path , String > <unk> = new HashMap < Path , String > ( arg ) ;
Map < QueueACL , AccessControlList > acls = this . queueMgr . getQueueAcls ( arg ) ;
Map < QueueACL , AccessControlList > acls = this . queueMgr . getQueueAcls ( arg ) ;
Map < RMContainer , SchedulerApp > <unk> = new HashMap < RMContainer , SchedulerApp > ( arg ) ;
Map < String , ByteBuffer > <unk> = ctxt . <unk> ( arg ) ;
Map < String , Class < ? >> map ;
Map < String , LocalResource > <unk> = ctxt . <unk> ( arg ) ;
Map < String , LoggedTask > taskMap = <unk> ;
Map < String , Map < String , InetSocketAddress >> namenodes = DFSUtil . getNNServiceRpcAddresses ( arg ) ;
Map < String , Map < String , InetSocketAddress >> namenodes = DFSUtil . getNNServiceRpcAddresses ( arg ) ;
Map < String , String > <unk> = launchContext . getEnv ( arg ) ;
Map newAttempts = new <unk> < TaskAttemptId , TaskAttempt > ( arg ) ;
<unk> collector = null ;
MapOutputFile <unk> = new MapOutputFile ( arg ) ;
MapOutputFile <unk> = new MapOutputFile ( arg ) ;
MapOutputFile mapOutputFile = new MapOutputFile ( arg ) ;
MessageDigest digester = DIGESTER_FACTORY . get ( arg ) ;
MetricsSourceAdapter <unk> = conf != null ? new MetricsSourceAdapter ( arg ) : new MetricsSourceAdapter ( arg ) ;
MetricsTimeVaryingRate m = ( MetricsTimeVaryingRate ) rpcMetrics . registry . get ( arg ) ;
MiniDFSCluster cluster = new MiniDFSCluster ( arg ) ;
MiniDFSCluster cluster = new MiniDFSCluster . Builder ( arg ) . manageNameDfsDirs ( arg ) . numDataNodes ( arg ) . build ( arg ) ;
MiniDFSCluster cluster = new MiniDFSCluster . Builder ( arg ) . numNameNodes ( arg ) . nameNodePort ( arg ) . build ( arg ) ;
MiniDFSCluster cluster = new MiniDFSCluster . Builder ( arg ) . numNameNodes ( arg ) . nameNodePort ( arg ) . build ( arg ) ;
MiniDFSCluster cluster = new MiniDFSCluster . Builder ( arg ) . numNameNodes ( arg ) . nameNodePort ( arg ) . build ( arg ) ;
MiniDFSCluster cluster = new MiniDFSCluster . Builder ( arg ) . numNameNodes ( arg ) . nameNodePort ( arg ) . build ( arg ) ;
MiniDFSCluster cluster = new MiniDFSCluster . Builder ( arg ) . numNameNodes ( arg ) . numDataNodes ( arg ) . build ( arg ) ;
<unk> mr = null ;
MiniYARNCluster <unk> = new MiniYARNCluster ( arg ) ;
MockHttpServletResponse response = new MockHttpServletResponse ( arg ) ;
MockHttpServletResponse response = new MockHttpServletResponse ( arg ) ;
MockHttpServletResponse response = new MockHttpServletResponse ( arg ) ;
MockHttpServletResponse response = new MockHttpServletResponse ( arg ) ;
MockNM <unk> = new MockNM ( arg ) ;
MockRM rm = new MockRM ( arg ) ;
MockRM rm = new <unk> ( arg ) ;
Mockito . <unk> ( arg ) . when ( arg ) . monitorHealth ( arg ) ;
Mockito . doReturn ( arg ) . when ( arg ) . getReplication ( arg ) ;
Mockito . doReturn ( arg ) . when ( arg ) . getServiceState ( arg ) ;
Mockito . doReturn ( arg ) . when ( arg ) . getServiceState ( arg ) ;
Mockito . doReturn ( arg ) . when ( arg ) . getServiceState ( arg ) ;
Mockito . doReturn ( arg ) . when ( arg ) . getServiceState ( arg ) ;
Mockito . doReturn ( arg ) . when ( arg ) . getServiceState ( arg ) ;
Mockito . doReturn ( arg ) . when ( arg ) . getServiceState ( arg ) ;
Mockito . doReturn ( arg ) . when ( arg ) . getServiceState ( arg ) ;
Mockito . doReturn ( arg ) . when ( arg ) . getServiceState ( arg ) ;
Mockito . doReturn ( arg ) . when ( arg ) . getServiceState ( arg ) ;
Mockito . doReturn ( arg ) . when ( arg ) . getServiceState ( arg ) ;
Mockito . doThrow ( arg ) . when ( arg ) . monitorHealth ( arg ) ;
Mockito . doThrow ( arg ) . when ( arg ) . monitorHealth ( arg ) ;
Mockito . verify ( arg ) . <unk> ( arg ) ;
Mockito . verify ( arg ) . exists ( arg ) ;
Mockito . verify ( arg ) . exists ( arg ) ;
Mockito . verify ( arg ) . exists ( arg ) ;
Mockito . verify ( arg ) . exists ( arg ) ;
Mockito . verify ( arg ) . exists ( arg ) ;
Mockito . verify ( arg ) . exists ( arg ) ;
Mockito . verify ( arg ) . exists ( arg ) ;
Mockito . verify ( arg ) . exists ( arg ) ;
Mockito . verify ( arg ) . exists ( arg ) ;
Mockito . verify ( arg ) . exists ( arg ) ;
Mockito . verify ( arg ) . exists ( arg ) ;
Mockito . verify ( arg ) . exists ( arg ) ;
Mockito . verify ( arg ) . exists ( arg ) ;
Mockito . verify ( arg ) . exists ( arg ) ;
Mockito . verify ( arg ) . getServiceState ( arg ) ;
Mockito . verify ( arg ) . rollLogs ( arg ) ;
MyResourceManager rm = new MyResourceManager ( arg ) ;
MyResourceManager rm = new MyResourceManager ( arg ) ;
NameNode . format ( arg ) ;
NameNode . stateChangeLog . info ( arg ) ;
NameNode . stateChangeLog . info ( arg ) ;
NameNode . stateChangeLog . info ( arg ) ;
NameNode . stateChangeLog . info ( arg ) ;
NameNode . stateChangeLog . info ( arg ) ;
NameNode . stateChangeLog . info ( arg ) ;
NameNode . stateChangeLog . info ( arg ) ;
NameNode . stateChangeLog . info ( arg ) ;
NameNode . stateChangeLog . info ( arg ) ;
NameNode . stateChangeLog . info ( arg ) ;
NameNode . stateChangeLog . warn ( arg ) ;
NameNode . stateChangeLog . warn ( arg ) ;
NameNode <unk> = mock ( arg ) ;
NameNode namenode = cluster . getNameNode ( arg ) ;
NameNode namenode = cluster . getNameNode ( arg ) ;
NameNode nn = ( NameNode ) context . getAttribute ( arg ) ;
NameNode nn = ( NameNode ) getServletContext ( arg ) . getAttribute ( arg ) ;
NameNode nn = ( NameNode ) getServletContext ( arg ) . getAttribute ( arg ) ;
NameNode nn = cluster . getNameNode ( arg ) ;
NameNode nn = cluster . getNameNode ( arg ) ;
NameNode nn = cluster . getNameNode ( arg ) ;
NameNode nn = cluster . getNameNode ( arg ) ;
NameNode nn = cluster . getNameNode ( arg ) ;
NameNodeAdapter . <unk> ( arg ) ;
<unk> cmd = getNamenode ( arg ) . startCheckpoint ( arg ) ;
NamenodeProtocol namenode = ( NamenodeProtocol ) RPC . getProxy ( arg ) ;
NamenodeProtocol namenode = new NamenodeProtocolTranslatorPB ( arg ) ;
NamenodeProtocolTranslatorPB translator = new NamenodeProtocolTranslatorPB ( arg ) ;
NativeIO . Stat stat = NativeIO . fstat ( arg ) ;
NativeIO . Stat stat = NativeIO . fstat ( arg ) ;
NativeIO . Stat stat = NativeIO . fstat ( arg ) ;
NetUtils . <unk> ( arg ) ;
<unk> netIF ;
<unk> <unk> = getNode ( arg ) ;
NodeType <unk> = this . <unk> . get ( arg ) ;
Object [ ] <unk> = ( Object [ ] ) RPC . call ( arg ) ;
<unk> <unk> = <unk> . <unk> ( arg ) . <unk> ( arg ) . <unk> ( arg ) . <unk> ( arg ) . create ( arg ) ;
OutputStream baseStream = NetUtils . getOutputStream ( arg ) ;
OutputStream baseStream = NetUtils . getOutputStream ( arg ) ;
OutputStream dataOut = out . dataOut ;
OutputStream <unk> = null ;
OutputStream <unk> = fs . create ( arg ) ;
OutputStreamWriter out = new OutputStreamWriter ( arg ) ;
PBHelper . convert ( arg ) ;
PBHelper . convert ( arg ) ;
<unk> listing = store . <unk> ( arg ) ;
Path checkpoint ;
Path <unk> = this . <unk> . getLocalPathForWrite ( arg ) ;
Path <unk> = <unk> . getLocalPathForWrite ( arg ) ;
Path <unk> = new Path ( arg ) ;
Path f = getTestRootRelativePath ( arg ) ;
Path f = getTestRootRelativePath ( arg ) ;
Path f = getTestRootRelativePath ( arg ) ;
Path f = writeFile ( arg ) ;
Path f = writeFile ( arg ) ;
Path f = writeFile ( arg ) ;
Path <unk> = JobHistory . <unk> ( arg ) ;
Path link = new Path ( arg ) ;
Path nmPrivateCTokensPath = localDirsSelector . getLocalPathForWrite ( arg ) ;
Path p = <unk> . makeQualified ( arg ) ;
Path result = next ;
Path <unk> = <unk> ( arg ) ;
Preconditions . <unk> ( arg ) ;
Preconditions . checkState ( arg ) ;
Preconditions . checkState ( arg ) ;
Preconditions . checkState ( arg ) ;
PrintStream file = new PrintStream ( arg ) ;
PrintStream out = new PrintStream ( arg ) ;
PrintStream out = new PrintStream ( arg ) ;
PrintWriter out = new PrintWriter ( arg ) ;
ProcfsBasedProcessTree pTree = <unk> . getProcessTree ( arg ) ;
ProcfsBasedProcessTree processTree = <unk> ( arg ) ;
ProcfsBasedProcessTree <unk> = new ProcfsBasedProcessTree ( arg ) ;
<unk> <unk> = sd . <unk> ( arg ) ;
ProtocolInfo <unk> = ( ProtocolInfo ) protocol . getAnnotation ( arg ) ;
Queue parent = queue . getParent ( arg ) ;
Queue queue = getQueue ( arg ) ;
Queue queue = null ;
Queue queue = queues . get ( arg ) ;
Queue root = cs . <unk> ( arg ) ;
<unk> <unk> = <unk> ( arg ) ;
RMApp application = <unk> ( arg ) ;
RMApp application = <unk> ( arg ) ;
RMAppEvent event = new RMAppEvent ( arg ) ;
RMAppEvent event = new RMAppEvent ( arg ) ;
RMAppEvent event = new RMAppEvent ( arg ) ;
RMAppEvent event = new RMAppEvent ( arg ) ;
RMAppEvent event = new RMAppEvent ( arg ) ;
RMAppEvent event = new RMAppEvent ( arg ) ;
RMAppEvent event = new RMAppFailedAttemptEvent ( arg ) ;
RMAppEvent event = new RMAppFailedAttemptEvent ( arg ) ;
RMAppEvent event = new RMAppFailedAttemptEvent ( arg ) ;
<unk> node = rmNode . context . <unk> ( arg ) . get ( arg ) ;
RMNodeState [ ] <unk> = RMNodeState . values ( arg ) ;
RMNodeState nodeState = RMNodeState . valueOf ( arg ) ;
RMNodeState nodeState = node . getState ( arg ) ;
RMNodeState oldState = getState ( arg ) ;
RMNodeState state = <unk> . getState ( arg ) ;
RMNodeState stateFilter = null ;
<unk> store = StoreFactory . getStore ( arg ) ;
RPC . Server server = RPC . getServer ( arg ) ;
RPC . getServer ( arg ) ;
RPC . stopProxy ( arg ) ;
RPC . stopProxy ( arg ) ;
RPC . stopProxy ( arg ) ;
RPC . stopProxy ( arg ) ;
Reader reader = new Reader ( arg ) ;
Reader reader = new Reader ( arg ) ;
<unk> recoveryServ = new RecoveryService ( arg ) ;
RefreshAuthorizationPolicyProtocol refreshProtocol = ( RefreshAuthorizationPolicyProtocol ) RPC . getProxy ( arg ) ;
RefreshAuthorizationPolicyProtocolClientSideTranslatorPB refreshProtocol = new RefreshAuthorizationPolicyProtocolClientSideTranslatorPB ( arg ) ;
RefreshAuthorizationPolicyProtocolClientSideTranslatorPB translator = new RefreshAuthorizationPolicyProtocolClientSideTranslatorPB ( arg ) ;
RefreshUserMappingsProtocol refreshProtocol = ( RefreshUserMappingsProtocol ) RPC . getProxy ( arg ) ;
RefreshUserMappingsProtocol refreshProtocol = ( RefreshUserMappingsProtocol ) RPC . getProxy ( arg ) ;
RefreshUserMappingsProtocolClientSideTranslatorPB refreshProtocol = new RefreshUserMappingsProtocolClientSideTranslatorPB ( arg ) ;
RefreshUserMappingsProtocolClientSideTranslatorPB refreshProtocol = new RefreshUserMappingsProtocolClientSideTranslatorPB ( arg ) ;
RefreshUserMappingsProtocolClientSideTranslatorPB translator = new RefreshUserMappingsProtocolClientSideTranslatorPB ( arg ) ;
<unk> <unk> = <unk> . <unk> ( arg ) . <unk> ( arg ) ;
RemoteBlockReader reader = ( RemoteBlockReader ) spy ( arg ) ;
RemoteBlockReader reader = ( RemoteBlockReader ) spy ( arg ) ;
RemoteBlockReader reader = ( RemoteBlockReader ) spy ( arg ) ;
<unk> <unk> = getNamenode ( arg ) . getEditLogManifest ( arg ) ;
<unk> < T > action = null ;
Replica r = ( ( FSDataset ) cluster . getDataNodes ( arg ) . get ( arg ) . getFSDataset ( arg ) ) . fetchReplicaInfo ( arg ) ;
Replica r = DataNodeAdapter . fetchReplicaInfo ( arg ) ;
Replica r = dataset1 . fetchReplicaInfo ( arg ) ;
<unk> r = data . updateReplicaUnderRecovery ( arg ) ;
Resource assigned = Resources . <unk> ( arg ) ;
Resource used = Resources . none ( arg ) ;
Resource userLimit = computeAndSetUserResourceLimit ( arg ) ;
<unk> <unk> = info ( arg ) . _ ( arg ) . _ ( arg ) . _ ( arg ) . _ ( arg ) . _ ( arg ) . _ ( arg ) . _ ( arg ) ;
RoundRobinVolumesPolicy policy = ReflectionUtils . newInstance ( arg ) ;
RoundRobinVolumesPolicy policy = new RoundRobinVolumesPolicy ( arg ) ;
RpcPayloadHeaderProto header = RpcPayloadHeaderProto . <unk> ( arg ) ;
Runtime . getRuntime ( arg ) . addShutdownHook ( arg ) ;
Runtime . getRuntime ( arg ) . addShutdownHook ( arg ) ;
Runtime . getRuntime ( arg ) . addShutdownHook ( arg ) ;
Runtime . getRuntime ( arg ) . addShutdownHook ( arg ) ;
Runtime . getRuntime ( arg ) . addShutdownHook ( arg ) ;
Runtime . getRuntime ( arg ) . addShutdownHook ( arg ) ;
Runtime . getRuntime ( arg ) . exit ( arg ) ;
Runtime . getRuntime ( arg ) . <unk> ( arg ) ;
Scanner scanner = reader . createScanner ( arg ) ;
Scanner scanner = reader . createScanner ( arg ) ;
Scanner scanner = reader . createScanner ( arg ) ;
Scanner scanner = reader . createScanner ( arg ) ;
Scanner scanner = reader . createScanner ( arg ) ;
SchedulerApp SchedulerApp = new SchedulerApp ( arg ) ;
SchedulerApp app = getApplication ( arg ) ;
SchedulerApp app = getApplication ( arg ) ;
SchedulerApp app_0 = getMockApplication ( arg ) ;
SchedulerApp app_0 = getMockApplication ( arg ) ;
SchedulerApp app_0 = new SchedulerApp ( arg ) ;
SchedulerApp app_0 = new SchedulerApp ( arg ) ;
SchedulerApp app_0 = new SchedulerApp ( arg ) ;
SchedulerApp app_0 = new SchedulerApp ( arg ) ;
SchedulerApp app_0 = new SchedulerApp ( arg ) ;
SchedulerApp app_0 = new SchedulerApp ( arg ) ;
SchedulerApp app_0 = new SchedulerApp ( arg ) ;
SchedulerApp app_0 = new SchedulerApp ( arg ) ;
SchedulerApp app_0 = new SchedulerApp ( arg ) ;
SchedulerApp app_0 = new SchedulerApp ( arg ) ;
SchedulerApp app_0 = spy ( arg ) ;
SchedulerApp app_0 = spy ( arg ) ;
SchedulerApp app_0 = spy ( arg ) ;
SchedulerApp <unk> = spy ( arg ) ;
SchedulerApp <unk> = spy ( arg ) ;
SchedulerApp app_1 = getMockApplication ( arg ) ;
SchedulerApp app_1 = getMockApplication ( arg ) ;
SchedulerApp app_1 = new SchedulerApp ( arg ) ;
SchedulerApp app_1 = new SchedulerApp ( arg ) ;
SchedulerApp app_1 = new SchedulerApp ( arg ) ;
SchedulerApp app_1 = new SchedulerApp ( arg ) ;
SchedulerApp app_1 = new SchedulerApp ( arg ) ;
SchedulerApp app_1 = new SchedulerApp ( arg ) ;
SchedulerApp app_1 = new SchedulerApp ( arg ) ;
SchedulerApp app_1 = new SchedulerApp ( arg ) ;
SchedulerApp app_1 = new SchedulerApp ( arg ) ;
SchedulerApp app_1 = new SchedulerApp ( arg ) ;
SchedulerApp <unk> = spy ( arg ) ;
SchedulerApp app_2 = getMockApplication ( arg ) ;
SchedulerApp app_2 = getMockApplication ( arg ) ;
SchedulerApp app_2 = new SchedulerApp ( arg ) ;
SchedulerApp app_2 = new SchedulerApp ( arg ) ;
SchedulerApp app_2 = new SchedulerApp ( arg ) ;
SchedulerApp app_3 = getMockApplication ( arg ) ;
SchedulerApp app_3 = getMockApplication ( arg ) ;
SchedulerApp app_3 = new SchedulerApp ( arg ) ;
SchedulerApp <unk> = getMockApplication ( arg ) ;
SchedulerApp <unk> = getMockApplication ( arg ) ;
SchedulerApp application = applications . get ( arg ) ;
SchedulerApp application = applications . get ( arg ) ;
SchedulerApp application = applications . get ( arg ) ;
SchedulerApp application = applications . get ( arg ) ;
SchedulerApp application = getApplication ( arg ) ;
SchedulerApp application = getApplication ( arg ) ;
SchedulerApp application = getApplication ( arg ) ;
SchedulerApp application = getApplication ( arg ) ;
SchedulerApp application = getApplication ( arg ) ;
SchedulerApp application = getApplication ( arg ) ;
SchedulerApp application = getApplication ( arg ) ;
SchedulerApp application = mock ( arg ) ;
SchedulerApp application = mock ( arg ) ;
SchedulerApp reservedApplication = applications . get ( arg ) ;
SchedulerApp reservedApplication = getApplication ( arg ) ;
SchedulerApp <unk> = new SchedulerApp ( arg ) ;
SchedulerNode node = getNode ( arg ) ;
SchedulerNode node = getNode ( arg ) ;
SchedulerNode node = getNode ( arg ) ;
SchedulerNode node = getNode ( arg ) ;
SchedulerNode node = getNode ( arg ) ;
SchedulerNode node = getNode ( arg ) ;
SchedulerNode node = nodes . get ( arg ) ;
SchedulerNode node = nodes . get ( arg ) ;
SchedulerNode node = nodes . get ( arg ) ;
SchedulerNode node = spy ( arg ) ;
SchedulerNode node = this . nodes . get ( arg ) ;
SchedulerNode node_0 = TestUtils . getMockNode ( arg ) ;
SchedulerNode node_0 = TestUtils . getMockNode ( arg ) ;
SchedulerNode node_0 = TestUtils . getMockNode ( arg ) ;
SchedulerNode node_0 = TestUtils . getMockNode ( arg ) ;
SchedulerNode node_0 = TestUtils . getMockNode ( arg ) ;
SchedulerNode node_0 = TestUtils . getMockNode ( arg ) ;
SchedulerNode node_0 = TestUtils . getMockNode ( arg ) ;
SchedulerNode node_0 = TestUtils . getMockNode ( arg ) ;
SchedulerNode node_0 = TestUtils . getMockNode ( arg ) ;
SchedulerNode node_0 = TestUtils . getMockNode ( arg ) ;
SchedulerNode node_0 = TestUtils . getMockNode ( arg ) ;
SchedulerNode <unk> = TestUtils . getMockNode ( arg ) ;
SchedulerNode <unk> = TestUtils . getMockNode ( arg ) ;
SchedulerNode node_1 = TestUtils . getMockNode ( arg ) ;
SchedulerNode node_1 = TestUtils . getMockNode ( arg ) ;
SchedulerNode node_1 = TestUtils . getMockNode ( arg ) ;
SchedulerNode node_1 = TestUtils . getMockNode ( arg ) ;
SchedulerNode node_1 = TestUtils . getMockNode ( arg ) ;
SchedulerNode node_1 = TestUtils . getMockNode ( arg ) ;
SchedulerNode <unk> = TestUtils . getMockNode ( arg ) ;
SchedulerNode node_2 = TestUtils . getMockNode ( arg ) ;
SchedulerNode node_2 = TestUtils . getMockNode ( arg ) ;
SchedulerNode <unk> = TestUtils . getMockNode ( arg ) ;
Schema schema = Schema . parse ( arg ) ;
<unk> <unk> = this . <unk> . <unk> ( arg ) ;
SecurityUtil . <unk> ( arg ) ;
SecurityUtil . login ( arg ) ;
SecurityUtil . <unk> ( arg ) ;
SegmentStateProto ret = SegmentStateProto . newBuilder ( arg ) . setStartTxId ( arg ) . setEndTxId ( arg ) . <unk> ( arg ) . <unk> ( arg ) . build ( arg ) ;
Sender . opBlockChecksum ( arg ) ;
Sender . opReadBlock ( arg ) ;
Sender . opReadBlock ( arg ) ;
Sender . opReadBlock ( arg ) ;
Sender . opReadBlock ( arg ) ;
Sender . opReadBlock ( arg ) ;
Sender . opReadBlock ( arg ) ;
Sender . opReplaceBlock ( arg ) ;
Sender . opReplaceBlock ( arg ) ;
Sender . opTransferBlock ( arg ) ;
Sender . opTransferBlock ( arg ) ;
Sender . opWriteBlock ( arg ) ;
Sender . opWriteBlock ( arg ) ;
Sender . opWriteBlock ( arg ) ;
Sender . opWriteBlock ( arg ) ;
Server . <unk> = 1 ;
Server server = RPC . getServer ( arg ) ;
Server server = RPC . getServer ( arg ) ;
Server server = RPC . getServer ( arg ) ;
Server server = RPC . getServer ( arg ) ;
Server server = RPC . getServer ( arg ) ;
Server server = RPC . getServer ( arg ) ;
Server server = RPC . getServer ( arg ) ;
Server server = RPC . getServer ( arg ) ;
Server server = RPC . getServer ( arg ) ;
Server server = RPC . getServer ( arg ) ;
Server server = RPC . getServer ( arg ) ;
Server server = RPC . getServer ( arg ) ;
Server server = RPC . getServer ( arg ) ;
Server server = RPC . getServer ( arg ) ;
ServiceAuthorizationManager . authorize ( arg ) ;
ServiceAuthorizationManager . authorize ( arg ) ;
<unk> < Path > set = deleteOnExit . get ( arg ) ;
Socket <unk> = iter . next ( arg ) ;
Socket s = dfsClient . socketCache . get ( arg ) ;
Socket s = new Socket ( arg ) ;
Socket s = ss . <unk> ( arg ) ;
Socket sock = null ;
SortedSet < String > keys = new TreeSet ( arg ) ;
SortedSet < String > <unk> = new TreeSet ( arg ) ;
Stack < ApplicableTransition > <unk> = new Stack < ApplicableTransition > ( arg ) ;
<unk> <unk> = recordFactory . newRecordInstance ( arg ) ;
StartLogSegmentRequestProto req = StartLogSegmentRequestProto . newBuilder ( arg ) . setRegistration ( arg ) . <unk> ( arg ) . build ( arg ) ;
Stat stat = NativeIO . fstat ( arg ) ;
<unk> <unk> = null ;
<unk> <unk> = recordFactory . newRecordInstance ( arg ) ;
<unk> [ ] report = { val } ;
StorageBlockReportProto . Builder <unk> = StorageBlockReportProto . newBuilder ( arg ) . setStorageID ( arg ) ;
StorageDirectory mockDir = mockDirectory ( arg ) ;
StorageDirectory mockDir = mockDirectory ( arg ) ;
StorageDirectory mockDir = mockDirectory ( arg ) ;
StorageDirectory sd = ( StorageDirectory ) args [ 0 ] ;
StorageInfo info = new StorageInfo ( arg ) ;
StorageInfo info = new StorageInfo ( arg ) ;
Store store = ReflectionUtils . newInstance ( arg ) ;
Store store = StoreFactory . getStore ( arg ) ;
Store store = StoreFactory . getStore ( arg ) ;
Store store = StoreFactory . getStore ( arg ) ;
Store store = StoreFactory . getStore ( arg ) ;
Store store = StoreFactory . getStore ( arg ) ;
Store store = StoreFactory . getStore ( arg ) ;
Store store = StoreFactory . getStore ( arg ) ;
Store store = StoreFactory . getStore ( arg ) ;
Store store = StoreFactory . getStore ( arg ) ;
StreamFile . writeTo ( arg ) ;
StreamFile . writeTo ( arg ) ;
String [ ] <unk> = dataset . <unk> ( arg ) ;
String [ ] <unk> = getStrings ( arg ) ;
String [ ] dirs = getStrings ( arg ) ;
String [ ] dirs = getStrings ( arg ) ;
String [ ] names = <unk> . list ( arg ) ;
String addr = NameNode . getHostPortString ( arg ) ;
String addr = NameNode . getHostPortString ( arg ) ;
String addr = NameNode . getHostPortString ( arg ) ;
String addr = NetUtils . getHostPortString ( arg ) ;
String addr = NetUtils . getHostPortString ( arg ) ;
String addr = NetUtils . getHostPortString ( arg ) ;
String <unk> = address . toString ( arg ) ;
String <unk> = <unk> ( <unk> ) ;
String <unk> = <unk> ( arg ) ;
String appID = Apps . toString ( arg ) ;
String appId = Apps . toString ( arg ) ;
String attemptID = attempt . <unk> ( arg ) ;
String <unk> = conf . get ( arg ) ;
String <unk> = <unk> rand +-+ ip +-+ System . currentTimeMillis ( arg ) ;
String <unk> = <unk> ( arg ) ;
String <unk> = <unk> . substring ( arg ) ;
String className = Text . readString ( arg ) ;
String className = Text . readString ( arg ) ;
String className = Text . readString ( arg ) ;
String cmd =-+ <unk> ( arg ) ;
String <unk> = ConverterUtils . toString ( arg ) ;
String <unk> = <unk> . getName ( arg ) ;
String <unk> = ConverterUtils . toString ( arg ) ;
String <unk> = layers . get ( arg ) ;
String diagnostics = cont . <unk> ( arg ) . getDiagnostics ( arg ) ;
String diagnostics = cont . getDiagnostics ( arg ) ;
String dnName = dn . <unk> ( arg ) . getName ( arg ) ;
String <unk> = new String ( arg ) ;
String <unk> = null ;
String filename = committer . <unk> ( arg ) ;
String finalState = RUNNING ;
String fqdn = InetAddress . getByName ( arg ) . getCanonicalHostName ( arg ) ;
String fqdn = InetAddress . getByName ( arg ) . getCanonicalHostName ( arg ) ;
String fsName = NameNode . getHostPortString ( arg ) ;
String fsName = NameNode . getHostPortString ( arg ) ;
String fsName = NameNode . getHostPortString ( arg ) ;
String host = clientService . getBindAddress ( arg ) . getAddress ( arg ) . getCanonicalHostName ( arg ) ;
String host = clientService . getBindAddress ( arg ) . getAddress ( arg ) . getHostAddress ( arg ) ;
String host = layers . get ( arg ) ;
String host = node . getHost ( arg ) ;
String host = node . getHost ( arg ) ;
String hostName = NetUtils . <unk> ( arg ) ;
String <unk> = NameNode . getHostPortString ( arg ) ;
String ipAddr = dn . getSelfAddr ( arg ) . getAddress ( arg ) . getHostAddress ( arg ) ;
String ipAddr = dn . <unk> ( arg ) . getAddress ( arg ) . getHostAddress ( arg ) ;
String jobID = <unk> ( arg ) ;
String jobName = job . <unk> ( arg ) ;
String <unk> = jobHistory . <unk> ( arg ) ;
String key = DFSUtil . getNameServiceIdKey ( arg ) ;
String key = <unk> . <unk> + SecurityUtil . buildDTServiceName ( arg ) ;
String lastBlock = null ;
String <unk> = locations [ 0 ] . <unk> ( arg ) [ 0 ] ;
String <unk> = getConf ( arg ) . get ( arg ) ;
String <unk> = DFSUtil . getInfoServer ( arg ) ;
String name = <unk> ( dnName . isEmpty ( arg ) ? <unk> + rng . nextInt ( arg ) : dnName . <unk> ( arg ) ) ;
String name = Foo%dthPercentile5sIntervalLatency ;
String name = Foo%dthPercentile5sIntervalLatency ;
String name = Text . readString ( arg ) ;
String name = live . get ( arg ) . getName ( arg ) ;
String name = live . get ( arg ) . getName ( arg ) ;
String nnAddr = req . getParameter ( arg ) ;
String nodename = info [ index ] . getName ( arg ) ;
String nodename = info [ <unk> ] . getName ( arg ) ;
String nsId = DFSUtil . getNameServiceId ( arg ) ;
String nsId = DFSUtil . getNameServiceId ( arg ) ;
String nsId = DFSUtil . <unk> ( arg ) ;
String <unk> , <unk> [ ] = null ;
String <unk> = parent . getName ( arg ) ;
String path = new URI ( arg ) . getPath ( arg ) ;
String permission = params . get ( arg ) ;
String permission = params . get ( arg ) ;
String permission = params . get ( arg ) ;
String <unk> = rpcRequest . <unk> ( arg ) ;
String <unk> = protocol . getName ( arg ) ;
String qpath = fs . makeQualified ( arg ) . toString ( arg ) ;
String qpath = path . makeQualified ( arg ) . toString ( arg ) ;
String qpath = path . makeQualified ( arg ) . toString ( arg ) ;
String <unk> = <unk> . getHostName ( arg ) ;
String reason = null ;
String <unk> = new StringBuffer ( arg ) . <unk> ( arg ) . toString ( arg ) ;
String saveName = limits . filterCounterName ( arg ) ;
String saveName = limits . filterCounterName ( arg ) ;
String selfSocketAddr = dn . getSelfAddr ( arg ) . toString ( arg ) ;
String serviceAddr = conf . get ( arg ) ;
String serviceAddr = null ;
String <unk> = <unk> ( arg ) ;
String <unk> = <unk> <unk> . this . url . getHost ( arg ) ;
String <unk> = dn . getFSDataset ( arg ) . <unk> ( arg ) ;
String <unk> = DFSUtil . getNameServiceIdKey ( arg ) ;
String <unk> = Environment . runCommand ( arg ) . toString ( arg ) ;
String state = queue . getState ( arg ) . toString ( arg ) ;
String status = <unk> . getNamesystem ( arg ) . <unk> ( arg ) ;
String str = TestLocalFileSystem . readFile ( arg ) ;
String str = TestLocalFileSystem . readFile ( arg ) ;
String <unk> = <unk> . <unk> ( arg ) ;
String <unk> = request . getParameter ( arg ) ;
String tid = task_1234_0_0_d_0 ;
String tid = task_1234_0_0_d_0 ;
String tid = task_1234_0_0_m ;
String tid = task_1234_0_0_m ;
String tid = task_1234_0_0_m_0 ;
String tid = task_1234_0_0_m_0 ;
String tid = <unk> ;
String tokenURLEncodedStr = containerManager . containerEnv . get ( arg ) ;
String tokenURLEncodedStr = containerManager . containerEnv . get ( arg ) ;
String ui = trackingUrl == null ? UNASSIGNED : ( app . getFinishTime ( arg ) == 0 ? ApplicationMaster : JobHistory ) ;
String ui = trackingUrl == null || trackingUrl . isEmpty ( arg ) ? UNASSIGNED : ( app . getFinishTime ( arg ) == 0 ? ApplicationMaster : JobHistory ) ;
String <unk> = req . <unk> ( arg ) ;
String <unk> = getCommandField ( arg ) ;
String user = test ;
String username = getIdentifier ( arg ) . getUser ( arg ) . getUserName ( arg ) . toString ( arg ) ;
String username = getIdentifier ( arg ) . <unk> ( arg ) . toString ( arg ) ;
String valueString = get ( arg ) ;
String valueString = get ( arg ) ;
String valueString = get ( arg ) ;
String valueString = get ( arg ) ;
String valueString = get ( arg ) ;
String <unk> = conf . get ( arg ) ;
StringBuffer allOutput = new StringBuffer ( arg ) ;
StringBuffer b = new StringBuffer ( arg ) ;
StringBuffer buf = new StringBuffer ( arg ) ;
StringBuffer buf = new StringBuffer ( arg ) ;
StringBuffer buf = new StringBuffer ( arg ) ;
StringBuffer buf = new StringBuffer ( arg ) ;
StringBuffer buf = new StringBuffer ( arg ) ;
StringBuffer buf = new StringBuffer ( arg ) ;
StringBuffer buf = new StringBuffer ( arg ) ;
StringBuffer buf = new StringBuffer ( arg ) ;
StringBuffer buffer = new StringBuffer ( arg ) ;
StringBuffer buffer = new StringBuffer ( arg ) ;
StringBuffer buffer = new StringBuffer ( arg ) ;
StringBuffer buffer = new StringBuffer ( arg ) ;
StringBuffer buffer = new StringBuffer ( arg ) ;
StringBuffer buffer = new StringBuffer ( arg ) ;
StringBuffer buffer = new StringBuffer ( arg ) ;
StringBuffer <unk> = new StringBuffer ( arg ) ;
StringBuffer <unk> = new StringBuffer ( arg ) ;
StringBuffer <unk> = new StringBuffer ( arg ) ;
StringBuffer result = new StringBuffer ( arg ) ;
StringBuffer result = new StringBuffer ( arg ) ;
StringBuffer ret = new StringBuffer ( arg ) ;
StringBuffer sb = Environment . runCommand ( arg ) ;
StringBuffer sb = Environment . runCommand ( arg ) ;
StringBuffer sb = new StringBuffer ( arg ) ;
StringBuffer sb = new StringBuffer ( arg ) ;
StringBuffer sb = new StringBuffer ( arg ) ;
StringBuffer sb = new StringBuffer ( arg ) ;
StringBuffer sb = new StringBuffer ( arg ) ;
StringBuffer sb = new StringBuffer ( arg ) ;
StringBuffer sb = new StringBuffer ( arg ) ;
StringBuffer sb = new StringBuffer ( arg ) ;
StringBuffer sb = new StringBuffer ( arg ) ;
StringBuffer sb = new StringBuffer ( arg ) ;
StringBuffer sb = new StringBuffer ( arg ) ;
StringBuffer sb = new StringBuffer ( arg ) ;
StringBuffer sb = runCommand ( arg ) ;
StringBuffer sb = runCommand ( arg ) ;
StringBuffer <unk> = new StringBuffer ( arg ) ;
StringBuffer <unk> = new StringBuffer ( arg ) ;
StringBuffer <unk> = new StringBuffer ( arg ) ;
StringBuilder <unk> = tableInit ( arg ) . append ( arg ) . append ( arg ) ;
StringBuilder unpackRegex = new StringBuilder ( arg ) ;
StringBuilder unpackRegex = new StringBuilder ( arg ) ;
SummaryBuilder summary = new SummaryBuilder ( arg ) . add ( arg ) . add ( arg ) . add ( arg ) . add ( arg ) . add ( arg ) . add ( arg ) . add ( arg ) . add ( arg ) . add ( arg ) . add ( arg ) . add ( arg ) . add ( arg ) . add ( arg ) . add ( arg ) . add ( arg ) ;
SummaryBuilder summary = new SummaryBuilder ( arg ) . add ( arg ) . add ( arg ) . add ( arg ) . add ( arg ) . add ( arg ) . add ( arg ) . add ( arg ) . add ( arg ) . add ( arg ) . add ( arg ) . add ( arg ) . add ( arg ) . add ( arg ) ;
System . err . print ( arg ) ;
System . err . print ( arg ) ;
System . err . print ( arg ) ;
System . err . print ( arg ) ;
System . err . println ( arg ) ;
System . exit ( arg ) ;
System . exit ( arg ) ;
System . exit ( arg ) ;
System . exit ( arg ) ;
System . exit ( arg ) ;
System . exit ( arg ) ;
System . exit ( arg ) ;
System . exit ( arg ) ;
System . exit ( arg ) ;
System . out . println ( arg ) ;
System . out . println ( arg ) ;
System . out . println ( arg ) ;
System . out . println ( arg ) ;
System . out . println ( arg ) ;
System . out . println ( arg ) ;
System . out . println ( arg ) ;
System . out . println ( arg ) ;
System . out . println ( arg ) ;
System . out . println ( arg ) ;
System . out . println ( arg ) ;
System . out . println ( arg ) ;
System . out . println ( arg ) ;
System . out . println ( arg ) ;
System . setProperty ( arg ) ;
System . setProperty ( arg ) ;
System . <unk> ( arg ) ;
T . LOG . warn ( arg ) ;
TBODY < TABLE < Hamlet >> tbody = html . <unk> ( arg ) . table ( arg ) . thead ( arg ) . tr ( arg ) . th ( arg ) . th ( arg ) . th ( arg ) . th ( arg ) . th ( arg ) . th ( arg ) . th ( arg ) . th ( arg ) . th ( arg ) . th ( arg ) . _ ( arg ) . _ ( arg ) . tbody ( arg ) ;
TBODY < TABLE < Hamlet >> tbody = html . table ( arg ) . thead ( arg ) . tr ( arg ) . th ( arg ) . th ( arg ) . _ ( arg ) . _ ( arg ) . tbody ( arg ) ;
TBODY < TABLE < Hamlet >> tbody = html . table ( arg ) . thead ( arg ) . tr ( arg ) . th ( arg ) . th ( arg ) . th ( arg ) . th ( arg ) . th ( arg ) . th ( arg ) . th ( arg ) . th ( arg ) . _ ( arg ) . _ ( arg ) . tbody ( arg ) ;
TBODY < TABLE < Hamlet >> tbody = html . table ( arg ) . thead ( arg ) . tr ( arg ) . th ( arg ) . th ( arg ) . th ( arg ) . th ( arg ) . th ( arg ) . th ( arg ) . th ( arg ) . th ( arg ) . _ ( arg ) . _ ( arg ) . tbody ( arg ) ;
TBODY < TABLE < Hamlet >> tbody = html . table ( arg ) . thead ( arg ) . tr ( arg ) . th ( arg ) . th ( arg ) . th ( arg ) . th ( arg ) . th ( arg ) . th ( arg ) . th ( arg ) . th ( arg ) . th ( arg ) . _ ( arg ) . _ ( arg ) . tbody ( arg ) ;
<unk> . delete ( arg ) ;
TaskAttempt successful = <unk> ( arg ) ;
TaskAttemptCompletionEvent [ ] events = new TaskAttemptCompletionEvent [ 0 ] ;
TaskAttemptCompletionEvent <unk> = <unk> . <unk> ( arg ) . newRecordInstance ( arg ) ;
TaskAttemptContainerAssignedEvent <unk> = ( TaskAttemptContainerAssignedEvent ) event ;
TaskAttemptContext taskContext = new TaskAttemptContextImpl ( arg ) ;
TaskAttemptID id = TaskAttemptID . forName ( arg ) ;
TaskAttemptId taskAttemptId = Records . newRecord ( arg ) ;
TaskAttemptId taskAttemptId = recordFactory . newRecordInstance ( arg ) ;
TaskAttemptId taskAttemptId = recordFactory . newRecordInstance ( arg ) ;
TaskId taskId = Records . newRecord ( arg ) ;
TaskId taskId = recordFactory . newRecordInstance ( arg ) ;
TaskId taskId = recordFactory . newRecordInstance ( arg ) ;
<unk> <unk> = <unk> . <unk> . get ( arg ) ;
<unk> taskInfo = jobInfo . <unk> ( arg ) . get ( arg ) ;
TaskState oldState = getState ( arg ) ;
TestAppId id = new TestAppId ( arg ) ;
TestCase . assertEquals ( arg ) ;
TestCase . assertEquals ( arg ) ;
TestCase . assertEquals ( arg ) ;
TestCase . assertEquals ( arg ) ;
TestCase . assertFalse ( arg ) ;
TestCheckpoint . writeFile ( arg ) ;
TestCheckpoint . writeFile ( arg ) ;
<unk> . waitForDNDeletions ( arg ) ;
TestDelegationTokenSecretManager dtSecretManager = new TestDelegationTokenSecretManager ( arg ) ;
TestDelegationTokenSecretManager dtSecretManager = new TestDelegationTokenSecretManager ( arg ) ;
TestEditLogTailer . waitForStandbyToCatchUp ( arg ) ;
TestEditLogTailer . waitForStandbyToCatchUp ( arg ) ;
TestEditLogTailer . waitForStandbyToCatchUp ( arg ) ;
TestEditLogTailer . waitForStandbyToCatchUp ( arg ) ;
TestEditLogTailer . waitForStandbyToCatchUp ( arg ) ;
TestEditLogTailer . waitForStandbyToCatchUp ( arg ) ;
TestEditLogTailer . waitForStandbyToCatchUp ( arg ) ;
TestEditLogTailer . waitForStandbyToCatchUp ( arg ) ;
TestEditLogTailer . waitForStandbyToCatchUp ( arg ) ;
TestEditLogTailer . waitForStandbyToCatchUp ( arg ) ;
TestLocalFileSystem . readFile ( arg ) ;
TestLocalFileSystem . readFile ( arg ) ;
Text <unk> = new Text ( arg ) ;
Text path = new Text ( arg ) ;
Thread . <unk> ( arg ) ;
Thread . <unk> ( arg ) ;
<unk> <unk> = new <unk> ( arg ) . <unk> ( arg ) . build ( arg ) ;
Token < ? > token = fs . getDelegationToken ( arg ) ;
Token < ? > token = <unk> . <unk> ( arg ) ;
Token < ApplicationTokenIdentifier > <unk> = new Token < ApplicationTokenIdentifier > ( arg ) ;
Token < ContainerTokenIdentifier > token = new Token < ContainerTokenIdentifier > ( arg ) ;
Token < DelegationTokenIdentifier > <unk> = <unk> . getDelegationToken ( arg ) ;
Token < DelegationTokenIdentifier > token = client . getDelegationToken ( arg ) ;
Token < DelegationTokenIdentifier > token = dfs . getDelegationToken ( arg ) ;
Token < DelegationTokenIdentifier > token = <unk> . token ;
Token < DelegationTokenIdentifier > token = nn . getDelegationToken ( arg ) ;
Token < DelegationTokenIdentifier > <unk> = <unk> . <unk> ( arg ) ;
Token < <unk> > jt = <unk> ( arg ) ;
Token token = new Token ( arg ) ;
<unk> . <unk> ( arg ) ;
URI <unk> = fileAsURI ( arg ) ;
URI trackingUri = ProxyUriUtils . getUriFromAMUrl ( arg ) ;
URI trackingUri = <unk> == null ? null : ProxyUriUtils . getUriFromAMUrl ( arg ) ;
URLConnection conn = <unk> . openConnection ( arg ) ;
URLConnection connection = <unk> . openConnection ( arg ) ;
URLConnection connection = url . openConnection ( arg ) ;
<unk> <unk> = spy ( arg ) ;
UnderReplicatedBlocks . BlockIterator blkIterator = blockManager . getCorruptReplicaBlockIterator ( arg ) ;
UpgradeCommand cmd ;
UpgradeCommand cmd ;
UpgradeCommand cmd ;
UpgradeCommand ret ;
UpgradeCommand ret ;
UserGroupInformation . <unk> ( arg ) . addToken ( arg ) ;
UserGroupInformation <unk> = UserGroupInformation . <unk> ( arg ) ;
UserGroupInformation proxyUgi2 = UserGroupInformation . createProxyUser ( arg ) ;
UserGroupInformation proxyUgi2 = UserGroupInformation . createProxyUser ( arg ) ;
UserGroupInformation <unk> = UserGroupInformation . createProxyUser ( arg ) ;
UserGroupInformation <unk> = UserGroupInformation . createRemoteUser ( arg ) ;
<unk> = proxy . <unk> ( arg ) ;
Vector < CharSequence > <unk> = new Vector < CharSequence > ( arg ) ;
ViewFileSystemTestSetup . <unk> ( arg ) ;
WebServicesTestUtils . checkStringMatch ( arg ) ;
WebServicesTestUtils . checkStringMatch ( arg ) ;
WebServicesTestUtils . checkStringMatch ( arg ) ;
Writer . <unk> <unk> = <unk> . <unk> ( arg ) ;
Writer < String , Integer > mockWriter = mock ( arg ) ;
Writer < String , Integer > mockWriter = mock ( arg ) ;
<unk> <unk> = conf . <unk> ( arg ) ;
ZooKeeperServer <unk> = new ZooKeeperServer ( arg ) ;
a . assignContainers ( arg ) ;
action = FSConstants . SafeModeAction . <unk> ;
action = FSConstants . SafeModeAction . SAFEMODE_GET ;
action = FSConstants . SafeModeAction . SAFEMODE_GET ;
action = FSConstants . SafeModeAction . <unk> ;
action_ = 0 ;
action_ = 0 ;
action_ = 0 ;
<unk> ( arg ) ;
<unk> = DFSUtil . getInfoServer ( arg ) ;
<unk> . <unk> ( arg ) ;
addToEnvironment ( arg ) ;
addToEnvironment ( arg ) ;
addToEnvironment ( arg ) ;
addToInvalidates ( arg ) ;
addToInvalidates ( arg ) ;
<unk> ( arg ) ;
addr = InetAddress . getByName ( arg ) ;
allOutput . append ( arg ) ;
allocateRequest . setResponseId ( arg ) ;
allocateRequest . setResponseId ( arg ) ;
allocateRequest . setResponseId ( arg ) ;
allocateRequest . setResponseId ( arg ) ;
allocateRequest = BuilderUtils . newAllocateRequest ( arg ) ;
allocateRequest = BuilderUtils . newAllocateRequest ( arg ) ;
allocatedContainers = scheduler . allocate ( arg ) . getAMResponse ( arg ) . getNewContainerList ( arg ) ;
amInfo . <unk> = event . <unk> ( arg ) ;
<unk> = false ;
app . dispatcher . getEventHandler ( arg ) . handle ( arg ) ;
app . dispatcher . getEventHandler ( arg ) . handle ( arg ) ;
app . dispatcher . getEventHandler ( arg ) . handle ( arg ) ;
app . dispatcher . getEventHandler ( arg ) . handle ( arg ) ;
app . handler . handle ( arg ) ;
app . handler . handle ( arg ) ;
app . waitForState ( arg ) ;
app . waitForState ( arg ) ;
appAttempt . finalState = <unk> . <unk> ( arg ) ;
appAttempt . rmContext . <unk> ( arg ) . register ( arg ) ;
appContext . <unk> ( arg ) ;
appContext . setResourceTodo ( arg ) ;
appContext . setResourceTodo ( arg ) ;
<unk> = <unk> ( arg ) ;
<unk> = new RMAppEvent ( arg ) ;
appId . <unk> ( arg ) ;
appId . write ( arg ) ;
<unk> . <unk> . setSignalled ( arg ) ;
appMonitor . addCompletedApp ( arg ) ;
appMonitor . addCompletedApp ( arg ) ;
<unk> . add ( arg ) ;
<unk> . setResourceTodo ( arg ) ;
<unk> . setService ( arg ) ;
appendLink ( arg ) . append ( arg ) . append ( arg ) . append ( arg ) . append ( arg ) . append ( arg ) . append ( arg ) . append ( arg ) . append ( arg ) . append ( arg ) ;
appendLink ( arg ) . append ( arg ) . append ( arg ) . append ( arg ) ;
application . <unk> ( arg ) ;
application . setState ( arg ) ;
application . setState ( arg ) ;
applicationReport . setState ( arg ) ;
applicationReport . setState ( arg ) ;
applications . add ( arg ) ;
applications . remove ( arg ) ;
applicationsManager . finishApplication ( arg ) ;
applicationsManager . finishApplication ( arg ) ;
applicationsManager . forceKillApplication ( arg ) ;
applicationsManager . submitApplication ( arg ) ;
args [ cmd . length ] = f . <unk> ( arg ) ;
array [ i ] = ( DatanodeInfo ) <unk> ( arg ) ;
<unk> ( arg ) ;
assert ( arg ) ;
assert ( arg ) ;
assert isCorrupt ;
<unk> ( arg ) ;
assertCounter ( arg ) ;
assertCounter ( arg ) ;
assertEquals ( arg ) ;
assertEquals ( arg ) ;
assertEquals ( arg ) ;
assertEquals ( arg ) ;
assertEquals ( arg ) ;
assertEquals ( arg ) ;
assertEquals ( arg ) ;
assertEquals ( arg ) ;
assertEquals ( arg ) ;
assertEquals ( arg ) ;
assertEquals ( arg ) ;
assertEquals ( arg ) ;
assertEquals ( arg ) ;
assertEquals ( arg ) ;
assertEquals ( arg ) ;
assertEquals ( arg ) ;
<unk> ( arg ) ;
assertFalse ( arg ) ;
assertKilled ( arg ) ;
assertKilled ( arg ) ;
assertNotNull ( arg ) ;
assertNotNull ( arg ) ;
assertNull ( arg ) ;
assertSame ( arg ) ;
assertSame ( arg ) ;
assertSame ( arg ) ;
assertSame ( arg ) ;
assertSame ( arg ) ;
assertSame ( arg ) ;
assertTrue ( arg ) ;
assertTrue ( arg ) ;
assertTrue ( arg ) ;
assertTrue ( arg ) ;
assertTrue ( arg ) ;
assertTrue ( arg ) ;
assertTrue ( arg ) ;
assertTrue ( arg ) ;
assertTrue ( arg ) ;
assertTrue ( arg ) ;
assigned = <unk> . assignContainers ( arg ) ;
<unk> = ( <unk> . getType ( arg ) == NodeType . <unk> ) ;
attempt . setClockSplits ( arg ) ;
attempt . setClockSplits ( arg ) ;
attempt . <unk> ( arg ) ;
attempt . setPhysMemKbytes ( arg ) ;
attempt . setPhysMemKbytes ( arg ) ;
attempt . setVMemKbytes ( arg ) ;
attempt . setVMemKbytes ( arg ) ;
attempt . setVMemKbytes ( arg ) ;
attemptInfo . error = event . getError ( arg ) ;
attemptInfo . hostname = event . getHostname ( arg ) ;
attemptInfo . hostname = event . getHostname ( arg ) ;
attemptInfo . hostname = event . getHostname ( arg ) ;
attemptInfo . rackname = event . getRackName ( arg ) ;
attemptInfo . rackname = event . getRackName ( arg ) ;
attemptInfo . rackname = event . getRackName ( arg ) ;
attemptInfo . rackname = event . <unk> ( arg ) ;
attemptInfo . <unk> = event . getTrackerName ( arg ) ;
auditLOG . info ( arg ) ;
auditLOG . info ( arg ) ;
auditLOG . warn ( arg ) ;
auditLOG . warn ( arg ) ;
b . append ( arg ) ;
b = impl . updateReplicaUnderRecovery ( arg ) ;
<unk> ( arg ) ;
<unk> = getPos ( arg ) ;
<unk> . setINode ( arg ) ;
<unk> = new BufferedInputStream ( arg ) ;
bitField0_ = ( bitField0_ & ~ 0x00000004 ) ;
bitField0_ = ( bitField0_ & ~ 0x00000008 ) ;
bitField0_ |= 0x00000004 ;
bitField0_ |= 0x00000008 ;
bitField0_ |= 0x00000008 ;
<unk> . setINode ( arg ) ;
<unk> . setINode ( arg ) ;
blockManager . checkDecommissionStateInternal ( arg ) ;
blockManager . commitOrCompleteLastBlock ( arg ) ;
blockManager . commitOrCompleteLastBlock ( arg ) ;
blockSize = fs . getConf ( arg ) . getInt ( arg ) ;
<unk> [ count ++ ] = b . <unk> ;
blockTokenSecretManager . setKeys ( arg ) ;
<unk> . checkDecommissionStateInternal ( arg ) ;
blocks = newlist ;
blocks = null ;
blocks = null ;
<unk> = new com . google . protobuf . SingleFieldBuilder < org . apache . hadoop . hdfs . protocol . proto . HdfsProtos . BlockWithLocationsProto , org . apache . hadoop . hdfs . protocol . proto . HdfsProtos . BlockWithLocationsProto . Builder , org . apache . hadoop . hdfs . protocol . proto . HdfsProtos . <unk> > ( arg ) ;
blocksVolumendexes . add ( arg ) ;
blocks_ = org . apache . hadoop . hdfs . protocol . proto . HdfsProtos . BlockWithLocationsProto . getDefaultInstance ( arg ) ;
blocks_ = org . apache . hadoop . hdfs . protocol . proto . HdfsProtos . BlockWithLocationsProto . getDefaultInstance ( arg ) ;
blocks_ = org . apache . hadoop . hdfs . protocol . proto . HdfsProtos . BlockWithLocationsProto . getDefaultInstance ( arg ) ;
<unk> . blocksMap . addINode ( arg ) ;
boolean dstIsFile = <unk> ( arg ) ;
boolean dstIsFile =! getFileStatus ( arg ) . isDir ( arg ) ;
boolean <unk> = file . isDir ( arg ) || ( <unk> & <unk> ) != 0 ;
boolean <unk> = FailoverController . <unk> ( arg ) ;
boolean hasData = params . get ( arg ) ;
boolean hasData = params . get ( arg ) ;
boolean isCorrupt = fsn . getCorruptReplicaBlockIds ( arg ) != null ;
boolean <unk> = namesystem . <unk> ( arg ) ;
boolean <unk> = <unk> ;
boolean <unk> = i == <unk> . length - 1 ;
boolean <unk> =! ( <unk> . get ( arg ) == null ) ;
boolean readFile = true ;
boolean sendCounters ;
boolean simulated = FSDatasetInterface . Factory . getFactory ( arg ) . isSimulated ( arg ) ;
boolean simulated = FSDatasetInterface . Factory . getFactory ( arg ) . isSimulated ( arg ) ;
boolean simulated = FsDatasetSpi . Factory . getFactory ( arg ) . isSimulated ( arg ) ;
boolean simulated = conf . getBoolean ( arg ) ;
boolean <unk> = backup . getTransactionID ( arg ) == nn . getTransactionID ( arg ) ;
<unk> = new BufferedOutputStream ( arg ) ;
bpMgr . setKeys ( arg ) ;
bpMgr . setKeys ( arg ) ;
bpNamenode = ( DatanodeProtocol ) RPC . waitForProxy ( arg ) ;
bpNamenode = new DatanodeProtocolClientSideTranslatorPB ( arg ) ;
bpRegistration . <unk> . layoutVersion = HdfsConstants . LAYOUT_VERSION ;
<unk> . write ( arg ) ;
bpos . <unk> ( arg ) ;
bpos . <unk> ( arg ) ;
bufCurrent . write ( arg ) ;
bufCurrent . writeInt ( arg ) ;
builder . <unk> ( arg ) ;
builder . <unk> ( arg ) ;
builder . <unk> ( arg ) ;
builder . setBlocks ( arg ) ;
builder . setBlocks ( arg ) ;
builder . setBlocks ( arg ) ;
builder . setBlocks ( arg ) ;
builder . setCapacity ( arg ) . setDfsUsed ( arg ) . setHostName ( arg ) . setId ( arg ) . setLastUpdate ( arg ) . setLocation ( arg ) . setRemaining ( arg ) . setXceiverCount ( arg ) . build ( arg ) ;
builder . setNewTaragets ( arg ) ;
builder . setNewTaragets ( arg ) ;
byte [ ] buf = new byte [ BUFFER_SIZE ] ;
byte [ ] buf = new byte [ FSConstants . IO_FILE_BUFFER_SIZE ] ;
byte [ ] <unk> = new byte [ 4 * FSConstants . MAX_PATH_LENGTH ] ;
byte [ ] <unk> = new byte [ size ] ;
byte [ ] <unk> = token . getIdentifier ( arg ) ;
byte buf [ ] = new byte [ BUFFER_SIZE ] ;
byte buf [ ] = new byte [ FSConstants . IO_FILE_BUFFER_SIZE ] ;
<unk> . setAppId ( arg ) ;
cId . setAppAttemptId ( arg ) ;
cId . setAppId ( arg ) ;
cId . setAppId ( arg ) ;
<unk> = FSEditLogLoader . validateEditLog ( arg ) ;
call . <unk> ( arg ) ;
call . timestamp = System . currentTimeMillis ( arg ) ;
<unk> = DFSClient . createClientDatanodeProtocolProxy ( arg ) ;
checkAcls ( arg ) ;
checkAcls ( arg ) ;
checkAcls ( arg ) ;
checkAcls ( arg ) ;
checkAcls ( arg ) ;
<unk> ( arg ) ;
<unk> ( arg ) ;
<unk> ( arg ) ;
<unk> ( arg ) ;
<unk> ( arg ) ;
checkpoint = new Path ( arg ) ;
checksum . <unk> ( arg ) ;
<unk> = nodes [ r . nextInt ( arg ) ] ;
<unk> = <unk> ;
<unk> ( arg ) ;
<unk> . <unk> ( arg ) ;
<unk> = new ArrayList < TestCmd > ( arg ) ;
client . cluster = mockCluster ;
client . cluster = mockCluster ;
client . cluster = mockCluster ;
client . cluster = mockCluster ;
client . finishApplication ( arg ) ;
client . finishApplication ( arg ) ;
client . forceKillApplication ( arg ) ;
client . getListing ( arg ) ;
client . getListing ( arg ) ;
client . leaserenewer . interruptAndJoin ( arg ) ;
client . leaserenewer . interruptAndJoin ( arg ) ;
client = DFSClient . createNamenode ( arg ) ;
client = DFSClient . createNamenode ( arg ) ;
client = DFSClient . createNamenode ( arg ) ;
client = DFSClient . createNamenode ( arg ) ;
client = DFSUtil . createNamenode ( arg ) ;
client = DFSUtil . createNamenode ( arg ) ;
client = DFSUtil . createNamenode ( arg ) ;
client = DFSUtil . createNamenode ( arg ) ;
client = DFSUtil . createNamenode ( arg ) ;
cluster . cancelDelegationToken ( arg ) ;
cluster . getDataNodes ( arg ) . get ( arg ) . getFSDataset ( arg ) . <unk> ( arg ) ;
cluster . getNameNode ( arg ) . addBlock ( arg ) ;
cluster . getNameNode ( arg ) . append ( arg ) ;
cluster . getNameNode ( arg ) . blockReport ( arg ) ;
cluster . getNameNode ( arg ) . blockReport ( arg ) ;
cluster . getNameNode ( arg ) . blockReport ( arg ) ;
cluster . getNameNode ( arg ) . blockReport ( arg ) ;
cluster . getNameNode ( arg ) . blockReport ( arg ) ;
cluster . getNameNode ( arg ) . blockReport ( arg ) ;
cluster . getNameNode ( arg ) . blockReport ( arg ) ;
cluster . getNameNode ( arg ) . blockReport ( arg ) ;
cluster . getNameNode ( arg ) . getListing ( arg ) ;
cluster . getNameNode ( arg ) . getListing ( arg ) ;
cluster . getNameNode ( arg ) . getRpcServer ( arg ) . transitionToActive ( arg ) ;
cluster . getNameNode ( arg ) . getRpcServer ( arg ) . transitionToActive ( arg ) ;
cluster . getNameNode ( arg ) . getRpcServer ( arg ) . transitionToActive ( arg ) ;
cluster . getNameNode ( arg ) . rollEditLog ( arg ) ;
cluster . getNameNode ( arg ) . <unk> ( arg ) ;
cluster . getNameNode ( arg ) . setSafeMode ( arg ) ;
cluster . getNameNode ( arg ) . setSafeMode ( arg ) ;
cluster . getNameNode ( arg ) . setSafeMode ( arg ) ;
cluster . getNameNode ( arg ) . setSafeMode ( arg ) ;
cluster . getNamesystem ( arg ) . computeDatanodeWork ( arg ) ;
cluster . getNamesystem ( arg ) . getDelegationTokenSecretManager ( arg ) . startThreads ( arg ) ;
cluster . getNamesystem ( arg ) . getDelegationTokenSecretManager ( arg ) . startThreads ( arg ) ;
cluster . getNamesystem ( arg ) . getDelegationTokenSecretManager ( arg ) . startThreads ( arg ) ;
cluster . getNamesystem ( arg ) . markBlockAsCorrupt ( arg ) ;
cluster . getNamesystem ( arg ) . refreshNodes ( arg ) ;
cluster . getNamesystem ( arg ) . refreshNodes ( arg ) ;
cluster . getNamesystem ( arg ) . refreshNodes ( arg ) ;
cluster . shutdown ( arg ) ;
cluster . transitionToActive ( arg ) ;
cluster = new MiniDFSCluster . Builder ( arg ) . build ( arg ) ;
cluster = new MiniDFSCluster . Builder ( arg ) . build ( arg ) ;
cluster = new MiniDFSCluster . Builder ( arg ) . federation ( arg ) . nameNodePort ( arg ) . build ( arg ) ;
cluster = new MiniDFSCluster . Builder ( arg ) . federation ( arg ) . numNameNodes ( arg ) . numDataNodes ( arg ) . build ( arg ) ;
cluster = new MiniDFSCluster . Builder ( arg ) . federation ( arg ) . numNameNodes ( arg ) . numDataNodes ( arg ) . build ( arg ) ;
cluster = new MiniDFSCluster . Builder ( arg ) . nnTopology ( arg ) . numDataNodes ( arg ) . build ( arg ) ;
cluster = new MiniDFSCluster . Builder ( arg ) . nnTopology ( arg ) . numDataNodes ( arg ) . build ( arg ) ;
cluster = new MiniDFSCluster . Builder ( arg ) . nnTopology ( arg ) . numDataNodes ( arg ) . build ( arg ) ;
cluster = new MiniDFSCluster . Builder ( arg ) . nnTopology ( arg ) . numDataNodes ( arg ) . manageNameDfsSharedDirs ( arg ) . build ( arg ) ;
cluster = new MiniDFSCluster . Builder ( arg ) . nnTopology ( arg ) . numDataNodes ( arg ) . manageNameDfsSharedDirs ( arg ) . build ( arg ) ;
cluster = new MiniDFSCluster . Builder ( arg ) . numDataNodes ( arg ) . build ( arg ) ;
cluster = new MiniDFSCluster . Builder ( arg ) . numDataNodes ( arg ) . build ( arg ) ;
cluster = new MiniDFSCluster . Builder ( arg ) . numDataNodes ( arg ) . <unk> ( arg ) . build ( arg ) ;
cluster = new MiniDFSCluster . Builder ( arg ) . numDataNodes ( arg ) . format ( arg ) . build ( arg ) ;
cluster = new MiniDFSCluster . Builder ( arg ) . numDataNodes ( arg ) . format ( arg ) . build ( arg ) ;
cluster = new MiniDFSCluster . Builder ( arg ) . numDataNodes ( arg ) . format ( arg ) . build ( arg ) ;
cluster = new MiniDFSCluster . Builder ( arg ) . numDataNodes ( arg ) . format ( arg ) . startupOption ( arg ) . build ( arg ) ;
cluster = new MiniDFSCluster . Builder ( arg ) . numDataNodes ( arg ) . manageNameDfsDirs ( arg ) . build ( arg ) ;
cluster = new MiniDFSCluster . Builder ( arg ) . numNameNodes ( arg ) . build ( arg ) ;
cluster = new MiniDFSCluster . Builder ( arg ) . numNameNodes ( arg ) . nameNodePort ( arg ) . build ( arg ) ;
cluster = new MiniDFSCluster . Builder ( arg ) . numNameNodes ( arg ) . numDataNodes ( arg ) . build ( arg ) ;
cluster = new MiniDFSCluster . Builder ( arg ) . numNameNodes ( arg ) . numDataNodes ( arg ) . <unk> ( arg ) . build ( arg ) ;
cmds = NameNodeAdapter . sendHeartBeat ( arg ) ;
cmds = NameNodeAdapter . sendHeartBeat ( arg ) ;
cmds = NameNodeAdapter . sendHeartBeat ( arg ) ;
cmds = NameNodeAdapter . sendHeartBeat ( arg ) ;
cmds = sendHeartBeat ( arg ) ;
cmds = sendHeartBeat ( arg ) ;
cmds = sendHeartBeat ( arg ) ;
cmds = sendHeartBeat ( arg ) ;
collector = new <unk> ( arg ) ;
combined = KRB5_CIPHER_SUITES ;
combined = new String [ <unk> . length + KRB5_CIPHER_SUITES . length ] ;
committer = new <unk> ( arg ) ;
<unk> ( arg ) ;
<unk> = true ;
<unk> = recoveryServ . <unk> ( arg ) ;
computeAndSetUserResourceLimit ( arg ) ;
<unk> ( arg ) ;
<unk> . <unk> ( arg ) ;
conf . set ( arg ) ;
conf . set ( arg ) ;
conf . set ( arg ) ;
conf . set ( arg ) ;
conf . setBoolean ( arg ) ;
conf . setBoolean ( arg ) ;
conf . setBoolean ( arg ) ;
conf . setBoolean ( arg ) ;
conf . setBoolean ( arg ) ;
conf . setBoolean ( arg ) ;
conf . setBoolean ( arg ) ;
conf . setBoolean ( arg ) ;
conf . setBoolean ( arg ) ;
conf . setBoolean ( arg ) ;
conf . setBoolean ( arg ) ;
conf . setBoolean ( arg ) ;
conf . setBoolean ( arg ) ;
conf . setBoolean ( arg ) ;
conf . setBoolean ( arg ) ;
conf . setBoolean ( arg ) ;
conf . setBoolean ( arg ) ;
conf . setBoolean ( arg ) ;
conf . setBoolean ( arg ) ;
conf . setBoolean ( arg ) ;
conf . setBoolean ( arg ) ;
conf . setBoolean ( arg ) ;
conf . setBoolean ( arg ) ;
conf . setBoolean ( arg ) ;
conf . setBoolean ( arg ) ;
conf . setBoolean ( arg ) ;
conf . setBoolean ( arg ) ;
conf . <unk> ( arg ) ;
conf . <unk> ( arg ) ;
conf . setStrings ( arg ) ;
conf . setStrings ( arg ) ;
conf . setStrings ( arg ) ;
conf . setStrings ( arg ) ;
conf = ViewFileSystemTestSetup . configWithViewfsScheme ( arg ) ;
conf = ViewFileSystemTestSetup . configWithViewfsScheme ( arg ) ;
conf = new Configuration ( arg ) ;
connection . <unk> ( arg ) ;
connection = ( HttpURLConnection ) url . openConnection ( arg ) ;
connection = ( HttpURLConnection ) url . openConnection ( arg ) ;
container . <unk> ( arg ) ;
container . <unk> ( arg ) ;
container . dispatcher . getEventHandler ( arg ) . handle ( arg ) ;
container . dispatcher . getEventHandler ( arg ) . handle ( arg ) ;
container . dispatcher . getEventHandler ( arg ) . handle ( arg ) ;
container . dispatcher . getEventHandler ( arg ) . handle ( arg ) ;
container . dispatcher . getEventHandler ( arg ) . handle ( arg ) ;
container . dispatcher . getEventHandler ( arg ) . handle ( arg ) ;
container . exitCode = String . valueOf ( arg ) ;
container . exitCode = String . valueOf ( arg ) ;
container . setContainerTokens ( arg ) ;
container . setContainerTokens ( arg ) ;
container . setEnv ( arg ) ;
container . setLocalResource ( arg ) ;
container . setLocalResource ( arg ) ;
containerEnv = request . <unk> ( arg ) . <unk> ( arg ) ;
containerId . setAppId ( arg ) ;
containerId . setAppId ( arg ) ;
containerId = maps . remove ( arg ) ;
containerId = reduces . remove ( arg ) ;
containerManager = createContainerManager ( arg ) ;
<unk> = containerTokenSecretManager . <unk> ( arg ) ;
conts = am . allocate ( arg ) . getNewContainerList ( arg ) ;
conts = am . allocate ( arg ) . getNewContainerList ( arg ) ;
<unk> ( arg ) ;
count ++ ;
<unk> = Long . parseLong ( arg ) ;
counters = recordFactory . newRecordInstance ( arg ) ;
crc = ( crc >>> 8 ) ^ T1 [ ( crc ^ b ) & 0xff ] ;
crc = ( crc >>> 8 ) ^ T1 [ ( crc ^ b [ off ++ ] ) & 0xff ] ;
crc = ( crc >>> 8 ) ^ T8_0 [ ( crc ^ b ) & 0xff ] ;
crc = ( crc >>> 8 ) ^ T8_0 [ ( crc ^ b ) & 0xff ] ;
crc = ( crc >>> 8 ) ^ T8_0 [ ( crc ^ b [ off ++ ] ) & 0xff ] ;
crc |= ( <unk> & ( long ) checksum [ i ] ) << ( ( checksum . length - i - 1 ) * 8 ) ;
createFile ( arg ) ;
createFile ( arg ) ;
createFile ( arg ) ;
createFile ( arg ) ;
createFile ( arg ) ;
<unk> ( arg ) ;
createNode ( arg ) ;
createNode ( arg ) ;
<unk> ( arg ) ;
created . remove ( arg ) ;
created . set ( arg ) ;
created = created & client . <unk> ( arg ) ;
cred . addToken ( arg ) ;
cred . addTokensToUGI ( arg ) ;
<unk> . addToken ( arg ) ;
<unk> . addTokensToUGI ( arg ) ;
cur = node ;
<unk> = <unk> . <unk> ( arg ) ;
current . namenode = DFSUtil . createNamenode ( arg ) ;
currentPeriodStart = System . currentTimeMillis ( arg ) ;
data . <unk> ( arg ) ;
data = factory . createFSDatasetInterface ( arg ) ;
data = factory . createFSDatasetInterface ( arg ) ;
data = factory . newInstance ( arg ) ;
datanode . metrics . addFsync ( arg ) ;
datanode . metrics . addFsync ( arg ) ;
datanode . metrics . addFsync ( arg ) ;
datanodeIDs_ = java . util . Collections . emptyList ( arg ) ;
datanodeIDs_ = java . util . Collections . unmodifiableList ( arg ) ;
datanodeIDs_ = new java . util . ArrayList < org . apache . hadoop . hdfs . protocol . proto . HdfsProtos . DatanodeIDProto > ( arg ) ;
decoder = <unk> . <unk> ( arg ) . <unk> ( arg ) ;
decoder = new <unk> ( arg ) ;
<unk> . <unk> ( arg ) ;
<unk> = NameNode . getHostPortString ( arg ) ;
<unk> = fc . makeQualified ( arg ) ;
delegationToken = ( Token < DelegationTokenIdentifier > ) getDelegationToken ( arg ) ;
delegationTokenRenewer . removeApplication ( arg ) ;
delegationTokenRenewer . removeApplication ( arg ) ;
<unk> = <unk> . <unk> ( arg ) ;
deleteOnExit . clear ( arg ) ;
deleteOnExit . put ( arg ) ;
<unk> [ i ] = getDatanode ( arg ) ;
dfs . dfs . leaserenewer . interruptAndJoin ( arg ) ;
dfs . dfs . leaserenewer . interruptAndJoin ( arg ) ;
dfs . dfs . leaserenewer . interruptAndJoin ( arg ) ;
dfs . dfs . leaserenewer . interruptAndJoin ( arg ) ;
dfs . dfs . leaserenewer . interruptAndJoin ( arg ) ;
dfs . lastLeaseRenewal = System . currentTimeMillis ( arg ) - <unk> ;
dfs . mkdirs ( arg ) ;
dfs = ( DistributedFileSystem ) cluster . getFileSystem ( arg ) ;
dfs = new MiniDFSCluster ( arg ) ;
dfs = new MiniDFSCluster . Builder ( arg ) . nameNodePort ( arg ) . numDataNodes ( arg ) . startupOption ( arg ) . build ( arg ) ;
dfsClient . leaserenewer . <unk> ( arg ) ;
dfsCluster . getNamesystem ( arg ) . getDelegationTokenSecretManager ( arg ) . startThreads ( arg ) ;
dfsCluster . getNamesystem ( arg ) . getDelegationTokenSecretManager ( arg ) . startThreads ( arg ) ;
dfsCluster . getNamesystem ( arg ) . getDelegationTokenSecretManager ( arg ) . startThreads ( arg ) ;
dfsCluster = new MiniDFSCluster ( arg ) ;
dir . replaceNode ( arg ) ;
dir = new Path ( arg ) ;
dir = volumes . get ( arg ) . getBlockPoolSlice ( arg ) . <unk> ( arg ) ;
dirReports . add ( arg ) ;
dispatcher . getEventHandler ( arg ) . handle ( arg ) ;
dispatcher . getEventHandler ( arg ) . handle ( arg ) ;
dispatcher = new AsyncDispatcher ( arg ) ;
<unk> ( arg ) ;
displayName = Text . readString ( arg ) ;
<unk> ( arg ) ;
div . <unk> ( arg ) . _ ( arg ) ;
<unk> = dir . getListing ( arg ) ;
<unk> = nodeReg . getHost ( arg ) ;
dnConf . setBoolean ( arg ) ;
dnId . storageID = <unk> ( arg ) ;
dnRegistration . setStorageInfo ( arg ) ;
dnRegistration = nameNode . <unk> ( arg ) ;
dnp . blockReceived ( arg ) ;
dnp . blockReceived ( arg ) ;
dnp . blockReceivedAndDeleted ( arg ) ;
<unk> ( arg ) ;
<unk> . <unk> ( arg ) ;
double waitTime = timeWindow * failures + timeWindow * ( failures + 1 ) * dfsClient . r . <unk> ( arg ) ;
<unk> . <unk> ( arg ) . writeInt ( arg ) ;
<unk> = getFileStatus ( arg ) ;
dtRenewer . addRenewAction ( arg ) ;
dtRenewer . addRenewAction ( arg ) ;
dtRenewer = renewer ;
<unk> ( arg ) ;
e . <unk> ( arg ) ;
<unk> . write ( arg ) ;
editLog . open ( arg ) ;
editLog . <unk> ( arg ) ;
editsFiles . add ( arg ) ;
<unk> = System . currentTimeMillis ( arg ) - start ;
elector . process ( arg ) ;
elector . process ( arg ) ;
elector . process ( arg ) ;
elector . process ( arg ) ;
elector . process ( arg ) ;
elector . process ( arg ) ;
elector . process ( arg ) ;
elector . process ( arg ) ;
elector . process ( arg ) ;
elector . process ( arg ) ;
elector . process ( arg ) ;
emptyTime = System . currentTimeMillis ( arg ) ;
emptyTime = System . currentTimeMillis ( arg ) ;
<unk> = new <unk> ( arg ) ;
endTime = Util . now ( arg ) ;
entries . add ( arg ) ;
<unk> . add ( arg ) ;
<unk> . println ( arg ) ;
errorSDs . add ( arg ) ;
errorSDs . add ( arg ) ;
<unk> ( arg ) ;
event = new RMAppEvent ( arg ) ;
event = new RMAppFailedAttemptEvent ( arg ) ;
eventHandlingThread . interrupt ( arg ) ;
eventHandlingThread . join ( arg ) ;
<unk> . <unk> ( arg ) ;
executionTime [ <unk> ] += ( System . currentTimeMillis ( arg ) - startTime ) ;
executionTime [ <unk> ] += ( System . currentTimeMillis ( arg ) - startTime ) ;
executionTime [ <unk> ] += ( System . currentTimeMillis ( arg ) - startTime ) ;
executionTime [ <unk> ] += ( System . currentTimeMillis ( arg ) - startTime ) ;
executionTime [ <unk> ] += ( System . currentTimeMillis ( arg ) - startTime ) ;
exitCode = null ;
exitCode = null ;
<unk> = FSConstants . INVALID_TXID ;
f = writeFile ( arg ) ;
fReader = new FileReader ( arg ) ;
fReader = new FileReader ( arg ) ;
fReader = new FileReader ( arg ) ;
fReader = new FileReader ( arg ) ;
fReader = new FileReader ( arg ) ;
fStatus = cluster . getNameNode ( arg ) . getFileInfo ( arg ) ;
fStatus = cluster . getNameNode ( arg ) . getFileInfo ( arg ) ;
fStatus = cluster . getNameNode ( arg ) . getFileInfo ( arg ) ;
<unk> = new FileInputStream ( arg ) ;
<unk> = ViewFileSystemTestSetup . <unk> ( arg ) ;
fail ( arg ) ;
fail ( arg ) ;
fail ( arg ) ;
fail ( arg ) ;
fail ( arg ) ;
fail ( arg ) ;
fail ( arg ) ;
fail ( arg ) ;
failures = failures == null ? 0 : failures ;
fc . mkdirs ( arg ) ;
fc . mkdirs ( arg ) ;
fc . mkdirs ( arg ) ;
fc . mkdirs ( arg ) ;
fc . mkdirs ( arg ) ;
fc . mkdirs ( arg ) ;
fc . mkdirs ( arg ) ;
fc . mkdirs ( arg ) ;
fc . mkdirs ( arg ) ;
fc . mkdirs ( arg ) ;
fc . mkdirs ( arg ) ;
fc . mkdirs ( arg ) ;
fc . mkdirs ( arg ) ;
fc . mkdirs ( arg ) ;
fc . mkdirs ( arg ) ;
fc . mkdirs ( arg ) ;
fcView . getDefaultFileSystem ( arg ) . resolvePath ( arg ) ;
fcView . getDefaultFileSystem ( arg ) . resolvePath ( arg ) ;
fcView . getDefaultFileSystem ( arg ) . resolvePath ( arg ) ;
<unk> . delete ( arg ) ;
fds = ( FSDataset ) DataNodeTestUtils . getFSDataset ( arg ) ;
fds = ( FSDataset ) cluster . getDataNodes ( arg ) . get ( arg ) . getFSDataset ( arg ) ;
file . setModificationTime ( arg ) ;
file . <unk> ( arg ) ;
fileINode . setBlock ( arg ) ;
<unk> . add ( arg ) ;
<unk> = cl == null ? null : Long . parseLong ( arg ) ;
files . mkdir ( arg ) ;
files . mkdir ( arg ) ;
final ApplicationId id = <unk> ( arg ) ;
final ApplicationState state = <unk> ( arg ) ;
final ArrayList < DatanodeDescriptor > <unk> = this . getDecommissioningNodes ( arg ) ;
final Block <unk> = dn . data . getStoredBlock ( arg ) ;
final Collection < Block > blocks = node2blocks . remove ( arg ) ;
final Collection < Block > set = node2blocks . get ( arg ) ;
final Collection < Block > v = node2blocks . get ( arg ) ;
final Collection < URI > namenodes = DFSUtil . getNsServiceRpcUris ( arg ) ;
final Collection < URI > namenodes = DFSUtil . getNsServiceRpcUris ( arg ) ;
final Configuration conf = ( Configuration ) context . getAttribute ( arg ) ;
final Configuration conf = ( Configuration ) context . getAttribute ( arg ) ;
final Configuration conf = ( Configuration ) context . getAttribute ( arg ) ;
final Configuration conf = ( Configuration ) context . getAttribute ( arg ) ;
final Configuration conf = ( Configuration ) context . <unk> ( arg ) . get ( arg ) ;
final Configuration conf = ( Configuration ) getServletContext ( arg ) . getAttribute ( arg ) ;
final Configuration conf = new Configuration ( arg ) ;
final DFSDataInputStream dis = in ;
final DFSDataInputStream in = ( DFSDataInputStream ) fs . open ( arg ) ;
final DFSOutputStream result = new DFSOutputStream ( arg ) ;
final DFSTestUtil util = new DFSTestUtil ( arg ) ;
final DatanodeDescriptor <unk> = getDatanode ( arg ) ;
final DatanodeDescriptor targets [ ] = replicator . chooseTarget ( arg ) ;
final DatanodeID datanode = namenode . getNamesystem ( arg ) . getRandomDatanode ( arg ) ;
final DatanodeID datanode = nn . getNamesystem ( arg ) . getRandomDatanode ( arg ) ;
final DatanodeInfo [ ] <unk> = cluster . getNameNode ( arg ) . <unk> ( arg ) ;
final DatanodeInfo [ ] targets = blockManager . replicator . chooseTarget ( arg ) ;
final DatanodeManager dm = fsnamesystem . getBlockManager ( arg ) . getDatanodeManager ( arg ) ;
final DatanodeManager dm = namesystem . getBlockManager ( arg ) . getDatanodeManager ( arg ) ;
final DistCp distcp = new DistCp ( arg ) ;
final DistCp distcp = new DistCp ( arg ) ;
final DistributedFileSystem dfs = ( DistributedFileSystem ) cluster . getFileSystem ( arg ) ;
final DistributedFileSystem dfs = ( DistributedFileSystem ) cluster . getFileSystem ( arg ) ;
final DistributedFileSystem dfs = ( DistributedFileSystem ) cluster . getFileSystem ( arg ) ;
final DistributedFileSystem dfs = ( DistributedFileSystem ) cluster . getFileSystem ( arg ) ;
final FSDatasetInterface . Factory < ? extends FSDatasetInterface < ? >> factory = FSDatasetInterface . Factory . getFactory ( arg ) ;
final FSDatasetInterface . Factory < ? extends FSDatasetInterface < ? >> factory = FSDatasetInterface . Factory . getFactory ( arg ) ;
final FSDatasetInterface . Factory factory = FSDatasetInterface . Factory . getFactory ( arg ) ;
final FSDatasetInterface < ? > dataSet = DataNodeTestUtils . getFSDataset ( arg ) ;
final FSDatasetInterface < ? > dataSet = DataNodeTestUtils . getFSDataset ( arg ) ;
final FSDatasetInterface < ? > dataSet = DataNodeTestUtils . getFSDataset ( arg ) ;
final FSDatasetInterface < ? > dataSet = DataNodeTestUtils . getFSDataset ( arg ) ;
final FSImage <unk> = ( FSImage ) context . getAttribute ( arg ) ;
final <unk> [ ] inodes = <unk> . <unk> ( arg ) ;
final FSNamesystem namesystem = cluster . getNamesystem ( arg ) ;
final FSNamesystem namesystem = new FSNamesystem ( arg ) ;
final FSNamesystem namesystem = new FSNamesystem ( arg ) ;
final FSVolume v = <unk> . getVolume ( arg ) ;
final File f = DataNodeTestUtils . getBlockFile ( arg ) ;
final File metafile = getMetaFile ( arg ) ;
final <unk> <unk> = new <unk> ( arg ) ;
final FileStatus <unk> = getFileStatus ( arg ) ;
final FileStatus <unk> = getFileStatus ( arg ) ;
final FileSystem fs = TestDFSClientFailover . configureFailoverFs ( arg ) ;
final FsDatasetSpi . Factory < ? extends FsDatasetSpi < ? >> factory = FsDatasetSpi . Factory . getFactory ( arg ) ;
final FsDatasetSpi < ? > dataSet = DataNodeTestUtils . getFSDataset ( arg ) ;
final FsDatasetSpi < ? > dataSet = DataNodeTestUtils . getFSDataset ( arg ) ;
final HdfsFileStatus file = namenode . getFileInfo ( arg ) ;
final <unk> . Op op = <unk> . Op . <unk> ;
final HttpURLConnection conn = <unk> ( arg ) ;
final INodeDirectorySnapshotRoot r = new INodeDirectorySnapshotRoot ( arg ) ;
final INodeDirectorySnapshotRoot root = srcRoot . <unk> ( arg ) ;
final INodeDirectorySnapshottable <unk> = INodeDirectorySnapshottable . newInstance ( arg ) ;
final INodeFile src = rootDir . <unk> ( arg ) ;
final INodeFileUnderConstruction pendingFile = checkLease ( arg ) ;
final INodeFileUnderConstruction pendingFile = checkLease ( arg ) ;
final <unk> <unk> = rootDir . getExistingPathINodes ( arg ) ;
final InetSocketAddress address = new InetSocketAddress ( arg ) ;
final InetSocketAddress nnAddr = NetUtils . createSocketAddr ( arg ) ;
final JobSubmitter <unk> = new JobSubmitter ( arg ) ;
final List < ? extends FSVolumeInterface > volumes = dataset . getVolumes ( arg ) ;
final List < FSVolumeInterface > volumeList = new ArrayList < FSVolumeInterface > ( arg ) ;
final List < FSVolumeInterface > volumes = dataset . getVolumes ( arg ) ;
final List < InetSocketAddress > namenodes = DFSUtil . getNNServiceRpcAddresses ( arg ) ;
final List < InetSocketAddress > namenodes = DFSUtil . getNNServiceRpcAddresses ( arg ) ;
final LocalResource resource = <unk> ( arg ) ;
final Map < Path , String > <unk> = container . <unk> ( arg ) ;
final Map < String , Map < String , InetSocketAddress >> namenodes = DFSUtil . getNNServiceRpcAddresses ( arg ) ;
final Map < String , Map < String , InetSocketAddress >> namenodes = DFSUtil . getNNServiceRpcAddresses ( arg ) ;
final Map < String , Map < String , InetSocketAddress >> namenodes = DFSUtil . getNNServiceRpcAddresses ( arg ) ;
final Map < String , Map < String , InetSocketAddress >> namenodes = DFSUtil . getNNServiceRpcAddresses ( arg ) ;
final Map < String , Object > json = run ( arg ) ;
final Map < String , Object > json = run ( arg ) ;
final Map < String , Object > json = run ( arg ) ;
final Map < String , Object > json = run ( arg ) ;
final Map < String , Object > json = run ( arg ) ;
final Map < String , Object > m ;
final Map < String , Object > m = jsonMap . get ( arg ) ;
final Map < String , Object > m = jsonMap . get ( arg ) ;
final Map < String , Object > m = jsonMap . get ( arg ) ;
final Map < String , Object > m = jsonMap . get ( arg ) ;
final Map < String , Object > m = run ( arg ) ;
final Map < String , Object > m = run ( arg ) ;
final Map < String , Object > m = run ( arg ) ;
final Map < String , Object > m = run ( arg ) ;
final Map < String , String > env = launchContext . getEnv ( arg ) ;
final MessageDigest digester = DIGESTER_FACTORY . get ( arg ) ;
final MetaDataInputStream <unk> = datanode . data . <unk> ( arg ) ;
final MiniDFSCluster cluster = new MiniDFSCluster . Builder ( arg ) . numNameNodes ( arg ) . numDataNodes ( arg ) . racks ( arg ) . simulatedCapacities ( arg ) . build ( arg ) ;
final MiniDFSCluster cluster = new MiniDFSCluster . Builder ( arg ) . numNameNodes ( arg ) . numDataNodes ( arg ) . racks ( arg ) . simulatedCapacities ( arg ) . build ( arg ) ;
final MiniDFSCluster cluster = new MiniDFSCluster . Builder ( arg ) . numNameNodes ( arg ) . numDataNodes ( arg ) . racks ( arg ) . simulatedCapacities ( arg ) . format ( arg ) . build ( arg ) ;
final NameNode namenode = ( NameNode ) context . getAttribute ( arg ) ;
final NameNode namenode = cluster . getNameNode ( arg ) ;
final NameNode namenode = cluster . getNameNode ( arg ) ;
final NameNode nn = ( NameNode ) context . getAttribute ( arg ) ;
final NameNode nn = ( NameNode ) context . getAttribute ( arg ) ;
final NameNode nn = ( NameNode ) context . getAttribute ( arg ) ;
final NameNode nn = ( NameNode ) context . getAttribute ( arg ) ;
final NameNode nn = ( NameNode ) context . getAttribute ( arg ) ;
final Path <unk> = <unk> ( arg ) ;
final Path newWorkingDir = new Path ( arg ) ;
final Path newWorkingDir = resolve ( arg ) ;
final Path <unk> = resolve ( arg ) ;
final PrintStream out = new PrintStream ( arg ) ;
final PrintStream out = new PrintStream ( arg ) ;
final RetryPolicy defaultPolicy = getDefaultRetryPolicy ( arg ) ;
final RetryPolicy defaultPolicy = getDefaultRpcRetryPolicy ( arg ) ;
final RetryPolicy defaultPolicy = getDefaultRpcRetryPolicy ( arg ) ;
final RoundRobinVolumesPolicy < FSVolumeInterface > policy = new RoundRobinVolumesPolicy < FSVolumeInterface > ( arg ) ;
final SchedulerApp application = ( SchedulerApp ) ( <unk> . <unk> ( arg ) [ 0 ] ) ;
final Server <unk> = RPC . getServer ( arg ) ;
final Server server = RPC . getServer ( arg ) ;
final Server server = RPC . getServer ( arg ) ;
final Server server = RPC . getServer ( arg ) ;
final Server server = RPC . getServer ( arg ) ;
final Server server = RPC . getServer ( arg ) ;
final Server server = RPC . getServer ( arg ) ;
final Server server = RPC . getServer ( arg ) ;
final Server server = RPC . getServer ( arg ) ;
final String TEST_LOG_NAME = test_edit_log ;
final String TEST_LOG_NAME = test_edit_log ;
final String [ ] args = new String [ <unk> . nextInt ( arg ) + 1 ] ;
final String filename = <unk> ( arg ) ;
final String hostname = host instanceof DatanodeInfo ? ( ( DatanodeInfo ) host ) . getHostName ( arg ) : host . getHost ( arg ) ;
final String <unk> = <unk> ;
final String nnAddr = req . getParameter ( arg ) ;
final String <unk> = DFSUtil . <unk> ( arg ) . toString ( arg ) ;
final String path = request . <unk> ( arg ) ;
final String query = op . toQueryString ( arg ) + delegationQuery + Param . toSortedString ( arg ) ;
final String query = op . toQueryString ( arg ) + delegationQuery + Param . toSortedString ( arg ) ;
final String <unk> = <unk> . <unk> ( arg ) ;
final String serviceAddr = conf . get ( arg ) ;
final String <unk> = serviceAddr ;
final String user = request . <unk> ( arg ) ;
final String username = Text . <unk> ( arg ) ;
final TaskAttemptState oldState = getState ( arg ) ;
final Token < DelegationTokenIdentifier > token = dfs . getDelegationToken ( arg ) ;
final Token < DelegationTokenIdentifier > token = dfs . getDelegationToken ( arg ) ;
final TransferFsImage <unk> = new TransferFsImage ( arg ) ;
final TreeMultiset < EditLogInputStream > allStreams = TreeMultiset . create ( arg ) ;
final TreeMultiset < EditLogInputStream > allStreams = TreeMultiset . create ( arg ) ;
final TreeMultiset < EditLogInputStream > allStreams = TreeMultiset . create ( arg ) ;
final UnderReplicatedBlocks neededReplications = ( UnderReplicatedBlocks ) cluster . getNameNode ( arg ) . getNamesystem ( arg ) . getBlockManager ( arg ) . neededReplications ;
final UserGroupInformation ugi ;
final int <unk> = <unk> ;
final int <unk> = 10 ;
final int d = search ( arg ) ;
final int d = search ( arg ) ;
final int len = data . length - offset ;
final int len = data . length - offset ;
final int <unk> = FSConstants . MAX_PATH_LENGTH ;
final int <unk> = blockManager . <unk> - <unk> ;
final int min = 5 ;
final int min = WritableUtils . getVIntSize ( arg ) + WritableUtils . getVIntSize ( arg ) + WritableUtils . getVIntSize ( arg ) ;
final int numNodes = 1 ;
final int numNodes = 2 ;
final int <unk> = 9 ;
final int thech = inShadow . read ( arg ) ;
final int thech = inShadow . read ( arg ) ;
final int thech = inShadow . read ( arg ) ;
final int thech = inShadow . read ( arg ) ;
final int thech = inShadow . read ( arg ) ;
final long <unk> = <unk> ( arg ) ;
final long <unk> = System . currentTimeMillis ( arg ) - <unk> ( arg ) ;
final long end = System . currentTimeMillis ( arg ) ;
final long <unk> = offset ;
final long millis = System . currentTimeMillis ( arg ) ;
final long <unk> = renewalTime - System . currentTimeMillis ( arg ) ;
final long n = length . getValue ( arg ) != null ? length . getValue ( arg ) : in . <unk> ( arg ) ;
final long now = System . currentTimeMillis ( arg ) ;
final long now = Util . now ( arg ) ;
final long start = System . currentTimeMillis ( arg ) ;
final long startTime = System . currentTimeMillis ( arg ) ;
final long startTime = Util . now ( arg ) ;
final long startTime = Util . now ( arg ) ;
final long t = System . currentTimeMillis ( arg ) - starttime ;
finalState = FAILED ;
finalState = KILLED ;
finalState = SUCCEEDED ;
finishTimeEpoch = System . currentTimeMillis ( arg ) ;
finishTimeEpoch = System . currentTimeMillis ( arg ) ;
first = <unk> ( arg ) ;
first = false ;
firstTxId = FSConstants . INVALID_TXID ;
firstTxId = op . txid ;
fis . close ( arg ) ;
float <unk> = parent . getAbsoluteCapacity ( arg ) * capacity ;
float capacity = <unk> ( arg ) ;
float <unk> = CompressionEmulationUtil . <unk> ( arg ) ;
float utilization = <unk> ;
<unk> ( arg ) ;
<unk> ( boolean written =! <unk> ; ! written ; written = nameNode . <unk> ( arg ) ) ;
forceRefresh = true ;
forceRefresh = true ;
<unk> = hostResolver . getByName ( arg ) . getHostName ( arg ) ;
fqdn = InetAddress . getByName ( arg ) . getCanonicalHostName ( arg ) ;
fromEventId += events . length ;
fromEventId = 0 ;
fromSvc . transitionToActive ( arg ) ;
fromSvc . transitionToStandby ( arg ) ;
fs . create ( arg ) ;
fs . delegationToken = ( Token < DelegationTokenIdentifier > ) fs . getDelegationToken ( arg ) ;
fs . delete ( arg ) ;
fs . listStatus ( arg ) ;
fs . mkdirs ( arg ) ;
fs . <unk> ( arg ) ;
fs = FileSystem . get ( arg ) ;
fs = FileSystem . get ( arg ) ;
fs = TestDFSClientFailover . configureFailoverFs ( arg ) ;
fs = TestDFSClientFailover . configureFailoverFs ( arg ) ;
fs = TestDFSClientFailover . configureFailoverFs ( arg ) ;
fsDir . replaceNode ( arg ) ;
fsDir . rootDir . <unk> ( arg ) ;
fsDir . rootDir . setModificationTime ( arg ) ;
fsDir . rootDir . <unk> ( arg ) ;
fsImage . <unk> ( arg ) . <unk> ( arg ) ;
fsNamesys . getBlockManager ( arg ) . addINode ( arg ) ;
<unk> . delete ( arg ) ;
fsTokens . addTokensToUGI ( arg ) ;
fsTokens = null ;
<unk> . open ( arg ) ;
fsn . blockManager . blocksMap . addINode ( arg ) ;
fsn . computeDatanodeWork ( arg ) ;
fsn . getBlockManager ( arg ) . blocksMap . addINode ( arg ) ;
fsn . refreshNodes ( arg ) ;
fsn = new FSNamesystem ( arg ) ;
fsn = new FSNamesystem ( arg ) ;
fsn = new FSNamesystem ( arg ) ;
fsn = new FSNamesystem ( arg ) ;
fsn = new FSNamesystem ( arg ) ;
fsnamesystem . checkDecommissionStateInternal ( arg ) ;
fsnamesystem . writeUnlock ( arg ) ;
generationStamp_ = input . readUInt64 ( arg ) ;
getConfig ( arg ) . set ( arg ) ;
getFSofPath ( arg ) . <unk> ( arg ) ;
getHaServiceClient ( arg ) . transitionToActive ( arg ) ;
getHaServiceClient ( arg ) . transitionToStandby ( arg ) ;
getNamenode ( arg ) . endCheckpoint ( arg ) ;
<unk> ( arg ) ;
getProxy ( arg ) . <unk> ( arg ) ;
getQueue ( arg ) ;
<unk> ( arg ) ;
<unk> ( arg ) ;
<unk> = true ;
group . displayName = <unk> . displayName ;
handler . handle ( arg ) ;
hash = ( 53 * hash ) + getAction ( arg ) ;
hash = ( 53 * hash ) + getAction ( arg ) ;
hash = hash * <unk> + ( int ) version ;
<unk> . th ( arg ) . th ( arg ) . th ( arg ) . th ( arg ) ;
header . write ( arg ) ;
header = new <unk> ( arg ) ;
header [ 0 ] = ( byte ) ( type & 0xff ) ;
hflush ( arg ) ;
homeDir = this . makeQualified ( arg ) ;
homeDir = this . makeQualified ( arg ) ;
<unk> = InetAddress . <unk> ( arg ) ;
hostname = host . getHost ( arg ) ;
html . div ( arg ) . _ ( arg ) . div ( arg ) . div ( arg ) . div ( arg ) . div ( arg ) . _ ( arg ) . _ ( arg ) . _ ( arg ) . div ( arg ) . _ ( arg ) . div ( arg ) . _ ( arg ) . div ( arg ) . _ ( arg ) . _ ( arg ) . _ ( arg ) . _ ( arg ) . _ ( arg ) . div ( arg ) . _ ( arg ) . _ ( arg ) . _ ( arg ) ;
html . div ( arg ) . h3 ( arg ) . _ ( arg ) . _ ( arg ) . _ ( arg ) . div ( arg ) . _ ( arg ) ;
html . div ( arg ) . h3 ( arg ) . _ ( arg ) . _ ( arg ) . ul ( arg ) . li ( arg ) . a ( arg ) . _ ( arg ) . li ( arg ) . a ( arg ) . _ ( arg ) . li ( arg ) . a ( arg ) . _ ( arg ) . _ ( arg ) . h3 ( arg ) . _ ( arg ) . _ ( arg ) . _ ( arg ) . div ( arg ) . _ ( arg ) ;
html . div ( arg ) . h3 ( arg ) . _ ( arg ) . _ ( arg ) . ul ( arg ) . li ( arg ) . a ( arg ) . _ ( arg ) . li ( arg ) . a ( arg ) . _ ( arg ) . li ( arg ) . a ( arg ) . _ ( arg ) . _ ( arg ) . h3 ( arg ) . ul ( arg ) . li ( arg ) . a ( arg ) . _ ( arg ) . li ( arg ) . a ( arg ) . _ ( arg ) . li ( arg ) . a ( arg ) . _ ( arg ) . li ( arg ) . a ( arg ) . _ ( arg ) . _ ( arg ) . _ ( arg ) . div ( arg ) . _ ( arg ) ;
html . div ( arg ) . h3 ( arg ) . ul ( arg ) . li ( arg ) . li ( arg ) . li ( arg ) . _ ( arg ) . h3 ( arg ) . ul ( arg ) . li ( arg ) . a ( arg ) . _ ( arg ) . li ( arg ) . a ( arg ) . _ ( arg ) . li ( arg ) . a ( arg ) . _ ( arg ) . li ( arg ) . a ( arg ) . _ ( arg ) . _ ( arg ) . _ ( arg ) . div ( arg ) . _ ( arg ) ;
html . link ( arg ) . link ( arg ) . script ( arg ) . script ( arg ) . script ( arg ) . script ( arg ) . script ( arg ) . <unk> ( arg ) ;
i . blocks = newBlocks ;
id . setAppAttemptId ( arg ) ;
id . setAppAttemptId ( arg ) ;
if ( ! <unk> . isDir ( arg ) ) continue ;
if ( ! <unk> ) return ;
if ( ! isSecurityEnabled ( arg ) ) return ;
if ( ! isSecurityEnabled ( arg ) || user . <unk> ( arg ) != <unk> . <unk> || isKeytab ) return ;
if ( ! <unk> . equals ( arg ) ) list . add ( arg ) ;
if ( ! <unk> . isDir ( arg ) ) throw new IOException ( arg ) ;
if ( ! srcFS . getFileStatus ( arg ) . isDir ( arg ) ) return false ;
if ( ! stat . isDir ( arg ) ) throw new <unk> ( arg ) ;
if ( ! super . equals ( arg ) ) return false ;
if ( ( arg ) % <unk> . <unk> == 0 ) nameNode . <unk> ( arg ) ;
if ( ( arg ) replication == safeReplication ) this . blockSafe ++ ;
if ( ( arg ) replication == safeReplication ) this . blockSafe ++ ;
if ( LOG . isDebugEnabled ( arg ) ) LOG . debug ( arg ) ;
if ( LOG . isDebugEnabled ( arg ) ) LOG . debug ( arg ) ;
if ( System . currentTimeMillis ( arg ) - start > <unk> ) break ;
if ( System . currentTimeMillis ( arg ) - start > <unk> ) assertTrue ( arg ) ;
if ( actionName == null || actionName . equals ( arg ) ) throw new IllegalArgumentException ( arg ) ;
if ( attributeName == null || attributeName . equals ( arg ) ) throw new IllegalArgumentException ( arg ) ;
if ( blockManager != null ) blockManager . close ( arg ) ;
if ( cluster != null ) cluster . shutdown ( arg ) ;
if ( cluster != null ) cluster . shutdown ( arg ) ;
if ( <unk> == null ) return ;
if ( <unk> == 0 ) return false ;
if ( dfs . getCounter ( arg ) == numberOfExpectedRenewals ) break ;
if ( elf . isCorrupt ( arg ) || elf . <unk> ( arg ) ) continue ;
if ( fs == null ) fs = new <unk> ( arg ) ;
if ( <unk> ( arg ) ) throw new <unk> ( arg ) ;
if ( interval == 0 ) return ;
if ( interval == 0 ) return false ;
if ( isWindows ) return ;
if ( isWindows ) return ;
if ( lastTime + interval > System . currentTimeMillis ( arg ) ) return ;
if ( namesystem . datanodeMap . get ( arg ) != null ) <unk> = null ;
if ( nn . getFSImage ( arg ) . isUpgradeFinalized ( arg ) ) return new DatanodeCommand . <unk> ( arg ) ;
if ( nn . getFSImage ( arg ) . isUpgradeFinalized ( arg ) ) return new <unk> ( arg ) ;
if ( null == <unk> ) throw new IOException ( arg ) ;
if ( proto . <unk> ( arg ) <= 0 && proto . <unk> ( arg ) ) return false ;
if ( <unk> ) return ;
if ( r . <unk> ( arg ) ) <unk> = node ;
if ( replication == safeReplication ) this . blockSafe ++ ;
if ( <unk> == null ) throw new IOException ( arg ) ;
if ( server != null ) server . stop ( arg ) ;
if ( <unk> ) setModificationTime ( arg ) ;
if ( size == 0 ) return ;
if ( size == 0 ) return ;
if ( srcFS . getFileStatus ( arg ) . isDirectory ( arg ) ) return false ;
if ( <unk> . isLink ( arg ) ) return null ;
if ( <unk> >= checkpointTxnCount ) <unk> = true ;
if ( version != FSConstants . LAYOUT_VERSION ) throw new IncorrectVersionException ( arg ) ;
if ( version != LAYOUT_VERSION ) throw new IncorrectVersionException ( arg ) ;
image . <unk> ( arg ) ;
in . close ( arg ) ;
in = new DFSClient . DFSDataInputStream ( arg ) ;
in = new DataInputStream ( arg ) ;
inSafeMode = dfs . isInSafeMode ( arg ) ;
inSafeMode = dfs . setSafeMode ( arg ) ;
<unk> += p . <unk> ;
incrAllCounters ( arg ) ;
index = rand . nextInt ( arg ) ;
info ( arg ) . _ ( arg ) ;
info . <unk> = event . <unk> ( arg ) ;
info . jobStatus = event . getStatus ( arg ) ;
info . subQueues = getQueues ( arg ) ;
info . username = event . getUserName ( arg ) ;
<unk> [ i ] = new DatanodeInfo ( arg ) ;
inputLines = Integer . parseInt ( arg ) ;
<unk> ( arg ) ;
int [ ] r = NameNodeAdapter . getReplicaInfo ( arg ) ;
int <unk> = ( ( DFSOutputStream ) ( out . getWrappedStream ( arg ) ) ) . <unk> ( arg ) ;
int <unk> = <unk> ;
int blockSize = conf . getInt ( arg ) ;
int blockSize = this . in . read ( arg ) ;
int <unk> = conf . getInt ( arg ) ;
int capacity = getInt ( arg ) ;
int checksumSize = checksum . getChecksumSize ( arg ) ;
int count = 0 ;
int count = conf . getInt ( arg ) ;
int count = parent . getChildren ( arg ) . size ( arg ) ;
int <unk> = bsR ( arg ) ;
int <unk> = out . size ( arg ) ;
int <unk> = out . size ( arg ) ;
int <unk> = <unk> ? 0 : <unk> . MISSING_DIST_CACHE_FILES_ERROR ;
int <unk> = 0 ;
int <unk> = <unk> . <unk> ( arg ) ;
int <unk> = <unk> ;
int <unk> = metrics . <unk> ( arg ) ;
int inputLines = 1 ;
int <unk> = nodes [ 0 ] . <unk> ;
int keyIndex = r . nextInt ( arg ) + i ;
int keyIndex = r . nextInt ( arg ) ;
int len = WritableUtils . readVInt ( arg ) ;
int length = <unk> . <unk> ( arg ) ;
int length = WritableUtils . readVInt ( arg ) ;
int length = in . readInt ( arg ) ;
int length = in . readInt ( arg ) ;
int length = in . readInt ( arg ) ;
int length = in . readInt ( arg ) ;
int limit = <unk> ( arg ) ;
int <unk> = Collections . <unk> ( arg ) ;
int <unk> = this . in . read ( arg ) ;
int maps = <unk> ;
int maxCapacity = getInt ( arg ) ;
int <unk> = conf . getInt ( arg ) ;
int n = in . read ( arg ) ;
int newAttempts = 0 , <unk> = 0 , successful = 0 , <unk> = 0 , <unk> = 0 ;
int nnRpcPort = DFSConfigKeys . DFS_NAMENODE_RPC_PORT_DEFAULT ;
int nnRpcPort = NameNode . DEFAULT_PORT ;
int <unk> = job . getJob ( arg ) . <unk> ( arg ) ;
int numDatanodes = 2 ;
int numDatanodes = Math . <unk> ( arg ) ;
int numEdits = 0 ;
int numEdits = loader . loadFSEdits ( arg ) ;
int numEdits = loader . loadFSEdits ( arg ) ;
int numEdits = testLoad ( arg ) ;
int numEdits = testLoad ( arg ) ;
int <unk> = loader . loadFSEdits ( arg ) ;
int numExpectedReplicas = file . getReplication ( arg ) ;
int <unk> = 0 ;
int numNodes = <unk> . size ( arg ) ;
int <unk> = 0 , <unk> = 0 , <unk> = 0 , <unk> = 0 , <unk> = 0 , <unk> = 0 , <unk> = 0 , <unk> = 0 , <unk> = 0 , <unk> = 0 , <unk> = 0 , <unk> = 0 , <unk> = 0 , <unk> = 0 , <unk> = 0 , <unk> = 0 , <unk> = 0 , <unk> = 0 , <unk> = 0 ;
int numRead ;
int pktSize = PacketHeader . PKT_HEADER_LEN ;
int pktSize = payloadLen + PacketHeader . PKT_HEADER_LEN - FSConstants . <unk> ;
int pktSize = payloadLen + PacketHeader . PKT_HEADER_LEN - <unk> ;
int port = dn . getSelfAddr ( arg ) . getPort ( arg ) ;
int <unk> = out . size ( arg ) ;
int <unk> = out . size ( arg ) ;
int processingTime = ( int ) ( System . currentTimeMillis ( arg ) - startTime ) ;
int processingTime = ( int ) ( System . currentTimeMillis ( arg ) - startTime ) ;
int rand = new <unk> ( arg ) . nextInt ( arg ) ;
int <unk> = <unk> . nextInt ( arg ) ;
int <unk> = Math . min ( arg ) ;
int repls = ns . numCorruptReplicas ( arg ) ;
int result = 1 ;
int <unk> = conf . getInt ( arg ) ;
int <unk> = 0 ;
int size = bufCurrent . size ( arg ) ;
int <unk> = FSConstants . LAYOUT_VERSION ;
int <unk> = r . nextInt ( arg ) ;
int <unk> = dirInode . <unk> ( arg ) ;
int testType = TEST_TYPE_READ ;
int <unk> = path . toUri ( arg ) . getPort ( arg ) ;
int thech = this . in . read ( arg ) ;
int <unk> = <unk> ;
int type = checksumTypeMap . <unk> ( arg ) . get ( arg ) ;
int written = fc . write ( arg ) ;
int written = fc . write ( arg ) ;
int zvec = ( bsBuffShadow >> ( arg ) ) & ( ( 1 << zn ) - 1 ) ;
<unk> = RPC . getServer ( arg ) ;
<unk> = <unk> && <unk> && <unk> && <unk> && <unk> && <unk> ;
<unk> = ( ( ! nameNode . isInSafeMode ( arg ) <unk> <unk> ) && <unk> [ 0 ] != 0 ) ;
isas = DFSUtil . getNNServiceRpcAddresses ( arg ) ;
it . next ( arg ) . write ( arg ) ;
it . remove ( arg ) ;
item = new PathData ( arg ) ;
jas . close ( arg ) ;
jas . close ( arg ) ;
java . io . InputStream in = new java . io . FileInputStream ( arg ) ;
<unk> . setSignalled ( arg ) ;
<unk> = System . currentTimeMillis ( arg ) ;
job . <unk> ( arg ) ;
job . fs = FileSystem . get ( arg ) ;
job . <unk> ( arg ) . addTokensToUGI ( arg ) ;
job . <unk> . <unk> ( arg ) ;
job = new Job ( arg ) ;
<unk> = Text . readString ( arg ) ;
jobInfo = parser . parse ( arg ) ;
jobMaps . clear ( arg ) ;
jobMaps . clear ( arg ) ;
<unk> . <unk> ( arg ) ;
<unk> . selectInputStreams ( arg ) ;
journals . add ( arg ) ;
jt . setService ( arg ) ;
key = DFSUtil . getNameServiceIdKey ( arg ) ;
<unk> = className . toString ( arg ) ;
<unk> ( arg ) ;
lapStart = System . currentTimeMillis ( arg ) ;
lastBlockReport = System . currentTimeMillis ( arg ) - ( blockReportInterval - DFSUtil . getRandom ( arg ) . nextInt ( arg ) ) ;
lastBlockReport = System . currentTimeMillis ( arg ) - ( blockReportInterval - R . nextInt ( arg ) ) ;
lastBlockReport = System . currentTimeMillis ( arg ) - ( dn . blockReportInterval - DFSUtil . getRandom ( arg ) . nextInt ( arg ) ) ;
lastBlockReport = System . currentTimeMillis ( arg ) - ( dnConf . blockReportInterval - DFSUtil . getRandom ( arg ) . nextInt ( arg ) ) ;
lastBlockReport = lastHeartbeat - blockReportInterval ;
lastBlockReport = lastHeartbeat - dn . blockReportInterval ;
lastBlockReport = startTime - R . nextInt ( arg ) ;
lastChildIdx = random . nextInt ( arg ) ;
lastChildIdx = random . nextInt ( arg ) ;
<unk> = System . currentTimeMillis ( arg ) ;
<unk> = System . currentTimeMillis ( arg ) ;
<unk> = System . currentTimeMillis ( arg ) ;
lastLeaseRenewal = System . currentTimeMillis ( arg ) ;
<unk> = namesystem . blockManager . <unk> ( arg ) ;
lastPrint = System . currentTimeMillis ( arg ) ;
lastPrint = System . currentTimeMillis ( arg ) ;
<unk> . set ( arg ) ;
<unk> = System . currentTimeMillis ( arg ) ;
<unk> = System . currentTimeMillis ( arg ) ;
lastSeenCpuUsageCpuUsage = 0 ;
lastSeenCpuUsageCpuUsage = monitor . <unk> ( arg ) . <unk> ( arg ) ;
lastTime = System . currentTimeMillis ( arg ) ;
<unk> . read ( arg ) ;
<unk> . put ( arg ) ;
launchContext . setEnv ( arg ) ;
<unk> . shutdown ( arg ) ;
leaserenewer . <unk> ( arg ) ;
leaserenewer . put ( arg ) ;
leaserenewer . put ( arg ) ;
leaserenewer . put ( arg ) ;
left = expire - System . currentTimeMillis ( arg ) ;
left = expire - System . currentTimeMillis ( arg ) ;
lfs . mkdir ( arg ) ;
lfs . mkdir ( arg ) ;
lfs . mkdir ( arg ) ;
lfs . mkdir ( arg ) ;
lfs . mkdir ( arg ) ;
lfs . mkdir ( arg ) ;
lfs . mkdir ( arg ) ;
lfs . mkdir ( arg ) ;
<unk> . rollLogs ( arg ) ;
localDirs = conf . getStrings ( arg ) ;
localDirs = conf . <unk> ( arg ) ;
<unk> = new HdfsConfiguration ( arg ) ;
localTarget . getProxy ( arg ) . transitionToActive ( arg ) ;
localTarget . getProxy ( arg ) . transitionToActive ( arg ) ;
localTarget . <unk> ( arg ) ;
<unk> = NetUtils . createSocketAddr ( arg ) ;
localizedPath = <unk> ( arg ) ;
localizedPath = <unk> ( arg ) ;
<unk> = new <unk> ( arg ) ;
locatedBlocks = DFSClient . callGetBlockLocations ( arg ) ;
locatedBlocks = DFSClient . callGetBlockLocations ( arg ) ;
locatedBlocks = cluster . getNameNode ( arg ) . getBlockLocations ( arg ) ;
locatedBlocks = hdfs . getClient ( arg ) . getBlockLocations ( arg ) ;
log . open ( arg ) ;
log = new FSEditLog ( arg ) ;
log = new FSEditLog ( arg ) ;
log = new FSEditLog ( arg ) ;
log = new FSEditLog ( arg ) ;
log = new FSEditLog ( arg ) ;
logContext . addServlet ( arg ) ;
logContext . addServlet ( arg ) ;
logContext . getServletContext ( arg ) . setAttribute ( arg ) ;
<unk> . <unk> ( arg ) ;
<unk> ( arg ) ;
loginUser . login = login ;
loginUser . login = login ;
long [ ] blockReport = new long [ ] { val } ;
long [ ] <unk> = fsn . getCorruptReplicaBlockIds ( arg ) ;
long [ ] <unk> = namenode . <unk> ( arg ) ;
long a = rng . nextInt ( arg ) << <unk> ;
long b = ( ( long ) rng . nextInt ( arg ) ) & <unk> ;
long <unk> = System . currentTimeMillis ( arg ) ;
long callTime = System . currentTimeMillis ( arg ) - startTime ;
long callTime = System . currentTimeMillis ( arg ) - startTime ;
long <unk> = System . currentTimeMillis ( arg ) - <unk> . <unk> ( arg ) ;
long curTime = System . currentTimeMillis ( arg ) ;
long curTime = System . currentTimeMillis ( arg ) ;
long currentTime = System . currentTimeMillis ( arg ) ;
long currentTime = System . currentTimeMillis ( arg ) ;
long currentTime = System . currentTimeMillis ( arg ) ;
long <unk> = System . currentTimeMillis ( arg ) ;
long decodeEnd = System . currentTimeMillis ( arg ) ;
long decodeEnd = System . currentTimeMillis ( arg ) ;
long decodeStart = System . currentTimeMillis ( arg ) ;
long decodeStart = System . currentTimeMillis ( arg ) ;
long <unk> = System . currentTimeMillis ( arg ) - start ;
long encodeEnd = System . currentTimeMillis ( arg ) ;
long encodeEnd = System . currentTimeMillis ( arg ) ;
long encodeStart = System . currentTimeMillis ( arg ) ;
long encodeStart = System . currentTimeMillis ( arg ) ;
long end = System . currentTimeMillis ( arg ) + <unk> ;
long end = System . currentTimeMillis ( arg ) ;
long end = System . currentTimeMillis ( arg ) ;
long end = System . currentTimeMillis ( arg ) ;
long end = System . currentTimeMillis ( arg ) ;
long end = System . currentTimeMillis ( arg ) ;
long end = System . currentTimeMillis ( arg ) ;
long end = System . currentTimeMillis ( arg ) ;
long end = System . currentTimeMillis ( arg ) ;
long end = System . currentTimeMillis ( arg ) ;
long end = System . currentTimeMillis ( arg ) ;
long end = System . currentTimeMillis ( arg ) ;
long end = System . currentTimeMillis ( arg ) ;
long end = System . currentTimeMillis ( arg ) ;
long end = System . currentTimeMillis ( arg ) ;
long end = System . currentTimeMillis ( arg ) ;
long end = System . currentTimeMillis ( arg ) ;
long end = System . currentTimeMillis ( arg ) ;
long end = System . currentTimeMillis ( arg ) ;
long end = System . currentTimeMillis ( arg ) ;
long end = System . currentTimeMillis ( arg ) ;
long end = Util . now ( arg ) ;
long endTime = ( timeout > 0 ) ? ( System . currentTimeMillis ( arg ) + timeout ) : 0 ;
long endTime = System . currentTimeMillis ( arg ) + millis ;
long endTime = System . currentTimeMillis ( arg ) ;
long <unk> = System . currentTimeMillis ( arg ) ;
long et = System . currentTimeMillis ( arg ) ;
long et = System . currentTimeMillis ( arg ) ;
long et = System . currentTimeMillis ( arg ) ;
long et = System . currentTimeMillis ( arg ) ;
long et = System . currentTimeMillis ( arg ) ;
long et = System . currentTimeMillis ( arg ) ;
long et = System . currentTimeMillis ( arg ) ;
long <unk> = System . currentTimeMillis ( arg ) ;
long <unk> = <unk> * <unk> + System . currentTimeMillis ( arg ) ;
long <unk> = ( <unk> * 2 * <unk> ) + 2 ;
long expire = System . currentTimeMillis ( arg ) + timeout ;
long expire = System . currentTimeMillis ( arg ) + timeout ;
long failtime = ( timeout <= 0 ) ? Long . MAX_VALUE : System . currentTimeMillis ( arg ) + timeout ;
long failtime = ( timeout <= 0L ) ? Long . MAX_VALUE : System . currentTimeMillis ( arg ) + timeout ;
long failtime = ( timeout <= 0L ) ? Long . MAX_VALUE : System . currentTimeMillis ( arg ) + timeout ;
long failtime = System . currentTimeMillis ( arg ) + ( ( timeout > 0 ) ? timeout : Long . MAX_VALUE ) ;
long <unk> = 1 * <unk> ;
long first = ( ( blocks . length == 1 ) ? blocks [ 0 ] . <unk> ( arg ) : 0 ) ;
long <unk> = System . currentTimeMillis ( arg ) + offset ;
long <unk> = System . currentTimeMillis ( arg ) - start ;
long <unk> = System . currentTimeMillis ( arg ) - scanPeriod ;
long <unk> = System . currentTimeMillis ( arg ) ;
long left = endTime - System . currentTimeMillis ( arg ) ;
long len = sendChunks ( arg ) ;
long limit = System . currentTimeMillis ( arg ) + <unk> * <unk> ;
long localstart = System . currentTimeMillis ( arg ) ;
long localstart = System . currentTimeMillis ( arg ) ;
long min = FSConstants . <unk> ;
long mlsec = System . currentTimeMillis ( arg ) ;
long now = System . currentTimeMillis ( arg ) ;
long now = System . currentTimeMillis ( arg ) ;
long now = System . currentTimeMillis ( arg ) ;
long now = System . currentTimeMillis ( arg ) ;
long now = System . currentTimeMillis ( arg ) ;
long now = System . currentTimeMillis ( arg ) ;
long now = System . currentTimeMillis ( arg ) ;
long now = System . currentTimeMillis ( arg ) ;
long now = System . currentTimeMillis ( arg ) ;
long now = System . currentTimeMillis ( arg ) ;
long now = System . currentTimeMillis ( arg ) ;
long now = System . currentTimeMillis ( arg ) ;
long now = System . currentTimeMillis ( arg ) ;
long now = System . currentTimeMillis ( arg ) ;
long now = System . currentTimeMillis ( arg ) ;
long now = System . currentTimeMillis ( arg ) ;
long now = System . currentTimeMillis ( arg ) ;
long now = System . currentTimeMillis ( arg ) ;
long now = System . currentTimeMillis ( arg ) ;
long now = System . currentTimeMillis ( arg ) ;
long now = System . currentTimeMillis ( arg ) ;
long now = System . currentTimeMillis ( arg ) ;
long now = System . currentTimeMillis ( arg ) ;
long now = System . currentTimeMillis ( arg ) ;
long now = System . currentTimeMillis ( arg ) ;
long offset = out . size ( arg ) ;
long offset = out . size ( arg ) ;
long <unk> = validation . <unk> ;
long <unk> = Math . min ( arg ) ;
long <unk> = System . currentTimeMillis ( arg ) ;
long <unk> = System . currentTimeMillis ( arg ) ;
long read = val . getNumTransactions ( arg ) ;
long seed = System . currentTimeMillis ( arg ) ;
long seed = System . currentTimeMillis ( arg ) ;
long <unk> = System . currentTimeMillis ( arg ) ;
long <unk> = file . length ( arg ) - <unk> . getPos ( arg ) ;
long <unk> = ( <unk> - System . currentTimeMillis ( arg ) ) + <unk> ;
long st = System . currentTimeMillis ( arg ) ;
long st = System . currentTimeMillis ( arg ) ;
long st = System . currentTimeMillis ( arg ) ;
long st = System . currentTimeMillis ( arg ) ;
long st = System . currentTimeMillis ( arg ) ;
long st = System . currentTimeMillis ( arg ) ;
long st = System . currentTimeMillis ( arg ) ;
long st = System . currentTimeMillis ( arg ) ;
long st = System . currentTimeMillis ( arg ) ;
long st = System . currentTimeMillis ( arg ) ;
long st = System . currentTimeMillis ( arg ) ;
long st = System . currentTimeMillis ( arg ) ;
long start = ( timeout == 0 ) ? 0 : System . currentTimeMillis ( arg ) ;
long start = System . currentTimeMillis ( arg ) ;
long start = System . currentTimeMillis ( arg ) ;
long start = System . currentTimeMillis ( arg ) ;
long start = System . currentTimeMillis ( arg ) ;
long start = System . currentTimeMillis ( arg ) ;
long start = System . currentTimeMillis ( arg ) ;
long start = System . currentTimeMillis ( arg ) ;
long start = System . currentTimeMillis ( arg ) ;
long start = System . currentTimeMillis ( arg ) ;
long start = System . currentTimeMillis ( arg ) ;
long start = System . currentTimeMillis ( arg ) ;
long start = System . currentTimeMillis ( arg ) ;
long start = System . currentTimeMillis ( arg ) ;
long start = System . currentTimeMillis ( arg ) ;
long start = System . currentTimeMillis ( arg ) ;
long start = System . currentTimeMillis ( arg ) ;
long start = System . currentTimeMillis ( arg ) ;
long start = System . currentTimeMillis ( arg ) ;
long start = System . currentTimeMillis ( arg ) ;
long start = System . currentTimeMillis ( arg ) ;
long start = System . currentTimeMillis ( arg ) ;
long start = System . currentTimeMillis ( arg ) ;
long start = System . currentTimeMillis ( arg ) ;
long start = System . currentTimeMillis ( arg ) ;
long start = System . currentTimeMillis ( arg ) ;
long start = System . currentTimeMillis ( arg ) ;
long start = System . currentTimeMillis ( arg ) ;
long start = System . currentTimeMillis ( arg ) ;
long start = System . currentTimeMillis ( arg ) ;
long start = Util . now ( arg ) ;
long start = Util . now ( arg ) ;
long start = Util . now ( arg ) ;
long start = Util . now ( arg ) ;
long startTime = System . currentTimeMillis ( arg ) ;
long startTime = System . currentTimeMillis ( arg ) ;
long startTime = System . currentTimeMillis ( arg ) ;
long startTime = System . currentTimeMillis ( arg ) ;
long startTime = System . currentTimeMillis ( arg ) ;
long startTime = System . currentTimeMillis ( arg ) ;
long startTime = System . currentTimeMillis ( arg ) ;
long startTime = System . currentTimeMillis ( arg ) ;
long startTime = System . currentTimeMillis ( arg ) ;
long startTime = System . currentTimeMillis ( arg ) ;
long startTime = System . currentTimeMillis ( arg ) ;
long startTime = System . currentTimeMillis ( arg ) ;
long startTime = Util . <unk> ( arg ) ;
long startTime = Util . now ( arg ) ;
long starttime = System . currentTimeMillis ( arg ) ;
long starttime = System . currentTimeMillis ( arg ) ;
long <unk> = System . currentTimeMillis ( arg ) + waitTime ;
long t1 = System . currentTimeMillis ( arg ) ;
long <unk> = System . currentTimeMillis ( arg ) ;
long <unk> = System . currentTimeMillis ( arg ) ;
long <unk> = latestImage . getTxId ( arg ) ;
long <unk> = now ( arg ) - <unk> ;
long <unk> = currentPeriodStart + scanPeriod - System . currentTimeMillis ( arg ) ;
long timeStamp = System . currentTimeMillis ( arg ) ;
long timeStamp = System . currentTimeMillis ( arg ) ;
long timeout = maxIdleTime - ( System . currentTimeMillis ( arg ) - <unk> . get ( arg ) ) ;
long timestamp = System . currentTimeMillis ( arg ) ;
long timestamp2 = System . currentTimeMillis ( arg ) ;
long trashInterval = conf . getLong ( arg ) ;
long trashInterval = namesystem . getServerDefaults ( arg ) . <unk> ( arg ) ;
long txid = cluster . getNameNode ( arg ) . getTransactionID ( arg ) ;
long txid = cluster . getNameNode ( arg ) . getTransactionID ( arg ) ;
long <unk> = <unk> ( arg ) ;
long waitStart = System . currentTimeMillis ( arg ) ;
long waitStart = System . currentTimeMillis ( arg ) ;
long waitTime = dn . heartBeatInterval - ( System . currentTimeMillis ( arg ) - lastHeartbeat ) ;
long waitTime = heartBeatInterval - ( System . currentTimeMillis ( arg ) - lastHeartbeat ) ;
long <unk> = <unk> - System . currentTimeMillis ( arg ) ;
long <unk> = System . currentTimeMillis ( arg ) - start ;
long <unk> = socketWriteTimeout + HdfsConstants . WRITE_TIMEOUT_EXTENSION * ( targets . length - 1 ) ;
m . put ( arg ) ;
m . put ( arg ) ;
m = ( MetricsTimeVaryingRate ) rpcMetrics . registry . get ( arg ) ;
mThread . interrupt ( arg ) ;
mThread . interrupt ( arg ) ;
mThread . join ( arg ) ;
<unk> . li ( arg ) . a ( arg ) . _ ( arg ) . _ ( arg ) . h3 ( arg ) . ul ( arg ) . li ( arg ) . a ( arg ) . _ ( arg ) . li ( arg ) . a ( arg ) . _ ( arg ) . li ( arg ) . a ( arg ) . _ ( arg ) . li ( arg ) . a ( arg ) . _ ( arg ) . _ ( arg ) . _ ( arg ) . div ( arg ) . _ ( arg ) ;
<unk> += task . getProgress ( arg ) ;
<unk> = fds . fetchReplicaInfo ( arg ) ;
<unk> ( arg ) ;
message = HadoopRpcRequestProto . parseFrom ( arg ) ;
message = <unk> . parseFrom ( arg ) ;
metrics . <unk> ( arg ) ;
metrics . <unk> ( arg ) ;
metrics . <unk> ( arg ) ;
metrics . loginFailure . inc ( arg ) ;
metrics . loginFailure . inc ( arg ) ;
metrics . loginFailure . inc ( arg ) ;
metrics . loginSuccess . inc ( arg ) ;
metrics . loginSuccess . inc ( arg ) ;
metrics . loginSuccess . inc ( arg ) ;
<unk> = targets [ 0 ] . getName ( arg ) ;
mlsec = System . currentTimeMillis ( arg ) - mlsec ;
<unk> = Mockito . mock ( arg ) ;
monitorNode ( arg ) ;
monitorNode ( arg ) ;
<unk> ( arg ) ;
mrApp . waitForState ( arg ) ;
mrApp . waitForState ( arg ) ;
ms . <unk> ( arg ) ;
ms . <unk> ( arg ) ;
myFs . <unk> ( arg ) ;
myFs . setPermission ( arg ) ;
myFs . <unk> ( arg ) ;
<unk> . register ( arg ) ;
name = Text . readString ( arg ) ;
name = <unk> ( arg ) ;
name = nodeReg . getName ( arg ) ;
nameNode . blockReceived ( arg ) ;
nameNode . blockReceived ( arg ) ;
nameNode . blockReceived ( arg ) ;
nameNode . blockReceived ( arg ) ;
nameNode . blockReceivedAndDeleted ( arg ) ;
nameNode . blockReceivedAndDeleted ( arg ) ;
nameNode . create ( arg ) ;
nameNode . delete ( arg ) ;
nameNode . delete ( arg ) ;
nameNode . getBlockLocations ( arg ) ;
nameNode . getFileInfo ( arg ) ;
nameNode . refreshNodes ( arg ) ;
nameNode . rename ( arg ) ;
nameNode . setSafeMode ( arg ) ;
<unk> . remove ( arg ) ;
namenode . getNamesystem ( arg ) . blockManager . <unk> ( arg ) ;
namenode . rename ( arg ) ;
namenodeAddress = ( InetSocketAddress ) context . getAttribute ( arg ) ;
namenodeAddress = DFSUtil . getSocketAddress ( arg ) ;
namesystem . <unk> ( arg ) ;
namesystem . blockManager . addToInvalidates ( arg ) ;
namesystem . blockReceived ( arg ) ;
namesystem . dir . addToParent ( arg ) ;
namesystem . getBlockManager ( arg ) . blockReceivedAndDeleted ( arg ) ;
namesystem . getBlockManager ( arg ) . startDecommission ( arg ) ;
namesystem . getBlockManager ( arg ) . startDecommission ( arg ) ;
namesystem . getBlockManager ( arg ) . <unk> ( arg ) ;
namesystem . <unk> ( arg ) ;
namesystem . <unk> . interrupt ( arg ) ;
namesystem . markBlockAsCorrupt ( arg ) ;
namesystem . markBlockAsCorrupt ( arg ) ;
namesystem . <unk> ( arg ) ;
namesystem . refreshNodes ( arg ) ;
namesystem . <unk> ( arg ) ;
namesystem . replthread . interrupt ( arg ) ;
namesystem . replthread . join ( arg ) ;
namesystem . <unk> ( arg ) ;
namesystem . <unk> ( arg ) ;
namesystem . setReplication ( arg ) ;
namesystem . setReplication ( arg ) ;
nav . h3 ( arg ) . ul ( arg ) . li ( arg ) . a ( arg ) . _ ( arg ) . li ( arg ) . a ( arg ) . _ ( arg ) . li ( arg ) . a ( arg ) . _ ( arg ) . _ ( arg ) . _ ( arg ) . div ( arg ) . _ ( arg ) ;
nav . h3 ( arg ) . ul ( arg ) . li ( arg ) . a ( arg ) . _ ( arg ) . li ( arg ) . a ( arg ) . _ ( arg ) . li ( arg ) . a ( arg ) . _ ( arg ) . li ( arg ) . a ( arg ) . _ ( arg ) . _ ( arg ) . _ ( arg ) . div ( arg ) . _ ( arg ) ;
nav . h3 ( arg ) . ul ( arg ) . li ( arg ) . a ( arg ) . _ ( arg ) . li ( arg ) . a ( arg ) . _ ( arg ) . li ( arg ) . a ( arg ) . _ ( arg ) . li ( arg ) . a ( arg ) . _ ( arg ) . _ ( arg ) . _ ( arg ) . div ( arg ) . _ ( arg ) ;
nav . h3 ( arg ) . ul ( arg ) . li ( arg ) . a ( arg ) . _ ( arg ) . li ( arg ) . a ( arg ) . _ ( arg ) . li ( arg ) . a ( arg ) . _ ( arg ) . li ( arg ) . a ( arg ) . _ ( arg ) . _ ( arg ) ;
nav . h3 ( arg ) . ul ( arg ) . li ( arg ) . a ( arg ) . _ ( arg ) . li ( arg ) . a ( arg ) . _ ( arg ) . li ( arg ) . a ( arg ) . _ ( arg ) . li ( arg ) . a ( arg ) . _ ( arg ) . _ ( arg ) ;
<unk> = <unk> ( arg ) ;
new ConfigBuilder ( arg ) . add ( arg ) . add ( arg ) . add ( arg ) . add ( arg ) . add ( arg ) . add ( arg ) . save ( arg ) ;
new <unk> ( arg ) . write ( arg ) ;
new <unk> ( arg ) . write ( arg ) ;
new TestRPC ( arg ) . testCalls ( arg ) ;
new TestRPC ( arg ) . testCalls ( arg ) ;
new TestRPC ( arg ) . testCalls ( arg ) ;
newBlocks = DFSClient . callGetBlockLocations ( arg ) ;
newConf . set ( arg ) ;
newConf . set ( arg ) ;
<unk> . add ( arg ) ;
<unk> = <unk> . <unk> ( arg ) + 1 ;
<unk> += <unk> +  T  ;
newNode . name = pathComponents [ pathComponents . length - 1 ] ;
newNode = addNode ( arg ) ;
newNode = <unk> ( arg ) ;
<unk> . <unk> ( arg ) ;
<unk> = InetAddress . getByName ( arg ) . getCanonicalHostName ( arg ) ;
<unk> = this . containerTokenSecretManager . <unk> ( arg ) ;
<unk> = <unk> [ zvec - <unk> [ zn ] ] ;
nmPrivateCTokensPath = localDirsSelector . getLocalPathForWrite ( arg ) ;
nn . cancelDelegationToken ( arg ) ;
nn . checkOperation ( arg ) ;
nn . checkOperation ( arg ) ;
nn . errorReport ( arg ) ;
nn . getNamesystem ( arg ) . verifyToken ( arg ) ;
nn . reportBadBlocks ( arg ) ;
nn . verifyToken ( arg ) ;
nn = cluster . getNameNode ( arg ) ;
<unk> . getRpcServer ( arg ) . transitionToActive ( arg ) ;
node = dir . getFileINode ( arg ) ;
<unk> = new InnerNode ( arg ) ;
<unk> . start ( arg ) ;
nodeReg . exportedKeys = namesystem . getBlockKeys ( arg ) ;
nodeReg . exportedKeys = namesystem . getBlockManager ( arg ) . getBlockKeys ( arg ) ;
<unk> = datanode . getHost ( arg ) ;
<unk> = namesystem . getCapacityUsedNonDFS ( arg ) ;
normalizeRequests ( arg ) ;
normalizeRequests ( arg ) ;
now = System . currentTimeMillis ( arg ) ;
np . rename ( arg ) ;
ns . refreshNodes ( arg ) ;
ns . refreshNodes ( arg ) ;
ns . setReplication ( arg ) ;
ns . setReplication ( arg ) ;
ns . setReplication ( arg ) ;
nsId = <unk> . toArray ( arg ) [ 0 ] ;
<unk> = nameNode . versionRequest ( arg ) ;
<unk> . dir . fsImage . getStorage ( arg ) . format ( arg ) ;
numBytes_ = input . readUInt64 ( arg ) ;
numRead = blockReader . <unk> ( arg ) ;
numberOfExpectedRenewals = dfs . getCounter ( arg ) ;
<unk> . <unk> ( arg ) ;
<unk> . <unk> ( arg ) ;
<unk> . close ( arg ) ;
opBlockChecksum ( arg ) ;
<unk> ( arg ) ;
opReplaceBlock ( arg ) ;
opTransferBlock ( arg ) ;
opWriteBlock ( arg ) ;
org . apache . hadoop . hdfs . protocol . ClientProtocol client = getDFSClient ( arg ) ;
org . apache . hadoop . hdfs . protocol . DatanodeInfo [ ] result = new org . apache . hadoop . hdfs . protocol . DatanodeInfo [ <unk> . length ] ;
org . apache . hadoop . hdfs . protocol . proto . DatanodeProtocolProtos . BlockRecoveryCommndProto . Builder subBuilder = org . apache . hadoop . hdfs . protocol . proto . DatanodeProtocolProtos . BlockRecoveryCommndProto . newBuilder ( arg ) ;
org . apache . hadoop . hdfs . protocol . proto . HdfsProtos . BlockWithLocationsProto . Builder subBuilder = org . apache . hadoop . hdfs . protocol . proto . HdfsProtos . BlockWithLocationsProto . newBuilder ( arg ) ;
org . apache . hadoop . hdfs . protocol . proto . HdfsProtos . DatanodeIDsProto . Builder subBuilder = org . apache . hadoop . hdfs . protocol . proto . HdfsProtos . DatanodeIDsProto . newBuilder ( arg ) ;
org . apache . hadoop . hdfs . protocol . proto . HdfsProtos . ReplicaState value = org . apache . hadoop . hdfs . protocol . proto . HdfsProtos . ReplicaState . valueOf ( arg ) ;
org . apache . hadoop . mapred . Counters <unk> = new org . apache . hadoop . mapred . Counters ( arg ) ;
org . apache . hadoop . mapred . JobStatus jobStatus = new org . apache . hadoop . mapred . JobStatus ( arg ) ;
org . apache . hadoop . mapreduce . v2 . <unk> . <unk> . TaskAttemptCompletionEvent [ ] events = context . getJob ( arg ) . <unk> ( arg ) ;
out . print ( arg ) ;
out . <unk> ( arg ) ;
outGen . writeObject ( arg ) ;
outGen . writeObject ( arg ) ;
output . close ( arg ) ;
output . <unk> ( arg ) ;
output . writeUInt32 ( arg ) ;
output . writeUInt32 ( arg ) ;
<unk> += System . currentTimeMillis ( arg ) - lapStart ;
ownEnd = System . currentTimeMillis ( arg ) ;
ownEnd = System . currentTimeMillis ( arg ) ;
ownEnd = System . currentTimeMillis ( arg ) ;
ownEnd = System . currentTimeMillis ( arg ) ;
ownEnd = System . currentTimeMillis ( arg ) ;
ownEnd = System . currentTimeMillis ( arg ) ;
ownStart = System . currentTimeMillis ( arg ) ;
ownStart = System . currentTimeMillis ( arg ) ;
ownStart = System . currentTimeMillis ( arg ) ;
ownStart = System . currentTimeMillis ( arg ) ;
ownStart = System . currentTimeMillis ( arg ) ;
ownStart = System . currentTimeMillis ( arg ) ;
p . getProcessTree ( arg ) ;
p . getProcessTree ( arg ) ;
p . getProcessTree ( arg ) ;
p . stop ( arg ) ;
p = p . getProcessTree ( arg ) ;
p = p . getProcessTree ( arg ) ;
p = p . getProcessTree ( arg ) ;
pTree . getProcessTree ( arg ) ;
pTree . getProcessTree ( arg ) ;
pTree . getProcessTree ( arg ) ;
pTree . getProcessTree ( arg ) ;
pTree . getProcessTree ( arg ) ;
pTree = pTree . getProcessTree ( arg ) ;
<unk> = PacketHeader . PKT_HEADER_LEN + ( checksum . <unk> ( arg ) + checksum . getChecksumSize ( arg ) ) * <unk> ;
parent . completedContainer ( arg ) ;
parent . finishApplication ( arg ) ;
parent . <unk> ( arg ) ;
parent . submitApplication ( arg ) ;
parent = null ;
parentINode = fsDir . addToParent ( arg ) ;
parentINode = fsDir . getParent ( arg ) ;
parentINode = fsDir . rootDir . getParent ( arg ) ;
<unk> = new InnerNode ( arg ) ;
<unk> = new <unk> ( arg ) ;
pathbuilder . append ( arg ) ;
pathbuilder . append ( arg ) ;
paths = fc . listStatus ( arg ) ;
paths = fc . listStatus ( arg ) ;
paths = fc1 . listStatus ( arg ) ;
paths = fc1 . listStatus ( arg ) ;
pendingReplications . add ( arg ) ;
pendingReplications . add ( arg ) ;
pendingReplications . add ( arg ) ;
pendingReplications . remove ( arg ) ;
pendingReplications . remove ( arg ) ;
pendingReplications . remove ( arg ) ;
permission = FsPermission . valueOf ( arg ) ;
permission = PermissionStatusFormat . <unk> . combine ( arg ) ;
permission = PermissionStatusFormat . <unk> . combine ( arg ) ;
permission = PermissionStatusFormat . <unk> . combine ( arg ) ;
pgd . driver ( arg ) ;
pgd . driver ( arg ) ;
pgd . driver ( arg ) ;
<unk> =-+ <unk> ;
pktSize += ( <unk> + checksumSize ) * maxChunksPerPacket ;
pktSize += checksumSize * maxChunksPerPacket ;
port = Integer . parseInt ( arg ) ;
<unk> = InetAddress . getByName ( arg ) . getCanonicalHostName ( arg ) ;
<unk> = FSNamesystem . getNamespaceDirs ( arg ) ;
<unk> . add ( arg ) ;
<unk> ( arg ) ;
<unk> ( arg ) ;
<unk> ( arg ) ;
processTree . getProcessTree ( arg ) ;
processTree . getProcessTree ( arg ) ;
processTree . getProcessTree ( arg ) ;
processTree . getProcessTree ( arg ) ;
processTree . getProcessTree ( arg ) ;
processTree . getProcessTree ( arg ) ;
processTree . getProcessTree ( arg ) ;
processTree . getProcessTree ( arg ) ;
processTree . getProcessTree ( arg ) ;
processTree . getProcessTree ( arg ) ;
processTree . getProcessTree ( arg ) ;
processTree . getProcessTree ( arg ) ;
<unk> = <unk> . getProgress ( arg ) ;
proto . monitorHealth ( arg ) ;
proto . transitionToActive ( arg ) ;
proto . transitionToStandby ( arg ) ;
protocol . <unk> ( arg ) ;
proxy . getNewApplicationId ( arg ) ;
proxy = ( <unk> ) <unk> . getProxy ( arg ) ;
proxy = ( TestProtocol ) RPC . getProxy ( arg ) ;
proxy = ( TestProtocol ) RPC . getProxy ( arg ) ;
proxy = ( TestProtocol ) RPC . getProxy ( arg ) ;
proxy = ( TestProtocol ) RPC . getProxy ( arg ) ;
proxy = ( TestProtocol ) RPC . getProxy ( arg ) ;
proxy = ( TestProtocol ) RPC . getProxy ( arg ) ;
proxy = ( TestProtocol ) RPC . getProxy ( arg ) ;
proxy = DFSTestUtil . createClientDatanodeProtocolProxy ( arg ) ;
proxy = RPC . getProxy ( arg ) ;
<unk> . add ( arg ) ;
<unk> ( arg ) ;
qi . utilization = ( float ) info . <unk> ( arg ) ;
qi . utilization = WebServicesTestUtils . <unk> ( arg ) ;
query = <unk> ( arg ) ;
queue . getQueueSchedulable ( arg ) . getMetrics ( arg ) . <unk> ( arg ) ;
queueName = Text . readString ( arg ) ;
queueName = Text . readString ( arg ) ;
queuesInfo . add ( arg ) ;
r . path ( arg ) . path ( arg ) . path ( arg ) . path ( arg ) . path ( arg ) . get ( arg ) ;
r . path ( arg ) . path ( arg ) . path ( arg ) . path ( arg ) . path ( arg ) . path ( arg ) . get ( arg ) ;
r . <unk> = <unk> ;
r . setMsg ( arg ) ;
r = ( ( FSDataset ) cluster . getDataNodes ( arg ) . get ( arg ) . getFSDataset ( arg ) ) . fetchReplicaInfo ( arg ) ;
r = dataset1 . fetchReplicaInfo ( arg ) ;
racks [ i ++ ] = <unk> . resolve ( arg ) . <unk> ( arg ) ;
reader . close ( arg ) ;
<unk> = <unk> ;
reason = STATE ( arg )  ;
<unk> ( arg ) ;
<unk> = receivedAndDeletedBlockList . toArray ( arg ) ;
receivedAndDeletedBlockList . notifyAll ( arg ) ;
receivedAndDeletedBlockList . notifyAll ( arg ) ;
receivedAndDeletedBlockList . notifyAll ( arg ) ;
receivedAndDeletedBlockList . notifyAll ( arg ) ;
receivedAndDeletedBlockList . wait ( arg ) ;
receivedAndDeletedBlockList . wait ( arg ) ;
receivedAndDeletedBlockList . wait ( arg ) ;
receivedBlockList . wait ( arg ) ;
receivedBlockList . wait ( arg ) ;
<unk> ( arg ) ;
<unk> = new com . google . protobuf . SingleFieldBuilder < org . apache . hadoop . hdfs . protocol . proto . DatanodeProtocolProtos . BlockRecoveryCommndProto , org . apache . hadoop . hdfs . protocol . proto . DatanodeProtocolProtos . BlockRecoveryCommndProto . Builder , org . apache . hadoop . hdfs . protocol . proto . DatanodeProtocolProtos . <unk> > ( arg ) ;
recoveryCmd_ = org . apache . hadoop . hdfs . protocol . proto . DatanodeProtocolProtos . BlockRecoveryCommndProto . getDefaultInstance ( arg ) ;
recoveryCmd_ = org . apache . hadoop . hdfs . protocol . proto . DatanodeProtocolProtos . BlockRecoveryCommndProto . getDefaultInstance ( arg ) ;
recoveryCmd_ = org . apache . hadoop . hdfs . protocol . proto . DatanodeProtocolProtos . BlockRecoveryCommndProto . getDefaultInstance ( arg ) ;
recoveryServ = new RecoveryService ( arg ) ;
<unk> += task . getProgress ( arg ) ;
registartionBuilder_ . clear ( arg ) ;
registartion_ = org . apache . hadoop . hdfs . protocol . proto . HdfsProtos . <unk> . getDefaultInstance ( arg ) ;
<unk> ( arg ) ;
renewalTime = RENEW_CYCLE + System . currentTimeMillis ( arg ) ;
renewalTime = RENEW_CYCLE + <unk> . now ( arg ) ;
renewer . <unk> ( arg ) ;
<unk> = fds . fetchReplicaInfo ( arg ) ;
replication = ( int ) pendingFile . getReplication ( arg ) ;
replication = ( int ) pendingFile . getReplication ( arg ) ;
replication = ( short ) fs . getConf ( arg ) . getInt ( arg ) ;
replication = fileNode . getBlockReplication ( arg ) ;
replication = fileNode . getReplication ( arg ) ;
replication = namesystem . adjustReplication ( arg ) ;
replication = pendingFile . getBlockReplication ( arg ) ;
replication = pendingFile . getReplication ( arg ) ;
repls = ns . numCorruptReplicas ( arg ) ;
<unk> ( arg ) ;
req . setFinalState ( arg ) ;
request . setFinalState ( arg ) ;
<unk> . append ( arg ) ;
<unk> ( arg ) ;
result . generationStamp_ = generationStamp_ ;
result . numBytes_ = numBytes_ ;
result . registartion_ = registartionBuilder_ . build ( arg ) ;
result . skip ( arg ) ;
result . skip ( arg ) ;
result . storateInfo_ = storateInfoBuilder_ . build ( arg ) ;
result = new ArrayList < String > ( arg ) ;
result = new DFSOutputStream ( arg ) ;
result = new LoggedTask ( arg ) ;
result = new LoggedTaskAttempt ( arg ) ;
result = prime * result + ( ( appId == null ) ? 0 : appId . hashCode ( arg ) ) ;
result = prime * result + ( ( getAppAttemptId ( arg ) == null ) ? 0 : getAppAttemptId ( arg ) . hashCode ( arg ) ) ;
result = prime * result + ( ( getApplicationAttemptId ( arg ) == null ) ? 0 : getApplicationAttemptId ( arg ) . hashCode ( arg ) ) ;
results = getFileStatus ( arg ) ;
results = listStatus ( arg ) ;
results = null ;
ret = <unk> . <unk> . <unk> ( arg ) ;
ret [ i ] = NameNode . getHostPortString ( arg ) ;
ret [ i ] = new <unk> ( arg ) ;
return ! cId . equals ( arg ) ;
return ! fc . getFileStatus ( arg ) . isDir ( arg ) ;
return ! getFileStatus ( arg ) . isDir ( arg ) ;
return ! getFileStatus ( arg ) . isDir ( arg ) ;
return ! <unk> ( arg ) && blockSafe >= blockReplQueueThreshold ;
return ! <unk> . equals ( arg ) ;
return ! super . <unk> ( arg ) . equals ( arg ) ;
return ( arg ) && ( TEST_KEYFILE != null &&! TEST_KEYFILE . isEmpty ( arg ) ) ;
return ( arg ) && ( datanode . utilization > <unk> ) ;
return ( arg ) && <unk> == <unk> && System . currentTimeMillis ( arg ) < <unk> && <unk> . contains ( arg ) && verifyToken ( arg ) ;
return ( arg ) ( ( header & HEADERMASK ) >> <unk> ) ;
return ( arg ) ( System . <unk> ( arg ) . contains ( arg ) ? cl . loadClass ( arg ) : cl . loadClass ( arg ) ) ;
return ( arg ) . getBlockFile ( arg ) ;
return ( arg ) . getConf ( arg ) ;
return ( arg ) . getFile ( arg ) ;
return ( arg ) . hashCode ( arg ) + ( int ) <unk> ;
return ( arg ) . server ;
return ( arg ) ;
return ( arg ) ? ( dfsClientConf . <unk> + HdfsConstants . WRITE_TIMEOUT_EXTENSION * numNodes ) : 0 ;
return ( arg ) ? <unk> : Integer . toString ( arg ) ;
return ( arg ) ? System . currentTimeMillis ( arg ) - <unk> : null ;
return ( arg ) ? exitCode : 1 ;
return ( arg ) ? exitCode : null ;
return ( arg ) ? getHost ( arg ) : hostName ;
return ( arg ) ? new <unk> ( arg ) : new <unk> ( arg ) ;
return ( arg ) ? new GzipZlibDecompressor ( arg ) : null ;
return ( arg ) ? null : ( layoutVersion > o . layoutVersion ) ? 1 : ( namespaceID < o . namespaceID ) ? null : ( namespaceID > o . namespaceID ) ? 1 : ( cTime < o . cTime ) ? null : ( cTime > o . cTime ) ? 1 : ( editsTime < o . editsTime ) ? null : ( editsTime > o . editsTime ) ? 1 : ( checkpointTime < o . checkpointTime ) ? null : ( checkpointTime > o . checkpointTime ) ? 1 : ( clusterID . compareTo ( arg ) < 0 ) ? null : ( clusterID . compareTo ( arg ) > 0 ) ? 1 : ( blockpoolID . compareTo ( arg ) < 0 ) ? null : ( blockpoolID . compareTo ( arg ) > 0 ) ? 1 : imageDigest . compareTo ( arg ) ;
return ( arg ) ? result : b [ 0 ] ;
return ( arg ) RPC . getProxy ( arg ) ;
return ( arg ) RPC . getProxy ( arg ) ;
return ( arg ) RPC . waitForProxy ( arg ) ;
return ( arg ) ^ ( ticket == null ? 0 : ticket . hashCode ( arg ) ) ;
return ( arg ) ^ System . <unk> ( arg ) ;
return ( arg ) blockChooser . chooseVolume ( arg ) ;
return ( arg ) buf [ 0 ] ;
return ( arg ) cl . loadClass ( arg ) ;
return ( arg ) <unk> ( arg ) . <unk> ( arg ) ;
return ( arg ) <unk> ;
return ( arg ) url . openConnection ( arg ) ;
return ( arg ) | bsR ( arg ) ;
return ( arg ) || ( <unk> <= 0 ) || ( <unk> <= 0 ) ;
return 0 ;
return 1 ;
return 1 ;
return <unk> ;
return 6 ;
return 7 ;
return 7 ;
return 8 ;
return 8 ;
return 9 ;
return ABD_BLOCK_RESPONSE ;
return ABD_BLOCK_RESPONSE ;
return <unk> . get ( arg ) ;
return <unk> . newBuilder ( arg ) . <unk> ( arg ) . <unk> ( arg ) . <unk> ( arg ) . <unk> ( arg ) . build ( arg ) . <unk> ( arg ) ;
return ApplicationState . FAILED ;
return ApplicationState . KILLED ;
return ApplicationState . <unk> ;
return ApplicationState . RUNNING ;
return ApplicationState . <unk> ;
return ApplicationState . SUCCEEDED ;
return <unk> . class ;
return <unk> . class ;
return <unk> . <unk> ( arg ) ;
return AvroArrayUtils . fromAvro ( arg ) ;
return AvroArrayUtils . fromAvro ( arg ) ;
return <unk> . class . <unk> ( arg ) || <unk> . contains ( arg ) ;
return BlockReader . newBlockReader ( arg ) ;
return BlockWithLocationsProto . newBuilder ( arg ) . setBlock ( arg ) . <unk> ( arg ) . build ( arg ) ;
return <unk> . toString ( arg ) ;
return <unk> . newBuilder ( arg ) . <unk> ( arg ) . build ( arg ) ;
return ClientProtocol . class ;
return ClientProtocol . <unk> ;
return Collections . unmodifiableList ( arg ) ;
return ConverterUtils . toString ( arg ) ;
return CreateResponseProto . newBuilder ( arg ) . build ( arg ) ;
return CreateResponseProto . newBuilder ( arg ) . build ( arg ) ;
return DFSClient . createNamenode ( arg ) ;
return DFSConfigKeys . <unk> ;
return DFSConfigKeys . DFS_NAMENODE_RPC_PORT_DEFAULT ;
return DFSConfigKeys . DFS_NAMENODE_RPC_PORT_DEFAULT ;
return DFSUtil . <unk> ( arg ) ;
return DFSUtil . createNamenode ( arg ) ;
return <unk> rand +-+ ip +-+ port +-+ System . currentTimeMillis ( arg ) ;
return DataChecksum . <unk> ( arg ) ;
return <unk> . convert ( arg ) ;
return DatanodeIDProto . newBuilder ( arg ) . setName ( arg ) . setHostName ( arg ) . setInfoPort ( arg ) . setIpcPort ( arg ) . setStorageID ( arg ) . build ( arg ) ;
return DatanodeIDProto . newBuilder ( arg ) . setName ( arg ) . setInfoPort ( arg ) . setIpcPort ( arg ) . setStorageID ( arg ) . build ( arg ) ;
return ENGINE . getServer ( arg ) ;
return EventReader . fromAvro ( arg ) ;
return EventReader . fromAvro ( arg ) ;
return EventReader . fromAvro ( arg ) ;
return EventReader . fromAvro ( arg ) ;
return <unk> ;
return FSConstants . LAYOUT_VERSION ;
return FSDataset . createTmpFile ( arg ) ;
return FSDataset . createTmpFile ( arg ) ;
return FSDataset . <unk> ( arg ) ;
return FileSystem . get ( arg ) ;
return FsServerDefaultsProto . newBuilder ( arg ) . setBlockSize ( arg ) . setBytesPerChecksum ( arg ) . setWritePacketSize ( arg ) . setReplication ( arg ) . setFileBufferSize ( arg ) . build ( arg ) ;
return FsServerDefaultsProto . newBuilder ( arg ) . setBlockSize ( arg ) . setBytesPerChecksum ( arg ) . setWritePacketSize ( arg ) . setReplication ( arg ) . setFileBufferSize ( arg ) . setEncryptDataTransfer ( arg ) . build ( arg ) ;
return FsServerDefaultsProto . newBuilder ( arg ) . setBlockSize ( arg ) . setBytesPerChecksum ( arg ) . setWritePacketSize ( arg ) . setReplication ( arg ) . setFileBufferSize ( arg ) . setEncryptDataTransfer ( arg ) . <unk> ( arg ) . build ( arg ) ;
return HdfsConstants . NodeType . DATA_NODE ;
return HdfsConstants . NodeType . DATA_NODE ;
return HdfsConstants . NodeType . NAME_NODE ;
return HdfsConstants . NodeType . NAME_NODE ;
return HdfsProtos . DatanodeIDProto . newBuilder ( arg ) . setName ( arg ) . setHostName ( arg ) . setStorageID ( arg ) . setInfoPort ( arg ) . setIpcPort ( arg ) . build ( arg ) ;
return HdfsProtos . DatanodeIDProto . newBuilder ( arg ) . setName ( arg ) . setStorageID ( arg ) . setInfoPort ( arg ) . build ( arg ) ;
return HdfsProtos . DatanodeIDProto . newBuilder ( arg ) . setName ( arg ) . setStorageID ( arg ) . setInfoPort ( arg ) . setIpcPort ( arg ) . build ( arg ) ;
return HdfsProtos . <unk> . newBuilder ( arg ) . setId ( arg ) . setCapacity ( arg ) . setDfsUsed ( arg ) . setRemaining ( arg ) . setBlockPoolUsed ( arg ) . setLastUpdate ( arg ) . setXceiverCount ( arg ) . setLocation ( arg ) . setHostName ( arg ) . <unk> ( arg ) . build ( arg ) ;
return <unk> . <unk> ( arg ) . iterator ( arg ) ;
return <unk> . newBuilder ( arg ) . setBlock ( arg ) . build ( arg ) ;
return <unk> . <unk> ;
return JSON . toString ( arg ) ;
return JSON . toString ( arg ) ;
return JSON . toString ( arg ) ;
return JSON . toString ( arg ) ;
return <unk> . class ;
return <unk> . forName ( arg ) ;
return JobState . <unk> ;
return <unk> . class ;
return <unk> ;
return <unk> . <unk> ( arg ) && <unk> . <unk> ( arg ) ;
return LogAggregationService . <unk> ( arg ) ;
return MD5-of-+ <unk> + MD5-of-+ <unk> + <unk> ;
return MISSING_DIST_CACHE_FILES_ERROR ;
return <unk> ;
return NameNode . DEFAULT_PORT ;
return NameNode . DEFAULT_PORT ;
return <unk> . newBuilder ( arg ) . <unk> ( arg ) . build ( arg ) ;
return NamespaceInfoProto . newBuilder ( arg ) . setBlockPoolID ( arg ) . setBuildVersion ( arg ) . setDistUpgradeVersion ( arg ) . setStorageInfo ( arg ) . build ( arg ) ;
return NamespaceInfoProto . newBuilder ( arg ) . setBlockPoolID ( arg ) . setBuildVersion ( arg ) . setDistUpgradeVersion ( arg ) . setStorageInfo ( arg ) . <unk> ( arg ) . build ( arg ) ;
return NetUtils . createSocketAddr ( arg ) ;
return PBHelper . convert ( arg ) ;
return Proxy . newProxyInstance ( arg ) ;
return Proxy . newProxyInstance ( arg ) ;
return <unk> . class ;
return <unk> . RUNNING ;
return RMNodeState . RUNNING ;
return RMNodeState . <unk> ;
return RPC . getProxy ( arg ) ;
return RPC . getServer ( arg ) ;
return <unk> . <unk> ( arg ) ;
return <unk> . newBuilder ( arg ) . setEndTxId ( arg ) . setStartTxId ( arg ) . build ( arg ) ;
return Resources . none ( arg ) ;
return Resources . none ( arg ) ;
return Response . temporaryRedirect ( arg ) . build ( arg ) ;
return Response . temporaryRedirect ( arg ) . build ( arg ) ;
return Response . temporaryRedirect ( arg ) . build ( arg ) ;
return Response . temporaryRedirect ( arg ) . build ( arg ) ;
return <unk> . <unk> ;
return <unk> . create ( arg ) ;
return RpcKind . values ( arg ) [ inValue - FIRST_INDEX ] ;
return RpcKind . values ( arg ) [ inValue - FIRST_INDEX ] ;
return RpcPayloadOperation . values ( arg ) [ inValue - FIRST_INDEX ] ;
return RpcPayloadOperation . values ( arg ) [ inValue - FIRST_INDEX ] ;
return SET_OWNER_RESPONSE ;
return SET_OWNER_RESPONSE ;
return SET_PERM_RESPONSE ;
return SET_PERM_RESPONSE ;
return SecurityUtil . buildDTServiceName ( arg ) ;
return Server . <unk> ( arg ) ;
return String . valueOf ( arg ) + FIELD_SEPARATOR + String . valueOf ( arg ) + FIELD_SEPARATOR + String . valueOf ( arg ) + FIELD_SEPARATOR + String . valueOf ( arg ) + FIELD_SEPARATOR + String . valueOf ( arg ) + FIELD_SEPARATOR + imageDigest . toString ( arg ) + FIELD_SEPARATOR + clusterID + FIELD_SEPARATOR + blockpoolID ;
return System . currentTimeMillis ( arg ) - scanPeriod + DFSUtil . getRandom ( arg ) . nextInt ( arg ) ;
return System . currentTimeMillis ( arg ) - scanPeriod + random . nextInt ( arg ) ;
return System . currentTimeMillis ( arg ) ;
return System . currentTimeMillis ( arg ) > <unk> ;
return TaskAttemptID . forName ( arg ) ;
return TaskAttemptState . KILLED ;
return TaskAttemptState . SUCCEEDED ;
return TaskID . forName ( arg ) ;
return TaskID . forName ( arg ) ;
return TaskID . forName ( arg ) ;
return TaskState . <unk> ;
return <unk> . class ;
return <unk> . mockDirectory ( arg ) ;
return TransferFsImage . <unk> ( arg ) ;
return TypeConverter . toYarn ( arg ) ;
return <unk> . newBuilder ( arg ) . setBlock ( arg ) . build ( arg ) ;
return UserGroupInformation . createRemoteUser ( arg ) ;
return <unk> . <unk> ( arg ) == 0 ;
return <unk> . <unk> ( arg ) ;
return WritableUtils . getVIntSize ( arg ) + WritableUtils . getVIntSize ( arg ) + WritableUtils . getVIntSize ( arg ) ;
return YarnConfiguration . RM_SERVER_PRINCIPAL_KEY ;
return YarnConfiguration . RM_SERVER_PRINCIPAL_KEY ;
return YarnConfiguration . RM_SERVER_PRINCIPAL_KEY ;
return <unk> . <unk> ;
return ZlibFactory . isNativeZlibLoaded ( arg ) ? <unk> . class : <unk> . class ;
return ZlibFactory . isNativeZlibLoaded ( arg ) ? GzipZlibDecompressor . class : <unk> . class ;
return ZlibFactory . isNativeZlibLoaded ( arg ) ? GzipZlibDecompressor . class : null ;
return <unk> ( arg ) ;
return <unk> ;
return addToken ( arg ) ;
return addr . getPort ( arg ) != 0 &&! addr . getAddress ( arg ) . <unk> ( arg ) ;
return addr . getPort ( arg ) != 0 ;
return address . equals ( arg ) && protocol == id . protocol && ( ( ticket != null && ticket . equals ( arg ) ) || ( ticket == id . ticket ) ) ;
return address . equals ( arg ) && protocol == id . protocol && ticket == id . ticket ;
return app . task != null ;
return app . task . <unk> ( arg ) . values ( arg ) ;
return appAttemptID . getApplicationId ( arg ) ;
return appAttemptID . getApplicationId ( arg ) ;
return appAttemptID . <unk> ( arg ) ;
return appAttemptID ;
return appID ;
return appId ;
return application . <unk> ( arg ) ;
return <unk> + this . <unk> ( arg ) + _ + this . getId ( arg ) ;
return applications . size ( arg ) ;
return <unk> ( arg ) ;
return <unk> ( arg ) ;
return assigned ;
return <unk> ;
return attempt . <unk> ( arg ) ;
return attempt . getCpuUsages ( arg ) ;
return attempt . getCpuUsages ( arg ) ;
return attempt . getCpuUsages ( arg ) ;
return attempt . <unk> ( arg ) ;
return attempt . getVMemKbytes ( arg ) ;
return attempt . getVMemKbytes ( arg ) ;
return attempt . getVMemKbytes ( arg ) ;
return <unk> ;
return attemptInfo . getHostname ( arg ) ;
return attemptInfo . getTrackerName ( arg ) ;
return b . block . equals ( arg ) || b . <unk> . equals ( arg ) ;
return bc . getReplication ( arg ) ;
return blockChooser . chooseVolume ( arg ) ;
return blockManager . corruptReplicaBlocksCount ;
return blockManager . corruptReplicaBlocksCount ;
return blockManager . excessBlocksCount ;
return blockManager . excessBlocksCount ;
return blockManager . <unk> ( arg ) ;
return blockManager . <unk> ( arg ) ;
return blockManager . <unk> ( arg ) ;
return blockManager . <unk> ( arg ) ;
return blockManager . <unk> ( arg ) ;
return blockManager . <unk> ( arg ) ;
return blockManager . pendingDeletionBlocksCount ;
return blockManager . pendingDeletionBlocksCount ;
return blockManager . pendingReplicationBlocksCount ;
return blockManager . pendingReplicationBlocksCount ;
return blockManager . scheduledReplicationBlocksCount ;
return blockManager . scheduledReplicationBlocksCount ;
return blockManager . underReplicatedBlocksCount ;
return blockManager . underReplicatedBlocksCount ;
return blockSafe >= blockReplQueueThreshold ;
return blocksMap . size ( arg ) - ( int ) <unk> . <unk> ( arg ) ;
return blocksMap . size ( arg ) - ( int ) pendingDeletionBlocksCount ;
return bpServiceToActive != null && bpServiceToActive . <unk> ( arg ) ;
return bpos . bpNamenode ;
return bufReady . size ( arg ) >= <unk> ;
return builder . build ( arg ) ;
return builder . build ( arg ) ;
return builder . <unk> ( arg ) . setStorageInfo ( arg ) . setKeys ( arg ) . build ( arg ) ;
return c == <unk> . getContainer ( arg ) ;
return cId . toString ( arg ) ;
return call . connection . socket . <unk> ( arg ) ;
return call . <unk> ;
return <unk> ( arg ) ;
return children == null ? new ArrayList < INode > ( arg ) : children ;
return <unk> - ( count - pos ) ;
return clientServiceDelegate . <unk> ( arg ) ;
return clientServiceDelegate . <unk> ( arg ) ;
return clientServiceDelegate . getJobStatus ( arg ) ;
return clientServiceDelegate . <unk> ( arg ) ;
return clientServiceDelegate . <unk> ( arg ) ;
return clientServiceDelegate . <unk> ( arg ) ;
return clientServiceDelegate . <unk> ( arg ) ;
return cluster . getNameNode ( arg ) . rollEditLog ( arg ) ;
return cluster . getNameNode ( arg ) . versionRequest ( arg ) . <unk> ( arg ) ;
return cluster . getNameNode ( arg ) . versionRequest ( arg ) . <unk> ( arg ) ;
return cluster . getNameNode ( arg ) . versionRequest ( arg ) . <unk> ( arg ) ;
return cluster . getNameNode ( arg ) . versionRequest ( arg ) . <unk> ( arg ) ;
return cluster . getNamesystem ( arg ) . leaseManager . <unk> ( arg ) ;
return cluster . getNamesystem ( arg ) . leaseManager . <unk> ( arg ) != null ;
return cluster . renewDelegationToken ( arg ) ;
return cmd ;
return <unk> . keySet ( arg ) ;
return <unk> ;
return conf . getBoolean ( arg ) ;
return conf . getInt ( arg ) ;
return conf . getStringCollection ( arg ) ;
return <unk> ;
return containerId ;
return containerTokenSecretManager ;
return <unk> ;
return count - pos ;
return <unk> ( arg ) >= checkpointTxnCount ;
return counters . values ( arg ) . iterator ( arg ) ;
return counters ;
return create ( arg ) ;
return createScanner ( arg ) ;
return cur ;
return current . namenode ;
return current ;
return <unk> . getBPNamenode ( arg ) ;
return datum . <unk> ;
return datum . <unk> ;
return datum . finishTime ;
return datum . finishTime ;
return datum . finishTime ;
return datum . finishTime ;
return datum . finishTime ;
return datum . <unk> ;
return datum . <unk> ;
return datum . hostname . toString ( arg ) ;
return datum . hostname . toString ( arg ) ;
return datum . hostname . toString ( arg ) ;
return datum . <unk> ;
return datum . port ;
return datum . port ;
return datum . rackname . toString ( arg ) ;
return datum . rackname == null ? null : datum . rackname . toString ( arg ) ;
return datum . rackname == null ? null : datum . rackname . toString ( arg ) ;
return datum . rackname == null ? null : datum . rackname . toString ( arg ) ;
return datum . <unk> ;
return datum . <unk> ;
return datum . state . toString ( arg ) ;
return datum . state . toString ( arg ) ;
return datum . state . toString ( arg ) ;
return datum . status . toString ( arg ) ;
return datum . taskStatus . toString ( arg ) ;
return datum . taskStatus . toString ( arg ) ;
return datum . taskStatus . toString ( arg ) ;
return <unk> ;
return <unk> . getStatus ( arg ) ;
return <unk> ;
return delHints . equals ( arg ) ;
return dfs . <unk> ( arg ) ;
return dfs . getDelegationToken ( arg ) ;
return dfs . setSafeMode ( arg ) ;
return dfsClientConf . socketTimeout > 0 ? ( HdfsConstants . READ_TIMEOUT_EXTENSION * numNodes + dfsClientConf . socketTimeout ) : 0 ;
return diagnostics ;
return doOutput ;
return doOutput ;
return doOutputAndRedirect ;
return <unk> && ( ( System . currentTimeMillis ( arg ) - time ) > <unk> ) ;
return <unk> ;
return emptyTime != Long . MAX_VALUE && System . currentTimeMillis ( arg ) - emptyTime > <unk> ;
return evt . getType ( arg ) == <unk> . <unk> && cId == evt . getContainer ( arg ) . <unk> ( arg ) ;
return expires != null && System . currentTimeMillis ( arg ) > expires ;
return <unk> ;
return <unk> ;
return false ;
return fc . getFileStatus ( arg ) . isDir ( arg ) ;
return fc . size ( arg ) - <unk> + bufReady . size ( arg ) + bufCurrent . size ( arg ) ;
return file . getPath ( arg ) ;
return file . length ( arg ) ;
return file . toString ( arg ) ;
return fileAsURI ( arg ) ;
return fileINode . getReplication ( arg ) ;
return fsImage . getFSNamesystem ( arg ) ;
return <unk> . getDelegationTokens ( arg ) ;
return <unk> . equals ( arg ) ;
return <unk> ( arg ) ;
return getCapacityUsedNonDFS ( arg ) ;
return <unk> ( arg ) ;
return getCommandField ( arg ) ;
return getConf ( arg ) . getLong ( arg ) ;
return getConfig ( arg ) . get ( arg ) ;
return <unk> ( arg ) ;
return getFSNamesystem ( arg ) . blockManager ;
return getFSofPath ( arg ) . getStatus ( arg ) ;
return getFileStatus ( arg ) . isDir ( arg ) ;
return getFsDatasetImpl ( arg ) . <unk> . <unk> ( arg ) ;
return getFsDatasetImpl ( arg ) . fetchReplicaInfo ( arg ) ;
return getFsDatasetImpl ( arg ) . getBlockFile ( arg ) ;
return getFsDatasetImpl ( arg ) . getFile ( arg ) ;
return getFsDatasetImpl ( arg ) . getReplicaInfo ( arg ) . <unk> ( arg ) ;
return getMetaFile ( arg ) ;
return <unk> ( arg ) . getFileStatus ( arg ) . isDir ( arg ) ;
return getName ( arg ) . compareTo ( arg ) ;
return getName ( arg ) ;
return getNameNode ( arg ) . getRpcServer ( arg ) ;
return getNamespaceDirs ( arg ) ;
return getNode ( arg ) ;
return <unk> ( arg ) > 0 ;
return getProtocolEngine ( arg ) . getServer ( arg ) ;
return getProtocolEngine ( arg ) . getServer ( arg ) ;
return getQueue ( arg ) ;
return <unk> ( arg ) . getCurrentState ( arg ) ;
return <unk> ( arg ) ;
return <unk> ( arg ) . getHost ( arg ) ;
return getValue ( arg ) != null ? getValue ( arg ) : conf . getLong ( arg ) ;
return getVolumesLowOnSpace ( arg ) . size ( arg ) < volumes . size ( arg ) ;
return getVolumesLowOnSpace ( arg ) . size ( arg ) == 0 ;
return <unk> . getState ( arg ) instanceof <unk> ;
return <unk> ( arg ) ;
return <unk> || <unk> . size ( arg ) != 1 || <unk> > <unk> ;
return hdfs ;
return header & ~ HEADERMASK ;
return <unk> ;
return <unk> . get ( arg ) ;
return id ;
return impl . endCheckpoint ( arg ) ;
return impl . errorReport ( arg ) ;
return impl . processUpgrade ( arg ) ;
return impl . register ( arg ) ;
return impl . reportBadBlocks ( arg ) ;
return impl . startCheckpoint ( arg ) ;
return <unk> ;
return <unk> ;
return inode . <unk> ( arg ) ;
return inode . getName ( arg ) ;
return inode . isDirectory ( arg ) || inode . isLink ( arg ) ? true : ( ( INodeFile ) inode ) . getBlocks ( arg ) != null ;
return inode . isDirectory ( arg ) || inode . <unk> ( arg ) ? true : ( ( INodeFile ) inode ) . getBlocks ( arg ) != null ;
return inode == <unk> ;
return <unk> ? blockTokenSecretManager . <unk> ( arg ) : ExportedBlockKeys . <unk> ;
return isEqual ( arg ) && this . doPing == that . doPing && this . maxIdleTime == that . maxIdleTime && this . maxRetries == that . maxRetries && this . pingInterval == that . pingInterval && isEqual ( arg ) && this . rpcTimeout == that . rpcTimeout && isEqual ( arg ) && this . tcpNoDelay == that . tcpNoDelay && isEqual ( arg ) ;
return <unk> ;
return job . getState ( arg ) ;
return job . getState ( arg ) ;
return job . getState ( arg ) ;
return <unk> . toUri ( arg ) . toString ( arg ) ;
return jobMaps . size ( arg ) ;
return jobMaps . values ( arg ) ;
return jobName ;
return jobs . get ( arg ) ;
return jobs . get ( arg ) ;
return jobs ;
return jobs ;
return journals ;
return <unk> ( arg ) ;
return <unk> != null ? Schema . parse ( arg ) : <unk> . <unk> ( arg ) ;
return keyIter . <unk> ( arg ) ;
return <unk> != null ;
return <unk> ;
return layoutVersion ^ namespaceID ^ ( int ) ( cTime ^ editsTime ^ checkpointTime ) ^ imageDigest . hashCode ( arg ) ^ clusterID . hashCode ( arg ) ^ blockpoolID . hashCode ( arg ) ;
return ledgerId == ol . ledgerId && firstTxId == ol . firstTxId && lastTxId == ol . lastTxId && version == ol . version ;
return limit ;
return limits . <unk> ( arg ) ;
return localDirs ;
return localTarget . getNameServiceId ( arg ) ;
return <unk> ( arg ) ;
return localizedPath ;
return log . lastTxId ;
return loginUser . isKeytab ;
return <unk> ;
return mapping instanceof AbstractDNSToSwitchMapping && ( ( AbstractDNSToSwitchMapping ) mapping ) . <unk> ( arg ) ;
return maps . get ( arg ) . getId ( arg ) ;
return maps . get ( arg ) ;
return message ;
return mockDirectory ( arg ) ;
return <unk> ;
return myFs . append ( arg ) ;
return myFs . create ( arg ) ;
return myFs . delete ( arg ) ;
return myFs . getFileBlockLocations ( arg ) ;
return myFs . <unk> ( arg ) ;
return myFs . getFileStatus ( arg ) ;
return myFs . getServerDefaults ( arg ) ;
return myFs . getStatus ( arg ) ;
return myFs . listStatus ( arg ) ;
return myFs . makeQualified ( arg ) ;
return myFs . mkdirs ( arg ) ;
return myFs . open ( arg ) ;
return myFs . rename ( arg ) ;
return myFs . setReplication ( arg ) ;
return myFs ;
return name . compareTo ( arg ) ;
return name . hashCode ( arg ) ^ storageID . hashCode ( arg ) ;
return name . <unk> ( arg ) ? name . substring ( arg ) : name ;
return name ;
return namenode . setSafeMode ( arg ) ;
return namesystem . getBlockKeys ( arg ) ;
return namesystem . getBlocks ( arg ) ;
return namesystem . getEditLogManifest ( arg ) ;
return namesystem . getTransactionID ( arg ) ;
return namesystem . <unk> ( arg ) ;
return new AMInfo ( arg ) ;
return new ApplicationTokenIdentifier ( arg ) ;
return new ArrayList < Job > ( arg ) ;
return new ArrayList < Queue > ( arg ) ;
return new BlockInputStreams ( arg ) ;
return new BlockWriteStreams ( arg ) ;
return new BlockWriteStreams ( arg ) ;
return new BufferedInputStream ( arg ) ;
return new BufferedOutputStream ( arg ) ;
return new DFSOutputStream ( arg ) ;
return new DatanodeCommand [ ] { val } ;
return new DatanodeID ( arg ) ;
return new <unk> ( arg ) ;
return new ExtendedBlock ( arg ) ;
return new <unk> ( arg ) ;
return new <unk> ( arg ) ;
return new FSDataOutputStream ( arg ) ;
return new FSDataOutputStream ( arg ) ;
return new FSDataOutputStream ( arg ) ;
return new FSDataOutputStream ( arg ) ;
return new <unk> ( arg ) ;
return new <unk> ( arg ) ;
return new File ( arg ) ;
return new <unk> ( arg ) ;
return new <unk> ( arg ) ;
return new <unk> ( arg ) ;
return new <unk> < T > ( arg ) ;
return new FsPermission ( arg ) ;
return new <unk> ( arg ) ;
return new GetUserMappingsProtocolClientSideTranslatorPB ( arg ) ;
return new GetUserMappingsProtocolPBClientImpl ( arg ) ;
return new InetSocketAddress ( arg ) ;
return new InlineEventHandler ( arg ) ;
return new InlineEventHandler ( arg ) ;
return new <unk> ( arg ) ;
return new <unk> ( arg ) . <unk> ( arg ) ;
return new Job ( arg ) ;
return new Job ( arg ) ;
return new KerberosName ( arg ) . getHostName ( arg ) ;
return new MetaDataInputStream ( arg ) ;
return new MetaDataInputStream ( arg ) ;
return new <unk> ( arg ) ;
return new <unk> ( arg ) ;
return new OldCounterImpl ( arg ) ;
return new OldCounterImpl ( arg ) ;
return new Path ( arg ) . makeQualified ( arg ) ;
return new Path ( arg ) . makeQualified ( arg ) ;
return new <unk> ( arg ) ;
return new <unk> < T > ( arg ) ;
return new <unk> ( arg ) ;
return new SchedulerNodeReport ( arg ) ;
return new SchedulerNodeReport ( arg ) ;
return new Server ( arg ) ;
return new StateMachineFactory ( arg ) ;
return new StateMachineFactory ( arg ) ;
return new StateMachineFactory ( arg ) ;
return new String [ ] { val } ;
return new TaskAttemptID [ ] { val } ;
return new TaskAttemptID [ ] { val } ;
return new TaskAttemptID [ ] { val } ;
return new <unk> ( arg ) ;
return new Token < <unk> > ( arg ) ;
return new Token < <unk> > ( arg ) ;
return new org . apache . hadoop . hdfs . protocol . DatanodeInfo ( arg ) ;
return new org . apache . hadoop . hdfs . <unk> . ClientNamenodeProtocolTranslatorPB ( arg ) ;
return new org . apache . hadoop . hdfs . protocolR23Compatible . ClientDatanodeProtocolTranslatorR23 ( arg ) ;
return new org . apache . hadoop . hdfs . protocolR23Compatible . ClientDatanodeProtocolTranslatorR23 ( arg ) ;
return new org . apache . hadoop . hdfs . protocolR23Compatible . ClientDatanodeProtocolTranslatorR23 ( arg ) ;
return new org . apache . hadoop . hdfs . protocolR23Compatible . ClientNamenodeProtocolTranslatorR23 ( arg ) ;
return new org . apache . hadoop . hdfs . protocolR23Compatible . ClientNamenodeProtocolTranslatorR23 ( arg ) ;
return nn . getNamesystem ( arg ) . getRandomDatanode ( arg ) ;
return nn . renewDelegationToken ( arg ) ;
return nn ;
return nnAddr ;
return <unk> . getParent ( arg ) == <unk> . getParent ( arg ) ;
return nodes [ r . nextInt ( arg ) ] ;
return null ;
return null ;
return <unk> ;
return <unk> . value ( arg ) ;
return <unk> . <unk> ( arg ) . hashCode ( arg ) % <unk> ;
return <unk> . get ( arg ) ;
return org . apache . hadoop . hdfs . protocol . proto . DatanodeProtocolProtos . ProcessUpgradeRequestProto . getDefaultInstance ( arg ) ;
return org . apache . hadoop . hdfs . protocol . proto . DatanodeProtocolProtos . ProcessUpgradeRequestProto . getDefaultInstance ( arg ) ;
return org . apache . hadoop . hdfs . protocol . proto . DatanodeProtocolProtos . ProcessUpgradeResponseProto . getDefaultInstance ( arg ) ;
return org . apache . hadoop . hdfs . protocol . proto . DatanodeProtocolProtos . ProcessUpgradeResponseProto . getDefaultInstance ( arg ) ;
return org . apache . hadoop . hdfs . protocol . proto . DatanodeProtocolProtos . ReportBadBlocksRequestProto . getDefaultInstance ( arg ) ;
return org . apache . hadoop . hdfs . protocol . proto . DatanodeProtocolProtos . ReportBadBlocksRequestProto . getDefaultInstance ( arg ) ;
return org . apache . hadoop . hdfs . protocol . proto . DatanodeProtocolProtos . ReportBadBlocksResponseProto . getDefaultInstance ( arg ) ;
return org . apache . hadoop . hdfs . protocol . proto . DatanodeProtocolProtos . ReportBadBlocksResponseProto . getDefaultInstance ( arg ) ;
return org . apache . hadoop . hdfs . protocol . proto . NamenodeProtocolProtos . EndCheckpointRequestProto . getDefaultInstance ( arg ) ;
return org . apache . hadoop . hdfs . protocol . proto . NamenodeProtocolProtos . EndCheckpointRequestProto . getDefaultInstance ( arg ) ;
return org . apache . hadoop . hdfs . protocol . proto . NamenodeProtocolProtos . EndCheckpointResponseProto . getDefaultInstance ( arg ) ;
return org . apache . hadoop . hdfs . protocol . proto . NamenodeProtocolProtos . EndCheckpointResponseProto . getDefaultInstance ( arg ) ;
return org . apache . hadoop . hdfs . protocol . proto . NamenodeProtocolProtos . ErrorReportRequestProto . getDefaultInstance ( arg ) ;
return org . apache . hadoop . hdfs . protocol . proto . NamenodeProtocolProtos . ErrorReportRequestProto . getDefaultInstance ( arg ) ;
return org . apache . hadoop . hdfs . protocol . proto . NamenodeProtocolProtos . ErrorReportResponseProto . getDefaultInstance ( arg ) ;
return org . apache . hadoop . hdfs . protocol . proto . NamenodeProtocolProtos . ErrorReportResponseProto . getDefaultInstance ( arg ) ;
return org . apache . hadoop . hdfs . protocol . proto . NamenodeProtocolProtos . RegisterRequestProto . getDefaultInstance ( arg ) ;
return org . apache . hadoop . hdfs . protocol . proto . NamenodeProtocolProtos . RegisterRequestProto . getDefaultInstance ( arg ) ;
return org . apache . hadoop . hdfs . protocol . proto . NamenodeProtocolProtos . RegisterResponseProto . getDefaultInstance ( arg ) ;
return org . apache . hadoop . hdfs . protocol . proto . NamenodeProtocolProtos . RegisterResponseProto . getDefaultInstance ( arg ) ;
return org . apache . hadoop . hdfs . protocol . proto . NamenodeProtocolProtos . StartCheckpointRequestProto . getDefaultInstance ( arg ) ;
return org . apache . hadoop . hdfs . protocol . proto . NamenodeProtocolProtos . StartCheckpointRequestProto . getDefaultInstance ( arg ) ;
return org . apache . hadoop . hdfs . protocol . proto . NamenodeProtocolProtos . StartCheckpointResponseProto . getDefaultInstance ( arg ) ;
return org . apache . hadoop . hdfs . protocol . proto . NamenodeProtocolProtos . StartCheckpointResponseProto . getDefaultInstance ( arg ) ;
return org . apache . hadoop . hdfs . protocol . proto . NamenodeProtocolProtos . VersionRequestProto . getDefaultInstance ( arg ) ;
return org . apache . hadoop . hdfs . protocol . proto . NamenodeProtocolProtos . VersionRequestProto . getDefaultInstance ( arg ) ;
return org . apache . hadoop . hdfs . protocol . proto . NamenodeProtocolProtos . VersionResponseProto . getDefaultInstance ( arg ) ;
return org . apache . hadoop . hdfs . protocol . proto . NamenodeProtocolProtos . VersionResponseProto . getDefaultInstance ( arg ) ;
return org . apache . hadoop . mapreduce . v2 . app . <unk> . <unk> . class ;
return <unk> == this ;
return <unk> . toString ( arg ) +  <unk>  + connection . toString ( arg ) ;
return parent . <unk> ( arg ) ;
return path . toString ( arg ) ;
return pendingDeletionBlocksCount ;
return proto . toString ( arg ) ;
return queue . getQueueSchedulable ( arg ) . getMetrics ( arg ) ;
return queueMgr . getQueue ( arg ) . getQueueSchedulable ( arg ) . <unk> ( arg ) ;
return queues . values ( arg ) ;
return <unk> ( arg ) ;
return reader . <unk> ( arg ) ;
return recordFactory . newRecordInstance ( arg ) ;
return reduces . get ( arg ) ;
return <unk> . toArray ( arg ) ;
return <unk> ;
return report . getCounters ( arg ) ;
return report . getFinishTime ( arg ) ;
return report . <unk> ( arg ) ;
return report . <unk> ( arg ) ;
return report . <unk> ( arg ) ;
return report . <unk> ( arg ) ;
return reqs ;
return resource ;
return resp . hasCmd ( arg ) ? PBHelper . convert ( arg ) : null ;
return resp . hasCmd ( arg ) ? PBHelper . convert ( arg ) : null ;
return resp . hasCmd ( arg ) ? PBHelper . convert ( arg ) : null ;
return resp . hasCmd ( arg ) ? PBHelper . convert ( arg ) : null ;
return rfs ;
return <unk> ;
return rpcAddress ;
return rpcProxy . <unk> ( arg ) . getTxId ( arg ) ;
return runCommand ( arg ) ;
return s + Math . <unk> ( arg ) ;
return sb . toString ( arg ) ;
return serviceRPCAddress != null ? serviceRPCAddress : rpcAddress ;
return <unk> && <unk> . <unk> ( arg ) ;
return size * getBlockReplication ( arg ) ;
return size * getReplication ( arg ) ;
return size ;
return size ;
return size ;
return size == 0 ;
return <unk> * r . nextInt ( arg ) ;
return snapshots . size ( arg ) ;
return socketTimeout > 0 ? ( HdfsConstants . READ_TIMEOUT_EXTENSION * numNodes + socketTimeout ) : 0 ;
return srcFs . exists ( arg ) ? 0 : 1 ;
return srcFs . getFileStatus ( arg ) . <unk> ( arg ) == 0 ? 0 : 1 ;
return srcFs . getFileStatus ( arg ) . isDir ( arg ) ? 0 : 1 ;
return srcFs . getFileStatus ( arg ) . isDirectory ( arg ) ? 0 : 1 ;
return startCount ;
return startCount ;
return state ;
return <unk> . getCurrentState ( arg ) ;
return status ;
return subject . equals ( arg ) ;
return subject . <unk> ( arg ) . add ( arg ) ;
return subject . hashCode ( arg ) ;
return super . getServerDefaults ( arg ) ;
return super . toString ( arg ) ;
return t . schema ( arg ) ;
return t1 . name . compareTo ( arg ) ;
return tableInit ( arg ) . append ( arg ) . append ( arg ) . append ( arg ) . append ( arg ) . append ( arg ) . append ( arg ) . append ( arg ) . append ( arg ) . append ( arg ) . append ( arg ) . append ( arg ) . toString ( arg ) ;
return tableInit ( arg ) . append ( arg ) . append ( arg ) . append ( arg ) . append ( arg ) . append ( arg ) . append ( arg ) . toString ( arg ) ;
return tableInit ( arg ) . append ( arg ) . append ( arg ) . append ( arg ) . append ( arg ) . toString ( arg ) ;
return tableInit ( arg ) . append ( arg ) . append ( arg ) . append ( arg ) . toString ( arg ) ;
return tableInit ( arg ) . append ( arg ) . append ( arg ) . append ( arg ) . toString ( arg ) ;
return tableInit ( arg ) . append ( arg ) . toString ( arg ) ;
return tableInit ( arg ) . append ( arg ) . toString ( arg ) ;
return task . getState ( arg ) ;
return taskattempt ;
return <unk> ;
return this . <unk> ;
return this . app . <unk> ( arg ) ;
return this . appSchedulingInfo . getApplicationAttemptId ( arg ) ;
return this . appSchedulingInfo . getApplicationId ( arg ) ;
return this . appSchedulingInfo . <unk> ( arg ) ;
return this . appSchedulingInfo . <unk> ( arg ) ;
return this . appSchedulingInfo . <unk> ( arg ) ;
return this . appSchedulingInfo . <unk> ( arg ) ;
return this . appSchedulingInfo . <unk> ( arg ) ;
return this . appSchedulingInfo . <unk> ( arg ) ;
return this . appSchedulingInfo . getUser ( arg ) ;
return this . appSchedulingInfo . <unk> ( arg ) ;
return this . <unk> ;
return this . block . equals ( arg ) && this . delHints . equals ( arg ) ;
return this . <unk> ;
return this . <unk> ;
return this . conf ;
return this . containerId ;
return this . containerTokenSecretManager ;
return this . diagnostics . toString ( arg ) ;
return this . diagnostics ;
return this . diagnostics ;
return this . genstamp ;
return this . getAppAttemptId ( arg ) . compareTo ( arg ) ;
return this . getAppId ( arg ) . compareTo ( arg ) ;
return this . getQueue ( arg ) ;
return this . <unk> . getPort ( arg ) ;
return this . <unk> ;
return this . <unk> ;
return this . <unk> ;
return this . names ;
return this . <unk> ;
return this . nodes . size ( arg ) ;
return this . queue . getQueueSchedulable ( arg ) . getMetrics ( arg ) ;
return this . queueMgr ;
return this . <unk> ;
return this . reReservations . count ( arg ) ;
return this . rmContext . <unk> ( arg ) ;
return this . rmNode . getHostName ( arg ) ;
return this . rmNode . <unk> ( arg ) ;
return this . rmNode . <unk> ( arg ) ;
return this . rmNode . getRackName ( arg ) ;
return this . rmNode ;
return this . schedulingOpportunities . count ( arg ) ;
return this . state . toString ( arg ) ;
return this . state ;
return this . state ;
return this . state ;
return this . state ;
return this . state ;
return this . state ;
return this . storageID ;
return this . <unk> ;
return this . trackingUrl ;
return this . <unk> ;
return this . <unk> . size ( arg ) == 0 && this . <unk> . size ( arg ) == 0 && this . <unk> . size ( arg ) == 0 ;
return toList ( arg ) ;
return toList ( arg ) ;
return toList ( arg ) ;
return tokens . add ( arg ) ;
return <unk> ;
return <unk> + <unk> ;
return <unk> . <unk> ( arg ) ;
return true ;
return type ;
return used . <unk> ( arg ) ;
return user ;
return user ;
return <unk> . toString ( arg ) ;
return validation . getNumTransactions ( arg ) ;
return value . <unk> ( arg ) ;
return value . toString ( arg ) ;
return <unk> . length - <unk> . length ;
return volumes . <unk> ( arg ) >= <unk> ;
return <unk> ? <unk> : <unk> ;
return <unk> != null && <unk> . exists ( arg ) ;
return <unk> ( arg ) ;
return <unk> . <unk> ( arg ) ;
<unk> ( arg ) ;
rfs . rename ( arg ) ;
rfs . rename ( arg ) ;
rmContext . <unk> ( arg ) . removeApplication ( arg ) ;
rmDispatcher = new <unk> ( arg ) ;
rootDir . addNode ( arg ) ;
rootDir = new <unk> ( arg ) ;
rpcMetrics . <unk> . inc ( arg ) ;
rpcMetrics . <unk> . inc ( arg ) ;
rpcMetrics . <unk> . inc ( arg ) ;
rpcMetrics . <unk> . inc ( arg ) ;
rpcMetrics . <unk> . inc ( arg ) ;
rpcMetrics . <unk> . inc ( arg ) ;
rpcProxy . <unk> ( arg ) ;
runSpeculativeTaskAttemptSucceedsEvenIfFirstFails ( arg ) ;
runSpeculativeTaskAttemptSucceedsEvenIfFirstFails ( arg ) ;
runSpeculativeTaskAttemptSucceedsEvenIfFirstFails ( arg ) ;
runSpeculativeTaskAttemptSucceedsEvenIfFirstFails ( arg ) ;
s = new Socket ( arg ) ;
s = new Socket ( arg ) ;
s = new Socket ( arg ) ;
saslRpcClient . saslConnect ( arg ) ;
saslRpcClient . saslConnect ( arg ) ;
<unk> ( arg ) ;
sb . append ( arg ) . append ( arg ) . append ( arg ) ;
sb . append ( arg ) . append ( arg ) ;
sb . append ( arg ) ;
scanner = reader . createScanner ( arg ) ;
<unk> . <unk> ( arg ) ;
schedulingInfo = Text . readString ( arg ) ;
sd . read ( arg ) ;
sd . write ( arg ) ;
sd . write ( arg ) ;
<unk> = FSConstants . INVALID_TXID ;
selfSocketAddr = dn . getSelfAddr ( arg ) . toString ( arg ) ;
selfSocketAddr = dn . getSelfAddr ( arg ) . toString ( arg ) ;
sendChunks ( arg ) ;
sendCounters = false ;
sendCounters = true ;
<unk> ( arg ) ;
serialNo ++ ;
serialNo ++ ;
serialNo ++ ;
server . close ( arg ) ;
server . close ( arg ) ;
server . close ( arg ) ;
server . close ( arg ) ;
server . close ( arg ) ;
server . close ( arg ) ;
server . close ( arg ) ;
server . start ( arg ) ;
server = RPC . getServer ( arg ) ;
server = RPC . getServer ( arg ) ;
server = RPC . getServer ( arg ) ;
server = RPC . getServer ( arg ) ;
server = RPC . getServer ( arg ) ;
server = RPC . getServer ( arg ) ;
server = RPC . getServer ( arg ) ;
server = RPC . getServer ( arg ) ;
server = RPC . getServer ( arg ) ;
server = RPC . getServer ( arg ) ;
server = createServer ( arg ) ;
<unk> . authorize ( arg ) ;
set = new <unk> < Block > ( arg ) ;
<unk> ( arg ) ;
<unk> ( arg ) ;
setPermission ( arg ) ;
setRegistartion ( arg ) ;
<unk> ( arg ) ;
<unk> ( arg ) ;
<unk> ( arg ) ;
shell . <unk> ( arg ) ;
short expectedReplication = bc . getReplication ( arg ) ;
short expectedReplication = bc . getReplication ( arg ) ;
short expectedReplication = fileINode . getReplication ( arg ) ;
short numExpectedReplicas = file . getReplication ( arg ) ;
short replication = fsNamesys . adjustReplication ( arg ) ;
short replication = params . get ( arg ) ;
size += com . google . protobuf . CodedOutputStream . computeUInt32Size ( arg ) ;
size += com . google . protobuf . CodedOutputStream . computeUInt32Size ( arg ) ;
slaveHandler . setKeys ( arg ) ;
slaveHandler . setKeys ( arg ) ;
snapshots . add ( arg ) ;
sock = new Socket ( arg ) ;
sock = socketCache . get ( arg ) ;
<unk> . getStorage ( arg ) . <unk> ( arg ) ;
<unk> =! getFileStatus ( arg ) . isDir ( arg ) ;
ss = ( socketWriteTimeout > 0 ) ? <unk> . open ( arg ) . socket ( arg ) : new <unk> ( arg ) ;
start = System . currentTimeMillis ( arg ) ;
start = System . currentTimeMillis ( arg ) ;
start = System . currentTimeMillis ( arg ) ;
start = System . currentTimeMillis ( arg ) ;
start = System . currentTimeMillis ( arg ) ;
start = System . currentTimeMillis ( arg ) ;
start = System . currentTimeMillis ( arg ) ;
<unk> ( arg ) ;
startTime = System . currentTimeMillis ( arg ) ;
startTime = System . currentTimeMillis ( arg ) ;
startTime = System . currentTimeMillis ( arg ) ;
startTime = System . currentTimeMillis ( arg ) ;
startTimeEpoch = System . currentTimeMillis ( arg ) ;
startTimeEpoch = System . currentTimeMillis ( arg ) ;
stat = fs . getFileStatus ( arg ) ;
stat = <unk> ;
state . <unk> ( arg ) ;
state = proxy . getServiceState ( arg ) ;
stateFilter = RMNodeState . valueOf ( arg ) ;
state_ = org . apache . hadoop . hdfs . protocol . proto . HdfsProtos . ReplicaState . FINALIZED ;
state_ = org . apache . hadoop . hdfs . protocol . proto . HdfsProtos . ReplicaState . FINALIZED ;
state_ = org . apache . hadoop . hdfs . protocol . proto . HdfsProtos . ReplicaState . FINALIZED ;
<unk> final int <unk> = 1 , <unk> = 2 , <unk> = <unk> , <unk> = 4 , <unk> = 5 , <unk> = 6 , <unk> = 7 , <unk> = 8 , <unk> = 9 , <unk> = 10 , <unk> = <unk> , <unk> = 1 , <unk> = 2 ;
<unk> . getServletContext ( arg ) . setAttribute ( arg ) ;
<unk> . <unk> ( arg ) ;
status . setIncludeCounters ( arg ) ;
status . setIncludeCounters ( arg ) ;
status = <unk> ;
status = <unk> ;
stm . read ( arg ) ;
stm . read ( arg ) ;
<unk> ( arg ) ;
stopFCs ( arg ) ;
stopFCs ( arg ) ;
stopFCs ( arg ) ;
stopFCs ( arg ) ;
stopFCs ( arg ) ;
storage . <unk> ( arg ) ;
storage . <unk> ( arg ) ;
storage . <unk> ( arg ) ;
storage . setMostRecentCheckpointTxId ( arg ) ;
storage . setMostRecentCheckpointTxId ( arg ) ;
storage . setMostRecentCheckpointTxId ( arg ) ;
storageDir = MiniDFSCluster . getStorageDir ( arg ) ;
storageDir = MiniDFSCluster . getStorageDir ( arg ) ;
storageDir = MiniDFSCluster . getStorageDir ( arg ) ;
storageDir = MiniDFSCluster . getStorageDir ( arg ) ;
<unk> = <unk> + rand . nextInt ( arg ) ;
storateInfoBuilder_ . clear ( arg ) ;
storateInfo_ = org . apache . hadoop . hdfs . protocol . proto . HdfsProtos . <unk> . getDefaultInstance ( arg ) ;
store . delete ( arg ) ;
storedBlock = <unk> ( arg ) ;
streams . <unk> . write ( arg ) ;
<unk> = <unk> ( arg ) ;
summary . <unk> ( arg ) ;
super . <unk> ( arg ) ;
super . handle ( arg ) ;
super . handle ( arg ) ;
super . resetSchedulingOpportunities ( arg ) ;
<unk> ( arg ) ;
t . <unk> ( arg ) ;
<unk> = new com . google . protobuf . <unk> < org . apache . hadoop . hdfs . protocol . proto . HdfsProtos . DatanodeIDsProto , org . apache . hadoop . hdfs . protocol . proto . HdfsProtos . DatanodeIDsProto . Builder , org . apache . hadoop . hdfs . protocol . proto . HdfsProtos . <unk> > ( arg ) ;
<unk> = new java . util . ArrayList < org . apache . hadoop . hdfs . protocol . proto . HdfsProtos . DatanodeIDsProto > ( arg ) ;
task . numberUncompletedAttempts = 0 ;
<unk> . <unk> . register ( arg ) ;
<unk> . counters = TypeConverter . toYarn ( arg ) ;
taskHeartbeatHandler . receivedPing ( arg ) ;
taskHeartbeatHandler . receivedPing ( arg ) ;
taskHeartbeatHandler . receivedPing ( arg ) ;
taskHeartbeatHandler . receivedPing ( arg ) ;
taskHeartbeatHandler . receivedPing ( arg ) ;
taskHeartbeatHandler . receivedPing ( arg ) ;
taskInfo . error = event . getError ( arg ) ;
taskattempt . add ( arg ) ;
tbody . tr ( arg ) . td ( arg ) . td ( arg ) . td ( arg ) . a ( arg ) . _ ( arg ) . td ( arg ) . td ( arg ) . td ( arg ) . td ( arg ) . td ( arg ) . td ( arg ) . td ( arg ) . _ ( arg ) ;
tbody . tr ( arg ) . td ( arg ) . td ( arg ) . td ( arg ) . a ( arg ) . _ ( arg ) . td ( arg ) . td ( arg ) . td ( arg ) . td ( arg ) . td ( arg ) . td ( arg ) . td ( arg ) . td ( arg ) . _ ( arg ) ;
test . <unk> ( arg ) ;
test . <unk> ( arg ) ;
<unk> = new ArrayList < TestCmd > ( arg ) ;
<unk> ( arg ) ;
testRenameDirectoryAsNonExistentDirectory ( arg ) ;
testRenameDirectoryAsNonExistentDirectory ( arg ) ;
<unk> = new Path ( arg ) ;
testType = <unk> ;
testType = TEST_TYPE_READ ;
testType = <unk> ;
this . <unk> = parent . getAbsoluteCapacity ( arg ) * capacity ;
this . absoluteMaxCapacity = ( Math . <unk> ( arg ) == CapacitySchedulerConfiguration . UNDEFINED ) ? Float . MAX_VALUE : ( parent . getAbsoluteCapacity ( arg ) * maximumCapacity ) ;
this . absoluteMaxCapacity = ( maximumCapacity == CapacitySchedulerConfiguration . UNDEFINED ) ? Float . MAX_VALUE : ( parent . getAbsoluteCapacity ( arg ) * maximumCapacity ) ;
this . absoluteMaxCapacity = CSQueueUtils . computeAbsoluteMaximumCapacity ( arg ) ;
this . absoluteMaxCapacity = CSQueueUtils . computeAbsoluteMaximumCapacity ( arg ) ;
this . <unk> ( arg ) ;
this . appLogAggregators . get ( arg ) . <unk> ( arg ) ;
this . appLogAggregators . get ( arg ) . <unk> ( arg ) ;
this . appSchedulingInfo . stop ( arg ) ;
this . <unk> = args ;
this . attemptID = attemptID ;
this . authMethod = authMethod ;
this . bindAddress = NetUtils . createSocketAddr ( arg ) ;
this . bindAddress = NetUtils . createSocketAddr ( arg ) ;
this . blockReplQueueThreshold = ( int ) ( ( ( double ) blockTotal ) * replQueueThreshold ) ;
this . blockReplQueueThreshold = ( int ) ( ( ( double ) blockTotal ) * replQueueThreshold ) ;
this . blockReplQueueThreshold = ( int ) ( blockTotal * replQueueThreshold ) ;
this . blocks = newlist ;
this . <unk> . join ( arg ) ;
this . completedContainer ( arg ) ;
this . compressedValSerializer = getSerializer ( arg ) ;
this . compressedValSerializer = serializationFactory . getSerializer ( arg ) ;
this . conf = conf ;
this . containerId = in . <unk> ( arg ) ;
this . containerTokenSecretManager = new ContainerTokenSecretManager ( arg ) ;
this . containerTokenSecretManager = new <unk> ( arg ) ;
this . context = new NMContext ( arg ) ;
this . currentState = EOF ;
this . currentState = EOF ;
this . currentState = <unk> ;
this . currentState = <unk> ;
this . currentState = <unk> ;
this . currentState = RAND_PART_A_STATE ;
this . currentState = RAND_PART_A_STATE ;
this . currentState = RAND_PART_A_STATE ;
this . currentState = <unk> ;
this . currentState = <unk> ;
this . currentState = <unk> ;
this . dispatcher = new AsyncDispatcher ( arg ) ;
this . doOutput = doOutput ;
this . doOutput = doOutput ;
this . doOutputAndRedirect = doOutputAndRedirect ;
this . endCheckpoint ( arg ) ;
this . env . put ( arg ) ;
this . errorReport ( arg ) ;
this . failtime = System . currentTimeMillis ( arg ) + ( ( timeout <= 0 ) ? Long . MAX_VALUE : timeout ) ;
this . <unk> = in . <unk> ( arg ) ;
this . genstamp = <unk> ;
this . getBlockManager ( arg ) . blockReceivedAndDeleted ( arg ) ;
this . hostName = hostName ;
this . <unk> = in . <unk> ( arg ) ;
this . <unk> . add ( arg ) ;
this . jobID = jobID ;
this . jobName = jobName ;
this . <unk> = conf ;
this . keySerializer = getSerializer ( arg ) ;
this . keySerializer = serializationFactory . getSerializer ( arg ) ;
this . <unk> = System . currentTimeMillis ( arg ) ;
this . layoutVersion = FSConstants . LAYOUT_VERSION ;
this . layoutVersion = FSConstants . LAYOUT_VERSION ;
this . layoutVersion = FSConstants . LAYOUT_VERSION ;
this . layoutVersion = FSConstants . LAYOUT_VERSION ;
this . mapOutputFile . <unk> ( arg ) ;
this . maxMaps = maxMaps ;
this . maximumCapacity = maxCapacity ;
this . name = DFSUtil . <unk> ( arg ) ;
this . name = name ;
this . namenode = ( NamenodeProtocol ) RPC . waitForProxy ( arg ) ;
this . namenode = new NamenodeProtocolTranslatorPB ( arg ) ;
this . namenode = new NamenodeProtocolTranslatorPB ( arg ) ;
this . namesystem = new FSNamesystem ( arg ) ;
this . nnAddr = NetUtils . createSocketAddr ( arg ) ;
this . nnAddr = NetUtils . createSocketAddr ( arg ) ;
this . nnAddr = NetUtils . createSocketAddrForHost ( arg ) ;
this . nnAddr = NetUtils . createSocketAddrForHost ( arg ) ;
this . nodes . put ( arg ) ;
this . nodes . remove ( arg ) ;
this . <unk> = <unk> ( arg ) ;
this . <unk> = bsR ( arg ) ;
this . processUpgrade ( arg ) ;
this . queue = queue ;
this . reReservations . add ( arg ) ;
this . reReservations . put ( arg ) ;
this . reReservations . setCount ( arg ) ;
this . register ( arg ) ;
this . reportBadBlocks ( arg ) ;
this . resetSchedulingOpportunities ( arg ) ;
this . resetSchedulingOpportunities ( arg ) ;
this . response = response ;
this . <unk> = NameNodeProxies . getDefaultRetryPolicy ( arg ) ;
this . rmAddress = conf . get ( arg ) ;
this . rmContext . <unk> ( arg ) . getEventHandler ( arg ) . handle ( arg ) ;
this . rmDispatcher = <unk> ( arg ) ;
this . rmDispatcher = new AsyncDispatcher ( arg ) ;
this . rmDispatcher = new AsyncDispatcher ( arg ) ;
this . <unk> = <unk> . <unk> ( arg ) ;
this . rpc = <unk> . create ( arg ) ;
this . <unk> . join ( arg ) ;
this . schedulingInfo = Text . readString ( arg ) ;
this . schedulingOpportunities . put ( arg ) ;
this . schedulingOpportunities . setCount ( arg ) ;
this . server . close ( arg ) ;
this . server . close ( arg ) ;
this . server . close ( arg ) ;
this . server . close ( arg ) ;
this . server . join ( arg ) ;
this . server . <unk> ( arg ) ;
this . startCheckpoint ( arg ) ;
this . state = Text . readString ( arg ) ;
this . taskID = taskID ;
this . <unk> = conf . getBoolean ( arg ) && isSecurityEnabled ( arg ) ;
this . uncompressedValSerializer = getSerializer ( arg ) ;
this . uncompressedValSerializer = serializationFactory . getSerializer ( arg ) ;
this . unreserve ( arg ) ;
this . unreserve ( arg ) ;
this . user = Text . readString ( arg ) ;
this . user = user ;
this . writeFile ( arg ) ;
this . writeLock . <unk> ( arg ) ;
this . writeLock . <unk> ( arg ) ;
throw ( arg ) ;
throw ( arg ) new IOException ( arg ) . <unk> ( arg ) ;
throw <unk> . <unk> ( arg ) ;
throw e ;
throw e ;
throw new <unk> ( arg ) ;
throw new FileNotFoundException ( arg ) ;
throw new FileNotFoundException ( arg ) ;
throw new FileNotFoundException ( arg ) ;
throw new FileNotFoundException ( arg ) ;
throw new FileNotFoundException ( arg ) ;
throw new FileNotFoundException ( arg ) ;
throw new IOException ( arg ) ;
throw new IllegalArgumentException ( arg ) ;
throw new IllegalArgumentException ( arg ) ;
throw new IllegalArgumentException ( arg ) ;
throw new IllegalArgumentException ( arg ) ;
throw new IllegalArgumentException ( arg ) ;
throw new IllegalArgumentException ( arg ) ;
throw new IllegalArgumentException ( arg ) ;
throw new IllegalArgumentException ( arg ) ;
throw new IllegalArgumentException ( arg ) ;
throw new IllegalArgumentException ( arg ) ;
throw new IllegalArgumentException ( arg ) ;
throw new IllegalArgumentException ( arg ) ;
throw new IllegalArgumentException ( arg ) ;
throw new IllegalArgumentException ( arg ) ;
throw new IllegalArgumentException ( arg ) ;
throw new IllegalArgumentException ( arg ) ;
throw new IllegalArgumentException ( arg ) ;
throw new IllegalArgumentException ( arg ) ;
throw new <unk> ( arg ) ;
throw new <unk> ( arg ) ;
throw new <unk> ( arg ) ;
throw new <unk> ( arg ) ;
throw new <unk> ( arg ) ;
time = System . currentTimeMillis ( arg ) ;
<unk> System . currentTimeMillis ( arg ) - start ;
timer . schedule ( arg ) ;
timer . schedule ( arg ) ;
timestamp = System . currentTimeMillis ( arg ) ;
timestamp = System . currentTimeMillis ( arg ) ;
timestamp = System . currentTimeMillis ( arg ) ;
timestamp2 = System . currentTimeMillis ( arg ) ;
timestamp2 = System . currentTimeMillis ( arg ) ;
timestamp2 = System . currentTimeMillis ( arg ) ;
toDeleteList . add ( arg ) ;
toDeleteList . clear ( arg ) ;
toLogLong ( arg ) . write ( arg ) ;
toLogLong ( arg ) . write ( arg ) ;
toSvc . monitorHealth ( arg ) ;
toSvc . transitionToActive ( arg ) ;
toSvcState = toSvc . getServiceState ( arg ) ;
token . setService ( arg ) ;
token . setService ( arg ) ;
token . setService ( arg ) ;
token . setService ( arg ) ;
tokens = ByteBuffer . wrap ( arg ) ;
tool . printList ( arg ) ;
tool . printList ( arg ) ;
tool . printList ( arg ) ;
tool . run ( arg ) ;
tool . run ( arg ) ;
<unk> . writeObject ( arg ) ;
total += node . getFSDataset ( arg ) . <unk> ( arg ) ;
total = JobImpl . newCounters ( arg ) ;
total = System . currentTimeMillis ( arg ) - start ;
<unk> ( arg ) ;
<unk> ( arg ) ;
<unk> . stop ( arg ) ;
txid = cluster . getNameNode ( arg ) . getTransactionID ( arg ) ;
txid = cluster . getNameNode ( arg ) . getTransactionID ( arg ) ;
<unk> . setINode ( arg ) ;
ugi . <unk> ( arg ) ;
ugi . write ( arg ) ;
<unk> . <unk> ( arg ) ;
<unk> = new String ( arg ) ;
updateMetrics ( arg ) ;
updateMetrics ( arg ) ;
updateResource ( arg ) ;
updateResource ( arg ) ;
updateResource ( arg ) ;
updateResource ( arg ) ;
<unk> [ i ] = datanodes [ i ] . data . getStoredBlock ( arg ) ;
user = Text . readString ( arg ) ;
user = UserGroupInformation . createRemoteUser ( arg ) ;
<unk> = <unk> ( arg ) ;
userLimit = <unk> ( arg ) ;
util . shutdown ( arg ) ;
util = new DFSTestUtil ( arg ) ;
v = <unk> . getVolume ( arg ) ;
<unk> = className . toString ( arg ) ;
validateResponse ( arg ) ;
validateResponse ( arg ) ;
validateResponse ( arg ) ;
validateResponse ( arg ) ;
validateResponse ( arg ) ;
validateResponse ( arg ) ;
validateResponse ( arg ) ;
validateResponse ( arg ) ;
validation = FSEditLogLoader . validateEditLog ( arg ) ;
validation = FSEditLogLoader . validateEditLog ( arg ) ;
validation = FSEditLogLoader . validateEditLog ( arg ) ;
validation = FSEditLogLoader . validateEditLog ( arg ) ;
validation = FSEditLogLoader . validateEditLog ( arg ) ;
value = ( String ) this . getClass ( arg ) . <unk> ( arg ) . get ( arg ) ;
values [ call . index ] = call . getValue ( arg ) ;
<unk> . <unk> ( arg ) ;
verify ( arg ) . addCounter ( arg ) ;
verify ( arg ) . addCounter ( arg ) ;
verify ( arg ) . addGauge ( arg ) ;
verify ( arg ) . addGauge ( arg ) ;
verify ( arg ) . addGauge ( arg ) ;
verify ( arg ) . exit ( arg ) ;
verify ( arg ) . getDelegationTokens ( arg ) ;
verify ( arg ) . getNewApplicationId ( arg ) ;
verify ( arg ) . isDir ( arg ) ;
verify ( arg ) ;
verify ( arg ) ;
verify ( arg ) ;
verify ( arg ) ;
<unk> ( arg ) ;
<unk> ( arg ) ;
verifyStatInvalidException ( arg ) ;
verifyStatInvalidException ( arg ) ;
verifyStatInvalidException ( arg ) ;
verifyVersion ( arg ) ;
verifyVersion ( arg ) ;
verifyVersion ( arg ) ;
<unk> = volumeMap . get ( arg ) . getVolume ( arg ) ;
volume . shutdown ( arg ) ;
volumeList . set ( arg ) ;
<unk> . <unk> ( arg ) ;
waitForActiveLockHolder ( arg ) ;
waitForActiveLockHolder ( arg ) ;
waitForDNDeletions ( arg ) ;
waitForDNDeletions ( arg ) ;
waitForDNDeletions ( arg ) ;
waitForNNToIssueDeletions ( arg ) ;
waitForNNToIssueDeletions ( arg ) ;
waitForStandbyToCatchUp ( arg ) ;
waitForStandbyToCatchUp ( arg ) ;
<unk> = new <unk> ( arg ) ;
when ( arg ) . thenReturn ( arg ) ;
when ( arg ) . thenReturn ( arg ) ;
when ( arg ) . thenThrow ( arg ) . thenThrow ( arg ) . thenThrow ( arg ) . thenReturn ( arg ) ;
workDir = <unk> ( arg ) ;
workDir = new Path ( arg ) ;
<unk> = this . <unk> ( arg ) ;
writeFile ( arg ) ;
writeFile ( arg ) ;
writeFile ( arg ) ;
writeFile ( arg ) ;
writeFile ( arg ) ;
writeFile ( arg ) ;
writeFile ( arg ) ;
writeFile ( arg ) ;
writeFile ( arg ) ;
writeFile ( arg ) ;
writeFile ( arg ) ;
writeFile ( arg ) ;
writeFile ( arg ) ;
writeFile ( arg ) ;
writeFile ( arg ) ;
writeFile ( arg ) ;
writeFile ( arg ) ;
writeFile ( arg ) ;
writeFile ( arg ) ;
writeFile ( arg ) ;
writeFile ( arg ) ;
writeFile ( arg ) ;
writeFile ( arg ) ;
writeFile ( arg ) ;
writeFile ( arg ) ;
writeFile ( arg ) ;
writeFile ( arg ) ;
writeFile ( arg ) ;
writeFile ( arg ) ;
<unk> ( arg ) ;
writeLock ( arg ) ;
<unk> ( arg ) ;
<unk> ( arg ) ;
writeUnlock ( arg ) ;
writer ( arg ) . write ( arg ) ;
writer . <unk> ( arg ) ;
<unk> . <unk> ( arg ) ;
zkc = <unk> . connectZooKeeper ( arg ) ;
zkc = connectZooKeeper ( arg ) ;
zkc = connectZooKeeper ( arg ) ;
zvec = ( zvec << 1 ) | ( ( bsBuffShadow >> <unk> ) & 1 ) ;
