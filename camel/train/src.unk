( ( <unk> ) map ) . <unk> ( arg ) ;
( ( BlockingQueue < Exchange > ) queue ) . put ( arg ) ;
( ( <unk> ) <unk> ) . <unk> ( arg ) ;
( ( DefaultCamelContext ) camelContext ) . start ( arg ) ;
( ( DefaultCamelContext ) camelContext ) . start ( arg ) ;
( ( <unk> ) method ) . <unk> ( arg ) ;
( ( <unk> ) httpRequest ) . <unk> ( arg ) ;
( ( JmsEndpoint ) getEndpoint ( arg ) ) . <unk> ( arg ) ;
( ( MQTTEndpoint ) getEndpoint ( arg ) ) . addConsumer ( arg ) ;
( ( MQTTEndpoint ) getEndpoint ( arg ) ) . removeConsumer ( arg ) ;
( ( ModelAwareFilter ) filter ) . apply ( arg ) ;
( ( ModelAwareFilter ) filter ) . apply ( arg ) ;
( ( ModelAwareFilter ) getFilter ( arg ) ) . apply ( arg ) ;
( ( ModelAwareFilter ) getFilter ( arg ) ) . apply ( arg ) ;
( ( RemoteFileOperations ) getOperations ( arg ) ) . disconnect ( arg ) ;
( ( RemoteFileOperations ) operations ) . disconnect ( arg ) ;
( ( RestletEndpoint ) getEndpoint ( arg ) ) . connect ( arg ) ;
( ( RestletEndpoint ) getEndpoint ( arg ) ) . disconnect ( arg ) ;
( ( RouteboxDirectEndpoint ) getRouteboxEndpoint ( arg ) ) . addConsumer ( arg ) ;
( ( RouteboxDirectEndpoint ) getRouteboxEndpoint ( arg ) ) . removeConsumer ( arg ) ;
( ( RouteboxDirectEndpoint ) getRouteboxEndpoint ( arg ) ) . removeConsumer ( arg ) ;
( ( <unk> ) getRouteboxEndpoint ( arg ) ) . getCamelContext ( arg ) . getExecutorServiceStrategy ( arg ) . shutdown ( arg ) ;
( ( <unk> ) message ) . <unk> ( arg ) ;
( ( SubmitOrderedCompletionService ) <unk> ) . <unk> ( arg ) ;
( ( TraceHandlerTestHandler ) ( ( Tracer ) context . <unk> ( arg ) ) . getTraceHandler ( arg ) ) . <unk> ( arg ) ;
( ( <unk> ) super . getComponent ( arg ) ) . addServlet ( arg ) ;
@ SuppressWarnings ( arg ) DeadLetterChannel answer = new DeadLetterChannel ( arg ) ;
@ SuppressWarnings ( arg ) Echo service = ProxyHelper . createProxy ( arg ) ;
@ SuppressWarnings ( arg ) Echo service = ProxyHelper . createProxy ( arg ) ;
@ SuppressWarnings ( arg ) Echo service = ProxyHelper . createProxy ( arg ) ;
@ SuppressWarnings ( arg ) Iterator < PGPPublicKeyRing > keyRingIter = ( Iterator < PGPPublicKeyRing > ) pgpSec . getKeyRings ( arg ) ;
@ SuppressWarnings ( arg ) Iterator < PGPSecretKey > keyIter = ( Iterator < PGPSecretKey > ) keyRing . getSecretKeys ( arg ) ;
@ SuppressWarnings ( arg ) Iterator < PGPSecretKeyRing > keyRingIter = ( Iterator < PGPSecretKeyRing > ) pgpSec . getKeyRings ( arg ) ;
@ SuppressWarnings ( arg ) JSONProvider <unk> = new JSONProvider ( arg ) ;
@ SuppressWarnings ( arg ) List < Exchange > list = endpoint . getExchanges ( arg ) ;
@ SuppressWarnings ( arg ) List < Exchange > list = endpoint . getExchanges ( arg ) ;
@ SuppressWarnings ( arg ) List < Exchange > list = endpoint . getExchanges ( arg ) ;
@ SuppressWarnings ( arg ) List < ProcessorDefinition > children = defn . getOutputs ( arg ) ;
@ SuppressWarnings ( arg ) RouteDefinition definition = context . getRouteDefinition ( arg ) ;
@ SuppressWarnings ( arg ) RouteDefinition definition = context . getRouteDefinition ( arg ) ;
@ SuppressWarnings ( arg ) Set < String > <unk> = blueprintContainer . <unk> ( arg ) ;
@ SuppressWarnings ( arg ) TransactionErrorHandler answer = new TransactionErrorHandler ( arg ) ;
<unk> <unk> = null ;
AbstractMessageListenerContainer container = <unk> ( arg ) ;
AbstractMessageListenerContainer container = config . isUseVersion102 ( arg ) ? ( replyToSelectorName != null ) ? new DefaultMessageListenerContainer102 ( arg ) : new <unk> ( arg ) : ( replyToSelectorName != null ) ? new DefaultMessageListenerContainer ( arg ) : new <unk> ( arg ) ;
AbstractMessageListenerContainer listenerContainer = configuration . createMessageListenerContainer ( arg ) ;
AbstractMessageListenerContainer listenerContainer = createMessageListenerContainer ( arg ) ;
AbstractPhaseInterceptor interceptor = ( AbstractPhaseInterceptor ) <unk> ;
<unk> <unk> = context . getRegistry ( arg ) . lookup ( arg ) ;
Age = <unk> ;
<unk> < Object > repository = <unk> ( arg ) ;
AggregatorDefinition agg = from ( arg ) . aggregate ( arg ) ;
AggregatorDefinition answer = new AggregatorDefinition ( arg ) ;
AggregatorDefinition answer = new AggregatorDefinition ( arg ) ;
AggregatorDefinition answer = new AggregatorDefinition ( arg ) ;
AggregatorDefinition answer = new AggregatorDefinition ( arg ) ;
AggregatorDefinition answer = new AggregatorDefinition ( arg ) ;
<unk> agg = from ( arg ) . aggregate ( arg ) ;
AmazonCloudWatchClient client = new AmazonCloudWatchClient ( arg ) ;
AmazonS3Client client = new AmazonS3Client ( arg ) ;
AmazonSNSClient client = new AmazonSNSClient ( arg ) ;
AmazonSQSClient client = new AmazonSQSClient ( arg ) ;
AmazonSimpleDBClient client = new AmazonSimpleDBClient ( arg ) ;
Annotation [ ] [ ] parametersAnnotations = method . <unk> ( arg ) ;
Annotation [ ] <unk> = parametersAnnotations [ i ] ;
ApplicationContext ac = new ClassPathXmlApplicationContext ( arg ) ;
ApplicationContext ac = new ClassPathXmlApplicationContext ( arg ) ;
ApplicationContext ac = new ClassPathXmlApplicationContext ( arg ) ;
ApplicationContext appContext = new ClassPathXmlApplicationContext ( arg ) ;
ApplicationContext applicationContext = new ClassPathXmlApplicationContext ( arg ) ;
ApplicationContext applicationContext = new ClassPathXmlApplicationContext ( arg ) ;
ApplicationContext applicationContext = new ClassPathXmlApplicationContext ( arg ) ;
ApplicationContext applicationContext = new ClassPathXmlApplicationContext ( arg ) ;
ApplicationContext applicationContext = new ClassPathXmlApplicationContext ( arg ) ;
ApplicationContext applicationContext = new ClassPathXmlApplicationContext ( arg ) ;
ApplicationContext context = new ClassPathXmlApplicationContext ( arg ) ;
ApplicationContext context = new ClassPathXmlApplicationContext ( arg ) ;
ApplicationContext context = new ClassPathXmlApplicationContext ( arg ) ;
ApplicationContext context = new ClassPathXmlApplicationContext ( arg ) ;
ApplicationContext context = new ClassPathXmlApplicationContext ( arg ) ;
ApplicationContext context = new ClassPathXmlApplicationContext ( arg ) ;
<unk> < Exchange > blockingQueue = assertIsInstanceOf ( arg ) ;
ArrayList < ? > list = ( ArrayList < ? > ) field . get ( arg ) ;
ArrayList < CamelContext > camelContexts = new ArrayList < CamelContext > ( arg ) ;
ArrayList < ClassMap > <unk> = new ArrayList < ClassMap > ( arg ) ;
ArrayList < HashMap < String , Object >> data = new ArrayList < HashMap < String , Object >> ( arg ) ;
ArrayList < HashMap < String , Object >> data = out . getOut ( arg ) . getBody ( arg ) ;
ArrayList < Integer > list = new ArrayList < Integer > ( arg ) ;
ArrayList < InternetAddress > <unk> = new ArrayList < InternetAddress > ( arg ) ;
ArrayList < InternetAddress > <unk> = new ArrayList < InternetAddress > ( arg ) ;
ArrayList < Item > expected = <unk> ( arg ) ;
ArrayList < Item > <unk> = new ArrayList < Item > ( arg ) ;
ArrayList < Map < String , Object >> input = new ArrayList < Map < String , Object >> ( arg ) ;
ArrayList < Map < String , Object >> input = new ArrayList < Map < String , Object >> ( arg ) ;
ArrayList < Map < String , Object >> input = new ArrayList < Map < String , Object >> ( arg ) ;
ArrayList < Object > <unk> = new ArrayList < Object > ( arg ) ;
ArrayList < Processor > pipe = new ArrayList < Processor > ( arg ) ;
ArrayList < Route > routes = new ArrayList < Route > ( arg ) ;
ArrayList < RouteBuilderAction > <unk> = new ArrayList < RouteBuilderAction > ( arg ) ;
ArrayList < RouteBuilderStatement > routes = new ArrayList < RouteBuilderStatement > ( arg ) ;
ArrayList < RouteDefinition > <unk> = new ArrayList < RouteDefinition > ( arg ) ;
ArrayList < RouteDefinition > routes = ( ArrayList < RouteDefinition > ) applicationContext . getBean ( arg ) ;
ArrayList < String > args = new ArrayList < String > ( arg ) ;
ArrayList < String > args = new ArrayList < String > ( arg ) ;
ArrayList < String > cl = new ArrayList < String > ( arg ) ;
ArrayList < String > expected = new ArrayList < String > ( arg ) ;
ArrayList < String > expected = new ArrayList < String > ( arg ) ;
ArrayList < String > expected = new ArrayList < String > ( arg ) ;
ArrayList < String > expected = new ArrayList < String > ( arg ) ;
ArrayList < String > expected = new ArrayList < String > ( arg ) ;
ArrayList < String > expected = new ArrayList < String > ( arg ) ;
ArrayList < String > expected = new ArrayList < String > ( arg ) ;
ArrayList < String > expected = new ArrayList < String > ( arg ) ;
ArrayList < String > expected = new ArrayList < String > ( arg ) ;
ArrayList < String > expected = new ArrayList < String > ( arg ) ;
ArrayList < String > expected = new ArrayList < String > ( arg ) ;
ArrayList < String > expected = new ArrayList < String > ( arg ) ;
ArrayList < String > expected = new ArrayList < String > ( arg ) ;
ArrayList < String > expected = new ArrayList < String > ( arg ) ;
ArrayList < String > expected = new ArrayList < String > ( arg ) ;
ArrayList < String > expected = new ArrayList < String > ( arg ) ;
ArrayList < String > expected = new ArrayList < String > ( arg ) ;
ArrayList < String > expected = new ArrayList < String > ( arg ) ;
ArrayList < String > expected = new ArrayList < String > ( arg ) ;
ArrayList < String > expected = new ArrayList < String > ( arg ) ;
ArrayList < String > expected = new ArrayList < String > ( arg ) ;
ArrayList < String > expected = new ArrayList < String > ( arg ) ;
ArrayList < String > expected = new ArrayList < String > ( arg ) ;
ArrayList < String > expected = new ArrayList < String > ( arg ) ;
ArrayList < String > expected = new ArrayList < String > ( arg ) ;
ArrayList < String > expected = new ArrayList < String > ( arg ) ;
ArrayList < String > result = new ArrayList < String > ( arg ) ;
ArrayList < T > result = new ArrayList < T > ( arg ) ;
ArrayList expected = new ArrayList ( arg ) ;
ArrayList expected = new ArrayList ( arg ) ;
ArrayList expected = new ArrayList ( arg ) ;
ArrayList expected = new ArrayList ( arg ) ;
ArrayList list = new ArrayList ( arg ) ;
Artifact classPathElement = ( Artifact ) iter . next ( arg ) ;
Artifact classPathElement = ( Artifact ) iter . next ( arg ) ;
Artifact classPathElement = ( Artifact ) iter . next ( arg ) ;
Artifact classPathElement = ( Artifact ) iter . next ( arg ) ;
Assert . <unk> ( arg ) ;
Assert . assertEquals ( arg ) ;
Assert . assertEquals ( arg ) ;
Assert . assertEquals ( arg ) ;
Assert . assertEquals ( arg ) ;
Assert . assertEquals ( arg ) ;
Assert . assertEquals ( arg ) ;
Assert . assertEquals ( arg ) ;
Assert . assertEquals ( arg ) ;
Assert . assertEquals ( arg ) ;
Assert . assertEquals ( arg ) ;
Assert . assertEquals ( arg ) ;
Assert . assertEquals ( arg ) ;
Assert . assertEquals ( arg ) ;
Assert . assertEquals ( arg ) ;
Assert . assertEquals ( arg ) ;
Assert . assertEquals ( arg ) ;
Assert . assertEquals ( arg ) ;
Assert . assertEquals ( arg ) ;
Assert . assertEquals ( arg ) ;
Assert . assertEquals ( arg ) ;
Assert . assertEquals ( arg ) ;
Assert . assertEquals ( arg ) ;
Assert . assertEquals ( arg ) ;
Assert . assertEquals ( arg ) ;
Assert . assertEquals ( arg ) ;
Assert . assertEquals ( arg ) ;
Assert . assertEquals ( arg ) ;
Assert . assertEquals ( arg ) ;
Assert . assertEquals ( arg ) ;
Assert . assertEquals ( arg ) ;
Assert . assertEquals ( arg ) ;
Assert . assertEquals ( arg ) ;
Assert . assertEquals ( arg ) ;
Assert . assertEquals ( arg ) ;
Assert . assertEquals ( arg ) ;
Assert . assertEquals ( arg ) ;
Assert . assertEquals ( arg ) ;
Assert . assertEquals ( arg ) ;
Assert . assertEquals ( arg ) ;
Assert . assertEquals ( arg ) ;
Assert . assertEquals ( arg ) ;
Assert . assertEquals ( arg ) ;
Assert . assertEquals ( arg ) ;
Assert . assertEquals ( arg ) ;
Assert . assertEquals ( arg ) ;
Assert . assertEquals ( arg ) ;
Assert . assertNotNull ( arg ) ;
Assert . assertNotNull ( arg ) ;
Assert . assertNotNull ( arg ) ;
Assert . assertNotNull ( arg ) ;
Assert . assertNull ( arg ) ;
Assert . assertNull ( arg ) ;
Assert . assertThat ( arg ) ;
Assert . assertTrue ( arg ) ;
Assert . assertTrue ( arg ) ;
Assert . assertTrue ( arg ) ;
Assert . assertTrue ( arg ) ;
Assert . assertTrue ( arg ) ;
Assert . assertTrue ( arg ) ;
Assert . assertTrue ( arg ) ;
Assert . assertTrue ( arg ) ;
Assert . assertTrue ( arg ) ;
Assert . assertTrue ( arg ) ;
Assert . assertTrue ( arg ) ;
Assert . assertTrue ( arg ) ;
Assert . assertTrue ( arg ) ;
Assert . fail ( arg ) ;
Assert . fail ( arg ) ;
Assert . fail ( arg ) ;
Assert . fail ( arg ) ;
Assert . fail ( arg ) ;
Assert . fail ( arg ) ;
Assert . fail ( arg ) ;
AsyncProcessor <unk> = AsyncProcessorTypeConverter . convert ( arg ) ;
AsyncProcessor albp = AsyncProcessorTypeConverter . convert ( arg ) ;
AsyncProcessor albp = AsyncProcessorTypeConverter . convert ( arg ) ;
AsyncProcessor ap = AsyncProcessorTypeConverter . convert ( arg ) ;
AsyncProcessor ap = AsyncProcessorTypeConverter . convert ( arg ) ;
AsyncProcessor ap = AsyncProcessorTypeConverter . convert ( arg ) ;
AsyncProcessor async = AsyncProcessorTypeConverter . convert ( arg ) ;
AsyncProcessor async = AsyncProcessorTypeConverter . convert ( arg ) ;
AsyncProcessor async = AsyncProcessorTypeConverter . convert ( arg ) ;
AsyncProcessor async = AsyncProcessorTypeConverter . convert ( arg ) ;
AsyncProcessor asyncProcessor = AsyncProcessorTypeConverter . convert ( arg ) ;
AsyncProcessor processor = AsyncProcessorTypeConverter . convert ( arg ) ;
AsyncProcessor processor = AsyncProcessorTypeConverter . convert ( arg ) ;
AsyncProcessor processor = AsyncProcessorTypeConverter . convert ( arg ) ;
AsyncProcessorHelper . process ( arg ) ;
AsyncProcessorHelper . process ( arg ) ;
<unk> <unk> = newExchange . getOut ( arg ) . getBody ( arg ) ;
BaseDataQueue queue = endpoint . getDataQueue ( arg ) ;
BaseDataQueue queue = endpoint . getDataQueue ( arg ) ;
BeanDefinition definition = <unk> . <unk> ( arg ) ;
BeanDefinition definition = <unk> . parse ( arg ) ;
BeanExchange exchange = getEndpoint ( arg ) . createExchange ( arg ) ;
BeanInfo beanInfo = null ;
BeanRef answer = new BeanRef ( arg ) ;
BeanRef answer = new BeanRef ( arg ) ;
BeanRef answer = new BeanRef ( arg ) ;
BeanRef answer = new BeanRef ( arg ) ;
BeanRef answer = new BeanRef ( arg ) ;
BeanRef answer = new BeanRef ( arg ) ;
BigDecimal thePrice = new BigDecimal ( arg ) ;
BigDecimal thePrice = <unk> . getValue ( arg ) ;
<unk> < Node > <unk> = null ;
<unk> <unk> = exchange . get ( arg ) ;
BindingProvider <unk> = ( BindingProvider ) <unk> ;
BindyCsvFactory factory = getFactory ( arg ) ;
BindyCsvFactory factory = getFactory ( arg ) ;
BindyDoubleQuotesCsvUnmarshallTest . Order order = ( BindyDoubleQuotesCsvUnmarshallTest . Order ) map . values ( arg ) . iterator ( arg ) . next ( arg ) ;
BindyFixedLengthFactory factory = getFactory ( arg ) ;
BindyFixedLengthFactory factory = getFactory ( arg ) ;
<unk> factory = getFactory ( arg ) ;
<unk> <unk> = blobStore . <unk> ( arg ) ;
<unk> blobStore = <unk> ( arg ) ;
BlockingQueue < E > blockingQueue = ( BlockingQueue < E > ) getBlockingQueue ( arg ) ;
BlockingQueue < E > queue = component . getOrCreateQueue ( arg ) ;
BlockingQueue < Entry < E >> answer = queues . get ( arg ) ;
BlockingQueue < Entry > answer = queues . get ( arg ) ;
BlockingQueue < Exchange > answer = queues . get ( arg ) ;
BlockingQueue < Runnable > queue ;
BlockingQueue < SedaEndpoint . Entry > blockingQueue = getBlockingQueue ( arg ) ;
BlockingQueue < String > map = Hazelcast . getQueue ( arg ) ;
BodyPart <unk> = null ;
BodyPart <unk> = null ;
Boolean sanitize = camelContext != null && camelContext . getManagementStrategy ( arg ) . getManagementAgent ( arg ) . getSanitize ( arg ) ;
Boolean throwException = getAndRemoveParameter ( arg ) ;
BufferedOutputStream output = new BufferedOutputStream ( arg ) ;
BufferedReader br = new BufferedReader ( arg ) ;
BufferedReader br = new BufferedReader ( arg ) ;
BufferedReader br = new BufferedReader ( arg ) ;
BufferedReader br = new BufferedReader ( arg ) ;
BufferedReader br = new BufferedReader ( arg ) ;
BufferedReader br = new BufferedReader ( arg ) ;
BufferedReader in = new BufferedReader ( arg ) ;
BufferedReader in = new BufferedReader ( arg ) ;
BufferedReader in = new BufferedReader ( arg ) ;
BufferedReader input = new BufferedReader ( arg ) ;
BufferedReader <unk> = new BufferedReader ( arg ) ;
BufferedReader reader = new BufferedReader ( arg ) ;
BufferedReader reader = new BufferedReader ( arg ) ;
BufferedReader reader = new BufferedReader ( arg ) ;
BufferedReader reader = new BufferedReader ( arg ) ;
BufferedReader reader = new BufferedReader ( arg ) ;
BufferedReader reader = new BufferedReader ( arg ) ;
BufferedReader reader = new BufferedReader ( arg ) ;
BufferedReader <unk> = new BufferedReader ( arg ) ;
BufferedWriter <unk> = new BufferedWriter ( arg ) ;
BufferedWriter <unk> = new BufferedWriter ( arg ) ;
Bus bus = ( Bus ) applicationContext . getBean ( arg ) ;
Bus bus = ( Bus ) ctx . getBean ( arg ) ;
Bus bus = BusFactory . getThreadDefaultBus ( arg ) ;
Bus bus = BusFactory . getThreadDefaultBus ( arg ) ;
Bus bus = BusFactory . getThreadDefaultBus ( arg ) ;
Bus bus = factory . createBus ( arg ) ;
BusFactory . <unk> ( arg ) ;
BusFactory . <unk> ( arg ) ;
ByteBuffer buf = ByteBuffer . <unk> ( arg ) . <unk> ( arg ) ;
ByteSource <unk> = ( ByteSource ) exchange . getIn ( arg ) . getHeader ( arg ) ;
<unk> <unk> = conv . toSource ( arg ) ;
CONTEXT_COUNTER . set ( arg ) ;
COUNTER ++ ;
COUNTER . incrementAndGet ( arg ) ;
CSVConfig conf = <unk> ( arg ) ;
CSVConfig conf = getConfig ( arg ) ;
<unk> cache ;
CacheEndpoint endpoint = ( CacheEndpoint ) context . getEndpoint ( arg ) ;
CacheEventListener <unk> = new CacheEventListener ( arg ) ;
CachedOutputStream cos = new CachedOutputStream ( arg ) ;
CachedOutputStream cos = new CachedOutputStream ( arg ) ;
Calendar cal = GregorianCalendar . getInstance ( arg ) ;
Calendar cal = GregorianCalendar . getInstance ( arg ) ;
Calendar cal = GregorianCalendar . getInstance ( arg ) ;
Calendar cal = GregorianCalendar . getInstance ( arg ) ;
Calendar cal = GregorianCalendar . getInstance ( arg ) ;
Calendar cal = GregorianCalendar . getInstance ( arg ) ;
Calendar cal = GregorianCalendar . getInstance ( arg ) ;
Calendar cal = GregorianCalendar . getInstance ( arg ) ;
CamelClient client = new CamelClient ( arg ) ;
CamelContainer < E > c = getContainer ( arg ) ;
CamelContainer container = new CamelContainer ( arg ) ;
CamelContainer container = new CamelContainer ( arg ) ;
CamelContainer container = new CamelContainer ( arg ) ;
CamelContext < E > c = getContainer ( arg ) ;
CamelContext < E > context = super . getContext ( arg ) ;
CamelContext answer = createSpringCamelContext ( arg ) ;
CamelContext camel = ( CamelContext ) context . getBean ( arg ) ;
CamelContext camel = ( CamelContext ) context . getBean ( arg ) ;
CamelContext camelContext = ( CamelContext ) applicationContext . getBean ( arg ) ;
CamelContext camelContext = ( CamelContext ) context . getBean ( arg ) ;
CamelContext camelContext = ( CamelContext ) ctx . getBean ( arg ) ;
CamelContext camelContext = SpringCamelContext . springCamelContext ( arg ) ;
CamelContext camelContext = camelContexts . get ( arg ) ;
CamelContext camelContext = getContext ( arg ) ;
CamelContext camelContext = getContext ( arg ) ;
CamelContext camelContext = route . getCamelContext ( arg ) ;
CamelContext container = new CamelContext ( arg ) ;
CamelContext container = new CamelContext ( arg ) ;
CamelContext container = new DefaultCamelContext ( arg ) ;
CamelContext container = new DefaultCamelContext < Exchange > ( arg ) ;
CamelContext container = new DefaultCamelContext < Exchange > ( arg ) ;
CamelContext container = new DefaultCamelContext < Exchange > ( arg ) ;
CamelContext container = new DefaultCamelContext < Exchange > ( arg ) ;
CamelContext context = ( CamelContext ) ac . getBean ( arg ) ;
CamelContext context = ( CamelContext ) applicationContext . getBean ( arg ) ;
CamelContext context = ( CamelContext ) applicationContext . getBean ( arg ) ;
CamelContext context = ( CamelContext ) applicationContext . getBean ( arg ) ;
CamelContext context = ( CamelContext ) applicationContext . getBean ( arg ) ;
CamelContext context = ( CamelContext ) applicationContext . getBean ( arg ) ;
CamelContext context = ( CamelContext ) applicationContext . getBean ( arg ) ;
CamelContext context = getMandatoryBean ( arg ) ;
CamelContext context = getMandatoryBean ( arg ) ;
CamelContext context = new DefaultCamelContext ( arg ) ;
CamelContext context = super . getContext ( arg ) ;
CamelContextType context = assertIsInstanceOf ( arg ) ;
CamelContextType context = <unk> ( arg ) ;
CamelContextType context = new CamelContextType ( arg ) ;
CamelContextType context = new CamelContextType ( arg ) ;
<unk> <unk> = resolveAndRemoveReferenceParameter ( arg ) ;
CamelInternalProcessor . <unk> task = internal . getTask ( arg ) ;
CamelInternalProcessor . <unk> task = internal . getTask ( arg ) ;
CamelPostProcessorHelper <unk> = new CamelPostProcessorHelper ( arg ) ;
CamelServlet answer = null ;
CamelServlet camelServlet = ( CamelServlet ) provider ;
CamelServlet camelServlet = new <unk> ( arg ) ;
CamelServlet camelServlet = new CamelServlet ( arg ) ;
CamelServlet servlet = getCamelServlet ( arg ) ;
CamelServlet servlet = getCamelServlet ( arg ) ;
CamelSourceAdapter <unk> = ( CamelSourceAdapter ) context . getBean ( arg ) ;
CamelSourceAdapter camelSourceB = ( CamelSourceAdapter ) context . getBean ( arg ) ;
CamelSourceAdapter camelSourceB = ( CamelSourceAdapter ) ctx . getBean ( arg ) ;
CamelStartup annotation = <unk> . getAnnotation ( arg ) ;
CamelStartup <unk> = <unk> . <unk> ( arg ) . getAnnotation ( arg ) ;
CamelTargetAdapter <unk> = ( CamelTargetAdapter ) context . getBean ( arg ) ;
CamelTargetAdapter <unk> = ( CamelTargetAdapter ) context . getBean ( arg ) ;
CamelTemplate < Exchange > template = new CamelTemplate < Exchange > ( arg ) ;
CamelTemplate < Exchange > template = new CamelTemplate < Exchange > ( arg ) ;
CamelTemplate < JmsExchange > camelTemplate = ( CamelTemplate ) context . getBean ( arg ) ;
CamelTemplate template = bean . getTemplate ( arg ) ;
CamelTemplate template = main . <unk> ( arg ) ;
CamelTemplate template = new CamelTemplate ( arg ) ;
CamelTemplate template = new CamelTemplate ( arg ) ;
CamelTemplate template = new CamelTemplate ( arg ) ;
<unk> . tearDownAfterClass ( arg ) ;
<unk> <unk> = context . getRegistry ( arg ) . lookup ( arg ) ;
Channel channel = <unk> . <unk> ( arg ) ;
Channel channel = connectionlessBootstrap . bind ( arg ) ;
Channel channel = <unk> ( arg ) ;
Channel channel = <unk> ( arg ) ;
<unk> buf = new <unk> ( arg ) ;
<unk> listener = new <unk> ( arg ) ;
<unk> privateChat = connection . getChatManager ( arg ) . getThreadChat ( arg ) ;
ChoiceBuilder < E > answer = new ChoiceBuilder < E > ( arg ) ;
ChoicePredicateBuilder < E > answer = new ChoicePredicateBuilder < E > ( arg ) ;
<unk> choice = <unk> ( arg ) ;
Class < ? > clazz = loader . loadClass ( arg ) ;
Class < ? > <unk> = endpoint . <unk> ( arg ) ;
Class < ? > type = ObjectHelper . loadClass ( arg ) ;
Class < ? > type = bundle . loadClass ( arg ) ;
Class < <unk> > clazz = camelContext . getClassResolver ( arg ) . resolveMandatoryClass ( arg ) ;
Class < E > <unk> = getExchangeType ( arg ) ;
Class < Exception > type = CastUtils . cast ( arg ) ;
Class < T > type = bundle . loadClass ( arg ) ;
Class < T > type = bundle . loadClass ( arg ) ;
Class [ ] answer = new Class [ objects . length ] ;
Class [ ] answer = new Class [ parameters . length ] ;
Class [ ] cinterfaces = new Class [ interfaces . length ] ;
Class [ ] interfaces = new Class [ endpoint . <unk> ( arg ) . size ( arg ) ] ;
Class [ ] <unk> = new Class [ <unk> ] ;
Class answer = loadClass ( arg ) ;
Class answer = resolveClass ( arg ) ;
Class answer = resolveClass ( arg ) ;
Class <unk> = body . getClass ( arg ) ;
Class c = Class . forName ( arg ) ;
Class cl = <unk> . class ;
Class cl = null ;
Class <unk> = cl . getClass ( arg ) ;
Class clazz ;
Class clazz = ( ( <unk> ) <unk> ) . <unk> ( arg ) ;
Class clazz = ( Class ) classMap . get ( arg ) ;
Class clazz = ObjectHelper . loadClass ( arg ) ;
Class clazz = bean . getClass ( arg ) ;
Class clazz = bean . getClass ( arg ) ;
Class clazz = blueprintContainer . loadClass ( arg ) ;
Class clazz = bundle . loadClass ( arg ) ;
Class clazz = bundle . loadClass ( arg ) ;
Class clazz = classLoader . <unk> ( arg ) ;
Class clazz = classMap . get ( arg ) ;
Class clazz = classMap . get ( arg ) ;
Class clazz = classResolver . resolveClass ( arg ) ;
Class clazz = context . getClassResolver ( arg ) . resolveClass ( arg ) ;
Class clazz = <unk> ( arg ) ;
Class clazz = entry . getKey ( arg ) . <unk> ( arg ) ;
Class clazz = findClass ( arg ) ;
Class clazz = finder . findClass ( arg ) ;
Class clazz = getCamelContext ( arg ) . getClassResolver ( arg ) . resolveMandatoryClass ( arg ) ;
Class clazz = getCamelContext ( arg ) . getTypeConverter ( arg ) . mandatoryConvertTo ( arg ) ;
Class clazz = resolver . resolveClass ( arg ) ;
Class clazz = resolver . resolveClass ( arg ) ;
Class clazz = resolver . resolveClass ( arg ) ;
Class clazz = resolver . resolveMandatoryClass ( arg ) ;
Class clazz = resolver . resolveMandatoryClass ( arg ) ;
Class clazz = target . getClass ( arg ) ;
Class clazz = target . getClass ( arg ) ;
Class clazz = target . getClass ( arg ) ;
Class cls = bundle . loadClass ( arg ) ;
Class <unk> = String . class ;
Class excludedRoute = excludeRoute ( arg ) ;
Class excludedRoute = excludeRoute ( arg ) ;
Class excludedRoute = excludeRoute ( arg ) ;
Class factory = null ;
Class <unk> = ObjectHelper . loadClass ( arg ) ;
Class foo = <unk> . class . getClass ( arg ) ;
Class from = <unk> . <unk> ( arg ) [ 0 ] . getClass ( arg ) ;
Class from = file . getBody ( arg ) . getClass ( arg ) ;
Class fromType = Object . class ;
Class fromType = null ;
Class fromType = parameterTypes [ 0 ] ;
Class <unk> = genericFile . getFile ( arg ) . getClass ( arg ) ;
Class key = type ;
Class key = value . getClass ( arg ) ;
Class <unk> = <unk> ( arg ) ;
Class <unk> = <unk> ( arg ) ;
Class <unk> = obj == null ? null : obj . getClass ( arg ) ;
Class parameterType = setter . getParameterTypes ( arg ) [ 0 ] ;
Class parameterType = setter . getParameterTypes ( arg ) [ 0 ] ;
Class <unk> = inMessage . getHeader ( arg ) ;
Class <unk> = exchange . getContext ( arg ) . getClassResolver ( arg ) . resolveClass ( arg ) ;
Class <unk> = classResolver . resolveClass ( arg ) ;
Class <unk> = rowClassName == null || rowClassName . isEmpty ( arg ) ? String . class : message . getExchange ( arg ) . getContext ( arg ) . getClassResolver ( arg ) . resolveClass ( arg ) ;
Class <unk> = value . getClass ( arg ) ;
Class <unk> = type . getSuperclass ( arg ) ;
Class <unk> = routeContext . getCamelContext ( arg ) . getClassResolver ( arg ) . resolveClass ( arg ) ;
Class toType = method . <unk> ( arg ) ;
Class <unk> = routeContext . getCamelContext ( arg ) . getClassResolver ( arg ) . resolveClass ( arg ) ;
Class type ;
Class type = ObjectHelper . loadClass ( arg ) ;
Class type = ObjectHelper . loadClass ( arg ) ;
Class type = classLoader . loadClass ( arg ) ;
Class type = endpoint . getExchangeType ( arg ) ;
Class type = field . getType ( arg ) ;
Class type = field . getType ( arg ) ;
Class type = findClass ( arg ) ;
Class type = findClass ( arg ) ;
Class type = getCamelContext ( arg ) . getClassResolver ( arg ) . resolveClass ( arg ) ;
Class type = <unk> ( arg ) ;
Class type = info . getType ( arg ) ;
Class type = null ;
Class type = null ;
Class type = null ;
Class type = routeContext . getCamelContext ( arg ) . getClassResolver ( arg ) . resolveClass ( arg ) ;
Class type = routeContext . getCamelContext ( arg ) . getClassResolver ( arg ) . resolveClass ( arg ) ;
Class type = types [ index ] ;
Class type = value . getClass ( arg ) ;
Class <unk> = valueClassName == null || valueClassName . isEmpty ( arg ) ? String . class : message . getExchange ( arg ) . getContext ( arg ) . getClassResolver ( arg ) . resolveClass ( arg ) ;
Class <unk> = NullWritable . class ;
<unk> cl = null ;
ClassPathXmlApplicationContext applicationContext = createApplicationContext ( arg ) ;
ClassPathXmlApplicationContext applicationContext = new ClassPathXmlApplicationContext ( arg ) ;
ClassPathXmlApplicationContext ctx = new ClassPathXmlApplicationContext ( arg ) ;
Client client = endpoint . <unk> ( arg ) ;
ClientFactoryBean clientFactory = null ;
ClientProxyFactoryBean factoryBean = createClientFactoryBean ( arg ) ;
ClientProxyFactoryBean factoryBean = createClientFactoryBean ( arg ) ;
Collection < Dummy > b1 = CastUtils . cast ( arg ) ;
Collection < Dummy > b1 = CastUtils . cast ( arg ) ;
Collection < Dummy > b1 = consumer . receiveBody ( arg ) ;
Collection < Dummy > b1 = consumer . receiveBody ( arg ) ;
Collection < Dummy > b2 = CastUtils . cast ( arg ) ;
Collection < Dummy > b2 = CastUtils . cast ( arg ) ;
Collection < Dummy > b2 = consumer . receiveBody ( arg ) ;
Collection < Dummy > b2 = consumer . receiveBody ( arg ) ;
Collection < Endpoint > endpoints = context . getSingletonEndpoints ( arg ) ;
Collection < Object > body = CastUtils . cast ( arg ) ;
Collection < Object > body = consumer . receiveBody ( arg ) ;
Collection < Object > list = CastUtils . cast ( arg ) ;
Collection < ProcessorDefinition < ? >> outputs = getOutputs ( arg ) ;
Collection < ProcessorDefinition < ? >> pipe = new ArrayList < ProcessorDefinition < ? >> ( arg ) ;
Collection < ProcessorDefinition > outputs = getOutputs ( arg ) ;
Collection < ProcessorDefinition > outputs = getOutputs ( arg ) ;
Collection < ProcessorDefinition > pipe = new ArrayList < ProcessorDefinition > ( arg ) ;
Collection < ProcessorDefinition > pipe = new ArrayList < ProcessorDefinition > ( arg ) ;
Collection < ProcessorType < ? >> outputs = getOutputs ( arg ) ;
Collection < ProcessorType > outputs = getOutputs ( arg ) ;
Collection < Producer > answer = new ArrayList < Producer > ( arg ) ;
Collection < Route > routes = new ArrayList < Route > ( arg ) ;
Collection < String > collection = CastUtils . cast ( arg ) ;
Collection < String > tokens = null ;
Collection children = new ArrayList ( arg ) ;
Collection children = new ArrayList ( arg ) ;
Collection col = ( Collection ) value ;
Collection col = cache . values ( arg ) ;
Collection collection = ( Collection ) <unk> ;
Collection collection = ( Collection ) result ;
Collection collection = ( Collection ) value ;
Collection collection = ( Collection ) value ;
Collection collection = ( Collection ) value ;
Collection collection = converter . convertTo ( arg ) ;
Collection result = new ArrayList ( arg ) ;
Collection result = new ArrayList ( arg ) ;
Collection <unk> = ( Collection ) converted ;
Collection values = map . values ( arg ) ;
CometdEndpoint endpoint = ( CometdEndpoint ) prodcon . getEndpoint ( arg ) ;
CometdEndpoint endpoint = ( CometdEndpoint ) prodcon . getEndpoint ( arg ) ;
<unk> < GenericFileExchange > comparator = <unk> ( arg ) ;
Component < ? > component = getComponent ( arg ) ;
Component component = <unk> . resolveComponent ( arg ) ;
Component component = getComponent ( arg ) ;
Component component = <unk> ( arg ) ;
<unk> <unk> = <unk> ( arg ) ;
<unk> attributes = <unk> . <unk> ( arg ) ;
Configuration configuration = <unk> . <unk> ( arg ) . configure ( arg ) ;
<unk> configurer = base . bus . getExtension ( arg ) ;
ConnectionFactory <unk> = endpoint . getConfiguration ( arg ) . <unk> ( arg ) ;
ConnectionFactory connectionFactory = CamelJmsTestHelper . createConnectionFactory ( arg ) ;
ConnectionFactory connectionFactory = CamelJmsTestHelper . createConnectionFactory ( arg ) ;
ConnectionFactory connectionFactory = CamelJmsTestHelper . createPersistentConnectionFactory ( arg ) ;
ConnectionFactory connectionFactory = CamelJmsTestHelper . createPersistentConnectionFactory ( arg ) ;
ConnectionFactory connectionFactory = CamelJmsTestHelper . getSharedConnectionFactory ( arg ) ;
ConnectionFactory connectionFactory = CamelJmsTestHelper . getSharedConnectionFactory ( arg ) ;
ConnectionFactory connectionFactory = CamelJmsTestHelper . getSharedConnectionFactory ( arg ) ;
ConnectionFactory connectionFactory = CamelJmsTestHelper . getSharedConnectionFactory ( arg ) ;
ConnectionFactory connectionFactory = CamelJmsTestHelper . getSharedConnectionFactory ( arg ) ;
ConnectorRef connectorRef = component . getConnectors ( arg ) . get ( arg ) ;
ConnectorRef connectorRef = component . getConnectors ( arg ) . get ( arg ) ;
ConstraintMappingContextPathMatcher matcher = new ConstraintMappingContextPathMatcher ( arg ) ;
ConstraintMappingContextPathMatcher matcher = new ConstraintMappingContextPathMatcher ( arg ) ;
Constructor cns = <unk> . getConstructor ( arg ) ;
Constructor cns = <unk> . getConstructor ( arg ) ;
Constructor cns = <unk> . getConstructor ( arg ) ;
Constructor con = null ;
Consumer < E > consumer = endpoint . createConsumer ( arg ) ;
Consumer < FileExchange > result = new FileConsumer ( arg ) ;
Consumer answer = new <unk> ( arg ) ;
Consumer consumer = endpoint . createConsumer ( arg ) ;
Consumer consumer = null ;
ConsumerTemplate answer = new DefaultConsumerTemplate ( arg ) ;
ConsumerTemplate lookup = context . getRegistry ( arg ) . lookup ( arg ) ;
ConsumerTemplate lookup = context . getRegistry ( arg ) . lookup ( arg ) ;
ConsumerTemplate lookup = context . getRegistry ( arg ) . lookup ( arg ) ;
ConsumerTemplate lookup = context . getRegistry ( arg ) . lookup ( arg ) ;
ConsumerTemplate lookup = context . getRegistry ( arg ) . lookup ( arg ) ;
ConsumerTemplate lookup = context1 . getRegistry ( arg ) . lookup ( arg ) ;
ConsumerTemplate lookup = context1 . getRegistry ( arg ) . lookup ( arg ) ;
ConsumerTemplate lookup = context2 . getRegistry ( arg ) . lookup ( arg ) ;
ConsumerTemplate lookup = context2 . getRegistry ( arg ) . lookup ( arg ) ;
ConsumerTemplate lookup2 = context . getRegistry ( arg ) . lookup ( arg ) ;
ConsumerTemplate lookup2 = context . getRegistry ( arg ) . lookup ( arg ) ;
ConsumerTemplate lookup2 = context . getRegistry ( arg ) . lookup ( arg ) ;
Context context = ( Context ) server . getChildHandlerByClass ( arg ) ;
Context context = new Context ( arg ) ;
ContinuationCometdServlet servlet = <unk> ( arg ) ;
ContinuationCometdServlet servlet = new ContinuationCometdServlet ( arg ) ;
ConvertBodyType node = <unk> ( arg ) ;
ConvertBodyType node = assertOneProcessorInstanceOf ( arg ) ;
<unk> cool = context . getRegistry ( arg ) . lookup ( arg ) ;
<unk> latch = <unk> . remove ( arg ) ;
<unk> result = objectMapper . readValue ( arg ) ;
CreatedById = createdById ;
CreatedDate = createdDate ;
Credentials credentials = null ;
Credentials defaultcreds = new UsernamePasswordCredentials ( arg ) ;
Credentials defaultcreds = new UsernamePasswordCredentials ( arg ) ;
CsvIterator iterator = new CsvIterator ( arg ) ;
CsvIterator iterator = new CsvIterator ( arg ) ;
CustomerServerBean serverBean = new CustomerServerBean ( arg ) ;
CustomerServerBean serverBean = new CustomerServerBean ( arg ) ;
CustomerServiceV1customerService = ( CustomerServiceV1 ) clientContext . getBean ( arg ) ;
CustomerServiceV1customerService = ( CustomerServiceV1 ) clientContext . getBean ( arg ) ;
<unk> binding = cxfEndpoint . getBinding ( arg ) ;
CxfEndpoint <unk> = ( CxfEndpoint ) ctx . getBean ( arg ) ;
CxfEndpoint cxfEndpoint = ( CxfEndpoint ) context . getEndpoint ( arg ) ;
CxfEndpoint endpoint = ( CxfEndpoint ) camelContext . getEndpoint ( arg ) ;
CxfEndpoint endpoint = ( CxfEndpoint ) context . getEndpoint ( arg ) ;
CxfEndpoint endpoint = ( CxfEndpoint ) cxfConsumer . getEndpoint ( arg ) ;
CxfEndpoint endpoint = ( CxfEndpoint ) cxfConsumer . getEndpoint ( arg ) ;
CxfEndpoint <unk> = ( CxfEndpoint ) ctx . getBean ( arg ) ;
CxfEndpoint result ;
CxfEndpoint result = null ;
CxfEndpoint routerEndpoint = ( CxfEndpoint ) ctx . getBean ( arg ) ;
CxfEndpoint routerEndpoint = ( CxfEndpoint ) ctx . getBean ( arg ) ;
CxfEndpoint routerEndpoint = ( CxfEndpoint ) ctx . getBean ( arg ) ;
CxfEndpointBean <unk> = endpoint . <unk> ( arg ) ;
CxfEndpointBean routerEndpoint = ( CxfEndpointBean ) ctx . getBean ( arg ) ;
CxfEndpointBean routerEndpoint = ( CxfEndpointBean ) ctx . getBean ( arg ) ;
CxfEndpointBean routerEndpoint = ( CxfEndpointBean ) ctx . getBean ( arg ) ;
CxfEndpointUtils . <unk> ( arg ) ;
CxfEndpointUtils . <unk> ( arg ) ;
CxfExchange cxfExchange = endpoint . createExchange ( arg ) ;
CxfExchange cxfExchange = endpoint . toExchangeType ( arg ) ;
CxfExchange exchange = <unk> ( arg ) ;
CxfExchange exchange = sendSimpleMessage ( arg ) ;
CxfExchange exchange = sendSimpleMessage ( arg ) ;
<unk> . <unk> ( arg ) ;
CxfPayload < ? > p = null ;
CxfPayload < ? > payload = ( CxfPayload ) outBody ;
CxfPayload < SoapHeader > out = exchange . getOut ( arg ) . getBody ( arg ) ;
CxfPayload < SoapHeader > payload = ( CxfPayload < SoapHeader > ) obj ;
CxfPayload < SoapHeader > payload = ( CxfPayload < SoapHeader > ) obj ;
CxfPayload payload = ( CxfPayload ) output ;
CxfPayload payload = exchange . getIn ( arg ) . getBody ( arg ) ;
DOMResult result = new DOMResult ( arg ) ;
<unk> <unk> ;
DataField dataField = <unk> . get ( arg ) ;
<unk> dataFormat = routeContext . lookup ( arg ) ;
<unk> queue = endpoint . getDataQueue ( arg ) ;
<unk> result = null ;
DataSource ds = null ;
DataStore < byte [ ] , byte [ ] > dataStore = null ;
DataStore < byte [ ] , byte [ ] > dataStore = null ;
DataStore dataStore = null ;
DataStore dataStore = null ;
DatagramChannel channel = ( DatagramChannel ) connectionlessBootstrap . bind ( arg ) ;
Date <unk> = ( Date ) mBeanServer . getAttribute ( arg ) ;
Date <unk> = first . <unk> ( arg ) ;
Date modified = ( Date ) FileLanguage . file ( arg ) . evaluate ( arg ) ;
Date modified = FileLanguage . file ( arg ) . evaluate ( arg ) ;
Date updated = <unk> ( arg ) ;
<unk> < <unk> > reader = new <unk> ( arg ) ;
<unk> <unk> = new <unk> ( arg ) ;
DeadLetterChannel answer = new DeadLetterChannel ( arg ) ;
DeadLetterChannel deadLetterChannel = assertIsInstanceOf ( arg ) ;
DeadLetterChannelBuilder < E > answer = new DeadLetterChannelBuilder < E > ( arg ) ;
DeadLetterChannelBuilder a = deadLetterChannel ( arg ) . maximumRedeliveries ( arg ) . delay ( arg ) . logStackTrace ( arg ) . useOriginalInBody ( arg ) . handled ( arg ) ;
DeadLetterChannelBuilder errorHandler = ( DeadLetterChannelBuilder ) ctx . getBean ( arg ) ;
DefaultCamelContext camelContext = ( DefaultCamelContext ) appContext . getBean ( arg ) ;
DefaultCamelContext camelContext = new DefaultCamelContext ( arg ) ;
DefaultCamelContext context = factoryBean . createContext ( arg ) ;
DefaultCamelContext context = new DefaultCamelContext ( arg ) ;
DefaultConnectionResource connectionResource = new DefaultConnectionResource ( arg ) ;
DefaultConsumer < DefaultExchange > consumer ;
DefaultConsumer < E > consumer = endpoint . <unk> ( arg ) . get ( arg ) ;
DefaultCxfBeanBinding beanBinding = new DefaultCxfBeanBinding ( arg ) ;
DefaultCxfMesssageMapper beanBinding = new DefaultCxfMesssageMapper ( arg ) ;
DefaultCxfMesssageMapper mapper = new DefaultCxfMesssageMapper ( arg ) ;
DefaultErrorHandlerBuilder errorHandler = ( DefaultErrorHandlerBuilder ) ctx . getBean ( arg ) ;
DefaultExchange exchange = createExchange ( arg ) ;
DefaultInstrumentationAgent agent = new DefaultInstrumentationAgent ( arg ) ;
DefaultMessageListenerContainer answer = new DefaultMessageListenerContainer ( arg ) ;
DefaultMessageListenerContainer container = new <unk> ( arg ) ;
DefaultMessageListenerContainer listenerContainer = createMessageListenerContainer ( arg ) ;
DefaultProducerTemplate lookup = context1 . getRegistry ( arg ) . lookup ( arg ) ;
DefaultProducerTemplate lookup = context1 . getRegistry ( arg ) . lookup ( arg ) ;
DefaultRequiredModelMBean mbean = ( DefaultRequiredModelMBean ) mBeanServer . <unk> ( arg ) ;
DefaultScheduledPollConsumer result = new DefaultScheduledPollConsumer ( arg ) ;
DefaultSecurityConstraint matcher = new DefaultSecurityConstraint ( arg ) ;
DefaultSecurityConstraint matcher = new DefaultSecurityConstraint ( arg ) ;
DefaultTimeoutMap map = new DefaultTimeoutMap ( arg ) ;
DelayerDefinition answer = new DelayerDefinition ( arg ) ;
DelayerDefinition answer = new DelayerDefinition ( arg ) ;
DelegateProcess < Exchange > p1 = assertIsInstanceOf ( arg ) ;
DelegateProcess < Exchange > p2 = assertIsInstanceOf ( arg ) ;
DelegateProcessor < Exchange > p1 = assertIsInstanceOf ( arg ) ;
DelegateProcessor < Exchange > p2 = assertIsInstanceOf ( arg ) ;
DeleteResponse deleteResponse = ( DeleteResponse ) template . requestBody ( arg ) ;
DeleteResponse deleteResponse = ( DeleteResponse ) template . requestBodyAndHeaders ( arg ) ;
<unk> <unk> = context . getRegistry ( arg ) . lookup ( arg ) ;
Destination destination = replyToDestination ;
Destination <unk> = <unk> ( arg ) ;
Dictionary < ? , ? > props = getProperties ( arg ) ;
Dictionary < ? , ? > props = getProperties ( arg ) ;
Dictionary < String , ? > props = getProperties ( arg ) ;
Dictionary < String , Object > props = new Hashtable < String , Object > ( arg ) ;
Dictionary < String , String > props = new Hashtable < String , String > ( arg ) ;
Dictionary < String , String > props = new Hashtable < String , String > ( arg ) ;
Dictionary < String , String > props = new Hashtable < String , String > ( arg ) ;
Dictionary < String , String > props = new Hashtable < String , String > ( arg ) ;
Dictionary <unk> = bundleContext . getBundle ( arg ) . getHeaders ( arg ) ;
Dictionary <unk> = new Hashtable ( arg ) ;
Dictionary headers = bundle . getHeaders ( arg ) ;
Dictionary headers = bundle . getHeaders ( arg ) ;
Dictionary props = getProperties ( arg ) ;
DirContext <unk> = ( DirContext ) getEndpoint ( arg ) . getCamelContext ( arg ) . getRegistry ( arg ) . lookup ( arg ) ;
DirContext ldapContext = ( DirContext ) getEndpoint ( arg ) . getCamelContext ( arg ) . getRegistry ( arg ) . lookup ( arg ) ;
DirectChannel channelA = ( DirectChannel ) applicationContext . getBean ( arg ) ;
DirectChannel responseChannel = ( DirectChannel ) applicationContext . getBean ( arg ) ;
DirectChannel responseChannel = applicationContext . getBean ( arg ) ;
DirectVmConsumer consumer = getEndpoint ( arg ) . getComponent ( arg ) . <unk> ( arg ) ;
DirectVmConsumer <unk> = consumers . <unk> ( arg ) ;
Document doc = <unk> ( arg ) . <unk> ( arg ) ;
Document document = null ;
<unk> builder = <unk> ( arg ) ;
<unk> doc = <unk> ( arg ) . <unk> ( arg ) ;
Double number = Double . parseDouble ( arg ) ;
Double <unk> = ( Double ) beanServer . getAttribute ( arg ) ;
Double <unk> = ( Double ) beanServer . getAttribute ( arg ) ;
E answer = ( E ) createExchange ( arg ) ;
E answer = createExchange ( arg ) ;
E convertedExchange = endpoint . createExchange ( arg ) ;
E convertedExchange = endpoint . toExchangeType ( arg ) ;
E exchange ;
E exchange = ( E ) pollingConsumer . receiveNoWait ( arg ) ;
E exchange = pollingConsumer . receiveNoWait ( arg ) ;
E exchange = producer . createExchange ( arg ) ;
E exchange = producer . createExchange ( arg ) ;
E exchange = producer . createExchange ( arg ) ;
E newExchange = ( E ) getEndpoint ( arg ) . createExchange ( arg ) ;
E newExchange = getEndpoint ( arg ) . createExchange ( arg ) ;
E result = send ( arg ) ;
E result = send ( arg ) ;
E result = send ( arg ) ;
EasyMock . expectLastCall ( arg ) . andReturn ( arg ) ;
EasyMock . expectLastCall ( arg ) . <unk> ( arg ) ;
<unk> client = context . getRegistry ( arg ) . lookup ( arg ) ;
EchoPojoDirect <unk> = ( EchoPojoDirect ) applicationContext . getBean ( arg ) ;
ElasticsearchConfiguration conf = new ElasticsearchConfiguration ( arg ) ;
Element element ;
Element element = message . getBody ( arg ) . get ( arg ) ;
Element header = exchange . getInMessage ( arg ) . get ( arg ) ;
Element header = inMessage . get ( arg ) ;
Element header = request . getHeader ( arg ) ;
ElementImpl element = ( ElementImpl ) exchange . getIn ( arg ) . getBody ( arg ) ;
ElementImpl element = ( ElementImpl ) exchange . getIn ( arg ) . getBody ( arg ) ;
ElementNameStrategy elNameStrat = new TypeNameStrategy ( arg ) ;
ElementNameStrategy elNameStrat = new TypeNameStrategy ( arg ) ;
Endpoint . publish ( arg ) ;
Endpoint . publish ( arg ) ;
Endpoint < ? > answer ;
Endpoint < ? > e = null ;
Endpoint < ? extends Exchange > endpoint = null ;
Endpoint < ? extends Exchange > ep = mbean . getEndpoint ( arg ) ;
Endpoint < ? extends Exchange > ep = route . getEndpoint ( arg ) ;
Endpoint < ? extends Exchange > ep = route . getEndpoint ( arg ) ;
Endpoint < ? extends Exchange > ep = routeContext . getEndpoint ( arg ) ;
Endpoint < E > answer = <unk> ( arg ) ;
Endpoint < E > endpoint = createEndpoint ( arg ) ;
Endpoint < E > endpoint = getEndpoint ( arg ) ;
Endpoint < E > endpoint = new DirectEndpoint < E > ( arg ) ;
Endpoint < E > endpoint = new DirectEndpoint < E > ( arg ) ;
Endpoint < E > endpoint = new <unk> < E > ( arg ) ;
Endpoint < Exchange > endpoint = container . endpoint ( arg ) ;
Endpoint < Exchange > endpoint = container . getComponent ( arg ) . resolveEndpoint ( arg ) ;
Endpoint < Exchange > endpoint = container . getEndpoint ( arg ) ;
Endpoint < Exchange > endpoint = container . getEndpoint ( arg ) ;
Endpoint < Exchange > endpoint = container . getEndpoint ( arg ) ;
Endpoint < Exchange > endpoint = container . getEndpoint ( arg ) ;
Endpoint < Exchange > endpoint = container . resolveEndpoint ( arg ) ;
Endpoint < Exchange > endpoint = container . resolveEndpoint ( arg ) ;
Endpoint < Exchange > endpoint = container . resolveEndpoint ( arg ) ;
Endpoint < Exchange > endpoint = context . getEndpoint ( arg ) ;
Endpoint < Exchange > endpoint = context . getEndpoint ( arg ) ;
Endpoint < Exchange > endpoint = resolveEndpoint ( arg ) ;
Endpoint < Exchange > endpoint = resolveEndpoint ( arg ) ;
Endpoint < Exchange > key = route . getEndpoint ( arg ) ;
Endpoint < JmsExchange > endpoint = container . endpoint ( arg ) ;
Endpoint < MinaExchange > endpoint = container . resolveEndpoint ( arg ) ;
Endpoint answer ;
Endpoint answer = new <unk> ( arg ) ;
Endpoint camelEndpoint = getCamelContext ( arg ) . resolveEndpoint ( arg ) ;
Endpoint e = null ;
Endpoint endpoint = camelContext . getEndpoint ( arg ) ;
Endpoint endpoint = context . getEndpoint ( arg ) ;
Endpoint endpoint = context . resolveEndpoint ( arg ) ;
Endpoint endpoint = context . resolveEndpoint ( arg ) ;
Endpoint endpoint = endpoint ( arg ) ;
Endpoint endpoint = endpoint ( arg ) ;
Endpoint endpoint = null ;
Endpoint ep = mbean . getEndpoint ( arg ) ;
Endpoint ep = route . getEndpoint ( arg ) ;
Endpoint lookup = exchange . getContext ( arg ) . getEndpoint ( arg ) ;
Endpoint value = camelContext . resolveEndpoint ( arg ) ;
Endpoint value = camelContext . resolveEndpoint ( arg ) ;
EndpointMessageListener < JmsExchange > messageListener = new EndpointMessageListener < JmsExchange > ( arg ) ;
EndpointMessageListener messageListener = new EndpointMessageListener ( arg ) ;
<unk> < E > er = getEndpointResolver ( arg ) ;
EntityManagerFactory <unk> = component . <unk> ( arg ) ;
Entry entry = ( Entry ) iter . next ( arg ) ;
Enumeration en = jmsMessage . getPropertyNames ( arg ) ;
Enumeration en = jmsMessage . getPropertyNames ( arg ) ;
Enumeration it = message . getAllHeaders ( arg ) ;
Enumeration iter = <unk> . <unk> ( arg ) ;
Enumeration iter = inMessage . getAllHeaders ( arg ) ;
Enumeration names ;
Enumeration names = mailMessage . getAllHeaders ( arg ) ;
Enumeration names = message . <unk> ( arg ) ;
Enumeration names = message . getPropertyNames ( arg ) ;
Enumeration names = null ;
Enumeration names = request . getAttributeNames ( arg ) ;
Enumeration names = request . getAttributeNames ( arg ) ;
Enumeration names = request . getHeaderNames ( arg ) ;
Enumeration names = request . getHeaderNames ( arg ) ;
Enumeration names = request . getParameterNames ( arg ) ;
Enumeration names = request . getParameterNames ( arg ) ;
Enumeration names = <unk> . <unk> ( arg ) . <unk> ( arg ) ;
Enumeration result = null ;
ErrorHandlerBuilder a = deadLetterChannel ( arg ) . maximumRedeliveries ( arg ) . redeliverDelay ( arg ) . logStackTrace ( arg ) . useOriginalBody ( arg ) . handled ( arg ) ;
ErrorHandlerBuilder a = deadLetterChannel ( arg ) . maximumRedeliveries ( arg ) . redeliverDelay ( arg ) . logStackTrace ( arg ) . useOriginalBody ( arg ) . handled ( arg ) ;
ErrorHandlerBuilder answer ;
ErrorHandlerBuilder answer = camelContext . getErrorHandlerBuilder ( arg ) ;
ErrorHandlerBuilder builder = routeContext . getRoute ( arg ) . getErrorHandlerBuilder ( arg ) ;
ErrorHandlerBuilder builder = routeContext . getRoute ( arg ) . getErrorHandlerBuilder ( arg ) ;
ErrorHandlerBuilder handler = camelContext . getErrorHandlerBuilder ( arg ) ;
ErrorHandlerBuilder handler = getErrorHandlerBuilder ( arg ) ;
ErrorHandlerFactory answer = camelContext . getErrorHandlerBuilder ( arg ) ;
ErrorHandlerFactory builder = routeContext . getRoute ( arg ) . getErrorHandlerBuilder ( arg ) ;
ErrorHandlerFactory handler = camelContext . getErrorHandlerBuilder ( arg ) ;
<unk> event = <unk> . get ( arg ) ;
EventFactory factory = context . getManagementStrategy ( arg ) . getEventFactory ( arg ) ;
EventFactory factory = context . getManagementStrategy ( arg ) . getEventFactory ( arg ) ;
EventFactory factory = context . getManagementStrategy ( arg ) . getEventFactory ( arg ) ;
EventFactory factory = context . getManagementStrategy ( arg ) . getEventFactory ( arg ) ;
EventFactory factory = context . getManagementStrategy ( arg ) . getEventFactory ( arg ) ;
EventFactory factory = context . getManagementStrategy ( arg ) . getEventFactory ( arg ) ;
EventFactory factory = context . getManagementStrategy ( arg ) . getEventFactory ( arg ) ;
EventFactory factory = context . getManagementStrategy ( arg ) . getEventFactory ( arg ) ;
EventFactory factory = context . getManagementStrategy ( arg ) . getEventFactory ( arg ) ;
EventFactory factory = context . getManagementStrategy ( arg ) . getEventFactory ( arg ) ;
EventFactory factory = context . getManagementStrategy ( arg ) . getEventFactory ( arg ) ;
EventFactory factory = context . getManagementStrategy ( arg ) . getEventFactory ( arg ) ;
EventFactory factory = context . getManagementStrategy ( arg ) . getEventFactory ( arg ) ;
EventFactory factory = context . getManagementStrategy ( arg ) . getEventFactory ( arg ) ;
EventFactory factory = context . getManagementStrategy ( arg ) . getEventFactory ( arg ) ;
EventFactory factory = context . getManagementStrategy ( arg ) . getEventFactory ( arg ) ;
EventFactory factory = context . getManagementStrategy ( arg ) . getEventFactory ( arg ) ;
EventFactory factory = context . getManagementStrategy ( arg ) . getEventFactory ( arg ) ;
EventFactory factory = context . getManagementStrategy ( arg ) . getEventFactory ( arg ) ;
EventFactory factory = context . getManagementStrategy ( arg ) . getEventFactory ( arg ) ;
EventFactory factory = context . getManagementStrategy ( arg ) . getEventFactory ( arg ) ;
EventFactory factory = context . getManagementStrategy ( arg ) . getEventFactory ( arg ) ;
EventHelper . <unk> ( arg ) ;
EventHelper . <unk> ( arg ) ;
EventHelper . <unk> ( arg ) ;
EventObject event = factory . <unk> ( arg ) ;
EventObject event = factory . <unk> ( arg ) ;
EventObject event = factory . <unk> ( arg ) ;
EventObject event = factory . <unk> ( arg ) ;
EventObject event = factory . <unk> ( arg ) ;
EventObject event = factory . <unk> ( arg ) ;
Exception cause = exchange . getException ( arg ) ;
Exception e = ( Exception ) exchange . getIn ( arg ) . getHeader ( arg ) ;
Exception ex = ( Exception ) cxfExchange . getFault ( arg ) . getBody ( arg ) ;
Exception ex = exchange . getFault ( arg ) . getBody ( arg ) ;
Exception ex = message . getContent ( arg ) ;
Exception ex = message . getContent ( arg ) ;
Exception ex = message . getContent ( arg ) ;
Exception exception = null ;
Exception <unk> = new Exception ( arg ) ;
Exception typeConvertionFailed = null ;
ExceptionDefinition answer = new ExceptionDefinition ( arg ) ;
ExceptionDefinition answer = new ExceptionDefinition ( arg ) ;
ExceptionDefinition exceptionPolicy = getExceptionPolicy ( arg ) ;
ExceptionDefinition last = null ;
ExceptionDefinition policy = getExceptionPolicy ( arg ) ;
ExceptionDefinition result = strategy . getExceptionPolicy ( arg ) ;
ExceptionDefinition result = strategy . getExceptionPolicy ( arg ) ;
ExceptionDefinition result = strategy . getExceptionPolicy ( arg ) ;
ExceptionDefinition result = strategy . getExceptionPolicy ( arg ) ;
ExceptionDefinition result = strategy . getExceptionPolicy ( arg ) ;
ExceptionDefinition result = strategy . getExceptionPolicy ( arg ) ;
ExceptionDefinition result = strategy . getExceptionPolicy ( arg ) ;
ExceptionDefinition result = strategy . getExceptionPolicy ( arg ) ;
ExceptionDefinition result = strategy . getExceptionPolicy ( arg ) ;
ExceptionDefinition result = strategy . getExceptionPolicy ( arg ) ;
ExceptionDefinition result = strategy . getExceptionPolicy ( arg ) ;
ExceptionDefinition result = strategy . getExceptionPolicy ( arg ) ;
<unk> <unk> = context . getRegistry ( arg ) . lookup ( arg ) ;
ExceptionType exceptionPolicy = getExceptionPolicy ( arg ) ;
ExceptionType last = null ;
ExceptionType policy = getExceptionPolicy ( arg ) ;
ExceptionType result = strategy . getExceptionPolicy ( arg ) ;
ExceptionType result = strategy . getExceptionPolicy ( arg ) ;
ExceptionType result = strategy . getExceptionPolicy ( arg ) ;
ExceptionType result = strategy . getExceptionPolicy ( arg ) ;
ExceptionType result = strategy . getExceptionPolicy ( arg ) ;
ExceptionType result = strategy . getExceptionPolicy ( arg ) ;
ExceptionType result = strategy . getExceptionPolicy ( arg ) ;
ExceptionType result = strategy . getExceptionPolicy ( arg ) ;
ExceptionType result = strategy . getExceptionPolicy ( arg ) ;
ExceptionType result = strategy . getExceptionPolicy ( arg ) ;
ExceptionType result = strategy . getExceptionPolicy ( arg ) ;
ExceptionType result = strategy . getExceptionPolicy ( arg ) ;
ExceptionType type = <unk> ( arg ) ;
Exchange aggregated = null ;
Exchange aggregated = null ;
Exchange answer = getProducerCache ( arg ) . send ( arg ) ;
Exchange answer = <unk> . newInstance ( arg ) ;
Exchange answer = producerCache . send ( arg ) ;
Exchange <unk> = consumer . receiveNoWait ( arg ) ;
Exchange completed = marshaller . unmarshallExchange ( arg ) ;
Exchange copy = current . newInstance ( arg ) ;
Exchange copy = exchange . copy ( arg ) ;
Exchange copy = exchange . newCopy ( arg ) ;
Exchange copy = exchange . newCopy ( arg ) ;
Exchange copy = new DefaultExchange ( arg ) ;
Exchange dummy = new DefaultExchange ( arg ) ;
Exchange ex = endpoint . createExchange ( arg ) ;
Exchange ex = template . receiveNoWait ( arg ) ;
Exchange ex = template . receiveNoWait ( arg ) ;
Exchange ex = template . receiveNoWait ( arg ) ;
Exchange exchange = ( Exchange ) continuation . getObject ( arg ) ;
Exchange exchange = ( Exchange ) exchanges . poll ( arg ) ;
Exchange exchange = ObjectHelper . cast ( arg ) ;
Exchange exchange = ObjectHelper . cast ( arg ) ;
Exchange exchange = consumer . getEndpoint ( arg ) . createExchange ( arg ) ;
Exchange exchange = <unk> ( arg ) ;
Exchange exchange = endpoint . createExchange ( arg ) ;
Exchange exchange = endpoint . createExchange ( arg ) ;
Exchange exchange = endpoint . getExchanges ( arg ) . get ( arg ) ;
Exchange exchange = endpoint . getExchanges ( arg ) . get ( arg ) ;
Exchange exchange = getExchangesReceived ( arg ) . get ( arg ) ;
Exchange exchange = getReceivedExchanges ( arg ) . get ( arg ) ;
Exchange exchange = getReceivedExchanges ( arg ) . get ( arg ) ;
Exchange exchange = getReceivedExchanges ( arg ) . get ( arg ) ;
Exchange exchange = getReceivedExchanges ( arg ) . get ( arg ) ;
Exchange exchange = getReceivedExchanges ( arg ) . get ( arg ) ;
Exchange exchange = mock . getExchanges ( arg ) . get ( arg ) ;
Exchange exchange = mockResultendpoint . getExchanges ( arg ) . get ( arg ) ;
Exchange exchange = new DefaultExchange ( arg ) ;
Exchange exchange = new DefaultExchange ( arg ) ;
Exchange exchange = new DefaultExchange ( arg ) ;
Exchange exchange = new DefaultExchange ( arg ) ;
Exchange exchange = newInstance ( arg ) ;
Exchange exchange = resultEndpoint . getExchanges ( arg ) . get ( arg ) ;
Exchange exchange = this . getEndpoint ( arg ) . createExchange ( arg ) ;
Exchange <unk> = ExchangeBuilder . anExchange ( arg ) . withProperty ( arg ) . build ( arg ) ;
Exchange exchange2 = ExchangeBuilder . anExchange ( arg ) . withProperty ( arg ) . build ( arg ) ;
Exchange <unk> = new SpringIntegrationExchange ( arg ) ;
Exchange newExchange = ExchangeHelper . createCopy ( arg ) ;
Exchange newExchange = exchange . copy ( arg ) ;
Exchange oldExchange = map . get ( arg ) ;
Exchange out = template . send ( arg ) ;
Exchange result = newExchange ;
Exchange result = null ;
Exchange result = null ;
Exchange result = null ;
Exchange result = template . asyncExtractBody ( arg ) ;
Exchange result = template . extractFutureBody ( arg ) ;
Exchange <unk> = pair . getExchange ( arg ) ;
Exchange target = source . copy ( arg ) ;
ExchangeHelper . prepareOutToIn ( arg ) ;
ExchangeHelper . prepareOutToIn ( arg ) ;
ExchangeProperty < ? > <unk> = literalMap . get ( arg ) ;
ExchangeProperty < ? > property = literalMap . get ( arg ) ;
<unk> <unk> = null ;
ExcludingPackageScanClassResolver excludingResolver = ( ExcludingPackageScanClassResolver ) routeExcludingContext . getBean ( arg ) ;
ExcludingPackageScanClassResolver excludingResolver = ( ExcludingPackageScanClassResolver ) routeExcludingContext . getBean ( arg ) ;
ExcludingPackageScanClassResolver excludingResolver = ( ExcludingPackageScanClassResolver ) routeExcludingContext . getBean ( arg ) ;
ExcludingPackageScanClassResolver excludingResolver = ( ExcludingPackageScanClassResolver ) routeExcludingContext . getBean ( arg ) ;
ExclusiveReadLockStrategy strategy = ( ExclusiveReadLockStrategy ) params . get ( arg ) ;
ExecutorService answer = Executors . newCachedThreadPool ( arg ) ;
ExecutorService answer = camelContext . getExecutorServiceStrategy ( arg ) . newThreadPool ( arg ) ;
ExecutorService answer = camelContext . getRegistry ( arg ) . lookup ( arg ) ;
ExecutorService answer = routeContext . getCamelContext ( arg ) . getRegistry ( arg ) . lookup ( arg ) ;
ExecutorService answer = routeContext . getCamelContext ( arg ) . getRegistry ( arg ) . lookup ( arg ) ;
ExecutorService exectur = Executors . newFixedThreadPool ( arg ) ;
ExecutorService exectur = Executors . newFixedThreadPool ( arg ) ;
ExecutorService executor = builder . poolSize ( arg ) . maxPoolSize ( arg ) . maxQueueSize ( arg ) . keepAliveTime ( arg ) . timeUnit ( arg ) . build ( arg ) ;
ExecutorService executor = context . getExecutorServiceManager ( arg ) . getDefaultExecutorService ( arg ) ;
ExecutorService executor = context . getExecutorServiceManager ( arg ) . getDefaultExecutorService ( arg ) ;
ExecutorService executor = context . getExecutorServiceManager ( arg ) . getDefaultExecutorService ( arg ) ;
ExecutorService executor = context . getExecutorServiceManager ( arg ) . getDefaultExecutorService ( arg ) ;
ExecutorService executor = context . getExecutorServiceManager ( arg ) . getExecutorService ( arg ) ;
ExecutorService executor = context . getExecutorServiceStrategy ( arg ) . newFixedThreadPool ( arg ) ;
ExecutorService executor = context . getExecutorServiceStrategy ( arg ) . newThreadPool ( arg ) ;
ExecutorService executor = context . getExecutorServiceStrategy ( arg ) . newThreadPool ( arg ) ;
ExecutorService executor = getCamelContext ( arg ) . getExecutorServiceManager ( arg ) . getDefaultExecutorService ( arg ) ;
ExecutorService executor = getCamelContext ( arg ) . getExecutorServiceStrategy ( arg ) . newCachedThreadPool ( arg ) ;
ExecutorService executor = getEndpoint ( arg ) . getCamelContext ( arg ) . getExecutorServiceManager ( arg ) . getExecutorService ( arg ) ;
ExecutorService executor = getEndpoint ( arg ) . getCamelContext ( arg ) . getExecutorServiceStrategy ( arg ) . newSingleThreadExecutor ( arg ) ;
ExecutorService myPool = context . getExecutorServiceManager ( arg ) . getDefaultExecutorService ( arg ) ;
ExecutorService myPool = context . getExecutorServiceManager ( arg ) . getDefaultExecutorService ( arg ) ;
ExecutorService myPool = context . getExecutorServiceManager ( arg ) . getDefaultExecutorService ( arg ) ;
ExecutorService pool = Executors . newFixedThreadPool ( arg ) ;
ExecutorService pool = context . getExecutorServiceManager ( arg ) . getDefaultExecutorService ( arg ) ;
ExecutorService <unk> = context . getExecutorServiceManager ( arg ) . newThreadPool ( arg ) ;
<unk> <unk> = <unk> ( arg ) ;
Expression < E > expression = ExpressionBuilder . < E , T > bodyExpression ( arg ) ;
Expression < E > expression = ExpressionBuilder . < E , T > <unk> ( arg ) ;
Expression < E > expression = ExpressionBuilder . < E , T > <unk> ( arg ) ;
Expression < E > expression = ExpressionBuilder . bodyExpression ( arg ) ;
Expression < E > expression = <unk> . headerExpression ( arg ) ;
Expression < E > expression = bodyExpression ( arg ) ;
Expression < E > expression = bodyExpression ( arg ) ;
Expression < E > expression = bodyExpression ( arg ) ;
Expression < E > expression = bodyExpression ( arg ) ;
Expression < E > expression = headerExpression ( arg ) ;
Expression < E > expression = valueBuilder . getExpression ( arg ) ;
Expression < E > expression = valueBuilder . getExpression ( arg ) ;
Expression < E > right = ExpressionBuilder . constantExpression ( arg ) ;
Expression < E > right = ExpressionBuilder . constantExpression ( arg ) ;
Expression < E > right = ExpressionBuilder . constantExpression ( arg ) ;
Expression < E > right = ExpressionBuilder . constantExpression ( arg ) ;
Expression < E > right = ExpressionBuilder . constantExpression ( arg ) ;
Expression < E > right = ExpressionBuilder . constantExpression ( arg ) ;
Expression < E > right = asExpression ( arg ) ;
Expression < E > right = asExpression ( arg ) ;
Expression < E > right = asExpression ( arg ) ;
Expression < E > right = asExpression ( arg ) ;
Expression < E > right = asExpression ( arg ) ;
Expression < E > right = asExpression ( arg ) ;
Expression < E > right = asExpression ( arg ) ;
Expression < Exchange > expression = bodyExpression ( arg ) ;
Expression < Exchange > expression = bodyExpression ( arg ) ;
Expression < Exchange > expression = bodyExpression ( arg ) ;
Expression < Exchange > expression = bodyExpression ( arg ) ;
Expression < Exchange > expression = headerExpression ( arg ) ;
Expression < Exchange > expression = language . createExpression ( arg ) ;
Expression < Exchange > expression = language . createExpression ( arg ) ;
Expression < Exchange > expression = language . createExpression ( arg ) ;
Expression < Exchange > expression = propertyExpression ( arg ) ;
Expression < Exchange > expression = <unk> ( arg ) ;
Expression < Exchange > expression = regexTokenize ( arg ) ;
Expression < Exchange > expression = tokenizeExpression ( arg ) ;
Expression answer ;
Expression answer = SimpleBackwardsCompatibleParser . <unk> ( arg ) ;
Expression delay = ( Expression ) mbeanServer . getAttribute ( arg ) ;
Expression expression = ( Expression ) params . get ( arg ) ;
Expression expression = ( Expression ) params . get ( arg ) ;
Expression expression = <unk> . xpath ( arg ) ;
Expression expression = bodyExpression ( arg ) ;
Expression expression = bodyExpression ( arg ) ;
Expression expression = endpoint . getConfiguration ( arg ) . getExpression ( arg ) ;
Expression expression = endpoint . getExpression ( arg ) ;
Expression expression = endpoint . getFileExpression ( arg ) ;
Expression expression = getExpression ( arg ) . createExpression ( arg ) ;
Expression expression = getGenericFileEndpoint ( arg ) . getExpression ( arg ) ;
Expression expression = regexTokenize ( arg ) ;
Expression expression = regexTokenize ( arg ) ;
Expression newExp = ExpressionBuilder . convertTo ( arg ) ;
Expression newExp = ExpressionBuilder . regexTokenize ( arg ) ;
Expression processAtExpression = getExpression ( arg ) != null ? getExpression ( arg ) . createExpression ( arg ) : null ;
Expression processAtExpression = getExpression ( arg ) . createExpression ( arg ) ;
ExpressionClause < ResequencerDefinition > clause = new ExpressionClause < ResequencerDefinition > ( arg ) ;
ExpressionClause < Type > clause = new ExpressionClause < Type > ( arg ) ;
ExpressionClause < Type > clause = new ExpressionClause < Type > ( arg ) ;
ExpressionClause < Type > clause = new ExpressionClause < Type > ( arg ) ;
ExpressionClause < Type > clause = new ExpressionClause < Type > ( arg ) ;
ExpressionClause < Type > clause = new ExpressionClause < Type > ( arg ) ;
ExpressionClause clause = ( ExpressionClause ) exp ;
ExpressionClause clause = ( ExpressionClause ) expression ;
ExpressionClause clause = ( ExpressionClause ) when . getExpression ( arg ) ;
ExpressionClauseSupport < AssertionClause > clause = new ExpressionClauseSupport < AssertionClause > ( arg ) ;
ExpressionFactory factory = ExpressionFactory . newInstance ( arg ) ;
<unk> . <unk> ( arg ) ;
ExpressionType expression = getExpressionType ( arg ) ;
ExpressionType expressionType = getExpressionType ( arg ) ;
ExpressionType expressionType = getExpressionType ( arg ) ;
ExpressionType <unk> = <unk> ( arg ) ;
FactoryFinder finder = createFactoryFinder ( arg ) ;
FactoryFinder finder = getCamelContext ( arg ) . createFactoryFinder ( arg ) ;
FactoryFinder finder = new FactoryFinder ( arg ) ;
FactoryFinder finder = new FactoryFinder ( arg ) ;
<unk> answer ;
Field <unk> = <unk> . getClass ( arg ) . getSuperclass ( arg ) . <unk> ( arg ) ;
Field field = annotedFields . get ( arg ) ;
Field field = annotedFields . get ( arg ) ;
Field field = mapAnnotedField . get ( arg ) ;
Field field = mapAnnotedField . get ( arg ) ;
Field field = mapAnnotedField . get ( arg ) ;
File [ ] files = <unk> . <unk> ( arg ) ;
File dir = new File ( arg ) . getAbsoluteFile ( arg ) ;
File dir = new File ( arg ) . getAbsoluteFile ( arg ) ;
File dir = new File ( arg ) . getAbsoluteFile ( arg ) ;
File dir = new File ( arg ) . getAbsoluteFile ( arg ) ;
File dir = new File ( arg ) . getAbsoluteFile ( arg ) ;
File dir = new File ( arg ) ;
File done = new File ( arg ) . getAbsoluteFile ( arg ) ;
File done = new File ( arg ) . getAbsoluteFile ( arg ) ;
File done = new File ( arg ) . getAbsoluteFile ( arg ) ;
File done = new File ( arg ) . getAbsoluteFile ( arg ) ;
File done = new File ( arg ) . getAbsoluteFile ( arg ) ;
File done = new File ( arg ) . getAbsoluteFile ( arg ) ;
File done = new File ( arg ) . getAbsoluteFile ( arg ) ;
File done = new File ( arg ) . getAbsoluteFile ( arg ) ;
File file = new File ( arg ) . getAbsoluteFile ( arg ) ;
File file = new File ( arg ) . getAbsoluteFile ( arg ) ;
File file = new File ( arg ) . getAbsoluteFile ( arg ) ;
File file = new File ( arg ) . getAbsoluteFile ( arg ) ;
File file = new File ( arg ) . getAbsoluteFile ( arg ) ;
File file = new File ( arg ) . getAbsoluteFile ( arg ) ;
File file = new File ( arg ) . getAbsoluteFile ( arg ) ;
File file = new File ( arg ) . getAbsoluteFile ( arg ) ;
File file = new File ( arg ) . getAbsoluteFile ( arg ) ;
File file = new File ( arg ) . getAbsoluteFile ( arg ) ;
File file = new File ( arg ) . getAbsoluteFile ( arg ) ;
File file = new File ( arg ) . getAbsoluteFile ( arg ) ;
File file = new File ( arg ) . getAbsoluteFile ( arg ) ;
File file = new File ( arg ) . getAbsoluteFile ( arg ) ;
File file = new File ( arg ) . getAbsoluteFile ( arg ) ;
File file = new File ( arg ) . getAbsoluteFile ( arg ) ;
File file = new File ( arg ) . getAbsoluteFile ( arg ) ;
File file = new File ( arg ) . getAbsoluteFile ( arg ) ;
File file = new File ( arg ) . getAbsoluteFile ( arg ) ;
File file = new File ( arg ) . getAbsoluteFile ( arg ) ;
File file = new File ( arg ) . getAbsoluteFile ( arg ) ;
File file = new File ( arg ) . getAbsoluteFile ( arg ) ;
File file = new File ( arg ) . getAbsoluteFile ( arg ) ;
File file = new File ( arg ) . getAbsoluteFile ( arg ) ;
File file = new File ( arg ) . getAbsoluteFile ( arg ) ;
File file = new File ( arg ) . getAbsoluteFile ( arg ) ;
File file = new File ( arg ) . getAbsoluteFile ( arg ) ;
File file = new File ( arg ) . getAbsoluteFile ( arg ) ;
File file = new File ( arg ) . getAbsoluteFile ( arg ) ;
File file = new File ( arg ) . getAbsoluteFile ( arg ) ;
File file = new File ( arg ) . getAbsoluteFile ( arg ) ;
File file = new File ( arg ) . getAbsoluteFile ( arg ) ;
File file = new File ( arg ) . getAbsoluteFile ( arg ) ;
File file = new File ( arg ) . getAbsoluteFile ( arg ) ;
File file = new File ( arg ) . getAbsoluteFile ( arg ) ;
File file = new File ( arg ) . getAbsoluteFile ( arg ) ;
File file = new File ( arg ) . getAbsoluteFile ( arg ) ;
File file = new File ( arg ) . getAbsoluteFile ( arg ) ;
File file = new File ( arg ) . getAbsoluteFile ( arg ) ;
File file = new File ( arg ) . getAbsoluteFile ( arg ) ;
File file = new File ( arg ) . getAbsoluteFile ( arg ) ;
File file = new File ( arg ) . getAbsoluteFile ( arg ) ;
File file = new File ( arg ) . getAbsoluteFile ( arg ) ;
File file = new File ( arg ) . getAbsoluteFile ( arg ) ;
File file = new File ( arg ) . getAbsoluteFile ( arg ) ;
File file = new File ( arg ) . getAbsoluteFile ( arg ) ;
File file = new File ( arg ) . getAbsoluteFile ( arg ) ;
File file = new File ( arg ) . getAbsoluteFile ( arg ) ;
File file = new File ( arg ) . getAbsoluteFile ( arg ) ;
File file = new File ( arg ) . getAbsoluteFile ( arg ) ;
File file = new File ( arg ) . getAbsoluteFile ( arg ) ;
File file = new File ( arg ) . getAbsoluteFile ( arg ) ;
File file = new File ( arg ) . getAbsoluteFile ( arg ) ;
File file = new File ( arg ) . getAbsoluteFile ( arg ) ;
File file = new File ( arg ) . getAbsoluteFile ( arg ) ;
File file = new File ( arg ) . getAbsoluteFile ( arg ) ;
File file = new File ( arg ) . getAbsoluteFile ( arg ) ;
File file = new File ( arg ) . getAbsoluteFile ( arg ) ;
File file = new File ( arg ) . getAbsoluteFile ( arg ) ;
File file = new File ( arg ) . getAbsoluteFile ( arg ) ;
File file = new File ( arg ) . getAbsoluteFile ( arg ) ;
File file = new File ( arg ) . getAbsoluteFile ( arg ) ;
File file = new File ( arg ) . getAbsoluteFile ( arg ) ;
File file = new File ( arg ) . getAbsoluteFile ( arg ) ;
File file = new File ( arg ) . getAbsoluteFile ( arg ) ;
File file = new File ( arg ) . getAbsoluteFile ( arg ) ;
File file = new File ( arg ) . getAbsoluteFile ( arg ) ;
File file = new File ( arg ) . getAbsoluteFile ( arg ) ;
File file = new File ( arg ) . getAbsoluteFile ( arg ) ;
File file = new File ( arg ) . getAbsoluteFile ( arg ) ;
File file = new File ( arg ) . getAbsoluteFile ( arg ) ;
File file = new File ( arg ) . getAbsoluteFile ( arg ) ;
File file = new File ( arg ) . getAbsoluteFile ( arg ) ;
File file = new File ( arg ) . getAbsoluteFile ( arg ) ;
File file = new File ( arg ) . getAbsoluteFile ( arg ) ;
File file = new File ( arg ) . getAbsoluteFile ( arg ) ;
File file = new File ( arg ) . getAbsoluteFile ( arg ) ;
File file = new File ( arg ) . getAbsoluteFile ( arg ) ;
File file = new File ( arg ) . getAbsoluteFile ( arg ) ;
File file = new File ( arg ) . getAbsoluteFile ( arg ) ;
File file = new File ( arg ) . getAbsoluteFile ( arg ) ;
File file = new File ( arg ) . getAbsoluteFile ( arg ) ;
File file = new File ( arg ) . getAbsoluteFile ( arg ) ;
File file = new File ( arg ) . getAbsoluteFile ( arg ) ;
File file = new File ( arg ) . getAbsoluteFile ( arg ) ;
File file = new File ( arg ) . getAbsoluteFile ( arg ) ;
File file = new File ( arg ) ;
File file = <unk> ( arg ) ;
File <unk> = new File ( arg ) . getAbsoluteFile ( arg ) ;
File <unk> = new File ( arg ) . getAbsoluteFile ( arg ) ;
File <unk> = new File ( arg ) . getAbsoluteFile ( arg ) ;
File <unk> = new File ( arg ) ;
File first = new File ( arg ) . getAbsoluteFile ( arg ) ;
File in = new File ( arg ) . getAbsoluteFile ( arg ) ;
File in = new File ( arg ) . getAbsoluteFile ( arg ) ;
File in = new File ( arg ) . getAbsoluteFile ( arg ) ;
File in = new File ( arg ) . getAbsoluteFile ( arg ) ;
File in = new File ( arg ) . getAbsoluteFile ( arg ) ;
File local = new File ( arg ) . getAbsoluteFile ( arg ) ;
File local = new File ( arg ) . getAbsoluteFile ( arg ) ;
File local = new File ( arg ) . getAbsoluteFile ( arg ) ;
File lock = new File ( arg ) ;
File out = new File ( arg ) . getAbsoluteFile ( arg ) ;
File out = new File ( arg ) . getAbsoluteFile ( arg ) ;
File out = new File ( arg ) . getAbsoluteFile ( arg ) ;
File out = new File ( arg ) . getAbsoluteFile ( arg ) ;
File out = new File ( arg ) . getAbsoluteFile ( arg ) ;
File out = new File ( arg ) . getAbsoluteFile ( arg ) ;
File out = new File ( arg ) . getAbsoluteFile ( arg ) ;
File out = new File ( arg ) . getAbsoluteFile ( arg ) ;
File <unk> = new File ( arg ) ;
File pre = new File ( arg ) . getAbsoluteFile ( arg ) ;
File pre = new File ( arg ) . getAbsoluteFile ( arg ) ;
File pre = new File ( arg ) . getAbsoluteFile ( arg ) ;
File pre = new File ( arg ) . getAbsoluteFile ( arg ) ;
File pre = new File ( arg ) . getAbsoluteFile ( arg ) ;
File pre = new File ( arg ) . getAbsoluteFile ( arg ) ;
File pre = new File ( arg ) . getAbsoluteFile ( arg ) ;
File pre = new File ( arg ) . getAbsoluteFile ( arg ) ;
File <unk> = new File ( arg ) . getAbsoluteFile ( arg ) ;
File src = new File ( arg ) ;
File start = new File ( arg ) . getAbsoluteFile ( arg ) ;
File start = new File ( arg ) . getAbsoluteFile ( arg ) ;
File styleSheet = new File ( arg ) . getAbsoluteFile ( arg ) ;
File styleSheet = new File ( arg ) . getAbsoluteFile ( arg ) ;
File styleSheet = new File ( arg ) . getAbsoluteFile ( arg ) ;
File styleSheet = new File ( arg ) . getAbsoluteFile ( arg ) ;
FileConsumer result = new FileConsumer ( arg ) ;
FileEndpoint endpoint = resolveMandatoryEndpoint ( arg ) ;
FileEndpoint fileEndpoint = Assertions . assertInstanceOf ( arg ) ;
FileEndpoint fileEndpoint = Assertions . assertIsInstanceOf ( arg ) ;
FileEndpoint fileEndpoint = TestSupport . assertIsInstanceOf ( arg ) ;
FileEndpoint fileEndpoint = resolveMandatoryEndpoint ( arg ) ;
FileExchange fileExchange = endpoint . createExchange ( arg ) ;
FileLanguageRenamer renamer = new FileLanguageRenamer ( arg ) ;
<unk> lock = ExchangeHelper . getMandatoryProperty ( arg ) ;
FileLockExclusiveReadLockStrategy readLockStrategy = new FileLockExclusiveReadLockStrategy ( arg ) ;
FileRenameExclusiveReadLockStrategy readLockStrategy = new FileRenameExclusiveReadLockStrategy ( arg ) ;
FileRenameProcessStrategy < File > strategy = new FileRenameProcessStrategy < File > ( arg ) ;
FileRenameProcessStrategy < File > strategy = new FileRenameProcessStrategy < File > ( arg ) ;
FileRenameProcessStrategy strategy = new FileRenameProcessStrategy ( arg ) ;
<unk> filter = getNodeFactory ( arg ) . <unk> ( arg ) ;
FilterProcessor < Exchange > <unk> = filters . get ( arg ) ;
FilterProcessor < Exchange > <unk> = filters . get ( arg ) ;
FilterType filter = assertFilter ( arg ) ;
FilterType filter = assertFilter ( arg ) ;
FilterType filter = assertFilter ( arg ) ;
FilterType filter = assertFilter ( arg ) ;
FilterType filter = assertOneProcessorInstanceOf ( arg ) ;
FilterType filter = assertOneProcessorInstanceOf ( arg ) ;
FilterType filter = assertOneProcessorInstanceOf ( arg ) ;
FilterType filter = assertOneProcessorInstanceOf ( arg ) ;
FilterType filter = new FilterType ( arg ) ;
FluentArg arg = method . annotations . get ( arg ) ;
FluentArg arg = method . annotations . get ( arg ) ;
Format format ;
Format format = <unk> . <unk> ( arg ) ;
FromType fromType = assertOneElement ( arg ) ;
FromType fromType = inputs . get ( arg ) ;
FtpConfiguration config = ( FtpConfiguration ) ftpEndpoint . getConfiguration ( arg ) ;
FtpEndpoint < ? > ftpEndpoint = ( FtpEndpoint < ? > ) endpoint ;
FtpEndpoint endpoint = context . getEndpoint ( arg ) ;
FtpEndpoint endpoint = context . getEndpoint ( arg ) ;
FtpEndpoint endpoint = context . getEndpoint ( arg ) ;
FtpEndpoint ftpEndpoint = ( FtpEndpoint ) endpoint ;
FtpEndpoint ftpEndpoint = ( FtpEndpoint ) endpoint ;
FtpProducer producer = ( FtpProducer ) endpoint . createProducer ( arg ) ;
FtpProducer producer = ( FtpProducer ) endpoint . createProducer ( arg ) ;
Future < Exchange > future = AsyncProcessorHelper . asyncProcess ( arg ) ;
Future < Exchange > future = AsyncProcessorHelper . asyncProcess ( arg ) ;
Future < Exchange > future = getExecutorService ( arg ) . submit ( arg ) ;
Future answer = completionQueue . poll ( arg ) ;
Future answer = completionQueue . poll ( arg ) ;
Future future = ( Future ) value ;
Future future = getExecutorService ( arg ) . submit ( arg ) ;
Future future = service . getUsers ( arg ) ;
Future future = service . getUsers ( arg ) ;
Future future = template . asyncRequestBody ( arg ) ;
Future future = template . asyncRequestBody ( arg ) ;
Future future = template . asyncRequestBody ( arg ) ;
Future future = template . asyncRequestBody ( arg ) ;
Future future = template . asyncRequestBody ( arg ) ;
Future future = template . asyncRequestBody ( arg ) ;
Future future = template . asyncRequestBody ( arg ) ;
<unk> future = new <unk> ( arg ) ;
GZIPHelper . setGZIPMessageHeader ( arg ) ;
GZIPHelper . setGZIPMessageHeader ( arg ) ;
GZIPInputStream <unk> = new GZIPInputStream ( arg ) ;
GenericFile < File > consumedFile = NewFileConsumer . asGenericFile ( arg ) ;
GenericFile < T > file = ( GenericFile < T > ) exchange . getProperty ( arg ) ;
GenericFile < T > <unk> = file . clone ( arg ) ;
GenericFile < T > result = file . clone ( arg ) ;
GenericFile < T > result = null ;
GenericFile < T > to = renameFile ( arg ) ;
GenericFile < T > to = renameFile ( arg ) ;
GenericFile consumedFile = NewFileConsumer . asGenericFile ( arg ) ;
GenericFile file = ( GenericFile ) value ;
GenericFile file = ( GenericFile ) value ;
GenericFile file = new GenericFile ( arg ) ;
GenericFile file = new GenericFile ( arg ) ;
GenericFile genericFile = ( GenericFile ) value ;
GenericFile gf = ( GenericFile ) body ;
GenericFile gf = ( GenericFile ) value ;
GenericFile <unk> = <unk> . renameFile ( arg ) ;
GenericFile result = file . clone ( arg ) ;
<unk> consumer = null ;
GenericFileDeleteProcessStrategy strategy = new GenericFileDeleteProcessStrategy ( arg ) ;
GenericFileDeleteProcessStrategy strategy = new GenericFileDeleteProcessStrategy ( arg ) ;
GenericFileExchange < File > answer = endpoint . createExchange ( arg ) ;
GenericFileExchange < File > exchange = new GenericFileExchange < File > ( arg ) ;
GenericFileExchange < T > answer = new GenericFileExchange < T > ( arg ) ;
GenericFileExchange < T > exchange = ( GenericFileExchange < T > ) exchanges . poll ( arg ) ;
GenericFileExchange < T > exchange = ( GenericFileExchange < T > ) exchanges . poll ( arg ) ;
GenericFileExchange < T > exchange = endpoint . createExchange ( arg ) ;
GenericFileExchange < T > fileExchange = ( GenericFileExchange < T > ) endpoint . createExchange ( arg ) ;
GenericFileExchange < T > fileExchange = ( GenericFileExchange < T > ) getGenericFileEndpoint ( arg ) . createExchange ( arg ) ;
GenericFileExchange exchange = exchanges . get ( arg ) ;
GenericFileExchange fileExchange = ( GenericFileExchange ) getEndpoint ( arg ) . createExchange ( arg ) ;
GenericFileExclusiveReadLockStrategy < <unk> > readLockStrategy = new FtpChangedExclusiveReadLockStrategy ( arg ) ;
GenericFileExclusiveReadLockStrategy < File > readLockStrategy = new FileChangedExclusiveReadLockStrategy ( arg ) ;
GenericFileExclusiveReadLockStrategy < File > readLockStrategy = new GenericFileRenameExclusiveReadLockStrategy < File > ( arg ) ;
GenericFileExclusiveReadLockStrategy < LsEntry > strategy = ( GenericFileExclusiveReadLockStrategy < LsEntry > ) params . get ( arg ) ;
GenericFileExclusiveReadLockStrategy readLockStrategy = new FileChangedExclusiveReadLockStrategy ( arg ) ;
GenericFileExclusiveReadLockStrategy readLockStrategy = new FtpChangedExclusiveReadLockStrategy ( arg ) ;
GenericFileExclusiveReadLockStrategy readLockStrategy = new GenericFileRenameExclusiveReadLockStrategy ( arg ) ;
GenericFileExclusiveReadLockStrategy readLockStrategy = new <unk> ( arg ) ;
GenericFileExclusiveReadLockStrategy readLockStrategy = new <unk> ( arg ) ;
GenericFileExclusiveReadLockStrategy strategy = ( GenericFileExclusiveReadLockStrategy ) params . get ( arg ) ;
GenericFileExpressionRenamer < LsEntry > renamer = new GenericFileExpressionRenamer < LsEntry > ( arg ) ;
GenericFileExpressionRenamer < LsEntry > renamer = new GenericFileExpressionRenamer < LsEntry > ( arg ) ;
GenericFileExpressionRenamer < LsEntry > renamer = new GenericFileExpressionRenamer < LsEntry > ( arg ) ;
GenericFileExpressionRenamer < LsEntry > renamer = new GenericFileExpressionRenamer < LsEntry > ( arg ) ;
GenericFileExpressionRenamer < LsEntry > renamer = new GenericFileExpressionRenamer < LsEntry > ( arg ) ;
GenericFileExpressionRenamer renamer = new GenericFileExpressionRenamer ( arg ) ;
GenericFileExpressionRenamer renamer = new GenericFileExpressionRenamer ( arg ) ;
GenericFileNoOpProcessStrategy strategy = new GenericFileNoOpProcessStrategy ( arg ) ;
GenericFileProducer producer = ( GenericFileProducer ) endpoint . createProducer ( arg ) ;
GenericFileProducer producer = ( GenericFileProducer ) endpoint . createProducer ( arg ) ;
GenericFileProducer producer = ( GenericFileProducer ) endpoint . createProducer ( arg ) ;
GenericFileProducer producer = ( GenericFileProducer ) endpoint . createProducer ( arg ) ;
GenericFileProducer producer = ( GenericFileProducer ) endpoint . createProducer ( arg ) ;
GenericFileRenameExclusiveReadLockStrategy < LsEntry > readLockStrategy = new GenericFileRenameExclusiveReadLockStrategy < LsEntry > ( arg ) ;
GenericFileRenameExclusiveReadLockStrategy readLockStrategy = new GenericFileRenameExclusiveReadLockStrategy ( arg ) ;
GenericFileRenameProcessStrategy < File > strategy = new GenericFileRenameProcessStrategy < File > ( arg ) ;
GenericFileRenameProcessStrategy < File > strategy = new GenericFileRenameProcessStrategy < File > ( arg ) ;
GenericFileRenameProcessStrategy strategy = new GenericFileRenameProcessStrategy ( arg ) ;
GetResponse response = ( GetResponse ) template . requestBody ( arg ) ;
GetResponse response = ( GetResponse ) template . requestBody ( arg ) ;
GetResponse response = ( GetResponse ) template . requestBodyAndHeaders ( arg ) ;
GetResponse response = ( GetResponse ) template . requestBodyAndHeaders ( arg ) ;
GrantedAuthority [ ] authorities = new GrantedAuthority [ roles . length ] ;
<unk> <unk> = context ( arg ) . getRegistry ( arg ) . lookup ( arg ) ;
<unk> port = <unk> . <unk> ( arg ) ;
GroupedExchange grouped = null ;
HBaseComponent component = new HBaseComponent ( arg ) ;
HTableInterface table = null ;
HTableInterface table = null ;
HTableInterface table = null ;
HandlerEndpoint <unk> = ( HandlerEndpoint ) ctx . getBean ( arg ) ;
HashMap < String , Condition > <unk> = new HashMap < String , Condition > ( arg ) ;
HashMap < String , DataHandler > map = new HashMap < String , DataHandler > ( arg ) ;
HashMap < String , HashSet < String >> map = new LinkedHashMap < String , HashSet < String >> ( arg ) ;
HashMap < String , Object > body = new HashMap < String , Object > ( arg ) ;
HashMap < String , Object > headers = new HashMap < String , Object > ( arg ) ;
HashMap < String , Object > headers = new HashMap < String , Object > ( arg ) ;
HashMap < String , Object > headers = new HashMap < String , Object > ( arg ) ;
HashMap < String , Object > headers = new HashMap < String , Object > ( arg ) ;
HashMap < String , Object > headers = new HashMap < String , Object > ( arg ) ;
HashMap < String , Object > headers = new HashMap < String , Object > ( arg ) ;
HashMap < String , Object > headers = new HashMap < String , Object > ( arg ) ;
HashMap < String , Object > headers = new HashMap < String , Object > ( arg ) ;
HashMap < String , Object > headers = new HashMap < String , Object > ( arg ) ;
HashMap < String , Object > headers = new HashMap < String , Object > ( arg ) ;
HashMap < String , Object > headers = new HashMap < String , Object > ( arg ) ;
HashMap < String , Object > map = new HashMap < String , Object > ( arg ) ;
HashMap < String , Object > rc = new LinkedHashMap < String , Object > ( arg ) ;
HashMap < String , Object > row = data . get ( arg ) ;
HashMap < String , Object > row = data . get ( arg ) ;
HashMap < String , Object > row = new HashMap < String , Object > ( arg ) ;
HashMap < String , String > map = new HashMap < String , String > ( arg ) ;
HashMap < String , String > map = new HashMap < String , String > ( arg ) ;
HashMap < String , String > map = new HashMap < String , String > ( arg ) ;
HashMap < String , String > map = new HashMap < String , String > ( arg ) ;
HashMap < String , String > map = new HashMap < String , String > ( arg ) ;
HashMap < String , String > map = new HashMap < String , String > ( arg ) ;
HashMap < String , String > map = new HashMap < String , String > ( arg ) ;
HashMap < String , String > values = new HashMap < String , String > ( arg ) ;
HashMap < String , String > values = new HashMap < String , String > ( arg ) ;
HashMap < String , String > values = new HashMap < String , String > ( arg ) ;
HashMap out = CollectionConverter . <unk> ( arg ) ;
HashMap rc = new HashMap ( arg ) ;
Hashtable < String , Object > props = new Hashtable < String , Object > ( arg ) ;
Hashtable < String , String > <unk> = new Hashtable < String , String > ( arg ) ;
Hashtable <unk> = new Hashtable ( arg ) ;
Hashtable out = CollectionConverter . <unk> ( arg ) ;
Hashtable properties = new Hashtable ( arg ) ;
HawtDBAggregationRepository < String > repo = new HawtDBAggregationRepository < String > ( arg ) ;
HawtDBAggregationRepository < String > repo = new HawtDBAggregationRepository < String > ( arg ) ;
HawtDBAggregationRepository < String > repo = new HawtDBAggregationRepository < String > ( arg ) ;
HawtDBAggregationRepository < String > repo = new HawtDBAggregationRepository < String > ( arg ) ;
HawtDBAggregationRepository < String > repo = new HawtDBAggregationRepository < String > ( arg ) ;
HawtDBAggregationRepository < String > repo = new HawtDBAggregationRepository < String > ( arg ) ;
HawtDBAggregationRepository < String > repo = new HawtDBAggregationRepository < String > ( arg ) ;
HawtDBAggregationRepository < String > repo = new HawtDBAggregationRepository < String > ( arg ) ;
HawtDBAggregationRepository < String > repo = new HawtDBAggregationRepository < String > ( arg ) ;
HawtDBAggregationRepository < String > repo = new HawtDBAggregationRepository < String > ( arg ) ;
HawtDBAggregationRepository < String > repo = new HawtDBAggregationRepository < String > ( arg ) ;
HawtDBAggregationRepository < String > repo = new HawtDBAggregationRepository < String > ( arg ) ;
HawtDBAggregationRepository < String > repo = new HawtDBAggregationRepository < String > ( arg ) ;
HawtDBAggregationRepository < String > repo = new HawtDBAggregationRepository < String > ( arg ) ;
HawtDBAggregationRepository < String > repo1 = new HawtDBAggregationRepository < String > ( arg ) ;
HawtDBAggregationRepository < String > repo1 = new HawtDBAggregationRepository < String > ( arg ) ;
HawtDBAggregationRepository < String > repo2 = new HawtDBAggregationRepository < String > ( arg ) ;
HawtDBAggregationRepository < String > repo2 = new HawtDBAggregationRepository < String > ( arg ) ;
HazelcastComponent component = ( HazelcastComponent ) context ( arg ) . getComponent ( arg ) ;
HazelcastComponent component = ( HazelcastComponent ) context ( arg ) . getComponent ( arg ) ;
HazelcastComponent component = ( HazelcastComponent ) context ( arg ) . getComponent ( arg ) ;
HazelcastComponent component = ( HazelcastComponent ) context ( arg ) . getComponent ( arg ) ;
HazelcastComponent component = ( HazelcastComponent ) context ( arg ) . getComponent ( arg ) ;
HazelcastComponent component = ( HazelcastComponent ) context ( arg ) . getComponent ( arg ) ;
HazelcastComponent component = ( HazelcastComponent ) context ( arg ) . getComponent ( arg ) ;
HazelcastComponent component = ( HazelcastComponent ) context ( arg ) . getComponent ( arg ) ;
HdfsInfo answer = new HdfsInfo ( arg ) ;
HdfsInfo info = new HdfsInfo ( arg ) ;
HdfsInfo info = new HdfsInfo ( arg ) ;
Header [ ] headers = method . <unk> ( arg ) ;
Header header = ( Header ) iter . nextElement ( arg ) ;
Header header = httpRequest . <unk> ( arg ) ;
Header header = method . <unk> ( arg ) ;
HeaderFilterStrategy strategy = ( ( HttpEndpoint ) getEndpoint ( arg ) ) . getHeaderFilterStrategy ( arg ) ;
HeaderFilterStrategy strategy = getEndpoint ( arg ) . getHeaderFilterStrategy ( arg ) ;
HeaderFilterStrategy strategy = getEndpoint ( arg ) . getHeaderFilterStrategy ( arg ) ;
HelloWorldService service = ( HelloWorldService ) applicationContext . getBean ( arg ) ;
HelloWorldService service = applicationContext . getBean ( arg ) ;
HttpBinding binding = ( ( HttpEndpoint ) getEndpoint ( arg ) ) . getBinding ( arg ) ;
HttpClient answer = new HttpClient ( arg ) ;
HttpClient client = getEndpoint ( arg ) . <unk> ( arg ) ;
HttpClient httpclient = new DefaultHttpClient ( arg ) ;
HttpClient httpclient = new DefaultHttpClient ( arg ) ;
HttpClient httpclient = new DefaultHttpClient ( arg ) ;
HttpClient httpclient = new DefaultHttpClient ( arg ) ;
HttpClient httpclient = new DefaultHttpClient ( arg ) ;
HttpClient httpclient = new DefaultHttpClient ( arg ) ;
HttpClient httpclient = new DefaultHttpClient ( arg ) ;
HttpClient httpclient = new DefaultHttpClient ( arg ) ;
HttpClient httpclient = new DefaultHttpClient ( arg ) ;
HttpClient httpclient = new DefaultHttpClient ( arg ) ;
HttpClient httpclient = new DefaultHttpClient ( arg ) ;
HttpClient httpclient = new DefaultHttpClient ( arg ) ;
HttpClient httpclient = new DefaultHttpClient ( arg ) ;
HttpClient httpclient = new DefaultHttpClient ( arg ) ;
HttpClient httpclient = new DefaultHttpClient ( arg ) ;
HttpClient httpclient = new DefaultHttpClient ( arg ) ;
HttpClient httpclient = new DefaultHttpClient ( arg ) ;
HttpClient httpclient = new DefaultHttpClient ( arg ) ;
HttpClient httpclient = new DefaultHttpClient ( arg ) ;
HttpEndpoint endpoint = ( HttpEndpoint ) consumer . getEndpoint ( arg ) ;
HttpExchange exchange = ( HttpExchange ) continuation . getObject ( arg ) ;
HttpExchange exchange = ( HttpExchange ) endpoint . createExchange ( arg ) ;
HttpExchange exchange = ( HttpExchange ) producer . createExchange ( arg ) ;
HttpExchange exchange = ( HttpExchange ) producer . createExchange ( arg ) ;
HttpExchange exchange = ( HttpExchange ) producer . createExchange ( arg ) ;
HttpExchange exchange = ( HttpExchange ) producer . createExchange ( arg ) ;
HttpExchange exchange = ( HttpExchange ) producer . createExchange ( arg ) ;
HttpExchange exchange = ( HttpExchange ) producer . createExchange ( arg ) ;
HttpExchange exchange = ( HttpExchange ) producer . createExchange ( arg ) ;
HttpExchange exchange = endpoint . createExchange ( arg ) ;
HttpExchange exchange = producer . createExchange ( arg ) ;
HttpExchange exchange = producer . createExchange ( arg ) ;
HttpExchange exchange = producer . createExchange ( arg ) ;
HttpExchange exchange = producer . createExchange ( arg ) ;
HttpExchange exchange = producer . createExchange ( arg ) ;
HttpExchange exchange = producer . createExchange ( arg ) ;
HttpExchange exchange = producer . createExchange ( arg ) ;
<unk> method = createMethod ( arg ) ;
HttpMethods methodToUse = HttpProducerHelper . createMethod ( arg ) ;
HttpMethods methodToUse = HttpProducerHelper . createMethod ( arg ) ;
HttpNettyServerBootstrapFactory answer = <unk> . get ( arg ) ;
HttpNettyServerBootstrapFactory factory = getComponent ( arg ) . <unk> ( arg ) ;
HttpOperationFailedException exception ;
HttpOperationFailedException exception ;
HttpParamsLinker . link ( arg ) ;
HttpParamsLinker . link ( arg ) ;
HttpParamsLinker . link ( arg ) ;
HttpParamsLinker . link ( arg ) ;
HttpParamsLinker . link ( arg ) ;
<unk> answer = <unk> . get ( arg ) ;
HttpURLConnection connection = ( HttpURLConnection ) <unk> . openConnection ( arg ) ;
HttpVersion ver = request . getRequestLine ( arg ) . getHttpVersion ( arg ) ;
HttpVersion ver = request . getRequestLine ( arg ) . getHttpVersion ( arg ) ;
HttpVersion ver = request . getRequestLine ( arg ) . getHttpVersion ( arg ) ;
IBatisPollingConsumer consumer = new IBatisPollingConsumer ( arg ) ;
IBindingFactory bindingFactory = BindingDirectory . getFactory ( arg ) ;
IBindingFactory bindingFactory = BindingDirectory . getFactory ( arg ) ;
INIT . set ( arg ) ;
INIT . set ( arg ) ;
<unk> . incrementAndGet ( arg ) ;
IOConverter . copy ( arg ) ;
IOConverter . copy ( arg ) ;
IOConverter . copy ( arg ) ;
IOConverter . copy ( arg ) ;
IOConverter . <unk> ( arg ) ;
IOConverter . <unk> ( arg ) ;
IOException io = IOHelper . createIOException ( arg ) ;
IOException io = IOHelper . createIOException ( arg ) ;
IOHelper . close ( arg ) ;
IOHelper . close ( arg ) ;
IOHelper . close ( arg ) ;
IOHelper . close ( arg ) ;
IOHelper . close ( arg ) ;
IOHelper . close ( arg ) ;
IOHelper . copy ( arg ) ;
IOUtils . copy ( arg ) ;
IOUtils . copy ( arg ) ;
IOUtils . copy ( arg ) ;
ISay proxy = ( ISay ) applicationContext . getBean ( arg ) ;
ISay proxy = ( ISay ) applicationContext . getBean ( arg ) ;
ISay proxy = PojoComponent . createProxy ( arg ) ;
ISay proxy = PojoComponent . createProxy ( arg ) ;
Id = id ;
Id = id ;
Id = id ;
<unk> < Exchange > idempotentConsumer = assertIsInstanceOf ( arg ) ;
IdempotentRepository < ? > repository = context . getRegistry ( arg ) . lookup ( arg ) ;
IdempotentRepository idempotentRepository = <unk> ( arg ) ;
IdempotentRepository repo = MemoryIdempotentRepository . memoryIdempotentRepository ( arg ) ;
IdempotentRepository repo = MemoryIdempotentRepository . memoryIdempotentRepository ( arg ) ;
IllegalArgumentException iae = ( IllegalArgumentException ) e . getCause ( arg ) . getCause ( arg ) ;
IllegalArgumentException iae = ( IllegalArgumentException ) e . getCause ( arg ) . getCause ( arg ) ;
Index < Buffer , Buffer > created = INDEX_FACTORY . create ( arg ) ;
Index < Buffer , Buffer > created = indexFactory . create ( arg ) ;
Index < Buffer , Buffer > index = file . getRepositoryIndex ( arg ) ;
Index < Buffer , Buffer > index = file . getRepositoryIndex ( arg ) ;
Index < Buffer , Buffer > index = file . getRepositoryIndex ( arg ) ;
Index < Buffer , Buffer > index = hawtDBFile . getRepositoryIndex ( arg ) ;
Index < Buffer , Buffer > index = hawtDBFile . getRepositoryIndex ( arg ) ;
Index < Buffer , Buffer > index = hawtDBFile . getRepositoryIndex ( arg ) ;
Index < Buffer , Buffer > index = hawtDBFile . getRepositoryIndex ( arg ) ;
Index < Buffer , Buffer > index = hawtDBFile . getRepositoryIndex ( arg ) ;
Index < Buffer , Buffer > indexCompleted = hawtDBFile . getRepositoryIndex ( arg ) ;
Index < Buffer , Buffer > indexCompleted = hawtDBFile . getRepositoryIndex ( arg ) ;
Index < Buffer , Buffer > indexCompleted = hawtDBFile . getRepositoryIndex ( arg ) ;
Index < Buffer , Buffer > indexCompleted = hawtDBFile . getRepositoryIndex ( arg ) ;
Index < String , Integer > indexes = <unk> . open ( arg ) ;
Index < String , Integer > indexes = <unk> . open ( arg ) ;
Index < String , Integer > indexes = <unk> . open ( arg ) ;
<unk> address = <unk> . getByName ( arg ) ;
InputStream answer = ( InputStream ) template . sendBody ( arg ) ;
InputStream answer = ( InputStream ) template . sendBody ( arg ) ;
InputStream cache = ( InputStream ) converter . convertToStreamCache ( arg ) ;
InputStream copy = null ;
InputStream in = ExchangeHelper . getMandatoryInBody ( arg ) ;
InputStream in = ObjectHelper . loadResourceAsStream ( arg ) ;
InputStream in = new BufferedInputStream ( arg ) ;
InputStream input = <unk> . getInputStream ( arg ) ;
InputStream inputStream = GZIPHelper . toGZIPInputStream ( arg ) ;
InputStream inputStream = GZIPHelper . toGZIPInputStream ( arg ) ;
InputStream inputStream = HttpClient . class . getResourceAsStream ( arg ) ;
InputStream inputStream = HttpClient . class . getResourceAsStream ( arg ) ;
InputStream inputStream = HttpClient . class . getResourceAsStream ( arg ) ;
InputStream inputStream = HttpClient . class . getResourceAsStream ( arg ) ;
InputStream is ;
InputStream is ;
InputStream is = ( InputStream ) exchange . getIn ( arg ) . getBody ( arg ) ;
InputStream is = ExchangeHelper . getMandatoryInBody ( arg ) ;
InputStream is = ExchangeHelper . getMandatoryInBody ( arg ) ;
InputStream is = ExchangeHelper . getMandatoryInBody ( arg ) ;
InputStream is = conv . toInputStrean ( arg ) ;
InputStream is = exchange . getContext ( arg ) . getTypeConverter ( arg ) . convertTo ( arg ) ;
InputStream is = exchange . getIn ( arg ) . getBody ( arg ) ;
InputStream is = getCamelContext ( arg ) . getClassResolver ( arg ) . loadResourceAsStream ( arg ) ;
InputStream is = getClass ( arg ) . getResourceAsStream ( arg ) ;
InputStream is = in . <unk> ( arg ) ;
InputStream is = method . getResponseBodyAsStream ( arg ) ;
InputStream is = new BufferedInputStream ( arg ) ;
InputStream is = new BufferedInputStream ( arg ) ;
InputStream is = new BufferedInputStream ( arg ) ;
InputStream is = new BufferedInputStream ( arg ) ;
InputStream is = new BufferedInputStream ( arg ) ;
InputStream is = new BufferedInputStream ( arg ) ;
InputStream is = new BufferedInputStream ( arg ) ;
InputStream is = new BufferedInputStream ( arg ) ;
InputStream is = null ;
InputStream is = null ;
InputStream is = typeConverter . convertTo ( arg ) ;
InputStream out = conv . toInputStrean ( arg ) ;
InputStream result = null ;
InputStream <unk> = <unk> . <unk> ( arg ) ;
InputStream stream = ExchangeHelper . getMandatoryInBody ( arg ) ;
InputStreamCache cache = new InputStreamCache ( arg ) ;
InputStreamReader in = null ;
<unk> agent = getMandatoryBean ( arg ) ;
Integer code = msg . getHeader ( arg ) ;
Integer code = resource . getOut ( arg ) . getHeader ( arg ) ;
Integer code = resource . getOut ( arg ) . getHeader ( arg ) ;
Integer counter = exchange . getProperty ( arg ) ;
Integer <unk> = ( Integer ) request . get ( arg ) ;
Integer num = exchange . getContext ( arg ) . getTypeConverter ( arg ) . convertTo ( arg ) ;
Integer number = DomConverter . toInteger ( arg ) ;
Integer number = new DomConverter ( arg ) . toInteger ( arg ) ;
Integer old = ( Integer ) oldExchange . getProperty ( arg ) ;
Integer <unk> = exchange . getContext ( arg ) . getTypeConverter ( arg ) . convertTo ( arg ) ;
Integer <unk> = in . getHeader ( arg ) ;
Integer value = ObjectConverter . toInteger ( arg ) ;
<unk> proxy = intercept . createProxy ( arg ) ;
InterceptEndpoint proxy = new InterceptEndpoint ( arg ) ;
InterceptEndpoint proxy = routeContext . getCamelContext ( arg ) . getTypeConverter ( arg ) . mandatoryConvertTo ( arg ) ;
<unk> proxy = intercept . createProxy ( arg ) ;
InterceptorBuilder < E > answer = new InterceptorBuilder < E > ( arg ) ;
InterceptorProcessor < Exchange > p1 = assertIsInstanceOf ( arg ) ;
InterceptorProcessor < Exchange > p2 = assertIsInstanceOf ( arg ) ;
InterceptorRef interceptor = interceptors . get ( arg ) ;
InterceptorRef interceptor = new InterceptorRef ( arg ) ;
IntrospectionSupport . setProperties ( arg ) ;
IntrospectionSupport . setProperties ( arg ) ;
IntrospectionSupport . setProperties ( arg ) ;
IntrospectionSupport . setProperties ( arg ) ;
IntrospectionSupport . setProperties ( arg ) ;
IntrospectionSupport . setProperties ( arg ) ;
IntrospectionSupport . setProperties ( arg ) ;
IntrospectionSupport . setProperties ( arg ) ;
IntrospectionSupport . setProperties ( arg ) ;
IntrospectionSupport . setProperties ( arg ) ;
IntrospectionSupport . setProperties ( arg ) ;
IntrospectionSupport . setProperties ( arg ) ;
IntrospectionSupport . setProperties ( arg ) ;
IntrospectionSupport . setProperties ( arg ) ;
IntrospectionSupport . setProperties ( arg ) ;
IntrospectionSupport . setProperties ( arg ) ;
IntrospectionSupport . setProperties ( arg ) ;
IntrospectionSupport . setProperties ( arg ) ;
IntrospectionSupport . setProperties ( arg ) ;
Invoker <unk> = ( Invoker ) applicationContext . getBean ( arg ) ;
<unk> . <unk> ( arg ) ;
<unk> connector = endpoint . <unk> ( arg ) ;
IrcBinding binding = exchange != null ? ( IrcBinding ) exchange . getProperty ( arg ) : null ;
<unk> config = getConfiguration ( arg ) . copy ( arg ) ;
IrcExchange exchange = endpoint . <unk> ( arg ) ;
IrcExchange exchange = endpoint . <unk> ( arg ) ;
IrcExchange exchange = endpoint . <unk> ( arg ) ;
IrcExchange exchange = endpoint . <unk> ( arg ) ;
IrcExchange exchange = endpoint . <unk> ( arg ) ;
IrcExchange exchange = endpoint . <unk> ( arg ) ;
IrcExchange exchange = endpoint . <unk> ( arg ) ;
IrcExchange exchange = endpoint . <unk> ( arg ) ;
IsDeleted = isDeleted ;
Item < ? > item = null ;
Item < ? > item = null ;
Item item = in . getBody ( arg ) ;
Item item = null ;
Item item = null ;
Iterator < ? > iterator = createIterator ( arg ) ;
Iterator < ? > iterator = endpoint . getPrepareStatementStrategy ( arg ) . <unk> ( arg ) ;
Iterator < Object > it = ObjectHelper . createIterator ( arg ) ;
Iterator < Object > it = ObjectHelper . createIterator ( arg ) ;
Iterator < Object > it = ObjectHelper . createIterator ( arg ) ;
Iterator < Object > iter = ObjectConverter . iterator ( arg ) ;
Iterator < Object > iter = ObjectHelper . createIterator ( arg ) ;
Iterator < PGPPublicKey > keyIter = ( Iterator < PGPPublicKey > ) keyRing . <unk> ( arg ) ;
Iterator < PGPPublicKeyRing > keyRingIter = ( Iterator < PGPPublicKeyRing > ) pgpSec . getKeyRings ( arg ) ;
Iterator < PGPSecretKey > keyIter = ( Iterator < PGPSecretKey > ) keyRing . getSecretKeys ( arg ) ;
Iterator < PGPSecretKeyRing > keyRingIter = ( Iterator < PGPSecretKeyRing > ) pgpSec . getKeyRings ( arg ) ;
Iterator < ProcessorDefinition > it = AdviceWithTasks . createMatchByIterator ( arg ) ;
Iterator < ProcessorDefinition > it = AdviceWithTasks . createMatchByIterator ( arg ) ;
Iterator < ProcessorDefinition > it = AdviceWithTasks . createMatchByIterator ( arg ) ;
Iterator < SedaComponent . QueueReference > it = <unk> . getQueues ( arg ) . values ( arg ) . iterator ( arg ) ;
Iterator < SedaComponent . QueueReference > it = <unk> . getQueues ( arg ) . values ( arg ) . iterator ( arg ) ;
Iterator < Status > <unk> = <unk> . <unk> ( arg ) ;
Iterator < String > it = CastUtils . cast ( arg ) ;
Iterator < String > it = CastUtils . cast ( arg ) ;
Iterator < String > it = CastUtils . cast ( arg ) ;
Iterator < String > it = CastUtils . cast ( arg ) ;
Iterator < String > it = CastUtils . cast ( arg ) ;
Iterator < String > it = CastUtils . cast ( arg ) ;
Iterator < String > it = CastUtils . cast ( arg ) ;
Iterator < String > it = CastUtils . cast ( arg ) ;
Iterator < String > it = ObjectHelper . createIterator ( arg ) ;
Iterator < String > it = ObjectHelper . createIterator ( arg ) ;
Iterator < String > it = ObjectHelper . createIterator ( arg ) ;
Iterator < Throwable > it = new ExceptionIterator ( arg ) ;
Iterator <unk> = enc . <unk> ( arg ) ;
Iterator it = ObjectConverter . iterator ( arg ) ;
Iterator it = ObjectHelper . createIterator ( arg ) ;
Iterator it = ObjectHelper . createIterator ( arg ) ;
Iterator it = ObjectHelper . createIterator ( arg ) ;
Iterator it = ObjectHelper . createIterator ( arg ) ;
Iterator it = ObjectHelper . createIterator ( arg ) ;
Iterator it = ObjectHelper . createIterator ( arg ) ;
Iterator it = col . iterator ( arg ) ;
Iterator it = context . getPrefixes ( arg ) ;
Iterator it = context . getPrefixes ( arg ) ;
Iterator it = exchange . getIn ( arg ) . getBody ( arg ) ;
Iterator it = expression . evaluate ( arg ) ;
Iterator it = getAndRemoveParameter ( arg ) ;
Iterator it = getCamelContext ( arg ) . getTypeConverter ( arg ) . convertTo ( arg ) ;
Iterator it = l . iterator ( arg ) ;
Iterator it = line . getProcessors ( arg ) . iterator ( arg ) ;
Iterator it = line . getProcessors ( arg ) . iterator ( arg ) ;
Iterator it = map . values ( arg ) . iterator ( arg ) ;
Iterator it = null ;
Iterator it = parameters . keySet ( arg ) . iterator ( arg ) ;
Iterator iter = ObjectConverter . iterator ( arg ) ;
Iterator iter = ObjectConverter . iterator ( arg ) ;
Iterator iter = ObjectConverter . iterator ( arg ) ;
Iterator iter = ObjectConverter . iterator ( arg ) ;
Iterator iter = ObjectConverter . iterator ( arg ) ;
Iterator iter = ObjectHelper . createIterator ( arg ) ;
Iterator iter = ObjectHelper . createIterator ( arg ) ;
Iterator iter = ObjectHelper . createIterator ( arg ) ;
Iterator iter = ObjectHelper . createIterator ( arg ) ;
Iterator iter = ObjectHelper . createIterator ( arg ) ;
Iterator iter = ObjectHelper . createIterator ( arg ) ;
Iterator iter = ObjectHelper . createIterator ( arg ) ;
Iterator iter = ObjectHelper . createIterator ( arg ) ;
Iterator iter = ObjectHelper . createIterator ( arg ) ;
Iterator iter = ObjectHelper . iterator ( arg ) ;
Iterator iter = createIterator ( arg ) ;
Iterator iter = dependencies . iterator ( arg ) ;
Iterator iter = dependencies . iterator ( arg ) ;
Iterator iter = iterator ( arg ) ;
Iterator iter = iterator ( arg ) ;
Iterator iter = parent . getPrefixes ( arg ) ;
Iterator iter = s . iterator ( arg ) ;
Iterator iter = this . determineRelevantPluginDependencies ( arg ) . iterator ( arg ) ;
Iterator iter = this . determineRelevantPluginDependencies ( arg ) . iterator ( arg ) ;
Iterator keyIterator = dataStore . keyIterator ( arg ) ;
JAXBContext context = JAXBContext . newInstance ( arg ) ;
JAXBContext context = createJaxbContext ( arg ) ;
JAXBContext context = createJaxbContext ( arg ) ;
JAXBContext jaxbContext = JAXBContext . newInstance ( arg ) ;
JAXBContext jaxbContext = JAXBContext . newInstance ( arg ) ;
JAXBElement < ? > <unk> = new JAXBElement ( arg ) ;
JAXBElement < Envelope > envelopeEl = new ObjectFactory ( arg ) . createEnvelope ( arg ) ;
JAXBElement < Envelope > envelopeEl = new ObjectFactory ( arg ) . createEnvelope ( arg ) ;
JAXBElement job = ( JAXBElement ) JAXBContext . newInstance ( arg ) . createUnmarshaller ( arg ) . unmarshal ( arg ) ;
JAXBElement job = ( JAXBElement ) JAXBContext . newInstance ( arg ) . createUnmarshaller ( arg ) . unmarshal ( arg ) ;
JAXBElement job = ( JAXBElement ) JAXBContext . newInstance ( arg ) . createUnmarshaller ( arg ) . unmarshal ( arg ) ;
JAXRSClientFactoryBean answer = new SpringJAXRSClientFactoryBean ( arg ) ;
JAXRSClientFactoryBean retval = null ;
<unk> answer = new SpringJAXRSServerFactoryBean ( arg ) ;
JMXEndpoint ep = ( JMXEndpoint ) context . getEndpoint ( arg ) ;
JMXEndpoint ep = ( JMXEndpoint ) context . getEndpoint ( arg ) ;
JMXEndpoint ep = ( JMXEndpoint ) context . getEndpoint ( arg ) ;
JMXEndpoint ep = ( JMXEndpoint ) context . getEndpoint ( arg ) ;
JMXEndpoint ep = ( JMXEndpoint ) context . getEndpoint ( arg ) ;
JMXEndpoint ep = ( JMXEndpoint ) context . getEndpoint ( arg ) ;
JMXEndpoint ep = ( JMXEndpoint ) context . getEndpoint ( arg ) ;
JMXEndpoint ep = ( JMXEndpoint ) context . getEndpoint ( arg ) ;
JMXEndpoint ep = ( JMXEndpoint ) context . getEndpoint ( arg ) ;
JMXEndpoint ep = ( JMXEndpoint ) context . getEndpoint ( arg ) ;
JMXEndpoint ep = ( JMXEndpoint ) context . getEndpoint ( arg ) ;
JMXEndpoint ep = ( JMXEndpoint ) context . getEndpoint ( arg ) ;
JMXEndpoint ep = ( JMXEndpoint ) context . getEndpoint ( arg ) ;
JMXEndpoint ep = ( JMXEndpoint ) context . getEndpoint ( arg ) ;
JMXEndpoint ep = ( JMXEndpoint ) context . getEndpoint ( arg ) ;
JMXEndpoint ep = ( JMXEndpoint ) context . getEndpoint ( arg ) ;
<unk> url ;
JOBS . decrementAndGet ( arg ) ;
JOBS . incrementAndGet ( arg ) ;
JarInputStream <unk> = new JarInputStream ( arg ) ;
JavaConfigApplicationContext jcApplicationContext = new JavaConfigApplicationContext ( arg ) ;
<unk> sender = configuration . <unk> ( arg ) ;
JavaMailSenderImpl answer = new JavaMailSenderImpl ( arg ) ;
JavaMailSenderImpl sender = configuration . <unk> ( arg ) ;
JavaMailSenderImpl sender = new JavaMailSenderImpl ( arg ) ;
JavaMailSenderImpl sender = new JavaMailSenderImpl ( arg ) ;
JavaMailSenderImpl sender = new JavaMailSenderImpl ( arg ) ;
JavaMailSenderImpl sender = new JavaMailSenderImpl ( arg ) ;
JavaMailSenderImpl sender = new JavaMailSenderImpl ( arg ) ;
JavaMailSenderImpl sender = new JavaMailSenderImpl ( arg ) ;
JavaMailSenderImpl sender = new JavaMailSenderImpl ( arg ) ;
JavaMailSenderImpl sender = new JavaMailSenderImpl ( arg ) ;
JavaMailSenderImpl sender = new JavaMailSenderImpl ( arg ) ;
JavaMailSenderImpl sender = new JavaMailSenderImpl ( arg ) ;
JavaMailSenderImpl sender = new JavaMailSenderImpl ( arg ) ;
JavaMailSenderImpl sender = new JavaMailSenderImpl ( arg ) ;
JdbcTemplate jdbcTemplate = new JdbcTemplate ( arg ) ;
JettyHttpOperationFailedException cause = assertIsInstanceOf ( arg ) ;
JettyHttpOperationFailedException exception ;
<unk> . this . context . stop ( arg ) ;
<unk> . this . context . stop ( arg ) ;
JmsComponent comp = jmsComponentClientAcknowledge ( arg ) ;
JmsComponent component = ( JmsComponent ) camelContext . getComponent ( arg ) ;
JmsComponent jmsComponent = jmsComponentClientAcknowledge ( arg ) ;
JmsComponent jmsComponent = jmsComponentClientAcknowledge ( arg ) ;
JmsComponent jmsComponent = jmsComponentClientAcknowledge ( arg ) ;
JmsComponent jmsComponent = jmsComponentClientAcknowledge ( arg ) ;
JmsComponent jmsComponent = jmsComponentClientAcknowledge ( arg ) ;
JmsComponent jmsComponent = jmsComponentClientAcknowledge ( arg ) ;
JmsComponent jmsComponent = jmsComponentClientAcknowledge ( arg ) ;
JmsComponent <unk> = jmsComponentClientAcknowledge ( arg ) ;
JmsEndpoint endpoint = ( JmsEndpoint ) container . resolveEndpoint ( arg ) ;
JmsEndpoint endpoint = ( JmsEndpoint ) resolveMandatoryEndpoint ( arg ) ;
JmsEndpoint endpoint = ( JmsEndpoint ) resolveMandatoryEndpoint ( arg ) ;
JmsEndpoint endpoint = ( JmsEndpoint ) resolveMandatoryEndpoint ( arg ) ;
JmsEndpoint endpoint = ( JmsEndpoint ) resolveMandatoryEndpoint ( arg ) ;
JmsEndpoint endpoint = ( JmsEndpoint ) resolveMandatoryEndpoint ( arg ) ;
JmsEndpoint endpoint = ( JmsEndpoint ) resolveMandatoryEndpoint ( arg ) ;
JmsEndpoint endpoint = ( JmsEndpoint ) resolveMandatoryEndpoint ( arg ) ;
JmsEndpoint endpoint = ( JmsEndpoint ) resolveMandatoryEndpoint ( arg ) ;
JmsEndpoint endpoint = ( JmsEndpoint ) resolveMandatoryEndpoint ( arg ) ;
JmsEndpoint endpoint = ( JmsEndpoint ) resolveMandatoryEndpoint ( arg ) ;
JmsEndpoint endpoint = ( JmsEndpoint ) resolveMandatoryEndpoint ( arg ) ;
JmsEndpoint endpoint = ( JmsEndpoint ) resolveMandatoryEndpoint ( arg ) ;
JmsEndpoint endpoint = ( JmsEndpoint ) resolveMandatoryEndpoint ( arg ) ;
JmsEndpoint endpoint = ( JmsEndpoint ) resolveMandatoryEndpoint ( arg ) ;
JmsEndpoint endpoint = ( JmsEndpoint ) resolveMandatoryEndpoint ( arg ) ;
JmsEndpoint endpoint = ( JmsEndpoint ) resolveMandatoryEndpoint ( arg ) ;
JmsEndpoint endpoint = ( JmsEndpoint ) resolveMandatoryEndpoint ( arg ) ;
JmsEndpoint endpoint = ( JmsEndpoint ) resolveMandatoryEndpoint ( arg ) ;
JmsEndpoint endpoint = ( JmsEndpoint ) resolveMandatoryEndpoint ( arg ) ;
JmsEndpoint endpoint = ( JmsEndpoint ) resolveMandatoryEndpoint ( arg ) ;
JmsEndpoint endpoint = ( JmsEndpoint ) resolveMandatoryEndpoint ( arg ) ;
JmsEndpoint endpoint = resolveMandatoryEndpoint ( arg ) ;
JmsEndpoint endpoint = resolveMandatoryEndpoint ( arg ) ;
JmsEndpoint endpoint = template . getResolvedEndpoint ( arg ) ;
JmsEndpoint endpoint = template . getResolvedEndpoint ( arg ) ;
JmsExchange exchange = endpoint . createExchange ( arg ) ;
JmsMessage body = null ;
JmsMessage message = ( JmsMessage ) exchange . getIn ( arg ) ;
JmsMessage out = ( JmsMessage ) exchange . getOut ( arg ) ;
JmsMessageExchangeHelper . populateExchange ( arg ) ;
JmsMessageExchangeHelper . setCorrelationId ( arg ) ;
JmsMessageExchangeHelper . setJMSReplyTo ( arg ) ;
JmsMessageHelper . populateExchange ( arg ) ;
JmsMessageHelper . setCorrelationId ( arg ) ;
JmsMessageHelper . setJMSReplyTo ( arg ) ;
<unk> messageType = JmsMessageHelper . <unk> ( arg ) ;
JmsOperations template = configuration . createJmsOperations ( arg ) ;
JmsOperations template = createJmsOperations ( arg ) ;
<unk> producer = endpoint . createProducer ( arg ) ;
JmsTemplate template = useVersion102 ? new <unk> ( arg ) : new CamelJmsTemplate ( arg ) ;
JmsTemplate template = useVersion102 ? new <unk> ( arg ) : new CamelJmsTemplate ( arg ) ;
JndiRegistry registry = new JndiRegistry ( arg ) ;
JndiRegistry registry = new JndiRegistry ( arg ) ;
<unk> <unk> = null ;
<unk> <unk> = getCamelContext ( arg ) . getRegistry ( arg ) . lookup ( arg ) ;
JournalEndpoint endpoint = resolveMandatoryEndpoint ( arg ) ;
JournalEndpoint endpoint = resolveMandatoryEndpoint ( arg ) ;
KeyStore <unk> = context . getRegistry ( arg ) . lookup ( arg ) ;
KeyStore <unk> = null ;
KeyValueHolder < ProcessorDefinition , InstrumentationProcessor > holder = wrappedProcessors . get ( arg ) ;
KeyValueHolder < ProcessorDefinition , InstrumentationProcessor > holder = wrappedProcessors . get ( arg ) ;
KeyValueHolder < ProcessorDefinition < ? > , InstrumentationProcessor > holder = wrappedProcessors . get ( arg ) ;
KeyValueHolder <unk> = new KeyValueHolder ( arg ) ;
KeyValueHolder foo = new KeyValueHolder ( arg ) ;
KeyValueHolder that = ( KeyValueHolder ) o ;
<unk> keyValuePairField = <unk> . get ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . error ( arg ) ;
LOG . error ( arg ) ;
LOG . error ( arg ) ;
LOG . error ( arg ) ;
LOG . error ( arg ) ;
LOG . error ( arg ) ;
LOG . error ( arg ) ;
LOG . error ( arg ) ;
LOG . error ( arg ) ;
LOG . fatal ( arg ) ;
LOG . fine ( arg ) ;
LOG . fine ( arg ) ;
LOG . info ( arg ) ;
LOG . info ( arg ) ;
LOG . info ( arg ) ;
LOG . info ( arg ) ;
LOG . info ( arg ) ;
LOG . info ( arg ) ;
LOG . info ( arg ) ;
LOG . info ( arg ) ;
LOG . info ( arg ) ;
LOG . info ( arg ) ;
LOG . info ( arg ) ;
LOG . info ( arg ) ;
LOG . info ( arg ) ;
LOG . info ( arg ) ;
LOG . info ( arg ) ;
LOG . info ( arg ) ;
LOG . info ( arg ) ;
LOG . info ( arg ) ;
LOG . info ( arg ) ;
LOG . info ( arg ) ;
LOG . info ( arg ) ;
LOG . info ( arg ) ;
LOG . info ( arg ) ;
LOG . info ( arg ) ;
LOG . info ( arg ) ;
LOG . info ( arg ) ;
LOG . info ( arg ) ;
LOG . info ( arg ) ;
LOG . info ( arg ) ;
LOG . info ( arg ) ;
LOG . info ( arg ) ;
LOG . info ( arg ) ;
LOG . info ( arg ) ;
LOG . info ( arg ) ;
LOG . info ( arg ) ;
LOG . info ( arg ) ;
LOG . info ( arg ) ;
LOG . info ( arg ) ;
LOG . info ( arg ) ;
LOG . info ( arg ) ;
LOG . info ( arg ) ;
LOG . info ( arg ) ;
LOG . info ( arg ) ;
LOG . info ( arg ) ;
LOG . info ( arg ) ;
LOG . info ( arg ) ;
LOG . info ( arg ) ;
LOG . info ( arg ) ;
LOG . info ( arg ) ;
LOG . info ( arg ) ;
LOG . info ( arg ) ;
LOG . info ( arg ) ;
LOG . info ( arg ) ;
LOG . info ( arg ) ;
LOG . info ( arg ) ;
LOG . trace ( arg ) ;
LOG . trace ( arg ) ;
LOG . trace ( arg ) ;
LOG . trace ( arg ) ;
LOG . trace ( arg ) ;
LOG . trace ( arg ) ;
LOG . trace ( arg ) ;
LOG . trace ( arg ) ;
LOG . trace ( arg ) ;
LOG . trace ( arg ) ;
LOG . trace ( arg ) ;
LOG . warn ( arg ) ;
LOG . warn ( arg ) ;
LOG . warn ( arg ) ;
LOG . warn ( arg ) ;
LOG . warn ( arg ) ;
LOG . warn ( arg ) ;
LOG . warn ( arg ) ;
LOG . warn ( arg ) ;
LOG . warn ( arg ) ;
LOG . warn ( arg ) ;
LOG . warn ( arg ) ;
LOG . warn ( arg ) ;
LOG . warn ( arg ) ;
LOG . warn ( arg ) ;
LOG . warn ( arg ) ;
LOG . warn ( arg ) ;
LOG . warn ( arg ) ;
LOG . warn ( arg ) ;
LOG . warn ( arg ) ;
LOG . warn ( arg ) ;
LOG . warn ( arg ) ;
LOG . warn ( arg ) ;
LOG . warn ( arg ) ;
LOG . warn ( arg ) ;
LOG . warn ( arg ) ;
LOG . warn ( arg ) ;
LOG . warn ( arg ) ;
LOG . warn ( arg ) ;
LOG . warn ( arg ) ;
LOG . warn ( arg ) ;
LOG . warn ( arg ) ;
LOG . warn ( arg ) ;
LOG . warn ( arg ) ;
LOG . warn ( arg ) ;
LOG . warn ( arg ) ;
LOG . warn ( arg ) ;
LOG . warn ( arg ) ;
LOG . warn ( arg ) ;
LOGGER . trace ( arg ) ;
LOGGER . warn ( arg ) ;
LRUCache cache = ( LRUCache ) consumers ;
LRUCache cache = ( LRUCache ) consumers ;
LRUCache cache = ( LRUCache ) consumers ;
LRUCache cache = ( LRUCache ) consumers ;
LRUCache cache = ( LRUCache ) producers ;
LRUCache cache = ( LRUCache ) producers ;
LRUCache cache = ( LRUCache ) producers ;
LRUCache cache = ( LRUCache ) producers ;
<unk> language = resolver . <unk> ( arg ) ;
LastActivityDate = lastActivityDate ;
LastModifiedById = lastModifiedById ;
LastModifiedDate = lastModifiedDate ;
LengthFieldBasedFrameDecoder <unk> = new LengthFieldBasedFrameDecoder ( arg ) ;
<unk> <unk> = <unk> ( arg ) ;
LinkedBlockingQueue < Exchange > blockingQueue = assertIsInstanceOf ( arg ) ;
LinkedBlockingQueue blockingQueue = assertIsInstanceOf ( arg ) ;
LinkedList < GenericFileExchange > exchanges = new LinkedList < GenericFileExchange > ( arg ) ;
List < ? > list = ( List < ? > ) ctx . getDelegate ( arg ) . parseListElement ( arg ) ;
List < ? > list = jpaTemplate . find ( arg ) ;
List < ? > list = registry . lookup ( arg ) ;
List < ? > results = jpaTemplate . find ( arg ) ;
List < ? > results = jpaTemplate . find ( arg ) ;
List < ? > results = jpaTemplate . find ( arg ) ;
List < ? > results = jpaTemplate . find ( arg ) ;
List < ? > results = jpaTemplate . find ( arg ) ;
List < ? > results = jpaTemplate . find ( arg ) ;
List < ? > rows = assertIsInstanceOf ( arg ) ;
List < Account > <unk> = new ArrayList < Account > ( arg ) ;
List < <unk> > list = jpaTemplate . find ( arg ) ;
List < <unk> > list = template . find ( arg ) ;
List < Annotation > [ ] annotations = new List [ m . getParameterTypes ( arg ) . length ] ;
List < <unk> > list = CamelContextHelper . getSingletonEndpoints ( arg ) ;
List < BundleDescriptor > bundles = new <unk> ( arg ) . <unk> ( arg ) ;
List < ChannelDownstreamHandler > encoders = consumer . getConfiguration ( arg ) . <unk> ( arg ) ;
List < ChannelDownstreamHandler > encoders = new ArrayList < ChannelDownstreamHandler > ( arg ) ;
List < ChannelDownstreamHandler > encodersCopy = new ArrayList < ChannelDownstreamHandler > ( arg ) ;
List < ChannelDownstreamHandler > <unk> = component . resolveAndRemoveReferenceParameter ( arg ) ;
List < ChannelUpstreamHandler > decoders = new ArrayList < ChannelUpstreamHandler > ( arg ) ;
List < ChannelUpstreamHandler > decoders = producer . getConfiguration ( arg ) . <unk> ( arg ) ;
List < ChannelUpstreamHandler > decodersCopy = new ArrayList < ChannelUpstreamHandler > ( arg ) ;
List < ChannelUpstreamHandler > <unk> = component . resolveAndRemoveReferenceParameter ( arg ) ;
List < Class < ? >> excluded = CastUtils . cast ( arg ) ;
List < Class < ? >> excluded = CastUtils . cast ( arg ) ;
List < Class < ? >> excluded = CastUtils . cast ( arg ) ;
List < Class < ? >> excluded = CastUtils . cast ( arg ) ;
List < Class < ? >> excluded = CastUtils . cast ( arg ) ;
List < Class < ? >> interfaces = CastUtils . cast ( arg ) ;
List < Class < ? >> res = CastUtils . cast ( arg ) ;
List < Class < ? extends Exception >> exceptions = new ArrayList < Class < ? extends Exception >> ( arg ) ;
List < Class < ? extends Exception >> exceptions = new ArrayList < Class < ? extends Exception >> ( arg ) ;
List < Class < ? extends Throwable >> answer = new ArrayList < Class < ? extends Throwable >> ( arg ) ;
List < Class < ? extends Throwable >> answer = new ArrayList < Class < ? extends Throwable >> ( arg ) ;
List < Class < ? extends Throwable >> exceptions = new ArrayList < Class < ? extends Throwable >> ( arg ) ;
List < Class < ? extends Throwable >> exceptions = new ArrayList < Class < ? extends Throwable >> ( arg ) ;
List < Class < Exception >> answer = new ArrayList < Class < Exception >> ( arg ) ;
List < Class < Exception >> answer = new ArrayList < Class < Exception >> ( arg ) ;
List < Class > answer = new ArrayList < Class > ( arg ) ;
List < Class > answer = new ArrayList < Class > ( arg ) ;
List < Class > <unk> = <unk> . <unk> ( arg ) ;
List < Class > classes = new ArrayList < Class > ( arg ) ;
List < Class > exceptions = getExceptionClasses ( arg ) ;
List < Class > exceptions = new ArrayList < Class > ( arg ) ;
List < Class > exceptions = new ArrayList < Class > ( arg ) ;
List < Class > list = <unk> ( arg ) ;
List < Class > <unk> = sfb1 . getResourceClasses ( arg ) ;
List < Class > <unk> = sfb2 . getResourceClasses ( arg ) ;
List < Class > types = new ArrayList < Class > ( arg ) ;
List < Consumer > order = dcc . getRouteStartupOrder ( arg ) ;
List < Consumer > order = dcc . getRouteStartupOrder ( arg ) ;
List < Consumer > order = dcc . getRouteStartupOrder ( arg ) ;
List < Customer > response = ( List < Customer > ) exchange . getOut ( arg ) . getBody ( arg ) ;
List < Customer > <unk> = ( List < Customer > ) cl . <unk> ( arg ) ;
List < <unk> > list = template . find ( arg ) ;
List < DBObject > resultList = ( List < DBObject > ) result ;
List < DBObject > resultList = ( List < DBObject > ) result ;
List < DBObject > resultList = ( List < DBObject > ) result ;
List < DataHolder > answer = new ArrayList < DataHolder > ( arg ) ;
List < DataHolder > answer = new ArrayList < DataHolder > ( arg ) ;
List < <unk> > list = te . getTwitter ( arg ) . getDirectMessages ( arg ) ;
List < Element > answer = new ArrayList < Element > ( arg ) ;
List < Element > body = new ArrayList < Element > ( arg ) ;
List < Element > elements = payload . getBody ( arg ) ;
List < Element > elements = payload . getBody ( arg ) ;
List < Element > elements = payload . getBody ( arg ) ;
List < Element > elements = payload . getBody ( arg ) ;
List < Element > elements = payload . getBody ( arg ) ;
List < Element > payloadBodyElements = <unk> ( arg ) ;
List < Element > payloadBodyElements = payload . getBody ( arg ) ;
List < Endpoint < E >> endpoints = new ArrayList < Endpoint < E >> ( arg ) ;
List < Endpoint > endpoints = new ArrayList < Endpoint > ( arg ) ;
List < Exchange > answer = new ArrayList < Exchange > ( arg ) ;
List < Exchange > exchanges = <unk> ( arg ) ;
List < Exchange > exchanges = endpoint . getExchanges ( arg ) ;
List < Exchange > exchanges = endpoint . getExchanges ( arg ) ;
List < Exchange > exchanges = endpoint . getExchanges ( arg ) ;
List < Exchange > exchanges = endpoint . getExchanges ( arg ) ;
List < Exchange > grouped = out . getProperty ( arg ) ;
List < Exchange > grouped = out . getProperty ( arg ) ;
List < Exchange > grouped = out . getProperty ( arg ) ;
List < Exchange > grouped = out . getProperty ( arg ) ;
List < Exchange > grouped = out . getProperty ( arg ) ;
List < Exchange > list = endpoint . getExchanges ( arg ) ;
List < Exchange > list = endpoint . getExchanges ( arg ) ;
List < Exchange > list = endpoint . getExchanges ( arg ) ;
List < Exchange > list = getExchangesReceived ( arg ) ;
List < Exchange > list = resultEndpoint . getReceivedExchanges ( arg ) ;
List < Exchange > polledExchanges = mock . getExchanges ( arg ) . get ( arg ) . getIn ( arg ) . getBody ( arg ) ;
List < Exchange > polledExchanges = mock . getExchanges ( arg ) . get ( arg ) . getIn ( arg ) . getBody ( arg ) ;
List < FilterProcessor > filters = <unk> . <unk> ( arg ) ;
List < FilterProcessor > filters = new ArrayList < FilterProcessor > ( arg ) ;
List < Future > <unk> = new ArrayList < Future > ( arg ) ;
List < Future > response = new ArrayList < Future > ( arg ) ;
List < Future > response = new ArrayList < Future > ( arg ) ;
List < GenericFile > files = new ArrayList < GenericFile > ( arg ) ;
List < GenericFileExchange < T >> exchanges = new ArrayList < GenericFileExchange < T >> ( arg ) ;
List < Handler > chain = new ArrayList < Handler > ( arg ) ;
List < HashMap < String , Object >> data = new ArrayList < HashMap < String , Object >> ( arg ) ;
List < HashMap < String , Object >> data = out . getOut ( arg ) . getBody ( arg ) ;
List < HashMap < String , Object >> data = out . getOut ( arg ) . getBody ( arg ) ;
List < Integer > resultList = CastUtils . cast ( arg ) ;
List < Interceptor > outInterceptors = new ArrayList < Interceptor > ( arg ) ;
List < InterceptorDefinition > interceptors = <unk> . getInterceptors ( arg ) ;
List < InterceptorDefinition > list = routeContext . getRoute ( arg ) . getInterceptors ( arg ) ;
List < InterceptorRef > interceptors = route . getInterceptors ( arg ) ;
List < InterceptorRef > list = output . getInterceptors ( arg ) ;
List < InterceptorType > interceptors = new LinkedList < InterceptorType > ( arg ) ;
List < List > l = new ArrayList < List > ( arg ) ;
List < List > parameters = new ArrayList < List > ( arg ) ;
List < <unk> > list = CamelContextHelper . getSingletonEndpoints ( arg ) ;
List < MBeanServer > servers = ( List < MBeanServer > ) MBeanServerFactory . findMBeanServer ( arg ) ;
List < MBeanServer > servers = ( List < MBeanServer > ) MBeanServerFactory . findMBeanServer ( arg ) ;
List < MBeanServer > servers = ( List < MBeanServer > ) MBeanServerFactory . findMBeanServer ( arg ) ;
List < MBeanServer > servers = ( List < MBeanServer > ) MBeanServerFactory . findMBeanServer ( arg ) ;
List < Map > lines = new ArrayList < Map > ( arg ) ;
List < Map > lines = new ArrayList < Map > ( arg ) ;
List < Map > maps = new ArrayList < Map > ( arg ) ;
List < Map > rows = mock . getReceivedExchanges ( arg ) . get ( arg ) . getIn ( arg ) . getBody ( arg ) ;
List < MethodBasedRouter > routers = new ArrayList < MethodBasedRouter > ( arg ) ;
List < Object > data = CastUtils . cast ( arg ) ;
List < Object > list = CastUtils . cast ( arg ) ;
List < Object > params = null ;
List < Object > results = CastUtils . cast ( arg ) ;
List < ObjectName > <unk> = new LinkedList ( arg ) ;
List < <unk> > list = getExceptions ( arg ) ;
List < OptionalParameter > optParams = createOptionalParameters ( arg ) ;
List < OptionalParameter > optParams = createOptionalParameters ( arg ) ;
List < OptionalParameter > optParams = createOptionalParameters ( arg ) ;
List < Person > list = ( List < Person > ) value ;
List < Person > list = ( List < Person > ) value ;
List < ProcessDefinition > list = jpaTemplate . find ( arg ) ;
List < ProcessDefinition > list = template . find ( arg ) ;
List < ProcessorDefinition < ? >> list = assertListSize ( arg ) ;
List < ProcessorDefinition < ? >> list = route . getOutputs ( arg ) ;
List < ProcessorDefinition < ? >> list = route . getOutputs ( arg ) ;
List < ProcessorDefinition < ? >> outputs = new ArrayList < ProcessorDefinition < ? >> ( arg ) ;
List < ProcessorDefinition < ? >> outputs = route . getOutputs ( arg ) ;
List < ProcessorDefinition < ? >> outputs = route . getOutputs ( arg ) ;
List < ProcessorDefinition < ? >> outputs = route . getOutputs ( arg ) ;
List < ProcessorDefinition < ? >> outputs = toData . outputs ;
List < ProcessorDefinition < ? >> outputs = toData . outputs ;
List < ProcessorDefinition < ? >> types = route . getOutputs ( arg ) ;
List < ProcessorDefinition > <unk> = <unk> . getOutputs ( arg ) ;
List < ProcessorDefinition > children = def . getOutputs ( arg ) ;
List < ProcessorDefinition > children = defn . getOutputs ( arg ) ;
List < ProcessorDefinition > children = parent . getOutputs ( arg ) ;
List < ProcessorDefinition > children = parent . getOutputs ( arg ) ;
List < ProcessorDefinition > children = processor . getOutputs ( arg ) ;
List < ProcessorDefinition > list = assertListSize ( arg ) ;
List < ProcessorDefinition > list = assertListSize ( arg ) ;
List < ProcessorDefinition > list = route . getOutputs ( arg ) ;
List < ProcessorDefinition > list = route . getOutputs ( arg ) ;
List < ProcessorDefinition > list = route . getOutputs ( arg ) ;
List < ProcessorDefinition > outputs = getOutputs ( arg ) ;
List < ProcessorDefinition > outputs = route . getOutputs ( arg ) ;
List < ProcessorDefinition > outputs = route . getOutputs ( arg ) ;
List < ProcessorDefinition > outputs = route . getOutputs ( arg ) ;
List < ProcessorDefinition > outputs = route . getOutputs ( arg ) ;
List < ProcessorDefinition > outputs = toData . outputs ;
List < ProcessorDefinition > outputs = toData . outputs ;
List < ProcessorDefinition > types = route . getOutputs ( arg ) ;
List < ProcessorExchangePair > pairs = <unk> ( arg ) ;
List < ProcessorType < ? >> list = assertListSize ( arg ) ;
List < ProcessorType < ? >> list = new ArrayList < ProcessorType < ? >> ( arg ) ;
List < ProcessorType < ? >> list = route . getOutputs ( arg ) ;
List < ProcessorType < ? >> list = route . getOutputs ( arg ) ;
List < ProcessorType < ? >> outputs = new ArrayList < ProcessorType < ? >> ( arg ) ;
List < ProcessorType < ? >> outputs = route . getOutputs ( arg ) ;
List < ProcessorType < ? >> <unk> = processor . getOutputs ( arg ) ;
List < ProcessorType > list = assertListSize ( arg ) ;
List < ProcessorType > list = route . getOutputs ( arg ) ;
List < ProcessorType > list = route . getProcessor ( arg ) ;
List < ProcessorType > outputs = new ArrayList < ProcessorType > ( arg ) ;
List < ProcessorType > outputs = node . getOutputs ( arg ) ;
List < ProcessorType > outputs = route . getOutputs ( arg ) ;
List < Route < Exchange >> routes = builder . getRouteList ( arg ) ;
List < Route < Exchange >> routes = builder . getRouteList ( arg ) ;
List < Route > list = getRouteList ( arg ) ;
List < Route > list = getRouteList ( arg ) ;
List < Route > routes = builder . getRouteList ( arg ) ;
List < Route > routes = builder . getRouteList ( arg ) ;
List < Route > routes = null ;
List < RouteDefinition > list = getRoutes ( arg ) ;
List < RouteDefinition > routes = context . getRouteDefinitions ( arg ) ;
List < RouteDefinition > routes = context . getRouteDefinitions ( arg ) ;
List < RouteNode > list = routeNodes . peek ( arg ) ;
List < RouteNode > list = routeNodes . peek ( arg ) ;
List < RouteNode > list = routeNodes . peek ( arg ) ;
List < RouteType > answer = new ArrayList < RouteType > ( arg ) ;
List < RouteType > list = camelContext . getRouteDefinitions ( arg ) ;
List < RouteType > list = context . getRouteDefinitions ( arg ) ;
List < RouteType > <unk> = routes . getRoutes ( arg ) ;
List < RouteType > routes = context . getRouteDefinitions ( arg ) ;
List < RouteType > routes = context . getRouteDefinitions ( arg ) ;
List < RouteType > routes = context . getRouteDefinitions ( arg ) ;
List < RouteType > routes = context . getRouteDefinitions ( arg ) ;
List < RouteType > routes = main . getRouteDefinitions ( arg ) ;
List < Runnable > answer = executorService . shutdownNow ( arg ) ;
List < Service > list = new ArrayList < Service > ( arg ) ;
List < Service > list = new ArrayList < Service > ( arg ) ;
List < SoapHeader > soapHeaders = ( List ) exchange . getIn ( arg ) . getHeader ( arg ) ;
List < SoapHeader > soapHeaders = ( List ) exchange . getIn ( arg ) . getHeader ( arg ) ;
List < Source > body = new ArrayList < Source > ( arg ) ;
List < Source > elements = payload . getBody ( arg ) ;
List < Source > elements = payload . getBody ( arg ) ;
List < Source > elements = payload . getBody ( arg ) ;
List < Source > elements = payload . getBody ( arg ) ;
List < Source > elements = payload . getBody ( arg ) ;
List < Source > <unk> = <unk> . getBody ( arg ) ;
List < SpringCamelContext > contextList = main . <unk> ( arg ) ;
List < Status > list = te . getProperties ( arg ) . getTwitter ( arg ) . getMentions ( arg ) ;
List < Status > list = te . getTwitter ( arg ) . getHomeTimeline ( arg ) ;
List < Status > list = te . getTwitter ( arg ) . getMentions ( arg ) ;
List < Status > list = te . getTwitter ( arg ) . getRetweetsOfMe ( arg ) ;
List < Status > list = te . getTwitter ( arg ) . getUserTimeline ( arg ) ;
List < String > args = new ArrayList < String > ( arg ) ;
List < String > channels = conf . getChannels ( arg ) ;
List < String > channels = conf . getChannels ( arg ) ;
List < String > channels = conf . getChannels ( arg ) ;
List < String > channels = conf . getChannels ( arg ) ;
List < String > channels = conf . getChannels ( arg ) ;
List < String > channels = conf . getChannels ( arg ) ;
List < String > children = ExchangeHelper . getMandatoryOutBody ( arg ) ;
List < String > children = ExchangeHelper . getMandatoryOutBody ( arg ) ;
List < String > keys = conf . getKeys ( arg ) ;
List < String > keys = conf . getKeys ( arg ) ;
List < String > keys = conf . getKeys ( arg ) ;
List < String > list = CastUtils . cast ( arg ) ;
List < String > roles = new ArrayList ( arg ) ;
List < String > users = ( List < String > ) future . get ( arg ) ;
List < String > users = ( List < String > ) future . get ( arg ) ;
List < String > val = ( List < String > ) entry . getValue ( arg ) ;
List < String > val = entry . getValue ( arg ) ;
List < <unk> > <unk> = qr . <unk> ( arg ) ;
List < URL > classpathURLs = new ArrayList < URL > ( arg ) ;
List answer = new ArrayList ( arg ) ;
List answer = new ArrayList ( arg ) ;
List artifacts = new ArrayList ( arg ) ;
List artifacts = new ArrayList ( arg ) ;
List authors = exp . evaluate ( arg ) ;
List authors = getMockEndpoint ( arg ) . getReceivedExchanges ( arg ) . get ( arg ) . getIn ( arg ) . getBody ( arg ) ;
List authors = getMockEndpoint ( arg ) . getReceivedExchanges ( arg ) . get ( arg ) . getIn ( arg ) . getBody ( arg ) ;
List bodies = Arrays . asList ( arg ) ;
List body = template . requestBody ( arg ) ;
List body = template . requestBody ( arg ) ;
List body = template . requestBody ( arg ) ;
List bodyList = new ArrayList ( arg ) ;
List bodyList = new ArrayList ( arg ) ;
List classpathURLs = new ArrayList ( arg ) ;
List classpathURLs = new ArrayList ( arg ) ;
List data = endpoint . getProcessingStrategy ( arg ) . poll ( arg ) ;
List data = new ArrayList ( arg ) ;
List data = new ArrayList ( arg ) ;
List decodersCopy = new ArrayList ( arg ) ;
List encodersCopy = new ArrayList ( arg ) ;
List entries = in . getBody ( arg ) ;
List exclusions = new ArrayList ( arg ) ;
List exclusions = new ArrayList ( arg ) ;
List foo = Arrays . asList ( arg ) ;
List foo = out . getOut ( arg ) . getHeader ( arg ) ;
List foo = out . getOut ( arg ) . getHeader ( arg ) ;
List foo = out . getOut ( arg ) . getHeader ( arg ) ;
List foo = out . getOut ( arg ) . getHeader ( arg ) ;
List foo = out . getOut ( arg ) . getHeader ( arg ) ;
List foo = out . getOut ( arg ) . getHeader ( arg ) ;
List foo = out . getOut ( arg ) . getHeader ( arg ) ;
List foo = out . getOut ( arg ) . getHeader ( arg ) ;
List <unk> = ( List ) exchange . getIn ( arg ) . getHeader ( arg ) ;
List list ;
List list = ( LinkedList ) results . get ( arg ) ;
List list = ( LinkedList ) results . get ( arg ) ;
List list = ( List ) ctx . getDelegate ( arg ) . parseListElement ( arg ) ;
List list = ( List ) headers . get ( arg ) ;
List list = ( List ) headers . get ( arg ) ;
List list = ( List ) value ;
List list = ( List ) value ;
List list = Arrays . asList ( arg ) ;
List list = DomConverter . toList ( arg ) ;
List list = ExchangeHelper . convertToType ( arg ) ;
List list = assertIsInstanceOf ( arg ) ;
List list = converter . convertTo ( arg ) ;
List list = ctx . getDelegate ( arg ) . parseListElement ( arg ) ;
List list = ctx . getDelegate ( arg ) . parseListElement ( arg ) ;
List list = ctx . getDelegate ( arg ) . parseListElement ( arg ) ;
List list = ctx . getDelegate ( arg ) . parseListElement ( arg ) ;
List list = <unk> ( arg ) ;
List list = evaluateQuery ( arg ) ;
List list = evaluateQuery ( arg ) ;
List list = exchange . getContext ( arg ) . getTypeConverter ( arg ) . convertTo ( arg ) ;
List list = expression . evaluate ( arg ) ;
List list = in . getBody ( arg ) ;
List list = jpaTemplate . find ( arg ) ;
List list = mock . getExchanges ( arg ) . get ( arg ) . getIn ( arg ) . getBody ( arg ) ;
List list = mock . getExchanges ( arg ) . get ( arg ) . getIn ( arg ) . getBody ( arg ) ;
List list = mock . getExchanges ( arg ) . get ( arg ) . getIn ( arg ) . getBody ( arg ) ;
List list = mock . getExchanges ( arg ) . get ( arg ) . getIn ( arg ) . getBody ( arg ) ;
List list = mock . getReceivedExchanges ( arg ) . get ( arg ) . getIn ( arg ) . getBody ( arg ) ;
List list = mock . getReceivedExchanges ( arg ) . get ( arg ) . getIn ( arg ) . getBody ( arg ) ;
List list = new ArrayList ( arg ) ;
List list = new ArrayList < String > ( arg ) ;
List list = new ArrayList < String > ( arg ) ;
List list = new LinkedList ( arg ) ;
List list = new LinkedList ( arg ) ;
List list = new LinkedList ( arg ) ;
List list = project . getTestClasspathElements ( arg ) ;
List list = project . getTestClasspathElements ( arg ) ;
List list = registry . lookup ( arg ) ;
List list = results . get ( arg ) ;
List <unk> = mock . getExchanges ( arg ) . get ( arg ) . getIn ( arg ) . getBody ( arg ) ;
List models = exchange . getIn ( arg ) . getBody ( arg ) ;
List names = exp . evaluate ( arg ) ;
List names = exp . evaluate ( arg ) ;
List names = exp . evaluate ( arg ) ;
List names = exp . evaluate ( arg ) ;
List names = exp . evaluate ( arg ) ;
List names = exp . evaluate ( arg ) ;
List names = exp . evaluate ( arg ) ;
List names = exp . evaluate ( arg ) ;
List names = exp . evaluate ( arg ) ;
List names = exp . evaluate ( arg ) ;
List names = exp . evaluate ( arg ) ;
List names = exp . evaluate ( arg ) ;
List names = exp . evaluate ( arg ) ;
List names = exp . evaluate ( arg ) ;
List names = exp . evaluate ( arg ) ;
List names = exp . evaluate ( arg ) ;
List names = exp . evaluate ( arg ) ;
List names = exp . evaluate ( arg ) ;
List names = exp . evaluate ( arg ) ;
List names = exp . evaluate ( arg ) ;
List names = exp . evaluate ( arg ) ;
List names = exp . evaluate ( arg ) ;
List names = exp . evaluate ( arg ) ;
List oobHdr = ( List ) ctx . get ( arg ) ;
List oobHdr = ( List ) responseContext . get ( arg ) ;
List oobHdr = ( List ) responseContext . get ( arg ) ;
List out = CollectionConverter . toList ( arg ) ;
List outInterceptors = new ArrayList ( arg ) ;
List parameter = in . getBody ( arg ) ;
List parameter = in . getBody ( arg ) ;
List parameter = in . getBody ( arg ) ;
List parameters = in . getBody ( arg ) ;
List parameters = in . getBody ( arg ) ;
List received = assertIsInstanceOf ( arg ) ;
List received = assertIsInstanceOf ( arg ) ;
List result = ( List ) mapper . <unk> ( arg ) ;
List result = out . getBody ( arg ) ;
List resultList = converter . convertTo ( arg ) ;
List results = jpaTemplate . find ( arg ) ;
List results = jpaTemplate . find ( arg ) ;
List results = jpaTemplate . find ( arg ) ;
List results = jpaTemplate . find ( arg ) ;
List results = jpaTemplate . find ( arg ) ;
List results = query . <unk> ( arg ) ;
List results = template . find ( arg ) ;
List results = template . find ( arg ) ;
List returnedCustomers = <unk> . getIn ( arg ) . getBody ( arg ) ;
List returnedCustomers = template . requestBody ( arg ) ;
List rows = ( List ) responses . get ( arg ) . get ( arg ) ;
List <unk> = DomConverter . toList ( arg ) ;
List to = exchange . getIn ( arg ) . getHeader ( arg ) ;
List to = exchange . getIn ( arg ) . getHeader ( arg ) ;
List tokens = new ArrayList ( arg ) ;
List value = ExchangeHelper . <unk> ( arg ) ;
List value = ExchangeHelper . getMandatoryProperty ( arg ) ;
List values = ( List ) map . get ( arg ) ;
List values = exchange . getIn ( arg ) . getHeader ( arg ) ;
<unk> it = chain . <unk> ( arg ) ;
LoadBalanceDefinition <unk> = ( LoadBalanceDefinition ) def ;
LoadBalanceType loadBalance = assertLoadBalancer ( arg ) ;
LoadBalanceType loadBalance = assertLoadBalancer ( arg ) ;
LoadBalanceType loadBalance = assertOneProcessorInstanceOf ( arg ) ;
LoadBalanceType loadBalance = assertOneProcessorInstanceOf ( arg ) ;
<unk> loadBalancer = routeContext . lookup ( arg ) ;
<unk> type = <unk> ( arg ) ;
<unk> paralleLoanBroker = client . <unk> ( arg ) ;
<unk> . <unk> ( arg ) ;
<unk> . info ( arg ) ;
Logger logger ;
Logger logger = new Logger ( arg ) ;
Logger logger = new Logger ( arg ) ;
LoggingErrorHandlerBuilder < E > answer = new LoggingErrorHandlerBuilder < E > ( arg ) ;
LoggingErrorHandlerBuilder errorHandler = ( LoggingErrorHandlerBuilder ) ctx . getBean ( arg ) ;
Long longValue = ExpressionHelper . <unk> ( arg ) ;
Long number = DomConverter . toLong ( arg ) ;
Long number = new DomConverter ( arg ) . toLong ( arg ) ;
<unk> lookup = null ;
LoopDefinition loop = getNodeFactory ( arg ) . createLoop ( arg ) ;
LoopDefinition loop = getNodeFactory ( arg ) . createLoop ( arg ) ;
MBeanServer mbeanServer = context . getManagementStrategy ( arg ) . getManagementAgent ( arg ) . getMBeanServer ( arg ) ;
MBeanServer mbeanServer = context . getManagementStrategy ( arg ) . getManagementAgent ( arg ) . getMBeanServer ( arg ) ;
MBeanServer mbeanServer = context . getManagementStrategy ( arg ) . getManagementAgent ( arg ) . getMBeanServer ( arg ) ;
MBeanServer mbeanServer = context . getManagementStrategy ( arg ) . getManagementAgent ( arg ) . getMBeanServer ( arg ) ;
MBeanServer mbeanServer = context . getManagementStrategy ( arg ) . getManagementAgent ( arg ) . getMBeanServer ( arg ) ;
MBeanServer mbeanServer = context . getManagementStrategy ( arg ) . getManagementAgent ( arg ) . getMBeanServer ( arg ) ;
MBeanServer mbeanServer = context . getManagementStrategy ( arg ) . getManagementAgent ( arg ) . getMBeanServer ( arg ) ;
MBeanServer mbeanServer = context . getManagementStrategy ( arg ) . getManagementAgent ( arg ) . getMBeanServer ( arg ) ;
MBeanServer mbeanServer = context . getManagementStrategy ( arg ) . getManagementAgent ( arg ) . getMBeanServer ( arg ) ;
MBeanServer mbeanServer = context . getManagementStrategy ( arg ) . getManagementAgent ( arg ) . getMBeanServer ( arg ) ;
MBeanServer mbeanServer = context . getManagementStrategy ( arg ) . getManagementAgent ( arg ) . getMBeanServer ( arg ) ;
MBeanServer mbeanServer = context . getManagementStrategy ( arg ) . getManagementAgent ( arg ) . getMBeanServer ( arg ) ;
MBeanServer mbeanServer = context . getManagementStrategy ( arg ) . getManagementAgent ( arg ) . getMBeanServer ( arg ) ;
MBeanServer mbeanServer = context . getManagementStrategy ( arg ) . getManagementAgent ( arg ) . getMBeanServer ( arg ) ;
MBeanServer mbeanServer = context . getManagementStrategy ( arg ) . getManagementAgent ( arg ) . getMBeanServer ( arg ) ;
MBeanServer mbeanServer = context . getManagementStrategy ( arg ) . getManagementAgent ( arg ) . getMBeanServer ( arg ) ;
MBeanServer mbeanServer = context . getManagementStrategy ( arg ) . getManagementAgent ( arg ) . getMBeanServer ( arg ) ;
MBeanServer mbeanServer = context . getManagementStrategy ( arg ) . getManagementAgent ( arg ) . getMBeanServer ( arg ) ;
MBeanServer mbeanServer = context . getManagementStrategy ( arg ) . getManagementAgent ( arg ) . getMBeanServer ( arg ) ;
MBeanServer mbeanServer = context . getManagementStrategy ( arg ) . getManagementAgent ( arg ) . getMBeanServer ( arg ) ;
MBeanServer mbeanServer = context . getManagementStrategy ( arg ) . getManagementAgent ( arg ) . getMBeanServer ( arg ) ;
MBeanServer mbeanServer = context . getManagementStrategy ( arg ) . getManagementAgent ( arg ) . getMBeanServer ( arg ) ;
MBeanServer mbeanServer = context . getManagementStrategy ( arg ) . getManagementAgent ( arg ) . getMBeanServer ( arg ) ;
MBeanServer mbeanServer = context . getManagementStrategy ( arg ) . getManagementAgent ( arg ) . getMBeanServer ( arg ) ;
MBeanServer mbeanServer = context . getManagementStrategy ( arg ) . getManagementAgent ( arg ) . getMBeanServer ( arg ) ;
MBeanServer mbeanServer = context . getManagementStrategy ( arg ) . getManagementAgent ( arg ) . getMBeanServer ( arg ) ;
MBeanServer mbeanServer = context . getManagementStrategy ( arg ) . getManagementAgent ( arg ) . getMBeanServer ( arg ) ;
MBeanServer mbeanServer = context . getManagementStrategy ( arg ) . getManagementAgent ( arg ) . getMBeanServer ( arg ) ;
MBeanServer mbeanServer = context . getManagementStrategy ( arg ) . getManagementAgent ( arg ) . getMBeanServer ( arg ) ;
MBeanServer mbeanServer = context . getManagementStrategy ( arg ) . getManagementAgent ( arg ) . getMBeanServer ( arg ) ;
MBeanServer mbeanServer = context . getManagementStrategy ( arg ) . getManagementAgent ( arg ) . getMBeanServer ( arg ) ;
MBeanServer mbeanServer = context . getManagementStrategy ( arg ) . getManagementAgent ( arg ) . getMBeanServer ( arg ) ;
MBeanServer mbeanServer = context . getManagementStrategy ( arg ) . getManagementAgent ( arg ) . getMBeanServer ( arg ) ;
MBeanServer mbeanServer = context . getManagementStrategy ( arg ) . getManagementAgent ( arg ) . getMBeanServer ( arg ) ;
MBeanServer mbeanServer = context . getManagementStrategy ( arg ) . getManagementAgent ( arg ) . getMBeanServer ( arg ) ;
MBeanServer mbeanServer = context . getManagementStrategy ( arg ) . getManagementAgent ( arg ) . getMBeanServer ( arg ) ;
MBeanServer mbeanServer = context . getManagementStrategy ( arg ) . getManagementAgent ( arg ) . getMBeanServer ( arg ) ;
MBeanServer mbeanServer = context . getManagementStrategy ( arg ) . getManagementAgent ( arg ) . getMBeanServer ( arg ) ;
MBeanServer mbeanServer = context . getManagementStrategy ( arg ) . getManagementAgent ( arg ) . getMBeanServer ( arg ) ;
MBeanServer mbeanServer = context . getManagementStrategy ( arg ) . getManagementAgent ( arg ) . getMBeanServer ( arg ) ;
MBeanServer mbeanServer = context . getManagementStrategy ( arg ) . getManagementAgent ( arg ) . getMBeanServer ( arg ) ;
MBeanServer mbeanServer = context . getManagementStrategy ( arg ) . getManagementAgent ( arg ) . getMBeanServer ( arg ) ;
MBeanServer mbeanServer = context . getManagementStrategy ( arg ) . getManagementAgent ( arg ) . getMBeanServer ( arg ) ;
MBeanServer mbeanServer = context . getManagementStrategy ( arg ) . getManagementAgent ( arg ) . getMBeanServer ( arg ) ;
MBeanServer mbeanServer = context . getManagementStrategy ( arg ) . getManagementAgent ( arg ) . getMBeanServer ( arg ) ;
MBeanServer mbeanServer = context . getManagementStrategy ( arg ) . getManagementAgent ( arg ) . getMBeanServer ( arg ) ;
MBeanServer mbeanServer = context . getManagementStrategy ( arg ) . getManagementAgent ( arg ) . getMBeanServer ( arg ) ;
MBeanServer mbeanServer = context . getManagementStrategy ( arg ) . getManagementAgent ( arg ) . getMBeanServer ( arg ) ;
MBeanServer mbeanServer = context . getManagementStrategy ( arg ) . getManagementAgent ( arg ) . getMBeanServer ( arg ) ;
MBeanServer mbeanServer = context . getManagementStrategy ( arg ) . getManagementAgent ( arg ) . getMBeanServer ( arg ) ;
MBeanServer mbeanServer = context . getManagementStrategy ( arg ) . getManagementAgent ( arg ) . getMBeanServer ( arg ) ;
MBeanServer mbeanServer = context . getManagementStrategy ( arg ) . getManagementAgent ( arg ) . getMBeanServer ( arg ) ;
MBeanServer mbeanServer = context . getManagementStrategy ( arg ) . getManagementAgent ( arg ) . getMBeanServer ( arg ) ;
MBeanServer mbeanServer = context . getManagementStrategy ( arg ) . getManagementAgent ( arg ) . getMBeanServer ( arg ) ;
MBeanServer mbeanServer = context . getManagementStrategy ( arg ) . getManagementAgent ( arg ) . getMBeanServer ( arg ) ;
MailBinding binding = ( MailBinding ) getExchange ( arg ) . getProperty ( arg ) ;
MailBinding binding = ( MailBinding ) getExchange ( arg ) . getProperty ( arg ) ;
MailConfiguration config = endpoint . getConfiguration ( arg ) ;
MailConfiguration config = getConfiguration ( arg ) . copy ( arg ) ;
MailExchange exchange = ( MailExchange ) exchanges . poll ( arg ) ;
MailExchange exchange = endpoint . createExchange ( arg ) ;
<unk> . run ( arg ) ;
ManagedComponent mc = new ManagedComponent ( arg ) ;
ManagedComponent mc = new ManagedComponent ( arg ) ;
ManagedPerformanceCounter counter = registeredCounters . get ( arg ) ;
ManagedService answer = null ;
ManagementStrategy answer = null ;
ManagementStrategy answer = null ;
Map . Entry entry = ( Entry ) iter . next ( arg ) ;
Map . Entry entry = getNext ( arg ) ;
Map . Entry entry = getNext ( arg ) ;
Map < ? , ? > map = registry . lookupByType ( arg ) ;
Map < ? , ? > map = registry . lookupByType ( arg ) ;
Map < Integer , Future < ? >> responses = new ConcurrentHashMap < Integer , Future < ? >> ( arg ) ;
Map < Integer , Future < Object >> responses = new ConcurrentHashMap < Integer , Future < Object >> ( arg ) ;
Map < Integer , Future < Object >> responses = new ConcurrentHashMap < Integer , Future < Object >> ( arg ) ;
Map < Integer , Future < Object >> responses = new ConcurrentHashMap < Integer , Future < Object >> ( arg ) ;
Map < Integer , Future < String >> responses = new ConcurrentHashMap < Integer , Future < String >> ( arg ) ;
Map < Integer , Future < String >> responses = new ConcurrentHashMap < Integer , Future < String >> ( arg ) ;
Map < Integer , Future < String >> responses = new ConcurrentHashMap < Integer , Future < String >> ( arg ) ;
Map < Integer , Future < String >> responses = new ConcurrentHashMap < Integer , Future < String >> ( arg ) ;
Map < Integer , Future < String >> responses = new ConcurrentHashMap < Integer , Future < String >> ( arg ) ;
Map < Integer , Future < String >> responses = new ConcurrentHashMap < Integer , Future < String >> ( arg ) ;
Map < Integer , Future < String >> responses = new ConcurrentHashMap < Integer , Future < String >> ( arg ) ;
Map < Integer , Future < String >> responses = new ConcurrentHashMap < Integer , Future < String >> ( arg ) ;
Map < Integer , Future > responses = new ConcurrentHashMap ( arg ) ;
Map < Integer , Future > responses = new ConcurrentHashMap ( arg ) ;
Map < Integer , Future > responses = new ConcurrentHashMap ( arg ) ;
Map < Integer , Future > responses = new ConcurrentHashMap ( arg ) ;
Map < Integer , Future > responses = new ConcurrentHashMap ( arg ) ;
Map < Integer , Future > responses = new ConcurrentHashMap ( arg ) ;
Map < Integer , Future > responses = new ConcurrentHashMap ( arg ) ;
Map < Integer , Future > responses = new ConcurrentHashMap ( arg ) ;
Map < Integer , Future > responses = new ConcurrentHashMap ( arg ) ;
Map < Integer , Future > responses = new ConcurrentHashMap ( arg ) ;
Map < Integer , Future > responses = new ConcurrentHashMap < Integer , Future > ( arg ) ;
Map < Integer , Future > responses = new ConcurrentHashMap < Integer , Future > ( arg ) ;
Map < Integer , Future > responses = new ConcurrentHashMap < Integer , Future > ( arg ) ;
Map < Integer , Future > responses = new ConcurrentHashMap < Integer , Future > ( arg ) ;
Map < Integer , Future > responses = new ConcurrentHashMap < Integer , Future > ( arg ) ;
Map < Integer , KeyValueHolder < Route , Consumer >> inputs = new TreeMap < Integer , KeyValueHolder < Route , Consumer >> ( arg ) ;
Map < Integer , List > results = new HashMap < Integer , List > ( arg ) ;
Map < Integer , SslSocketConnector > connectors = new HashMap < Integer , SslSocketConnector > ( arg ) ;
Map < Integer , StartupRouteHolder > inputs = new TreeMap < Integer , StartupRouteHolder > ( arg ) ;
Map < Object , Object > map = new LinkedHashMap < Object , Object > ( arg ) ;
Map < Object , Object > options = new LinkedHashMap < Object , Object > ( arg ) ;
Map < Object , Object > param = new HashMap < Object , Object > ( arg ) ;
Map < Object , Object > properties = new HashMap < Object , Object > ( arg ) ;
Map < Object , Object > properties = new HashMap < Object , Object > ( arg ) ;
Map < Object , Object > sorted = new LinkedHashMap < Object , Object > ( arg ) ;
Map < ProcessorDefinition , ManagedPerformanceCounter > registeredCounters = new HashMap < ProcessorDefinition , ManagedPerformanceCounter > ( arg ) ;
Map < ProcessorDefinition , PerformanceCounter > counterMap = new HashMap < ProcessorDefinition , PerformanceCounter > ( arg ) ;
Map < ProcessorDefinition , PerformanceCounter > registeredCounters = new HashMap < ProcessorDefinition , PerformanceCounter > ( arg ) ;
Map < ProcessorDefinition , PerformanceCounter > registeredCounters = new HashMap < ProcessorDefinition , PerformanceCounter > ( arg ) ;
Map < ProcessorDefinition < ? > , PerformanceCounter > registeredCounters = new HashMap < ProcessorDefinition < ? > , PerformanceCounter > ( arg ) ;
Map < Route , Consumer > inputs = new HashMap < Route , Consumer > ( arg ) ;
Map < String , AttributeValue > items = ( Map < String , AttributeValue > ) exchange . getIn ( arg ) . getHeader ( arg ) . get ( arg ) ;
Map < String , AttributeValue > items = ( Map < String , AttributeValue > ) exchange . getIn ( arg ) . getHeader ( arg ) . get ( arg ) ;
Map < String , CamelContext > beansOfType = CastUtils . cast ( arg ) ;
Map < String , CamelContext > beansOfType = CastUtils . cast ( arg ) ;
Map < String , Class > answer = new TreeMap < String , Class > ( arg ) ;
Map < String , ClassMap > all = <unk> ( arg ) ;
Map < String , Component > <unk> = camelContext . getRegistry ( arg ) . lookupByType ( arg ) ;
Map < String , <unk> > <unk> = getCamelContext ( arg ) . <unk> ( arg ) ;
Map < String , DataHandler > map = ( Map ) ctx . getMessageContext ( arg ) . get ( arg ) ;
Map < String , DozerBeanMapper > <unk> = new HashMap < String , DozerBeanMapper > ( arg ) ;
Map < String , Endpoint > map = endpoint . getCamelContext ( arg ) . getRegistry ( arg ) . lookupByType ( arg ) ;
Map < String , <unk> > <unk> = getContext ( arg ) . getRegistry ( arg ) . lookupByType ( arg ) ;
Map < String , EntityManagerFactory > map = getCamelContext ( arg ) . getRegistry ( arg ) . lookupByType ( arg ) ;
Map < String , <unk> > <unk> = getContext ( arg ) . getRegistry ( arg ) . lookupByType ( arg ) ;
Map < String , <unk> > <unk> = getContext ( arg ) . getRegistry ( arg ) . lookupByType ( arg ) ;
Map < String , <unk> > <unk> = getContext ( arg ) . getRegistry ( arg ) . lookupByType ( arg ) ;
Map < String , List < String >> cxfHeaders = ( Map ) <unk> . get ( arg ) ;
Map < String , List < String >> cxfHeaders = CastUtils . cast ( arg ) ;
Map < String , List < String >> <unk> = ( Map ) camelExchange . getProperty ( arg ) ;
Map < String , List < String >> headers = ( Map ) camelHeaders . get ( arg ) ;
Map < String , List < String >> <unk> = new HashMap < String , List < String >> ( arg ) ;
Map < String , List > <unk> = new HashMap < String , List > ( arg ) ;
Map < String , List > brothers = new HashMap < String , List > ( arg ) ;
Map < String , List > brothers = oldExchange . getIn ( arg ) . getBody ( arg ) ;
Map < String , ManagedAttributeInfo > attributes = new HashMap < String , ManagedAttributeInfo > ( arg ) ;
Map < String , Map > map = new HashMap < String , Map > ( arg ) ;
Map < String , MyService > collection = context . getRegistry ( arg ) . lookupByType ( arg ) ;
Map < String , Object > <unk> = CastUtils . cast ( arg ) ;
Map < String , Object > map = CastUtils . cast ( arg ) ;
Map < String , Object > map = new HashMap < String , Object > ( arg ) ;
Map < String , Object > maps = routeContext . lookupByType ( arg ) ;
Map < String , Object > model = factory . factory ( arg ) ;
Map < String , Object > model = factory . factory ( arg ) ;
Map < String , Object > model = getFactory ( arg ) . factory ( arg ) ;
Map < String , Object > model = getFactory ( arg ) . factory ( arg ) ;
Map < String , Object > model = new HashMap < String , Object > ( arg ) ;
Map < String , Object > <unk> = Collections . EMPTY_MAP ;
Map < String , Object > other = new HashMap < String , Object > ( arg ) ;
Map < String , Object > requestContext = ( Map ) exchange . getProperty ( arg ) ;
Map < String , Object > requestContext = new <unk> ( arg ) ;
Map < String , Object > row = new HashMap < String , Object > ( arg ) ;
Map < String , Object > sorted = new LinkedHashMap < String , Object > ( arg ) ;
Map < String , <unk> > map = getCamelContext ( arg ) . getRegistry ( arg ) . lookupByType ( arg ) ;
Map < String , Properties > info = ( Map < String , Properties > ) mbeanServer . <unk> ( arg ) ;
Map < String , String > body = CastUtils . cast ( arg ) ;
Map < String , String > body = CastUtils . cast ( arg ) ;
Map < String , String > body = CastUtils . cast ( arg ) ;
Map < String , String > body = CastUtils . cast ( arg ) ;
Map < String , String > body = CastUtils . cast ( arg ) ;
Map < String , String > body = CastUtils . cast ( arg ) ;
Map < String , String > body = CastUtils . cast ( arg ) ;
Map < String , String > body = CastUtils . cast ( arg ) ;
Map < String , String > body = CastUtils . cast ( arg ) ;
Map < String , String > body = CastUtils . cast ( arg ) ;
Map < String , String > header = CastUtils . cast ( arg ) ;
Map < String , String > <unk> = <unk> . getHeader ( arg ) ;
Map < String , String > properties = ( Map ) mbeanServer . getAttribute ( arg ) ;
Map < String , String > properties = ( Map < String , String > ) expression . evaluate ( arg ) ;
Map < String , String > properties = CastUtils . cast ( arg ) ;
Map < String , String > <unk> = endpoint . <unk> ( arg ) ;
Map < String , String > row = CastUtils . cast ( arg ) ;
Map < String , String > row = CastUtils . cast ( arg ) ;
Map < String , String > row = CastUtils . cast ( arg ) ;
Map < String , String > trailer = CastUtils . cast ( arg ) ;
Map < String , T > answer = Collections . EMPTY_MAP ;
Map < String , T > map = applicationContext . getBeansOfType ( arg ) ;
Map < String , ThreadPoolProfile > <unk> = context . getRegistry ( arg ) . lookupByType ( arg ) ;
Map < String , TraceFormatter > <unk> = camelContext . getRegistry ( arg ) . lookupByType ( arg ) ;
Map < String , Tracer > map = camelContext . getRegistry ( arg ) . lookupByType ( arg ) ;
Map < String , TransactionTemplate > map = getCamelContext ( arg ) . getRegistry ( arg ) . lookupByType ( arg ) ;
Map <unk> = message . <unk> ( arg ) ;
Map answer = new HashMap ( arg ) ;
Map answer = new HashMap ( arg ) ;
Map answer = new HashMap ( arg ) ;
Map <unk> = bean . getHeaders ( arg ) ;
Map <unk> = applicationContext . getBeansOfType ( arg ) ;
Map beansOfType = applicationContext . getBeansOfType ( arg ) ;
Map body = in . getBody ( arg ) ;
Map body = in . getBody ( arg ) ;
Map body = in . getBody ( arg ) ;
Map body = in . getBody ( arg ) ;
Map body = in . getBody ( arg ) ;
Map body = in . getBody ( arg ) ;
Map body = new HashMap ( arg ) ;
Map body = new HashMap ( arg ) ;
Map body1 = new HashMap ( arg ) ;
Map body1 = new HashMap ( arg ) ;
Map body2 = new HashMap ( arg ) ;
Map body2 = new HashMap ( arg ) ;
Map cacheSettings = URISupport . parseParameters ( arg ) ;
Map config = new HashMap ( arg ) ;
Map context = ( Map ) camelHeaders . get ( arg ) ;
Map foo = myBean . headers ;
Map <unk> = URISupport . parseParameters ( arg ) ;
Map header = ( Map ) list . get ( arg ) ;
Map header = list . get ( arg ) . getIn ( arg ) . getBody ( arg ) ;
Map headers = exchange . getIn ( arg ) . getHeaders ( arg ) ;
Map headers = exchange . getIn ( arg ) . getHeaders ( arg ) ;
Map headers = exchange . getIn ( arg ) . getHeaders ( arg ) ;
Map headers = exchange . getIn ( arg ) . getHeaders ( arg ) ;
Map headers = exchange . getIn ( arg ) . getHeaders ( arg ) ;
Map headers = exchange . getIn ( arg ) . getHeaders ( arg ) ;
Map headers = exchange . getIn ( arg ) . getHeaders ( arg ) ;
Map headers = exchange . getIn ( arg ) . getHeaders ( arg ) ;
Map headers = exchange . getOut ( arg ) . getHeaders ( arg ) ;
Map headers = exchange . getOut ( arg ) . getHeaders ( arg ) ;
Map headers = new HashMap ( arg ) ;
Map headers = new HashMap ( arg ) ;
Map headers = new HashMap ( arg ) ;
Map headers = new HashMap ( arg ) ;
Map headers = new HashMap ( arg ) ;
Map headers = new HashMap ( arg ) ;
Map headers = new HashMap ( arg ) ;
Map headers = new HashMap ( arg ) ;
Map headers = new HashMap ( arg ) ;
Map headers = new HashMap ( arg ) ;
Map headers = new HashMap ( arg ) ;
Map headers = new HashMap ( arg ) ;
Map headers = new HashMap ( arg ) ;
Map headers = new HashMap ( arg ) ;
Map headers = new HashMap ( arg ) ;
Map headers = new HashMap ( arg ) ;
Map headers = new HashMap ( arg ) ;
Map headers = new HashMap ( arg ) ;
Map headers = new HashMap ( arg ) ;
Map headers = new HashMap ( arg ) ;
Map headers = new HashMap ( arg ) ;
Map headers = new HashMap ( arg ) ;
Map headers = new HashMap ( arg ) ;
Map headers = new HashMap ( arg ) ;
Map headers = new HashMap ( arg ) ;
Map headers = new HashMap ( arg ) ;
Map headers = new HashMap ( arg ) ;
Map headers = new HashMap ( arg ) ;
Map headers = new HashMap ( arg ) ;
Map headers = new HashMap ( arg ) ;
Map headers = new HashMap ( arg ) ;
Map headers = new HashMap ( arg ) ;
Map headers = new HashMap ( arg ) ;
Map headers = new HashMap ( arg ) ;
Map headers = new HashMap ( arg ) ;
Map headers = new HashMap ( arg ) ;
Map headers = new HashMap ( arg ) ;
Map <unk> = new HashMap ( arg ) ;
Map m = <unk> . objectMapper . <unk> ( arg ) ;
Map map = ( Map ) mock . getReceivedExchanges ( arg ) . get ( arg ) . getIn ( arg ) . getBody ( arg ) . get ( arg ) ;
Map map = ( Map ) mock . getReceivedExchanges ( arg ) . get ( arg ) . getIn ( arg ) . getBody ( arg ) . get ( arg ) ;
Map map = ( Map ) mock . getReceivedExchanges ( arg ) . get ( arg ) . getIn ( arg ) . getBody ( arg ) . get ( arg ) ;
Map map = ( Map ) mock . getReceivedExchanges ( arg ) . get ( arg ) . getIn ( arg ) . getBody ( arg ) . get ( arg ) ;
Map map = ( Map ) result . getReceivedExchanges ( arg ) . get ( arg ) . getIn ( arg ) . getBody ( arg ) . get ( arg ) ;
Map map = ( Map ) result . getReceivedExchanges ( arg ) . get ( arg ) . getIn ( arg ) . getBody ( arg ) . get ( arg ) ;
Map map = ( Map ) result . getReceivedExchanges ( arg ) . get ( arg ) . getIn ( arg ) . getBody ( arg ) . get ( arg ) ;
Map map = ( Map ) value ;
Map map = Collections . <unk> ( arg ) ;
Map map = ExchangeHelper . createVariableMap ( arg ) ;
Map map = ExchangeHelper . createVariableMap ( arg ) ;
Map map = assertIsInstanceOf ( arg ) ;
Map map = context . getTypeConverter ( arg ) . convertTo ( arg ) ;
Map map = ctx . getDelegate ( arg ) . parseMapElement ( arg ) ;
Map map = ctx . getDelegate ( arg ) . parseMapElement ( arg ) ;
Map map = ctx . getDelegate ( arg ) . parseMapElement ( arg ) ;
Map map = ctx . <unk> ( arg ) ;
Map map = exchange . getContext ( arg ) . getTypeConverter ( arg ) . convertTo ( arg ) ;
Map map = exchange . getIn ( arg ) . getBody ( arg ) ;
Map map = mapper . readValue ( arg ) ;
Map map = mock . getReceivedExchanges ( arg ) . get ( arg ) . getIn ( arg ) . getHeaders ( arg ) ;
Map map = mock . getReceivedExchanges ( arg ) . get ( arg ) . getIn ( arg ) . getHeaders ( arg ) ;
Map map = mock . getReceivedExchanges ( arg ) . get ( arg ) . getIn ( arg ) . getHeaders ( arg ) ;
Map map = mock . getReceivedExchanges ( arg ) . get ( arg ) . getIn ( arg ) . getHeaders ( arg ) ;
Map map = mock . getReceivedExchanges ( arg ) . get ( arg ) . getIn ( arg ) . getHeaders ( arg ) ;
Map map = new CaseInsensitiveMap ( arg ) ;
Map map = new CaseInsensitiveMap ( arg ) ;
Map map = new HashMap ( arg ) ;
Map map = new HashMap ( arg ) ;
Map map = new HashMap ( arg ) ;
Map map = new HashMap ( arg ) ;
Map map = new HashMap ( arg ) ;
Map map = new HashMap ( arg ) ;
Map map = new HashMap ( arg ) ;
Map map = new HashMap ( arg ) ;
Map map = new HashMap ( arg ) ;
Map map = new HashMap ( arg ) ;
Map map = new HashMap ( arg ) ;
Map map = new HashMap ( arg ) ;
Map map = new HashMap ( arg ) ;
Map map = new HashMap ( arg ) ;
Map map = new HashMap ( arg ) ;
Map map = new HashMap ( arg ) ;
Map map = new HashMap ( arg ) ;
Map map = new LinkedHashMap ( arg ) ;
Map map = registry . lookupByType ( arg ) ;
Map map = registry . lookupByType ( arg ) ;
Map <unk> = ( Map ) mock . getReceivedExchanges ( arg ) . get ( arg ) . getIn ( arg ) . getBody ( arg ) . get ( arg ) ;
Map options = new HashMap ( arg ) ;
Map param = new HashMap ( arg ) ;
Map <unk> = request . getParameterMap ( arg ) ;
Map parameters = URISupport . parseParameters ( arg ) ;
Map parameters = URISupport . parseParameters ( arg ) ;
Map parameters = URISupport . parseParameters ( arg ) ;
Map parameters = new HashMap ( arg ) ;
Map parameters = new HashMap ( arg ) ;
Map parameters = new HashMap ( arg ) ;
Map parameters = new HashMap ( arg ) ;
Map parameters = new HashMap ( arg ) ;
Map parameters = new HashMap ( arg ) ;
Map parameters = new HashMap ( arg ) ;
Map parameters = new HashMap ( arg ) ;
Map parameters = new HashMap ( arg ) ;
Map parameters = new HashMap ( arg ) ;
Map parameters = new HashMap ( arg ) ;
Map payload = context . getTypeConverter ( arg ) . convertTo ( arg ) ;
Map <unk> = service . <unk> ( arg ) ;
Map printSettings = URISupport . parseParameters ( arg ) ;
Map <unk> = jdbcTemplate . <unk> ( arg ) ;
Map property = exchange . getProperty ( arg ) ;
Map property = exchange . getProperty ( arg ) ;
Map property = exchange . getProperty ( arg ) ;
Map rc = new HashMap ( arg ) ;
Map rc = new LinkedHashMap ( arg ) ;
Map row = ( Map ) list . get ( arg ) ;
Map row = ( Map ) list . get ( arg ) ;
Map row = ( Map ) list . get ( arg ) ;
Map row = ExchangeHelper . convertToMandatoryType ( arg ) ;
Map row = ExchangeHelper . convertToMandatoryType ( arg ) ;
Map row1 = assertIsInstanceOf ( arg ) ;
Map row1 = assertIsInstanceOf ( arg ) ;
Map <unk> = assertIsInstanceOf ( arg ) ;
Map services = <unk> ( arg ) . <unk> ( arg ) ;
Map <unk> = IntrospectionSupport . <unk> ( arg ) ;
Map trailer = ( Map ) list . get ( arg ) ;
Map trailer = data . get ( arg ) ;
Map trailer = list . get ( arg ) . getIn ( arg ) . getBody ( arg ) ;
Map types = routeContext . lookupByType ( arg ) ;
Map <unk> = ( Map ) converted ;
Map variableMap = ExchangeHelper . createVariableMap ( arg ) ;
Map variableMap = ExchangeHelper . createVariableMap ( arg ) ;
Map variableMap = ExchangeHelper . createVariableMap ( arg ) ;
MarkableInputStreamCache cache = new MarkableInputStreamCache ( arg ) ;
<unk> marshaller = getContext ( arg ) . <unk> ( arg ) ;
Message in = exchange . getIn ( arg ) ;
Message message = ExchangeHelper . getMandatoryInBody ( arg ) ;
Message message = ExchangeHelper . getMandatoryInBody ( arg ) ;
Message message = HL7Converter . <unk> ( arg ) ;
Message message = endpoint . getBinding ( arg ) . <unk> ( arg ) ;
Message message = exchange . createMessage ( arg ) ;
Message message = exchange . getIn ( arg ) ;
Message message = getBinding ( arg ) . <unk> ( arg ) ;
Message message = msg . getMessage ( arg ) ;
Message message = new GenericMessage ( arg ) ;
Message message = new GenericMessage < Object > ( arg ) ;
Message message = new <unk> ( arg ) ;
Message message = null ;
Message <unk> = newExchange . getOut ( arg ) ;
Message out = null ;
Message request = JmsMessageExchangeHelper . createMessage ( arg ) ;
Message request = JmsMessageHelper . createMessage ( arg ) ;
Message request = getRequest ( arg ) ;
Message response ;
Message response = JmsMessageExchangeHelper . createMessage ( arg ) ;
Message response = null ;
MessageChannel channelA = ( MessageChannel ) applicationContext . getBean ( arg ) ;
MessageChannel outputChannel = ( MessageChannel ) applicationContext . getBean ( arg ) ;
MessageChannel outputChannel = ( MessageChannel ) applicationContext . getBean ( arg ) ;
MessageChannel outputChannel = applicationContext . getBean ( arg ) ;
MessageChannel outputChannel = applicationContext . getBean ( arg ) ;
MessageChannel requestChannel = ( MessageChannel ) applicationContext . getBean ( arg ) ;
MessageChannel requestChannel = ( MessageChannel ) applicationContext . getBean ( arg ) ;
MessageChannel responseChannel = ( MessageChannel ) applicationContext . getBean ( arg ) ;
MessageDataFormatFeature feature = new MessageDataFormatFeature ( arg ) ;
MessageDataFormatFeature feature = new MessageDataFormatFeature ( arg ) ;
<unk> messageType = JaxbConverter . toMessageType ( arg ) ;
MessageHeader <unk> = new MessageHeader ( arg ) ;
<unk> repository = mandatoryLookup ( arg ) ;
MessageImpl answer = ( MessageImpl ) exchange . getInMessage ( arg ) ;
MessageImpl answer = new MessageImpl ( arg ) ;
MessageType answer = new MessageType ( arg ) ;
MessageType message = converter . convertTo ( arg ) ;
MessageType messageType = JaxbConverter . toMessageType ( arg ) ;
Method method = clazz . getMethod ( arg ) ;
Method method = null ;
MethodDispatcher <unk> = ( MethodDispatcher ) service . get ( arg ) ;
MethodInfo <unk> = new MethodInfo ( arg ) ;
MethodInvocation <unk> = beanInfo . createInvocation ( arg ) ;
MethodInvocation mi = beanInfo . createInvocation ( arg ) ;
MethodInvocation mi = info . createInvocation ( arg ) ;
MethodInvocation mi = info . createInvocation ( arg ) ;
MinaEndpoint endpoint = new MinaEndpoint ( arg ) ;
MinaExchange exchange = endpoint . createExchange ( arg ) ;
MinaExchange exchange = new MinaExchange ( arg ) ;
MockEndpoint . assertIsSatisfied ( arg ) ;
MockEndpoint . assertIsSatisfied ( arg ) ;
MockEndpoint . assertIsSatisfied ( arg ) ;
MockEndpoint . assertIsSatisfied ( arg ) ;
MockEndpoint . expectsMessageCount ( arg ) ;
MockEndpoint endpoint = ( MockEndpoint ) camelContext . getEndpoint ( arg ) ;
MockEndpoint endpoint = ( MockEndpoint ) camelContext . getEndpoint ( arg ) ;
MockEndpoint endpoint = ( MockEndpoint ) context . getEndpoint ( arg ) ;
MockEndpoint endpoint = ( MockEndpoint ) context . getEndpoint ( arg ) ;
MockEndpoint endpoint = ( MockEndpoint ) context . getEndpoint ( arg ) ;
MockEndpoint endpoint = ( MockEndpoint ) context . getEndpoint ( arg ) ;
MockEndpoint endpoint = ( MockEndpoint ) context . getEndpoint ( arg ) ;
MockEndpoint ep = ( MockEndpoint ) context . getEndpoint ( arg ) ;
MockEndpoint ep = ( MockEndpoint ) context . getEndpoint ( arg ) ;
MockEndpoint ep = ( MockEndpoint ) context . getEndpoint ( arg ) ;
MockEndpoint ep = ( MockEndpoint ) context . getEndpoint ( arg ) ;
MockEndpoint ep = ( MockEndpoint ) context . getEndpoint ( arg ) ;
MockEndpoint error = ( MockEndpoint ) context . getEndpoint ( arg ) ;
MockEndpoint error = ( MockEndpoint ) context . getEndpoint ( arg ) ;
MockEndpoint mock = ( MockEndpoint ) context . getEndpoint ( arg ) ;
MockEndpoint mock = ( MockEndpoint ) context . getEndpoint ( arg ) ;
MockEndpoint mock = ( MockEndpoint ) ctx . getEndpoint ( arg ) ;
MockEndpoint mock = ( MockEndpoint ) ctx . getEndpoint ( arg ) ;
MockEndpoint mock = ( MockEndpoint ) ctx . getEndpoint ( arg ) ;
MockEndpoint mock = ( MockEndpoint ) ctx . getEndpoint ( arg ) ;
MockEndpoint mock = ( MockEndpoint ) ctx . getEndpoint ( arg ) ;
MockEndpoint mock = ( MockEndpoint ) ctx . getEndpoint ( arg ) ;
MockEndpoint mock = ( MockEndpoint ) ctx . getEndpoint ( arg ) ;
MockEndpoint mock = setupMock ( arg ) ;
MockEndpoint mock = setupMock ( arg ) ;
MockEndpoint mock = setupMock ( arg ) ;
MockEndpoint mock = setupMock ( arg ) ;
MockEndpoint mock = setupMock ( arg ) ;
MockEndpoint mock = setupMock ( arg ) ;
MockEndpoint mock = setupMock ( arg ) ;
MockEndpoint mock = setupMock ( arg ) ;
MockEndpoint mock = setupMock ( arg ) ;
MockEndpoint mock = setupMock ( arg ) ;
MockEndpoint mock = setupMock ( arg ) ;
MockEndpoint mockEndpoint = new MockEndpoint ( arg ) ;
MockEndpoint mockEndpoint = resolveMandatoryEndpoint ( arg ) ;
MockEndpoint mockEndpoint = resolveMandatoryEndpoint ( arg ) ;
MockEndpoint mockSearchEndpoint = new MockEndpoint ( arg ) ;
MockEndpoint mockSearchEndpoint = new MockEndpoint ( arg ) ;
MockEndpoint mockSearchEndpoint = new MockEndpoint ( arg ) ;
MockEndpoint mockSearchEndpoint = new MockEndpoint ( arg ) ;
MockEndpoint out = super . getMockEndpoint ( arg ) ;
MockEndpoint <unk> = ( MockEndpoint ) context . getEndpoint ( arg ) ;
MockEndpoint <unk> = ( MockEndpoint ) context . getEndpoint ( arg ) ;
MockEndpoint <unk> = ( MockEndpoint ) context . getEndpoint ( arg ) ;
MockEndpoint <unk> = ( MockEndpoint ) context . getEndpoint ( arg ) ;
MockEndpoint result = ( MockEndpoint ) context . getEndpoint ( arg ) ;
MockEndpoint result = ( MockEndpoint ) context . getEndpoint ( arg ) ;
MockEndpoint result = ( MockEndpoint ) context . getEndpoint ( arg ) ;
MockEndpoint result = TestSupport . resolveMandatoryEndpoint ( arg ) ;
MockEndpoint result = resolveMandatoryEndpoint ( arg ) ;
MockEndpoint resultEndpoint = ( MockEndpoint ) context . getEndpoint ( arg ) ;
MockEndpoint resultEndpoint = ( MockEndpoint ) context . getEndpoint ( arg ) ;
MockEndpoint resultEndpoint = ( MockEndpoint ) context . getEndpoint ( arg ) ;
MockEndpoint resultEndpoint = ( MockEndpoint ) context . getEndpoint ( arg ) ;
MockEndpoint resultEndpoint = ( MockEndpoint ) context . getEndpoint ( arg ) ;
MockEndpoint resultEndpoint = ( MockEndpoint ) context . getEndpoint ( arg ) ;
MockEndpoint resultEndpoint = ( MockEndpoint ) context . getEndpoint ( arg ) ;
MockEndpoint resultEndpoint = ( MockEndpoint ) context . getEndpoint ( arg ) ;
MockEndpoint resultEndpoint = ( MockEndpoint ) context . getEndpoint ( arg ) ;
MockEndpoint resultEndpoint = ( MockEndpoint ) context . getEndpoint ( arg ) ;
MockEndpoint resultEndpoint = ( MockEndpoint ) context . getEndpoint ( arg ) ;
MockEndpoint resultEndpoint = ( MockEndpoint ) context . getEndpoint ( arg ) ;
MockEndpoint resultEndpoint = ( MockEndpoint ) context . getEndpoint ( arg ) ;
MockEndpoint resultEndpoint = ( MockEndpoint ) context . getEndpoint ( arg ) ;
MockEndpoint resultEndpoint = ( MockEndpoint ) ctx . getEndpoint ( arg ) ;
MockEndpoint resultEndpoint = ( MockEndpoint ) resolveMandatoryEndpoint ( arg ) ;
MockEndpoint resultEndpoint = ( MockEndpoint ) resolveMandatoryEndpoint ( arg ) ;
MockEndpoint resultEndpoint = resolveMandatoryEndpoint ( arg ) ;
MockEndpoint resultEndpoint = resolveMandatoryEndpoint ( arg ) ;
MockEndpoint resultEndpoint = resolveMandatoryEndpoint ( arg ) ;
MockEndpoint resultEndpoint = resolveMandatoryEndpoint ( arg ) ;
MockEndpoint resultEndpoint = resolveMandatoryEndpoint ( arg ) ;
MockEndpoint resultEndpoint = resolveMandatoryEndpoint ( arg ) ;
MockEndpoint resultEndpoint = resolveMandatoryEndpoint ( arg ) ;
MockEndpoint resultEndpoint = resolveMandatoryEndpoint ( arg ) ;
MockEndpoint resultEndpoint = resolveMandatoryEndpoint ( arg ) ;
MockEndpoint resultEndpoint = resolveMandatoryEndpoint ( arg ) ;
MockEndpoint resultEndpoint = resolveMandatoryEndpoint ( arg ) ;
MockEndpoint resultEndpoint = resolveMandatoryEndpoint ( arg ) ;
MockEndpoint success = ( MockEndpoint ) context . getEndpoint ( arg ) ;
MockEndpoint success = ( MockEndpoint ) context . getEndpoint ( arg ) ;
MockEndpoint success = ( MockEndpoint ) context . getEndpoint ( arg ) ;
MockEndpoint success = ( MockEndpoint ) context . getEndpoint ( arg ) ;
MockEndpoint success = ( MockEndpoint ) context . getEndpoint ( arg ) ;
MockEndpoint success = ( MockEndpoint ) context . getEndpoint ( arg ) ;
<unk> <unk> = null ;
MulticastProcessor mp = endpoint . <unk> ( arg ) ;
MulticastProcessor mp = getMulticastProcessor ( arg ) ;
Multiplier multiplier = ( Multiplier ) context . getBean ( arg ) ;
Multiplier multiplier = ( Multiplier ) context . getBean ( arg ) ;
MyBean myBean = context . getRegistry ( arg ) . lookup ( arg ) ;
MyBean myBean = context . getRegistry ( arg ) . lookup ( arg ) ;
<unk> bean = context . getTypeConverter ( arg ) . convertTo ( arg ) ;
MyCompletionProcessor myCompletionProcessor = context . getRegistry ( arg ) . lookup ( arg ) ;
MyCompletionProcessor myCompletionProcessor = context . getRegistry ( arg ) . lookup ( arg ) ;
MyCompletionProcessor myCompletionProcessor = context . getRegistry ( arg ) . lookup ( arg ) ;
MyCompletionProcessor myCompletionProcessor = context . getRegistry ( arg ) . lookup ( arg ) ;
MyCoolBean cool = ( MyCoolBean ) applicationContext . getBean ( arg ) ;
MyErrorBean bean = context . getRegistry ( arg ) . lookup ( arg ) ;
MyErrorBean bean = context . getRegistry ( arg ) . lookup ( arg ) ;
MyExchange actual = endpoint . createExchange ( arg ) ;
MyExchange actual = endpoint . toExchangeType ( arg ) ;
MyPolicy foo = context . getRegistry ( arg ) . lookup ( arg ) ;
MyPolicy foo = context . getRegistry ( arg ) . lookup ( arg ) ;
MyPolicy foo = context . getRegistry ( arg ) . lookup ( arg ) ;
MyPolicy foo = context . getRegistry ( arg ) . lookup ( arg ) ;
MyProcessor myProcessor = ( MyProcessor ) applicationContext . getBean ( arg ) ;
MyProduceBean bean = context . getRegistry ( arg ) . lookup ( arg ) ;
MyProduceBean bean = context . getRegistry ( arg ) . lookup ( arg ) ;
MyProduceBean bean = context . getRegistry ( arg ) . lookup ( arg ) ;
MyProduceBean bean = context . getRegistry ( arg ) . lookup ( arg ) ;
MyProduceBean bean2 = context . getRegistry ( arg ) . lookup ( arg ) ;
MyProduceBean bean2 = context . getRegistry ( arg ) . lookup ( arg ) ;
<unk> producer = context . getRegistry ( arg ) . lookup ( arg ) ;
MyProxySender <unk> = ( MyProxySender ) ac . getBean ( arg ) ;
MyProxySender sender = ( MyProxySender ) ac . getBean ( arg ) ;
MyProxySender sender = ( MyProxySender ) ac . getBean ( arg ) ;
MyProxySender sender = ( MyProxySender ) ac . getBean ( arg ) ;
MyService myService = context . getRegistry ( arg ) . lookup ( arg ) ;
<unk> <unk> = assertIsInstanceOf ( arg ) ;
Name = name ;
Name = name ;
<unk> < Processor > <unk> = context . getRoutes ( arg ) . get ( arg ) . <unk> ( arg ) ;
NettyHelper . writeBody ( arg ) ;
NettyHelper . writeBody ( arg ) ;
NettyHelper . writeBodySync ( arg ) ;
NettyHelper . writeBodySync ( arg ) ;
NettyPayloadHelper . <unk> ( arg ) ;
NettyPayloadHelper . <unk> ( arg ) ;
NettyServerBootstrapConfiguration configuration = new NettyServerBootstrapConfiguration ( arg ) ;
NetworkInterface <unk> = NetworkInterface . getByName ( arg ) ;
NewFileComponent comp = new NewFileComponent ( arg ) ;
NewFileComponent comp = new NewFileComponent ( arg ) ;
NewFileEndpoint endpoint = new NewFileEndpoint ( arg ) ;
NewFileEndpoint endpoint = resolveMandatoryEndpoint ( arg ) ;
NewFileEndpoint endpoint = resolveMandatoryEndpoint ( arg ) ;
NewFileEndpoint fileEndpoint = Assertions . assertInstanceOf ( arg ) ;
NewFileEndpoint fileEndpoint = resolveMandatoryEndpoint ( arg ) ;
NoTypeConversionAvailableException cause = assertIsInstanceOf ( arg ) ;
NoTypeConversionAvailableException cause = assertIsInstanceOf ( arg ) ;
Node node = session . getNodeByUUID ( arg ) ;
Node node = session . getNodeByUUID ( arg ) ;
Node node = session . getNodeByUUID ( arg ) ;
NodeState nodeState = null ;
<unk> <unk> = createStrictMock ( arg ) ;
NotifierBuilder notifier = new NotifierBuilder ( arg ) . from ( arg ) . whenSatisfied ( arg ) . and ( arg ) . from ( arg ) . whenExactlyDone ( arg ) . <unk> ( arg ) . create ( arg ) ;
NotifierBuilder notifier = new NotifierBuilder ( arg ) . from ( arg ) . whenSatisfied ( arg ) . create ( arg ) ;
NotifyBuilder event = event ( arg ) . whenBodiesReceived ( arg ) . create ( arg ) ;
NotifyBuilder event = event ( arg ) . whenExactlyDone ( arg ) . create ( arg ) ;
NotifyBuilder notify = new NotifyBuilder ( arg ) . wereSentTo ( arg ) . create ( arg ) ;
NotifyBuilder notify = new NotifyBuilder ( arg ) . wereSentTo ( arg ) . create ( arg ) ;
NotifyBuilder notify = new NotifyBuilder ( arg ) . wereSentTo ( arg ) . wereSentTo ( arg ) . create ( arg ) ;
NotifyBuilder notify = new NotifyBuilder ( arg ) . whenBodiesReceived ( arg ) . create ( arg ) ;
NotifyBuilder notify = new NotifyBuilder ( arg ) . whenDone ( arg ) . create ( arg ) ;
NotifyBuilder notify = new NotifyBuilder ( arg ) . whenDone ( arg ) . create ( arg ) ;
NotifyBuilder notify = new NotifyBuilder ( arg ) . whenDone ( arg ) . create ( arg ) ;
NotifyBuilder notify = new NotifyBuilder ( arg ) . whenDone ( arg ) . create ( arg ) ;
NotifyBuilder notify = new NotifyBuilder ( arg ) . whenDone ( arg ) . create ( arg ) ;
NotifyBuilder notify = new NotifyBuilder ( arg ) . whenExactlyDone ( arg ) . create ( arg ) ;
NotifyBuilder notify = new NotifyBuilder ( arg ) . <unk> ( arg ) . create ( arg ) ;
ON_EXCEPTION_RETRY . incrementAndGet ( arg ) ;
ON_EXCEPTION_RETRY . incrementAndGet ( arg ) ;
ON_EXCEPTION_RETRY . incrementAndGet ( arg ) ;
ON_EXCEPTION_RETRY . incrementAndGet ( arg ) ;
ON_EXCEPTION_RETRY . incrementAndGet ( arg ) ;
ON_EXCEPTION_RETRY . incrementAndGet ( arg ) ;
Object [ ] mBeans = mbeans . toArray ( arg ) ;
Object [ ] result ;
Object [ ] result = ( Object [ ] ) exchange . getIn ( arg ) . getBody ( arg ) ;
Object answer = getUnmarshaller ( arg ) . unmarshal ( arg ) ;
Object answer = null ;
Object bean = context . getRegistry ( arg ) . lookup ( arg ) ;
Object bean = context . getRegistry ( arg ) . lookup ( arg ) ;
Object bean = context . getRegistry ( arg ) . lookup ( arg ) ;
Object bean = context . getRegistry ( arg ) . lookup ( arg ) ;
Object body ;
Object body ;
Object body = exchange . getIn ( arg ) . getBody ( arg ) ;
Object body = exchange . getOut ( arg ) . getBody ( arg ) ;
Object body = <unk> ( arg ) ;
Object body = template . sendBody ( arg ) ;
Object body = template . sendBody ( arg ) ;
Object content = null ;
Object decoded = configuration . isUrlDecodeHeaders ( arg ) ? URLDecoder . decode ( arg ) : extracted . toString ( arg ) ;
Object decoded = configuration . isUrlDecodeHeaders ( arg ) ? URLDecoder . decode ( arg ) : extracted . toString ( arg ) ;
Object destination = replyToDestination ;
Object <unk> = null ;
Object firstExchangeTimestampObj = mBeanServer . getAttribute ( arg ) ;
Object firstExchangeTimestampObj = mBeanServer . getAttribute ( arg ) ;
Object graph ;
Object header = exchange . getIn ( arg ) . getHeaders ( arg ) . getHeader ( arg ) ;
Object instance = null ;
Object <unk> = answer . <unk> ( arg ) ;
Object key = <unk> . evaluate ( arg ) ;
Object <unk> = ( Integer ) <unk> . get ( arg ) ;
Object lookedUpBean = context . getRegistry ( arg ) . lookup ( arg ) ;
Object lookedUpBean = context . getRegistry ( arg ) . lookup ( arg ) ;
Object lookedUpBean = context . getRegistry ( arg ) . lookup ( arg ) ;
Object lookedUpBean = context . getRegistry ( arg ) . lookup ( arg ) ;
Object lookedUpBean = context . getRegistry ( arg ) . lookup ( arg ) ;
Object lookup = context . getRegistry ( arg ) . lookup ( arg ) ;
Object lookup = context . getRegistry ( arg ) . lookup ( arg ) ;
Object <unk> = <unk> ( arg ) ;
Object me = <unk> ( arg ) ;
Object <unk> = value ;
Object out = responses . get ( arg ) . get ( arg ) ;
Object out = responses . get ( arg ) . get ( arg ) ;
Object out = template . requestBody ( arg ) ;
Object out = template . requestBody ( arg ) ;
Object out = template . requestBody ( arg ) ;
Object <unk> = camelContext . getRegistry ( arg ) . lookup ( arg ) ;
Object pool = context . getExecutorServiceManager ( arg ) . getDefaultExecutorService ( arg ) ;
Object ref = context . getRegistry ( arg ) . lookup ( arg ) ;
Object <unk> = <unk> . <unk> ( arg ) ;
Object response = null ;
Object response = template . sendBody ( arg ) ;
Object response = template . sendBody ( arg ) ;
Object result ;
Object result = ( Object ) template . requestBody ( arg ) ;
Object result = ( Object ) template . sendBody ( arg ) ;
Object result = cache . get ( arg ) ;
Object result = evaluate ( arg ) ;
Object result = getDefaultValueforPrimitive ( arg ) ;
Object result = getDefaultValueforPrimitive ( arg ) ;
Object result = getDefaultValueforPrimitive ( arg ) ;
Object result = null ;
Object result = sendHeaders ( arg ) ;
Object result = sendHeaders ( arg ) ;
Object result = sendHeaders ( arg ) ;
Object result = sendHeaders ( arg ) ;
Object result = sendHeaders ( arg ) ;
Object result = sendHeaders ( arg ) ;
Object result = sendHeaders ( arg ) ;
Object result = sendHeaders ( arg ) ;
Object result = sendHeaders ( arg ) ;
Object result = sendHeaders ( arg ) ;
Object result = sendHeaders ( arg ) ;
Object result = sendHeaders ( arg ) ;
Object result = sendHeaders ( arg ) ;
Object result = sendHeaders ( arg ) ;
Object result = sendHeaders ( arg ) ;
Object result = sendHeaders ( arg ) ;
Object result = sendHeaders ( arg ) ;
Object result = sendHeaders ( arg ) ;
Object result = sendHeaders ( arg ) ;
Object result = sendHeaders ( arg ) ;
Object result = sendHeaders ( arg ) ;
Object result = sendHeaders ( arg ) ;
Object result = sendHeaders ( arg ) ;
Object result = template . requestBody ( arg ) ;
Object result = template . sendBody ( arg ) ;
Object result = template . sendBody ( arg ) ;
Object result = template . sendBody ( arg ) ;
Object result = template . sendBody ( arg ) ;
Object result = template . sendBody ( arg ) ;
Object result = template . sendBodyAndHeader ( arg ) ;
Object result = template . sendBodyAndHeader ( arg ) ;
Object <unk> = <unk> . getHeader ( arg ) . <unk> ( arg ) ;
Object service = context . getRegistry ( arg ) . lookup ( arg ) ;
Object <unk> = type . cast ( arg ) ;
Object traceState = null ;
Object unmarshalled = unmarshaller . unmarshal ( arg ) ;
Object unmarshalled = unmarshaller . unmarshal ( arg ) ;
Object unmarshalled = unmarshaller . unmarshal ( arg ) ;
Object val = map . get ( arg ) ;
Object value = ( String ) originalValues . get ( arg ) ;
Object value = ( String ) originalValues . get ( arg ) ;
Object value = applicationContext . getBean ( arg ) ;
Object value = camelContext . getTypeConverter ( arg ) . convertTo ( arg ) ;
Object value = convertToType ( arg ) ;
Object value = converter . convertTo ( arg ) ;
Object value = converter . convertTo ( arg ) ;
Object value = converter . convertTo ( arg ) ;
Object value = <unk> . evaluate ( arg ) ;
Object value = entry . getValue ( arg ) ;
Object value = expression . evaluate ( arg ) ;
Object value = expression . evaluate ( arg ) ;
Object value = expression . evaluate ( arg ) ;
Object value = getInjectionValue ( arg ) ;
Object value = getRegistry ( arg ) . lookup ( arg ) ;
Object value = helper . getInjectionValue ( arg ) ;
Object value = helper . getInjectionValue ( arg ) ;
Object value = helper . getInjectionValue ( arg ) ;
Object value = injector . newInstance ( arg ) ;
Object value = jmsMessage . getObjectProperty ( arg ) ;
Object value = message . get ( arg ) ;
Object value = null ;
Object value = org . mvel . MVEL . executeExpression ( arg ) ;
Object value = parameters . remove ( arg ) ;
Object value = props . get ( arg ) ;
Object value = props . get ( arg ) ;
Object value = registry . lookup ( arg ) ;
Object value = registry . lookup ( arg ) ;
Object value = template . sendBody ( arg ) ;
Object value = template . sendBody ( arg ) ;
Object value = template . sendBody ( arg ) ;
Object value = template . sendBody ( arg ) ;
Object value = template . sendBody ( arg ) ;
Object value = template . sendBody ( arg ) ;
Object values = expression . evaluate ( arg ) ;
ObjectHelper . close ( arg ) ;
ObjectHelper . close ( arg ) ;
ObjectHelper . close ( arg ) ;
ObjectHelper . close ( arg ) ;
ObjectHelper . close ( arg ) ;
ObjectHelper . close ( arg ) ;
ObjectHelper . close ( arg ) ;
ObjectHelper . close ( arg ) ;
ObjectHelper . close ( arg ) ;
ObjectHelper . close ( arg ) ;
ObjectHelper . close ( arg ) ;
ObjectHelper . close ( arg ) ;
ObjectHelper . close ( arg ) ;
ObjectHelper . close ( arg ) ;
ObjectHelper . close ( arg ) ;
ObjectHelper . close ( arg ) ;
ObjectHelper . close ( arg ) ;
ObjectHelper . close ( arg ) ;
ObjectHelper . close ( arg ) ;
ObjectHelper . close ( arg ) ;
ObjectHelper . close ( arg ) ;
ObjectHelper . close ( arg ) ;
ObjectHelper . close ( arg ) ;
ObjectHelper . close ( arg ) ;
ObjectHelper . close ( arg ) ;
ObjectHelper . close ( arg ) ;
ObjectHelper . close ( arg ) ;
ObjectHelper . close ( arg ) ;
ObjectHelper . close ( arg ) ;
ObjectHelper . close ( arg ) ;
ObjectHelper . close ( arg ) ;
ObjectHelper . close ( arg ) ;
ObjectHelper . close ( arg ) ;
ObjectHelper . notEmpty ( arg ) ;
ObjectHelper . notEmpty ( arg ) ;
ObjectHelper . notEmpty ( arg ) ;
ObjectHelper . notEmpty ( arg ) ;
ObjectHelper . notEmpty ( arg ) ;
ObjectHelper . notEmpty ( arg ) ;
ObjectHelper . notNull ( arg ) ;
ObjectHelper . wrapRuntimeCamelException ( arg ) ;
ObjectHelper . wrapRuntimeCamelException ( arg ) ;
ObjectHelper . wrapRuntimeCamelException ( arg ) ;
ObjectHelper . wrapRuntimeCamelException ( arg ) ;
ObjectInput in = ExchangeHelper . convertToType ( arg ) ;
ObjectInput in = IOConverter . <unk> ( arg ) ;
ObjectName [ ] mBeans = mbeansRegistered . toArray ( arg ) ;
ObjectName <unk> = ( ObjectName ) s . iterator ( arg ) . next ( arg ) ;
ObjectName <unk> = ( ObjectName ) iter . next ( arg ) ;
ObjectOutput out = ExchangeHelper . convertToType ( arg ) ;
ObjectOutput out = IOConverter . <unk> ( arg ) ;
<unk> . <unk> ( arg ) ;
Observable < Order > <unk> = Observable . <unk> ( arg ) ;
ObserverSender observer = new ObserverSender ( arg ) ;
<unk> counter = context . getRegistry ( arg ) . lookup ( arg ) ;
OneWay answer = <unk> . getAnnotation ( arg ) ;
OneWay answer = method . getAnnotation ( arg ) ;
OneWay answer = type . getAnnotation ( arg ) ;
<unk> <unk> = new <unk> ( arg ) ;
Option [ ] options = <unk> ( arg ) ;
Option [ ] options = options ( arg ) ;
Option [ ] options = options ( arg ) ;
Option [ ] options = options ( arg ) ;
Option [ ] options = options ( arg ) ;
Option [ ] options = options ( arg ) ;
Option [ ] options = options ( arg ) ;
Option [ ] options = options ( arg ) ;
Option [ ] options = options ( arg ) ;
Option [ ] options = options ( arg ) ;
Option [ ] options = options ( arg ) ;
Option [ ] options = options ( arg ) ;
Option [ ] options = options ( arg ) ;
Option [ ] options = options ( arg ) ;
Option [ ] options = options ( arg ) ;
Option [ ] options = options ( arg ) ;
Option [ ] options = options ( arg ) ;
Option [ ] options = options ( arg ) ;
Option [ ] options = options ( arg ) ;
Option [ ] options = options ( arg ) ;
Option [ ] options = options ( arg ) ;
Option [ ] options = options ( arg ) ;
Option [ ] options = options ( arg ) ;
Option [ ] options = options ( arg ) ;
Option [ ] options = options ( arg ) ;
Option [ ] options = options ( arg ) ;
Option [ ] options = options ( arg ) ;
Option [ ] options = options ( arg ) ;
Option [ ] options = options ( arg ) ;
Option [ ] options = options ( arg ) ;
Option [ ] options = options ( arg ) ;
Option [ ] options = options ( arg ) ;
Option [ ] options = options ( arg ) ;
Option [ ] options = options ( arg ) ;
Option [ ] options = options ( arg ) ;
Option [ ] options = options ( arg ) ;
Option [ ] options = options ( arg ) ;
Option [ ] options = options ( arg ) ;
Option [ ] options = options ( arg ) ;
Option [ ] options = options ( arg ) ;
Option [ ] options = options ( arg ) ;
Option [ ] options = options ( arg ) ;
OsgiResolverUtil resolver = new OsgiResolverUtil ( arg ) ;
OsgiResolverUtil resolver = new OsgiResolverUtil ( arg ) ;
<unk> otherwise = choice . getOtherwise ( arg ) ;
OutboundBinding binding = resolveAndRemoveReferenceParameter ( arg ) ;
OutboundBinding <unk> = resolveAndRemoveReferenceParameter ( arg ) ;
OutputDefinition < ? > out = ( OutputDefinition < ? > ) processor ;
<unk> os = file . getBody ( arg ) ;
OwnerId = ownerId ;
PEMReader r = null ;
PGPDataFormat <unk> = new PGPDataFormat ( arg ) ;
<unk> key = <unk> ( arg ) ;
PGPPublicKey key = <unk> ( arg ) ;
<unk> <unk> ;
<unk> = port ;
Package <unk> = Package . <unk> ( arg ) ;
PackageScanFilter test = new <unk> ( arg ) ;
PackageScanFilter test = new <unk> ( arg ) ;
PackageScanFilter test = new <unk> ( arg ) ;
PackageScanFilter test = new <unk> ( arg ) ;
PackageScanFilter test = new <unk> ( arg ) ;
PackageScanFilter test = new <unk> ( arg ) ;
<unk> answer = registry . lookup ( arg ) ;
PerformanceCounter counter = registeredCounters . get ( arg ) ;
PerformanceCounter pc = new PerformanceCounter ( arg ) ;
Person output = mock . getReceivedExchanges ( arg ) . get ( arg ) . getIn ( arg ) . getBody ( arg ) ;
PhaseInterceptor p = ( PhaseInterceptor ) i ;
PhaseInterceptor p = ( PhaseInterceptor ) i ;
PhaseInterceptor <unk> = ( PhaseInterceptor ) it . next ( arg ) ;
PojoComponent component = resolveQueueComponent ( arg ) ;
PojoEndpoint endpoint = ( PojoEndpoint ) container . endpoint ( arg ) ;
<unk> <unk> = exchange . getRequest ( arg ) ;
Policy required = bean ( arg ) ;
Policy required = bean ( arg ) ;
Policy required = bean ( arg ) ;
PolicyBuilder < E > answer = new PolicyBuilder < E > ( arg ) ;
PolicyRef answer = new PolicyRef ( arg ) ;
PolicyRef answer = new PolicyRef ( arg ) ;
PollableChannel responseChannel = ( PollableChannel ) applicationContext . getBean ( arg ) ;
Predicate < Exchange > predicate = contains ( arg ) ;
Predicate < Exchange > predicate = contains ( arg ) ;
Predicate < Exchange > predicate = filterProcessor . <unk> ( arg ) ;
Predicate < Exchange > predicate = language . createPredicate ( arg ) ;
Predicate answer = SimpleBackwardsCompatibleParser . <unk> ( arg ) ;
Predicate predicate = PredicateBuilder . toPredicate ( arg ) ;
PredicateSupport . assertMatches ( arg ) ;
PredicateSupport . assertMatches ( arg ) ;
PredicateSupport . assertMatches ( arg ) ;
PredicateSupport . assertMatches ( arg ) ;
PredicateSupport . assertMatches ( arg ) ;
PrivateKey pk = context . getRegistry ( arg ) . lookup ( arg ) ;
PrivateKey <unk> = ( PrivateKey ) <unk> . <unk> ( arg ) ;
<unk> proceed = ProcessorTypeHelper . findFirstTypeInOutputs ( arg ) ;
<unk> proceed = ProcessorTypeHelper . findFirstTypeInOutputs ( arg ) ;
Processor < E > last = target . createProcessor ( arg ) ;
Processor < E > otherwiseProcessor = null ;
Processor < E > p = target . createProcessor ( arg ) ;
Processor < E > processor = null ;
Processor < E > processor = <unk> . createProcessor ( arg ) ;
Processor < Exchange > processor = null ;
Processor < Exchange > processor = processors . get ( arg ) ;
Processor < Exchange > processor = route . getProcessor ( arg ) ;
Processor < Exchange > processor = route . getProcessor ( arg ) ;
Processor <unk> = routeContext . createProcessor ( arg ) ;
Processor childProcessor = createOutputsProcessor ( arg ) ;
Processor childProcessor = createOutputsProcessor ( arg ) ;
Processor childProcessor = createOutputsProcessor ( arg ) ;
Processor childProcessor = routeContext . createProcessor ( arg ) ;
Processor childProcessor = routeContext . createProcessor ( arg ) ;
Processor childProcessor = routeContext . createProcessor ( arg ) ;
Processor childProcessor = routeContext . createProcessor ( arg ) ;
Processor childProcessor = routeContext . createProcessor ( arg ) ;
Processor childProcessor = routeContext . createProcessor ( arg ) ;
Processor childProcessor = routeContext . createProcessor ( arg ) ;
Processor childProcessor = routeContext . createProcessor ( arg ) ;
Processor childProcessor = routeContext . createProcessor ( arg ) ;
Processor childProcessor = routeContext . createProcessor ( arg ) ;
Processor childProcessor = super . createProcessor ( arg ) ;
Processor childProcessor = this . createChildProcessor ( arg ) ;
Processor errorHandler = routeContext . createProcessor ( arg ) ;
Processor last = tuow . <unk> ( arg ) ;
Processor last = tuow . <unk> ( arg ) ;
Processor processor = consumerRoute . getProcessor ( arg ) ;
Processor processor = consumerRoute . getProcessor ( arg ) ;
Processor processor = consumerRoute . getProcessor ( arg ) ;
Processor processor = consumerRoute . getProcessor ( arg ) ;
Processor processor = <unk> ( arg ) ;
Processor processor = exception . <unk> ( arg ) ;
Processor processor = header . createProcessor ( arg ) ;
Processor processor = processorType . createProcessor ( arg ) ;
Processor processor = processorType . createProcessor ( arg ) ;
Processor processor = processors . get ( arg ) ;
Processor processor = route . getValue ( arg ) ;
Processor processor = route . getValue ( arg ) ;
Processor processor = route . getValue ( arg ) ;
Processor processor = route . getValue ( arg ) ;
Processor processor = route . getValue ( arg ) ;
Processor processor = route . getValue ( arg ) ;
Processor processor = route . getValue ( arg ) ;
Processor processor = route . getValue ( arg ) ;
Processor processor = route . getValue ( arg ) ;
Processor processor = routeContext . createProcessor ( arg ) ;
Processor processor = routeContext . createProcessor ( arg ) ;
Processor processor = routeContext . createProcessor ( arg ) ;
Processor tryProcessor = routeContext . createProcessor ( arg ) ;
Processor <unk> = new UnitOfWorkProcessor ( arg ) ;
ProcessorDefinition < ? > first = getOutputs ( arg ) . get ( arg ) ;
ProcessorDefinition < ? > first = getOutputs ( arg ) . get ( arg ) ;
ProcessorDefinition < ? > keep = outputs . get ( arg ) ;
ProcessorDefinition < ? > keep = outputs . get ( arg ) ;
ProcessorDefinition < ? > out = outputs . get ( arg ) ;
ProcessorDefinition < ? > out = outputs . get ( arg ) ;
ProcessorDefinition block = ( ProcessorDefinition ) <unk> . <unk> ( arg ) ;
ProcessorDefinition def = channel . <unk> ( arg ) ;
ProcessorDefinition def = end ( arg ) ;
ProcessorDefinition def = node ;
ProcessorDefinition def = this ;
ProcessorDefinition definition = null ;
ProcessorDefinition defn = ( ProcessorDefinition ) def ;
ProcessorDefinition defn = ( ProcessorDefinition ) this ;
ProcessorDefinition defn = ( ProcessorDefinition ) this ;
ProcessorDefinition first = getOutputs ( arg ) . get ( arg ) ;
ProcessorDefinition first = getOutputs ( arg ) . get ( arg ) ;
ProcessorDefinition first = getOutputs ( arg ) . get ( arg ) ;
ProcessorDefinition first = getOutputs ( arg ) . get ( arg ) ;
ProcessorDefinition keep = outputs . get ( arg ) ;
ProcessorDefinition keep = outputs . get ( arg ) ;
ProcessorDefinition keep = outputs . get ( arg ) ;
ProcessorDefinition me = ( ProcessorDefinition ) this ;
ProcessorDefinition next = <unk> . next ( arg ) ;
ProcessorDefinition old = otherwise ;
ProcessorDefinition old = otherwise ;
ProcessorDefinition out = outputs . get ( arg ) ;
ProcessorDefinition out = outputs . get ( arg ) ;
ProcessorDefinition out = outputs . get ( arg ) ;
ProcessorDefinition out = outputs . get ( arg ) ;
ProcessorDefinition output = getOutputs ( arg ) . get ( arg ) ;
ProcessorDefinition parent = definition . getParent ( arg ) ;
ProcessorDefinition processorDefinition = null ;
ProcessorDefinition <unk> = childDefinition != null ? childDefinition : <unk> ;
ProcessorDefinitionHelper . getAllIDs ( arg ) ;
ProcessorDefinitionHelper . getAllIDs ( arg ) ;
ProcessorRef answer = new ProcessorRef ( arg ) ;
ProcessorRef answer = new ProcessorRef ( arg ) ;
ProcessorRef to = assertOneProcessorInstanceOf ( arg ) ;
ProcessorType < ? > node ;
ProcessorType < ? > processorType = proxy . getOutputs ( arg ) . get ( arg ) ;
ProcessorType last = tuow . <unk> ( arg ) ;
ProcessorType route = from ( arg ) ;
Producer < E > answer = producers . get ( arg ) ;
Producer < E > producer = getProducer ( arg ) ;
Producer < E > producer = getProducer ( arg ) ;
Producer < E > producer = getProducer ( arg ) ;
Producer < E > producer = getProducer ( arg ) ;
Producer < Exchange > producer = endpoint . createProducer ( arg ) ;
Producer < Exchange > producer = endpoint . createProducer ( arg ) ;
Producer < Exchange > producer = endpoint . createProducer ( arg ) ;
Producer < Exchange > producer = endpoint . createProducer ( arg ) ;
Producer < Exchange > producer = producerCache . getProducer ( arg ) ;
Producer < Exchange > producer = producerCache . getProducer ( arg ) ;
Producer producer = cache . <unk> ( arg ) ;
Producer producer = <unk> ( arg ) ;
Producer producer = getProducer ( arg ) ;
Producer producer = getProducerCache ( arg ) . getProducer ( arg ) ;
Producer producer = pair . getProducer ( arg ) ;
Producer producer = producerCache . getProducer ( arg ) ;
ProducerObserver observer = new ProducerObserver ( arg ) ;
ProducerTemplate < Exchange > template = camelContext . createProducerTemplate ( arg ) ;
ProducerTemplate < Exchange > template = camelContext . createProducerTemplate ( arg ) ;
ProducerTemplate < Exchange > template = camelContext . createProducerTemplate ( arg ) ;
ProducerTemplate < Exchange > template = context . createProducerTemplate ( arg ) ;
ProducerTemplate < Exchange > template = context . createProducerTemplate ( arg ) ;
ProducerTemplate camelTemplate = ( ProducerTemplate ) context . getBean ( arg ) ;
ProducerTemplate camelTemplate = ( ProducerTemplate ) context . getBean ( arg ) ;
ProducerTemplate lookup = context . getRegistry ( arg ) . lookup ( arg ) ;
ProducerTemplate lookup = context . getRegistry ( arg ) . lookup ( arg ) ;
ProducerTemplate lookup = context . getRegistry ( arg ) . lookup ( arg ) ;
ProducerTemplate lookup = context . getRegistry ( arg ) . lookup ( arg ) ;
ProducerTemplate lookup = context . getRegistry ( arg ) . lookup ( arg ) ;
ProducerTemplate lookup = context1 . getRegistry ( arg ) . lookup ( arg ) ;
ProducerTemplate lookup = context2 . getRegistry ( arg ) . lookup ( arg ) ;
ProducerTemplate lookup2 = context . getRegistry ( arg ) . lookup ( arg ) ;
ProducerTemplate lookup2 = context . getRegistry ( arg ) . lookup ( arg ) ;
ProducerTemplate lookup2 = context . getRegistry ( arg ) . lookup ( arg ) ;
Properties answer = context . getRegistry ( arg ) . lookup ( arg ) ;
Properties answer = null ;
Properties <unk> = cache ? cacheMap . get ( arg ) : null ;
Properties props = new Properties ( arg ) ;
Properties props = new Properties ( arg ) ;
Properties props = new Properties ( arg ) ;
Properties props = new Properties ( arg ) ;
Properties props = new Properties ( arg ) ;
Properties props = new Properties ( arg ) ;
Properties props = new Properties ( arg ) ;
Properties props = new Properties ( arg ) ;
PropertiesComponent pc = getComponent ( arg ) ;
PropertiesComponent pc = getTypeConverter ( arg ) . mandatoryConvertTo ( arg ) ;
PropertiesComponent pc = new PropertiesComponent ( arg ) ;
PropertiesComponent pc = new PropertiesComponent ( arg ) ;
PropertyValue <unk> = ( PropertyValue ) bean . <unk> ( arg ) . <unk> ( arg ) . <unk> ( arg ) ;
ProtocolCodecFactory codecFactory = getCodecFactory ( arg ) ;
ProtocolCodecFactory codecFactory = getCodecFactory ( arg ) ;
ProxyHttpClientConfigurer configurer = new ProxyHttpClientConfigurer ( arg ) ;
ProxyHttpClientConfigurer configurer = new ProxyHttpClientConfigurer ( arg ) ;
<unk> pk = context . getRegistry ( arg ) . lookup ( arg ) ;
QName <unk> = strategy . <unk> ( arg ) ;
QName service = CxfEndpointUtils . getQName ( arg ) ;
<unk> . scheduler = scheduler ;
<unk> endpoint = camelContext . getEndpoint ( arg ) ;
QuartzExchange exchange = createExchange ( arg ) ;
<unk> <unk> = objectMapper . readValue ( arg ) ;
<unk> qr = te . getTwitter ( arg ) . <unk> ( arg ) ;
Queue < E > queue = component . getOrCreateQueue ( arg ) ;
Queue < E > queue = registry . get ( arg ) ;
QueueEndpoint receiverEndpoint = ( QueueEndpoint ) camelContext . getEndpoint ( arg ) ;
QueueEndpoint receiverEndpoint = ( QueueEndpoint ) camelContext . resolveEndpoint ( arg ) ;
<unk> configuration = context . getRegistry ( arg ) . lookup ( arg ) ;
RETRY . incrementAndGet ( arg ) ;
RETRY . incrementAndGet ( arg ) ;
RETRY . incrementAndGet ( arg ) ;
RETRY . incrementAndGet ( arg ) ;
RETRY . incrementAndGet ( arg ) ;
RETRY . incrementAndGet ( arg ) ;
RabbitMQEndpoint endpoint = new RabbitMQEndpoint ( arg ) ;
RabbitMQEndpoint endpoint = new RabbitMQEndpoint ( arg ) ;
Reader bodyReader = ExchangeHelper . getMandatoryInBody ( arg ) ;
Reader bodyReader = ExchangeHelper . getMandatoryInBody ( arg ) ;
Reader br = new BufferedReader ( arg ) ;
Reader reader = IOConverter . <unk> ( arg ) ;
Reader reader = new InputStreamReader ( arg ) ;
RecipientList < Exchange > p1 = assertIsInstanceOf ( arg ) ;
RecipientListDefinition answer = new RecipientListDefinition ( arg ) ;
RecipientListDefinition answer = new RecipientListDefinition ( arg ) ;
RecipientListDefinition answer = new RecipientListDefinition ( arg ) ;
RecipientListDefinition node = assertOneProcessorInstanceOf ( arg ) ;
RecipientListType node = assertOneProcessorInstanceOf ( arg ) ;
RecipientListType node = <unk> ( arg ) ;
RecoverableAggregationRepository < Object > recoverable = ( RecoverableAggregationRepository < Object > ) <unk> ;
RedeliveryTask task = new RedeliveryTask ( arg ) ;
<unk> . <unk> ( arg ) ;
RegistryBean <unk> = new RegistryBean ( arg ) ;
RemoteFile file = ( RemoteFile ) exchange . getProperty ( arg ) ;
RemoteFile file = ( RemoteFile ) exchange . getProperty ( arg ) ;
RemoteFile <unk> = <unk> ( arg ) ;
RemoteFileConfiguration config = ( RemoteFileConfiguration ) ftpEndpoint . getConfiguration ( arg ) ;
RemoteFileConfiguration config = ( RemoteFileConfiguration ) ftpEndpoint . getConfiguration ( arg ) ;
RemoteFileConfiguration config = ( RemoteFileConfiguration ) ftpEndpoint . getConfiguration ( arg ) ;
RemoteFileConfiguration config = ( RemoteFileConfiguration ) getConfiguration ( arg ) ;
RemoteFileConfiguration config = ( RemoteFileConfiguration ) getEndpoint ( arg ) . getConfiguration ( arg ) ;
RemoteFileConfiguration config = ( RemoteFileConfiguration ) sftpEndpoint . getConfiguration ( arg ) ;
RemoteFileConfiguration config = ( RemoteFileConfiguration ) sftpEndpoint . getConfiguration ( arg ) ;
RemoteFileConsumer consumer = <unk> ( arg ) ;
RemoteFileConsumer consumer = null ;
RemoteFileEndpoint endpoint = resolveMandatoryEndpoint ( arg ) ;
RemoteFileExchange answer = new RemoteFileExchange < T > ( arg ) ;
RemoteFileExchange exchange = ( RemoteFileExchange ) mock . getExchanges ( arg ) . get ( arg ) ;
RemoteFileExchange exchange = ( RemoteFileExchange ) mock . getExchanges ( arg ) . get ( arg ) ;
RemoteFileExchange <unk> = ( RemoteFileExchange ) endpoint . createExchange ( arg ) ;
<unk> replyManager = new <unk> ( arg ) ;
<unk> answer = in . getBody ( arg ) ;
<unk> <unk> ;
ResequencerDefinition answer = new ResequencerDefinition ( arg ) ;
ResequencerDefinition answer = new ResequencerDefinition ( arg ) ;
ResequencerDefinition resequencer = assertOneProcessorInstanceOf ( arg ) ;
ResequencerDefinition resequencer = assertOneProcessorInstanceOf ( arg ) ;
ResequencerType resequencer = assertResequencer ( arg ) ;
ResequencerType resequencer = assertResequencer ( arg ) ;
ResolverUtil . log . error ( arg ) ;
ResolverUtil . log . info ( arg ) ;
ResolverUtil . log . trace ( arg ) ;
ResolverUtil . log . warn ( arg ) ;
ResolverUtil . log . warn ( arg ) ;
ResolverUtil . log . warn ( arg ) ;
Resource resource = null ;
Resource resource = resolveMandatoryResource ( arg ) ;
Response response = ( Response ) responseReceivedEvent . getResponse ( arg ) ;
Response response = ( Response ) responseReceivedEvent . getResponse ( arg ) ;
<unk> <unk> = null ;
RestletEndpoint endpoint = ( RestletEndpoint ) consumer . getEndpoint ( arg ) ;
RestletEndpoint endpoint = ( RestletEndpoint ) consumer . getEndpoint ( arg ) ;
<unk> <unk> = <unk> . <unk> ( arg ) ;
Route < ? extends Exchange > route = mbean . getRoute ( arg ) ;
Route route = ctx . getRoute ( arg ) ;
RouteBuilder < Exchange > builder = ( RouteBuilder < Exchange > ) ctx . getBean ( arg ) ;
RouteBuilder < Exchange > builder = ( RouteBuilder < Exchange > ) ctx . getBean ( arg ) ;
RouteBuilder < Exchange > builder = ( RouteBuilder < Exchange > ) ctx . getBean ( arg ) ;
RouteBuilder < Exchange > builder = ( RouteBuilder < Exchange > ) ctx . getBean ( arg ) ;
RouteBuilder < Exchange > builder = ( RouteBuilder < Exchange > ) ctx . getBean ( arg ) ;
RouteBuilder < Exchange > builder = ( RouteBuilder < Exchange > ) ctx . getBean ( arg ) ;
RouteBuilder < Exchange > builder = ( RouteBuilder < Exchange > ) ctx . getBean ( arg ) ;
RouteBuilder < Exchange > builder = ( RouteBuilder < Exchange > ) ctx . getBean ( arg ) ;
RouteBuilder < Exchange > builder = ( RouteBuilder < Exchange > ) ctx . getBean ( arg ) ;
RouteBuilder < Exchange > builder = ( RouteBuilder < Exchange > ) ctx . getBean ( arg ) ;
RouteBuilder < Exchange > builder = ( RouteBuilder < Exchange > ) ctx . getBean ( arg ) ;
RouteBuilder < Exchange > builder = <unk> ( arg ) ;
RouteBuilderStatement rc = new RouteBuilderStatement ( arg ) ;
RouteContext routeContext = new RouteContext ( arg ) ;
RouteContext routeContext = new RouteContext ( arg ) ;
RouteContext routeContext = new RouteContext ( arg ) ;
RouteContext routeContext = new RouteContext ( arg ) ;
RouteDefinition definition = context . getRouteDefinition ( arg ) ;
RouteDefinition definition = context . getRouteDefinition ( arg ) ;
RouteDefinition route = <unk> ( arg ) ;
RouteDefinitionHelper . initParent ( arg ) ;
RouteDefinitionHelper . initParent ( arg ) ;
RouteDefinitionHelper . initParent ( arg ) ;
RouteDefinitionHelper . initParent ( arg ) ;
RouteNode <unk> = tuow . <unk> ( arg ) ;
RoutePolicy policy = ( RoutePolicy ) applicationContext . getBean ( arg ) ;
<unk> <unk> = null ;
RouteService routeService = routeServices . remove ( arg ) ;
RouteService routeService = routeServices . remove ( arg ) ;
RouteType answer = routeCollection . from ( arg ) ;
RouteType answer = routeCollection . from ( arg ) ;
RouteType answer = routeCollection . from ( arg ) ;
RouteType answer = routeCollection . from ( arg ) ;
RouteType route = assertOneElement ( arg ) ;
RouteType route = assertOneRoute ( arg ) ;
RouteType route = assertOneRoute ( arg ) ;
RouteType route = assertOneRoute ( arg ) ;
RouteType route = assertOneRoute ( arg ) ;
RouteType route = assertOneRoute ( arg ) ;
RouteType route = assertOneRoute ( arg ) ;
RouteType route = assertOneRoute ( arg ) ;
RouteType route = assertOneRoute ( arg ) ;
RouteType route = assertOneRoute ( arg ) ;
RouteType route = assertOneRoute ( arg ) ;
RouteType route = assertOneRoute ( arg ) ;
RouteType route = assertOneRoute ( arg ) ;
RouteType route = assertOneRoute ( arg ) ;
RouteType route = assertOneRoute ( arg ) ;
RouteType route = assertOneRoute ( arg ) ;
RouteType route = assertOneRoute ( arg ) ;
RouteType route = assertOneRoute ( arg ) ;
RouteType route = assertOneRoute ( arg ) ;
RouteType route = assertOneRoute ( arg ) ;
RouteType route = assertOneRoute ( arg ) ;
RouteType route = assertOneRoute ( arg ) ;
RouteType route = assertOneRoute ( arg ) ;
RouteType route = assertOneRoute ( arg ) ;
RouteType route = new RouteType ( arg ) ;
RouteType route = routes . get ( arg ) ;
RouteType routeType = list . get ( arg ) ;
RouteType routeType = routeContext . getRoute ( arg ) ;
RouteType routeType = routeContext . getRoute ( arg ) ;
<unk> routes = builderRef . <unk> ( arg ) ;
RoutesBuilder builder = <unk> ( arg ) ;
RoutesType answer = new RoutesType ( arg ) ;
RoutesType routes = resource . getRouteDefinitions ( arg ) ;
RoutesType routes = resource . path ( arg ) . <unk> ( arg ) . get ( arg ) ;
RoutingSlipDefinition answer = new RoutingSlipDefinition ( arg ) ;
RoutingSlipDefinition answer = new RoutingSlipDefinition ( arg ) ;
RoutingSlipDefinition answer = new RoutingSlipDefinition ( arg ) ;
RoutingSlipDefinition answer = new RoutingSlipDefinition ( arg ) ;
RoutingSlipDefinition node = assertOneProcessorInstanceOf ( arg ) ;
RoutingSlipDefinition node = assertOneProcessorInstanceOf ( arg ) ;
RoutingSlipDefinition node = assertOneProcessorInstanceOf ( arg ) ;
RoutingSlipType node = assertOneProcessorInstanceOf ( arg ) ;
RoutingSlipType node = assertOneProcessorInstanceOf ( arg ) ;
RoutingSlipType node = assertOneProcessorInstanceOf ( arg ) ;
RoutingSlipType node = assertRoutingSlip ( arg ) ;
RoutingSlipType node = assertRoutingSlip ( arg ) ;
RoutingSlipType node = assertRoutingSlip ( arg ) ;
RuntimeCamelException rce ;
RuntimeCamelException rce = null ;
RuntimeException rce = null ;
SQLException <unk> = ( SQLException ) it ;
<unk> context = null ;
<unk> <unk> = null ;
Scanner scanner = getScanner ( arg ) ;
Scanner scanner = getScanner ( arg ) ;
ScheduledExecutorService answer = camelContext . getRegistry ( arg ) . lookup ( arg ) ;
ScheduledExecutorService answer = routeContext . getCamelContext ( arg ) . getRegistry ( arg ) . lookup ( arg ) ;
ScheduledExecutorService scheduler = ExecutorServiceHelper . newScheduledThreadPool ( arg ) ;
ScheduledExecutorService scheduler = camelContext . getExecutorServiceManager ( arg ) . getScheduledExecutorService ( arg ) ;
ScheduledExecutorService scheduler = camelContext . getExecutorServiceManager ( arg ) . getScheduledExecutorService ( arg ) ;
ScheduledExecutorService scheduler = camelContext . getExecutorServiceStrategy ( arg ) . newScheduledThreadPool ( arg ) ;
ScheduledExecutorService scheduler = camelContext . getExecutorServiceStrategy ( arg ) . newScheduledThreadPool ( arg ) ;
ScheduledThreadPoolExecutor answer = new ScheduledThreadPoolExecutor ( arg ) ;
ScheduledThreadPoolExecutor tp = assertIsInstanceOf ( arg ) ;
ScheduledThreadPoolExecutor tp = assertIsInstanceOf ( arg ) ;
ScheduledThreadPoolExecutor tp = assertIsInstanceOf ( arg ) ;
<unk> <unk> = getCamelContext ( arg ) . getTypeConverter ( arg ) . mandatoryConvertTo ( arg ) ;
<unk> random = context . getRegistry ( arg ) . lookup ( arg ) ;
SedaComponent . QueueReference ref = getComponent ( arg ) . getOrCreateQueue ( arg ) ;
SedaComponent . QueueReference ref = getComponent ( arg ) . <unk> ( arg ) ;
SendDefinition < ? > send = ( SendDefinition < ? > ) out ;
SendDefinition send = ( SendDefinition ) defn ;
SendDefinition send = assertIsInstanceOf ( arg ) ;
SendDefinition <unk> = assertIsInstanceOf ( arg ) ;
SendDefinition <unk> = assertIsInstanceOf ( arg ) ;
SendProcessor processor = ( SendProcessor ) processorType . createProcessor ( arg ) ;
SendProcessor sendProcessor = ( SendProcessor ) filterProcessor . getProcessor ( arg ) ;
SendProcessor sendProcessor = assertIsInstanceOf ( arg ) ;
Server server = null ;
Server server = svrBean . create ( arg ) ;
Service service = ( Service ) cxfExchange . get ( arg ) ;
ServiceHelper . startService ( arg ) ;
ServiceHelper . startService ( arg ) ;
ServiceHelper . startService ( arg ) ;
ServiceHelper . startService ( arg ) ;
ServiceHelper . startServices ( arg ) ;
ServiceHelper . stopAndShutdownService ( arg ) ;
ServiceHelper . stopAndShutdownService ( arg ) ;
ServiceHelper . stopAndShutdownService ( arg ) ;
ServiceHelper . stopService ( arg ) ;
ServiceHelper . stopService ( arg ) ;
ServiceHelper . stopService ( arg ) ;
ServiceHelper . stopService ( arg ) ;
ServiceHelper . stopService ( arg ) ;
ServiceHelper . stopService ( arg ) ;
ServiceHelper . stopService ( arg ) ;
ServiceHelper . stopServices ( arg ) ;
ServiceHelper . stopServices ( arg ) ;
ServiceReference [ ] <unk> = bundleContext . getServiceReferences ( arg ) ;
ServiceReference [ ] refs = bundleContext . getServiceReferences ( arg ) ;
ServiceReference [ ] refs = bundleContext . getServiceReferences ( arg ) ;
ServiceReference [ ] refs = bundleContext . getServiceReferences ( arg ) ;
ServiceReference [ ] refs = bundleContext . getServiceReferences ( arg ) ;
ServiceReference [ ] refs = context . getServiceReferences ( arg ) ;
ServiceReference ref = bundleContext . getServiceReference ( arg ) ;
ServiceReference sr = bundleContext . getServiceReference ( arg ) ;
ServiceReference sr = serviceReferenceQueue . poll ( arg ) ;
ServiceRegistration < ? > reg = bundleContext . registerService ( arg ) ;
ServiceRegistration < ? > reg = bundleContext . registerService ( arg ) ;
ServiceRegistration < ? > reg = registrations . get ( arg ) ;
ServiceRegistration < ? > reg = registrations . get ( arg ) ;
ServiceRegistration reg = bundleContext . registerService ( arg ) ;
ServiceRegistration reg = bundleContext . registerService ( arg ) ;
ServiceRegistration reg = registrations . get ( arg ) ;
ServiceStatus status = ( ( <unk> ) context ) . getStatus ( arg ) ;
ServiceStatus status = ( context ) . getStatus ( arg ) ;
<unk> event = assertIsInstanceOf ( arg ) ;
ServletContextHandler context = ( ServletContextHandler ) server . getChildHandlerByClass ( arg ) ;
ServletContextHandler context = ( ServletContextHandler ) server . getChildHandlerByClass ( arg ) ;
ServletContextHandler context = ( ServletContextHandler ) server . getChildHandlerByClass ( arg ) ;
ServletEndpoint result = new ServletEndpoint ( arg ) ;
<unk> os = null ;
Session session = Session . <unk> ( arg ) ;
Session session = getRepository ( arg ) . login ( arg ) ;
Session session = getRepository ( arg ) . login ( arg ) ;
SessionID messageSessionID = <unk> . <unk> ( arg ) ;
SessionID messageSessionID = sessionID ;
SessionID sessionID = ( SessionID ) exchange . getIn ( arg ) . getHeader ( arg ) ;
<unk> <unk> = <unk> . connect ( arg ) ;
Set < Attachment > attachments = ( Set < Attachment > ) requestContext . get ( arg ) ;
Set < Attachment > attachments = CastUtils . cast ( arg ) ;
Set < Class < ? >> classes = <unk> ( arg ) ;
Set < Class < ? >> classes = resolver . findImplementations ( arg ) ;
Set < Class > answer = new HashSet < Class > ( arg ) ;
Set < Class > classes = loader . <unk> ( arg ) ;
Set < Class > classes = new HashSet < Class > ( arg ) ;
Set < Class > classes = new HashSet < Class > ( arg ) ;
Set < Class > classes = new HashSet < Class > ( arg ) ;
Set < Class > classes = new LinkedHashSet < Class > ( arg ) ;
Set < Class > classes = new LinkedHashSet < Class > ( arg ) ;
Set < Class > classes = new LinkedHashSet < Class > ( arg ) ;
Set < Class > classes = new LinkedHashSet < Class > ( arg ) ;
Set < Class > classes = new LinkedHashSet < Class > ( arg ) ;
Set < Class > classes = resolver . findAnnotated ( arg ) ;
Set < Class > classes = resolver . findAnnotated ( arg ) ;
Set < Class > classes = resolver . findImplementations ( arg ) ;
Set < Class > classes = resolver . findImplementations ( arg ) ;
Set < Class > classes = resolver . findImplementations ( arg ) ;
Set < Class > <unk> = new HashSet < Class > ( arg ) ;
Set < Class > scanned = resolver . findAnnotated ( arg ) ;
Set < Class > scanned = resolver . findAnnotated ( arg ) ;
Set < Class > scanned = resolver . findAnnotated ( arg ) ;
Set < Class > scanned = resolver . findAnnotated ( arg ) ;
Set < Class > scanned = resolver . findAnnotated ( arg ) ;
Set < Class > scanned = resolver . findAnnotated ( arg ) ;
Set < Class > scanned = resolver . findByFilter ( arg ) ;
Set < Class > scanned = resolver . findByFilter ( arg ) ;
Set < Class > scanned = resolver . findByFilter ( arg ) ;
Set < Class > scanned = resolver . findImplementations ( arg ) ;
Set < Class > scanned = resolver . findImplementations ( arg ) ;
Set < Class > scanned = resolver . findImplementations ( arg ) ;
Set < Map . Entry < <unk> < ? > , <unk> >> entries = <unk> . <unk> ( arg ) ;
Set < Method > methods = new HashSet < Method > ( arg ) ;
Set < NodeMetadata > nodeMetadatas = ( Set < NodeMetadata > ) exchange . getIn ( arg ) . getBody ( arg ) ;
Set < Object > <unk> = new HashSet < Object > ( arg ) ;
Set < Object > keySet = map . keySet ( arg ) ;
Set < Object > unique = new HashSet < Object > ( arg ) ;
Set < Object > unique = new HashSet < Object > ( arg ) ;
Set < Object > unique = new HashSet < Object > ( arg ) ;
Set < Object > unique = new HashSet < Object > ( arg ) ;
Set < Object > unique = new HashSet < Object > ( arg ) ;
Set < Object > unique = new HashSet < Object > ( arg ) ;
Set < Object > unique = new HashSet < Object > ( arg ) ;
Set < ObjectName > names = CastUtils . cast ( arg ) ;
Set < ObjectName > names = CastUtils . cast ( arg ) ;
Set < ObjectName > s = CastUtils . cast ( arg ) ;
Set < ObjectName > s = CastUtils . cast ( arg ) ;
Set < String > found = new LinkedHashSet < String > ( arg ) ;
Set < String > <unk> = new HashSet < String > ( arg ) ;
Set < String > set = CastUtils . cast ( arg ) ;
Set < String > urls = new HashSet < String > ( arg ) ;
Set answer = new HashSet ( arg ) ;
Set bodies = new HashSet ( arg ) ;
Set executableDependencies ;
Set executableDependencies ;
Set <unk> = ( Set ) exchange . getIn ( arg ) . getBody ( arg ) ;
Set <unk> = ( Set ) exchange . getIn ( arg ) . getBody ( arg ) ;
Set keySet = map . keySet ( arg ) ;
Set keys = map . keySet ( arg ) ;
Set nodeMetadatas = ( Set ) exchange . getIn ( arg ) . getBody ( arg ) ;
Set nodeMetadatas = ( Set ) exchange . getIn ( arg ) . getBody ( arg ) ;
Set nodeMetadatas = ( Set ) exchange . getIn ( arg ) . getBody ( arg ) ;
Set out = CollectionConverter . <unk> ( arg ) ;
Set relevantDependencies ;
Set relevantDependencies ;
Set s = beanServer . queryNames ( arg ) ;
Set s = beanServer . queryNames ( arg ) ;
Set s = beanServer . queryNames ( arg ) ;
Set s = iAgent . getMBeanServer ( arg ) . queryNames ( arg ) ;
Set s = mbsc . queryNames ( arg ) ;
Set s = mbsc . queryNames ( arg ) ;
Set s = mbsc . queryNames ( arg ) ;
Set s = mbsc . queryNames ( arg ) ;
Set s = server . queryNames ( arg ) ;
Set set = converter . convertTo ( arg ) ;
Set unique = new HashSet ( arg ) ;
Set unique = new HashSet ( arg ) ;
Set unique = new HashSet ( arg ) ;
Set unique = new HashSet ( arg ) ;
Set unique = new HashSet ( arg ) ;
Set unique = new HashSet ( arg ) ;
SetBodyType node = assertNthProcessorInstanceOf ( arg ) ;
SetBodyType node = <unk> ( arg ) ;
SetHeaderType node = assertNthProcessorInstanceOf ( arg ) ;
SetHeaderType node = assertNthProcessorInstanceOf ( arg ) ;
SetHeaderType node = assertSetHeader ( arg ) ;
SetHeaderType node = assertSetHeader ( arg ) ;
SetOutHeaderType node = assertNthProcessorInstanceOf ( arg ) ;
SetOutHeaderType node = assertNthProcessorInstanceOf ( arg ) ;
SetOutHeaderType node = assertSetOutHeader ( arg ) ;
SetOutHeaderType node = assertSetOutHeader ( arg ) ;
SimpleMessageListenerContainer answer = new SimpleMessageListenerContainer ( arg ) ;
<unk> pool = context . getRegistry ( arg ) . lookup ( arg ) ;
SjmsComponent component = ( SjmsComponent ) this . context . getComponent ( arg ) ;
Smpp8BitSplitter . resetCurrentReferenceNumber ( arg ) ;
Smpp8BitSplitter . resetCurrentReferenceNumber ( arg ) ;
SmppDefaultSplitter splitter = new SmppDefaultSplitter ( arg ) ;
SmppDefaultSplitter splitter = new SmppDefaultSplitter ( arg ) ;
SmppUcs2Splitter . resetCurrentReferenceNumber ( arg ) ;
SmppUcs2Splitter . resetCurrentReferenceNumber ( arg ) ;
SnsComponent component = new SnsComponent ( arg ) ;
SolrEndpoint <unk> = ( SolrEndpoint ) context . getEndpoint ( arg ) ;
SortDefinition answer = new SortDefinition ( arg ) ;
Source source = ExchangeHelper . getMandatoryInBody ( arg ) ;
Source source = conv . toSource ( arg ) ;
Source source = conv . toSource ( arg ) ;
Source source = conv . toSource ( arg ) ;
<unk> < Exchange > p1 = assertIsInstanceOf ( arg ) ;
SplitterDefinition answer = new SplitterDefinition ( arg ) ;
SplitterDefinition answer = new SplitterDefinition ( arg ) ;
SplitterDefinition answer = new SplitterDefinition ( arg ) ;
SplitterDefinition result = null ;
SplitterDefinition result = null ;
SplitterDefinition splitter = assertOneProcessorInstanceOf ( arg ) ;
SplitterType splitter = assertOneProcessorInstanceOf ( arg ) ;
SplitterType splitter = <unk> ( arg ) ;
SpringCamelContext camel = ( SpringCamelContext ) ac . getBeansOfType ( arg ) . values ( arg ) . iterator ( arg ) . next ( arg ) ;
SpringCamelContext camel = ( SpringCamelContext ) ac . getBeansOfType ( arg ) . values ( arg ) . iterator ( arg ) . next ( arg ) ;
SpringCamelContext camel = ( SpringCamelContext ) ac . getBeansOfType ( arg ) . values ( arg ) . iterator ( arg ) . next ( arg ) ;
SpringCamelContext camel = ( SpringCamelContext ) ac . getBeansOfType ( arg ) . values ( arg ) . iterator ( arg ) . next ( arg ) ;
SpringCamelContext camel = ac . getBeansOfType ( arg ) . values ( arg ) . iterator ( arg ) . next ( arg ) ;
SpringCamelContext camel = ac . getBeansOfType ( arg ) . values ( arg ) . iterator ( arg ) . next ( arg ) ;
SpringCamelContext camelContext = contextList . get ( arg ) ;
SpringCamelContext camelContext = new SpringCamelContext ( arg ) ;
SpringCamelContext context = ( SpringCamelContext ) applicationContext . getBean ( arg ) ;
SpringCamelContext context = ( SpringCamelContext ) applicationContext . getBean ( arg ) ;
SpringCamelContext context = ( SpringCamelContext ) applicationContext . getBeansOfType ( arg ) . values ( arg ) . iterator ( arg ) . next ( arg ) ;
SpringCamelContext context = ( SpringCamelContext ) applicationContext . getBeansOfType ( arg ) . values ( arg ) . iterator ( arg ) . next ( arg ) ;
SpringCamelContext context = ( SpringCamelContext ) applicationContext . getBeansOfType ( arg ) . values ( arg ) . iterator ( arg ) . next ( arg ) ;
SpringCamelContext context = ( SpringCamelContext ) applicationContext . getBeansOfType ( arg ) . values ( arg ) . iterator ( arg ) . next ( arg ) ;
SpringCamelContext context = ac . getBeansOfType ( arg ) . values ( arg ) . iterator ( arg ) . next ( arg ) ;
SpringCamelContext context = applicationContext . getBeansOfType ( arg ) . values ( arg ) . iterator ( arg ) . next ( arg ) ;
SpringCamelContext context = applicationContext . getBeansOfType ( arg ) . values ( arg ) . iterator ( arg ) . next ( arg ) ;
SpringCamelContext context = applicationContext . getBeansOfType ( arg ) . values ( arg ) . iterator ( arg ) . next ( arg ) ;
SpringCamelContext context = applicationContext . getBeansOfType ( arg ) . values ( arg ) . iterator ( arg ) . next ( arg ) ;
SpringCamelContext context = getCamelContext ( arg ) ;
SpringCamelContext ctx = new SpringCamelContext ( arg ) ;
SpringDataRelationship spring = new SpringDataRelationship ( arg ) ;
SpringIntegrationExchange exchange = ( SpringIntegrationExchange ) getEndpoint ( arg ) . createExchange ( arg ) ;
SpringIntegrationExchange exchange = getEndpoint ( arg ) . createExchange ( arg ) ;
SpringJAXRSClientFactoryBean cfb = ( SpringJAXRSClientFactoryBean ) ctx . getBean ( arg ) ;
SpringJAXRSServerFactoryBean sfb1 = ( SpringJAXRSServerFactoryBean ) ctx . getBean ( arg ) ;
SpringJAXRSServerFactoryBean sfb2 = ( SpringJAXRSServerFactoryBean ) ctx . getBean ( arg ) ;
SpringSecurityAuthorizationPolicy <unk> = ( SpringSecurityAuthorizationPolicy ) context . getBean ( arg ) ;
SpringSecurityAuthorizationPolicy <unk> = ( SpringSecurityAuthorizationPolicy ) context . getBean ( arg ) ;
SpringTransactionPolicy required = bean ( arg ) ;
SpringTransactionPolicy required = bean ( arg ) ;
SpringTransactionPolicy required = bean ( arg ) ;
SpringTransactionPolicy required = bean ( arg ) ;
SpringTransactionPolicy required = context . getRegistry ( arg ) . lookup ( arg ) ;
SpringTransactionPolicy required = context . getRegistry ( arg ) . lookup ( arg ) ;
SpringTransactionPolicy required = context . getRegistry ( arg ) . lookup ( arg ) ;
SpringTransactionPolicy required = new SpringTransactionPolicy ( arg ) ;
SslSocketConnector answer = new SslSocketConnector ( arg ) ;
SslSocketConnector answer = null ;
SslSocketConnector sslSocketConnector = new SslSocketConnector ( arg ) ;
StartupRouteHolder holder = null ;
StartupRouteHolder other = inputs . get ( arg ) ;
StopWatch watch = new StopWatch ( arg ) ;
StreamCache cache = converter . convertToStreamCache ( arg ) ;
StreamCache cache = cos . getStreamCache ( arg ) ;
StreamCache cache = cos . getStreamCache ( arg ) ;
StreamCache cache = cos . getStreamCache ( arg ) ;
StreamCache cache = cos . getStreamCache ( arg ) ;
StreamCache cache = cos . getStreamCache ( arg ) ;
StreamCache cache = cos . getStreamCache ( arg ) ;
StreamCache newBody = exchange . getIn ( arg ) . getBody ( arg ) ;
StreamCache newBody = tc . convertTo ( arg ) ;
StreamCache streamCache = Assertions . assertInstanceOf ( arg ) ;
StreamCache streamCache = converter . convertToStreamCache ( arg ) ;
StreamSource cache = ( StreamSource ) converter . convertToStreamCache ( arg ) ;
String DSL = errorHandler ( arg );from ( "direct:start" ) .to ( "mock:result" ) ;
String DSL = errorHandler ( arg );from ( "direct:start" ) .to ( "mock:result" ) ;
String DSL = errorHandler ( arg );from ( "direct:start" ) .to ( "mock:result" ) ;
String DSL = from ( arg ) .aggregate ( header ( arg ) <unk> ( <unk> ) <unk> ( 0 ) .to ( "mock:result" ) ;
String DSL = from ( arg ) .aggregate ( header ( arg ) ).to ( "mock:result" ) ;
String DSL = from ( arg ) <unk> ( <unk> ) .to ( "mock:result" ) ;
String DSL = from ( arg ) <unk> ( header ( arg ) ).to ( "mock:result" ) ;
String DSL = intercept ( arg ) <unk> ( body ( arg ) <unk> ( <unk> ) ).to ( <unk> ) ;from ( "direct:start" ) .to ( <unk> ) .to ( <unk> ) .to ( "mock:result" ) ;
String DSL = interceptFrom ( arg ) .to ( "mock:intercept" ) ;from ( "direct:start" ) .to ( "mock:result" ) ;from ( "seda:bar" ) .to ( "mock:result" ) ;from ( "seda:foo" ) .to ( "mock:result" ) ;
String DSL = interceptFrom ( arg ) .to ( "mock:intercept" ) ;from ( "direct:start" ) .to ( "mock:result" ) ;from ( "seda:bar" ) .to ( "mock:result" ) ;from ( "seda:foo" ) .to ( "mock:result" ) ;from ( <unk> ) .to ( "mock:result" ) ;
String [ ] <unk> = new String [ results . size ( arg ) ] ;
String [ ] files = new File ( arg ) . getAbsoluteFile ( arg ) . list ( arg ) ;
String [ ] files = new File ( arg ) . getAbsoluteFile ( arg ) . list ( arg ) ;
String [ ] files = new File ( arg ) . getAbsoluteFile ( arg ) . list ( arg ) ;
String [ ] names = applicationContext . <unk> ( arg ) ;
String [ ] <unk> = new String [ 0 ] ;
String [ ] <unk> = <unk> . split ( arg ) ;
String [ ] value = mailMessage . getHeader ( arg ) ;
String address = uri . startsWith ( arg ) ? remaining : uri ;
String after = context . getExecutorServiceStrategy ( arg ) . getThreadName ( arg ) ;
String <unk> = configuration . <unk> ( arg ) ;
String answer = ( String ) map . get ( arg ) ;
String answer = ObjectHelper . classCanoicalName ( arg ) ;
String answer = ObjectHelper . classCanoicalName ( arg ) ;
String answer = ObjectHelper . className ( arg ) ;
String answer = ObjectHelper . className ( arg ) ;
String args = <unk> ( arg ) ;
String basePath = baseURI . getPath ( arg ) ;
String basePath = baseURI . getPath ( arg ) ;
String basePath = baseURI . getRawPath ( arg ) ;
String basePath = baseURI . getRawPath ( arg ) ;
String basePath = baseURI . getRawPath ( arg ) ;
String before = context . getExecutorServiceStrategy ( arg ) . getThreadName ( arg ) ;
String body ;
String body = exchange . getIn ( arg ) . getBody ( arg ) ;
String body = <unk> ;
String <unk> = <unk> <unk> <unk> ( arg ) ;
String charset = ( String ) exchange . getProperty ( arg ) ;
String charset = IOConverter . getCharsetName ( arg ) ;
String charset = IOConverter . getCharsetName ( arg ) ;
String charset = IOConverter . getCharsetName ( arg ) ;
String charset = ObjectHelper . after ( arg ) ;
String charsetName = ( String ) exchange . getProperty ( arg ) ;
String charsetName = ( String ) exchange . getProperty ( arg ) ;
String charsetName = exchange . getProperty ( arg ) ;
String clientId = ( String ) exchange . getIn ( arg ) . getHeader ( arg ) ;
String clientId = ( String ) exchange . getIn ( arg ) . getHeader ( arg ) ;
String contentType = header . getValue ( arg ) ;
String contentType = header . getValue ( arg ) ;
String contentType = in . getHeader ( arg ) ;
String contentType = request . getHeader ( arg ) ;
String contextName = annotation . context ( arg ) ;
String contextName = annotation . context ( arg ) ;
String contextName = annotation . context ( arg ) ;
String contextName = annotation . context ( arg ) ;
String contextName = annotation . contextName ( arg ) ;
String <unk> = ( String ) parameters . remove ( arg ) ;
String data = in . getBody ( arg ) ;
String data = in . getBody ( arg ) ;
String <unk> = <unk> ( arg ) ;
String <unk> = HL7Converter . toString ( arg ) ;
String <unk> = endpoint . getConfiguration ( arg ) . getFile ( arg ) ;
String endpointPath = getConfiguration ( arg ) . getDirectory ( arg ) ;
String endpointRef = inject . name ( arg ) ;
String endpointRef = inject . name ( arg ) ;
String <unk> = <unk> <unk> ;
String expected = from ( arg ) <unk> ( <unk> ) .to ( "mock:result" ) ;
String file = endpoint . getConfiguration ( arg ) . getFile ( arg ) ;
String fileName = ( headerFileName != null ) ? headerFileName : message . getMessageId ( arg ) ;
String fileName = file != null ? file . trim ( arg ) : _file ;
String fileName = file != null ? file . trim ( arg ) : _file ;
String group = ( ( JcloudsComputeEndpoint ) getEndpoint ( arg ) ) . <unk> ( arg ) ;
String <unk> = ( ( JcloudsComputeEndpoint ) getEndpoint ( arg ) ) . <unk> ( arg ) ;
String headerValue = ( String ) entry . getValue ( arg ) ;
String <unk> = <unk> ;
String id = ( String ) inMessage . getBody ( arg ) ;
String id = ( String ) route . getProperties ( arg ) . get ( arg ) ;
String id = context != null ? Integer . toString ( arg ) : <unk> ;
String id = exchange . getIn ( arg ) . getMessageId ( arg ) ;
String id = null ;
String id = processorType . idOrCreate ( arg ) ;
String id = routeContext . getRoute ( arg ) . getId ( arg ) ;
String <unk> = ( ( JcloudsComputeEndpoint ) getEndpoint ( arg ) ) . <unk> ( arg ) ;
String indexId = ( String ) template . requestBody ( arg ) ;
String indexId = ( String ) template . requestBody ( arg ) ;
String indexId = ( String ) template . requestBody ( arg ) ;
String indexId = ( String ) template . requestBodyAndHeaders ( arg ) ;
String indexId = ( String ) template . requestBodyAndHeaders ( arg ) ;
String indexId = ( String ) template . requestBodyAndHeaders ( arg ) ;
String input = exchange . getIn ( arg ) . getBody ( arg ) ;
String <unk> = ( String ) System . <unk> ( arg ) ;
String jsonBody = endpoint . getConfig ( arg ) . getRequestor ( arg ) . send ( arg ) ;
String jsonBody = endpoint . getConfig ( arg ) . getRequestor ( arg ) . send ( arg ) ;
String jsonBody = endpoint . getConfig ( arg ) . getRequestor ( arg ) . send ( arg ) ;
String key = ( ( <unk> ) getEndpoint ( arg ) ) . getKey ( arg ) ;
String key = ( String ) iter . next ( arg ) ;
String key = ( headers . containsKey ( arg ) ) ? ( String ) headers . get ( arg ) : getEndpoint ( arg ) . getKey ( arg ) ;
String key = Client . <unk> ;
String key = <unk> . <unk> ( arg ) ;
String key = Message . <unk> ;
String key = consumer . getEndpoint ( arg ) . getEndpointKey ( arg ) ;
String key = consumer . getEndpoint ( arg ) . getEndpointKey ( arg ) ;
String key = consumer . getEndpoint ( arg ) . getEndpointKey ( arg ) ;
String key = endpoint . getJmsKeyFormatStrategy ( arg ) . <unk> ( arg ) ;
String key = endpoint . getJmsKeyFormatStrategy ( arg ) . <unk> ( arg ) ;
String key = file . getAbsoluteFilePath ( arg ) ;
String key = file . getFileName ( arg ) ;
String key = file . getFileName ( arg ) ;
String key = getEndpointKey ( arg ) ;
String key = getKey ( arg ) ;
String <unk> ;
String <unk> = this . getAlgorithm ( arg ) ;
String <unk> = this . type ;
String line = <unk> i +  <unk> ;
String line = null ;
String localResponse = IOUtils . toString ( arg ) ;
String localResponse = IOUtils . toString ( arg ) ;
String <unk> = ( ( JcloudsComputeEndpoint ) getEndpoint ( arg ) ) . <unk> ( arg ) ;
String lockFileName = file . getAbsoluteFileName ( arg ) + FileComponent . DEFAULT_LOCK_FILE_POSTFIX ;
String lockFileName = file . getAbsoluteFilePath ( arg ) + FileComponent . DEFAULT_LOCK_FILE_POSTFIX ;
String lockFileName = <unk> ( arg ) ;
String message = in . getBody ( arg ) ;
String messageId = ExpressionHelper . <unk> ( arg ) ;
String messageId = <unk> . evaluate ( arg ) ;
String <unk> = context . getTypeConverter ( arg ) . convertTo ( arg ) ;
String method = methodToUse . createMethod ( arg ) . getMethod ( arg ) ;
String method = methodToUse . createMethod ( arg ) . getName ( arg ) ;
String msg = ExchangeHelper . <unk> ( arg ) ;
String msg = consumer . receiveBody ( arg ) ;
String name = ( String ) entry . getKey ( arg ) ;
String name = endpoint . getCamelContext ( arg ) . getExecutorServiceManager ( arg ) . <unk> ( arg ) ;
String name = endpoint . getConfiguration ( arg ) . getDirectory ( arg ) ;
String name = endpoint . getConfiguration ( arg ) . getFile ( arg ) ;
String name = file . getFileName ( arg ) ;
String name = file . getRelativeFileName ( arg ) ;
String name = file . isAbsolute ( arg ) ? file . getAbsoluteFileName ( arg ) : file . getRelativeFileName ( arg ) ;
String name = getAbsoluteFileName ( arg ) ;
String name = getEndpoint ( arg ) . getConfiguration ( arg ) . getDirectory ( arg ) ;
String name = getRelativeFileName ( arg ) ;
String name = it . next ( arg ) . getClass ( arg ) . getName ( arg ) ;
String <unk> = FileUtil . normalizePath ( arg ) ;
String nodeId = ( ( JcloudsComputeEndpoint ) getEndpoint ( arg ) ) . <unk> ( arg ) ;
String oid = null ;
String oid = null ;
String operation = ( ( JcloudsComputeEndpoint ) getEndpoint ( arg ) ) . getOperation ( arg ) ;
String operation = ( String ) exchange . getIn ( arg ) . getHeader ( arg ) ;
String operation = exchange . getIn ( arg ) . getHeader ( arg ) ;
String out = ( String ) exchange . getIn ( arg ) . getBody ( arg ) ;
String out = ( String ) exchange . getIn ( arg ) . getHeader ( arg ) ;
String out = ( String ) template . sendBody ( arg ) ;
String out = consumer . receiveBodyNoWait ( arg ) ;
String out = template . requestBody ( arg ) ;
String out = template . requestBody ( arg ) ;
String out = template . requestBody ( arg ) ;
String out = template . requestBody ( arg ) ;
String output = ( String ) template . requestBodyAndHeaders ( arg ) ;
String <unk> = ( parent == null ? file . getName ( arg ) : builder . toString ( arg ) ) ;
String path = file . getRelativeFileName ( arg ) ;
String path = u . <unk> ( arg ) ;
String projectName = ( String ) jdbcTemplate . queryForObject ( arg ) ;
String projectName = ( String ) jdbcTemplate . queryForObject ( arg ) ;
String projectName = ( String ) jdbcTemplate . queryForObject ( arg ) ;
String property = message . getExchange ( arg ) . getContext ( arg ) . getProperties ( arg ) . get ( arg ) ;
String property = message . getExchange ( arg ) . getContext ( arg ) . getProperties ( arg ) . get ( arg ) ;
String queue = getDestination ( arg ) ;
String <unk> = ( ( Text ) value ) . toString ( arg ) ;
String <unk> = exception . <unk> ( arg ) . <unk> ( arg ) ;
String relatedPath = null ;
String relativeName = exchange . getGenericFile ( arg ) . getRelativeFileName ( arg ) ;
String relativeName = exchange . getGenericFile ( arg ) . getRelativeFileName ( arg ) ;
String remoteResponse = IOUtils . toString ( arg ) ;
String remoteResponse = IOUtils . toString ( arg ) ;
String <unk> = endpoint . getConfiguration ( arg ) . remoteServerInformation ( arg ) ;
String reply = ( String ) future . get ( arg ) ;
String reply = endpoint . <unk> ( arg ) ;
String reply = template . requestBody ( arg ) ;
String res = ( String ) <unk> . next ( arg ) ;
String response = ( String ) template . extractFutureBody ( arg ) ;
String response = ( String ) template . extractFutureBody ( arg ) ;
String response = HttpClient . send ( arg ) ;
String response = HttpClient . send ( arg ) ;
String response = HttpClient . send ( arg ) ;
String response = HttpClient . send ( arg ) ;
String response = context . getTypeConverter ( arg ) . convertTo ( arg ) ;
String response = template . asyncExtractBody ( arg ) ;
String response = template . extractFutureBody ( arg ) ;
String response = template . extractFutureBody ( arg ) ;
String response = template . requestBody ( arg ) ;
String response = template . requestBody ( arg ) ;
String result = ( String ) template . requestBody ( arg ) ;
String result = ( String ) template . sendBody ( arg ) ;
String result = ( String ) template . sendBody ( arg ) ;
String result = getFactory ( arg ) . unbind ( arg ) ;
String result = getFactory ( arg ) . unbind ( arg ) ;
String result = template . asyncExtractBody ( arg ) ;
String result = template . asyncExtractBody ( arg ) ;
String result = template . asyncExtractBody ( arg ) ;
String result = template . asyncExtractBody ( arg ) ;
String result = template . asyncExtractBody ( arg ) ;
String result = template . extractFutureBody ( arg ) ;
String routeStackTrace = ProcessorDefinitionHelper . dumpMessageHistoryStacktrace ( arg ) ;
String routeStackTrace = ProcessorDefinitionHelper . dumpMessageHistoryStacktrace ( arg ) ;
String s = camelContext . getProperties ( arg ) . get ( arg ) ;
String s = camelContext . getProperties ( arg ) . get ( arg ) ;
String s = key . toLowerCase ( arg ) ;
String s = key . toString ( arg ) . toLowerCase ( arg ) ;
String s = key . toString ( arg ) . toLowerCase ( arg ) ;
String s = key . toString ( arg ) . toLowerCase ( arg ) ;
String s = simple . <unk> ( arg ) ;
String s = xml . toString ( arg ) ;
String s = xml . toString ( arg ) ;
String <unk> = UnsafeUriCharactersEncoder . encode ( arg ) ;
String scheme = splitURI [ 0 ] ;
String <unk> = ( String ) parameters . remove ( arg ) ;
String <unk> =  + ps . <unk> ( arg ) ;
String separator = getFactory ( arg ) . <unk> ( arg ) ;
String soapAction = ( String ) exchange . getIn ( arg ) . getHeader ( arg ) ;
String soapAction = soapActionHeader != null ? soapActionHeader : endpoint . getConfiguration ( arg ) . <unk> ( arg ) ;
String <unk> = ( String ) exchange . getIn ( arg ) . getHeader ( arg ) ;
String <unk> = route . <unk> ( arg ) ;
String state = ( ( JcloudsComputeEndpoint ) getEndpoint ( arg ) ) . getNodeState ( arg ) ;
String <unk> = null ;
String target = endpoint . getConfiguration ( arg ) . getTarget ( arg ) ;
String text = ExchangeHelper . convertToType ( arg ) ;
String text = ExchangeHelper . getMandatoryOutBody ( arg ) ;
String text = ExchangeHelper . getMandatoryOutBody ( arg ) ;
String text = IOConverter . toString ( arg ) ;
String text = evaluateStringExpression ( arg ) ;
String text = evaluateStringExpression ( arg ) ;
String text = exchange . getOut ( arg ) . getBody ( arg ) ;
String <unk> = this . getAlgorithm ( arg ) ;
String toNode = definition . getId ( arg ) ;
String toNode = nodeId ;
String toNode = nodeId ;
String type = ( ascending ) ? ascending : <unk> ;
String type = element . getAttribute ( arg ) ;
String u = parameters . get ( arg ) ;
String u = parameters . get ( arg ) ;
String u = url ;
String u = url ;
String uri = exchange . getFromEndpoint ( arg ) . getEndpointUri ( arg ) ;
String uri = getEndpoint ( arg ) . getEndpointUri ( arg ) ;
String uri = httpExchange . <unk> ( arg ) ;
String uri = value . toString ( arg ) ;
String url = HttpProducerHelper . createURL ( arg ) ;
String url = HttpProducerHelper . createURL ( arg ) ;
String url = <unk> ( arg ) + filename ;
String url = <unk> + filename ;
String <unk> = ( ( JcloudsComputeEndpoint ) getEndpoint ( arg ) ) . <unk> ( arg ) ;
String value = ( String ) cfg . get ( arg ) ;
String value = ( String ) entry . getValue ( arg ) ;
String value = ( String ) val . get ( arg ) ;
String value = ( String ) val . get ( arg ) ;
String value = <unk> . <unk> ( arg ) ;
String value = cfg . get ( arg ) ;
String value = exchange . getContext ( arg ) . getTypeConverter ( arg ) . convertTo ( arg ) ;
String value = <unk> [ 1 ] ;
String value = keyValuePairField . tag ( arg ) + this . getKeyValuePairSeparator ( arg ) + valueFormated + separator ;
String value = keyValuePairField . tag ( arg ) + this . getKeyValuePairSeparator ( arg ) + valueFormated ;
String value = params [ i - 1 ] ;
String valueFormated ;
String valueFormated ;
String xml = converter . convertTo ( arg ) ;
String xml = message . getBody ( arg ) ;
StringBuffer answer = new StringBuffer ( arg ) ;
StringBuffer b = new StringBuffer ( arg ) . append ( arg ) ;
StringBuffer body = new StringBuffer ( arg ) ;
StringBuffer body = new StringBuffer ( arg ) ;
StringBuffer buf = new StringBuffer ( arg ) ;
StringBuffer buf = new StringBuffer ( arg ) ;
StringBuffer buffer = new StringBuffer ( arg ) . append ( arg ) . append ( arg ) . append ( arg ) . append ( arg ) . append ( arg ) . append ( arg ) . append ( arg ) . append ( arg ) . append ( arg ) . append ( arg ) . append ( arg ) . append ( arg ) ;
StringBuffer buffer = new StringBuffer ( arg ) . append ( arg ) . append ( arg ) . append ( arg ) . append ( arg ) . append ( arg ) . append ( arg ) . append ( arg ) . append ( arg ) . append ( arg ) . append ( arg ) ;
StringBuffer buffer = new StringBuffer ( arg ) . append ( arg ) . append ( arg ) . append ( arg ) . append ( arg ) . append ( arg ) . append ( arg ) . append ( arg ) . append ( arg ) ;
StringBuffer buffer = new StringBuffer ( arg ) . append ( arg ) . append ( arg ) . append ( arg ) . append ( arg ) . append ( arg ) . append ( arg ) ;
StringBuffer buffer = new StringBuffer ( arg ) . append ( arg ) . append ( arg ) . append ( arg ) . append ( arg ) . append ( arg ) . append ( arg ) ;
StringBuffer buffer = new StringBuffer ( arg ) . append ( arg ) . append ( arg ) . append ( arg ) . append ( arg ) ;
StringBuffer buffer = new StringBuffer ( arg ) ;
StringBuffer buffer = new StringBuffer ( arg ) ;
StringBuffer buffer = new StringBuffer ( arg ) ;
StringBuffer buffer = new StringBuffer ( arg ) ;
StringBuffer buffer = new StringBuffer ( arg ) ;
StringBuffer buffer = new StringBuffer ( arg ) ;
StringBuffer buffer = new StringBuffer ( arg ) ;
StringBuffer buffer = new StringBuffer ( arg ) ;
StringBuffer buffer = new StringBuffer ( arg ) ;
StringBuffer buffer = new StringBuffer ( arg ) ;
StringBuffer buffer = new StringBuffer ( arg ) ;
StringBuffer buffer = new StringBuffer ( arg ) ;
StringBuffer buffer = new StringBuffer ( arg ) ;
StringBuffer buffer = new StringBuffer ( arg ) ;
StringBuffer buffer = new StringBuffer ( arg ) ;
StringBuffer buffer = new StringBuffer ( arg ) ;
StringBuffer buffer = new StringBuffer ( arg ) ;
StringBuffer buffer = new StringBuffer ( arg ) ;
StringBuffer buffer = new StringBuffer ( arg ) ;
StringBuffer buffer = new StringBuffer ( arg ) ;
StringBuffer buffer = new StringBuffer ( arg ) ;
StringBuffer buffer = new StringBuffer ( arg ) ;
StringBuffer buffer = new StringBuffer ( arg ) ;
StringBuffer buffer = new StringBuffer ( arg ) ;
StringBuffer buffer = new StringBuffer ( arg ) ;
StringBuffer buffer = new StringBuffer ( arg ) ;
StringBuffer buffer = new StringBuffer ( arg ) ;
StringBuffer in = new StringBuffer ( arg ) ;
StringBuffer in = new StringBuffer ( arg ) ;
StringBuffer in = new StringBuffer ( arg ) ;
StringBuffer in = new StringBuffer ( arg ) ;
StringBuffer in = new StringBuffer ( arg ) ;
StringBuffer methods = new StringBuffer ( arg ) ;
StringBuffer msg = new StringBuffer ( arg ) ;
StringBuffer msg = new StringBuffer ( arg ) ;
StringBuffer out = new StringBuffer ( arg ) ;
StringBuffer rc = new StringBuffer ( arg ) ;
StringBuffer result = new StringBuffer ( arg ) ;
StringBuffer result = new StringBuffer ( arg ) ;
StringBuffer sb = new StringBuffer ( arg ) ;
StringBuffer sb = new StringBuffer ( arg ) ;
StringBuffer sb = new StringBuffer ( arg ) ;
StringBuffer sb = new StringBuffer ( arg ) ;
StringBuffer sb = new StringBuffer ( arg ) ;
StringBuffer sb = new StringBuffer ( arg ) ;
StringBuffer sb = new StringBuffer ( arg ) ;
StringBuffer sb = new StringBuffer ( arg ) ;
StringBuffer sb = new StringBuffer ( arg ) ;
StringBuffer sb = new StringBuffer ( arg ) ;
StringBuffer sb = new StringBuffer ( arg ) ;
StringBuffer <unk> = new StringBuffer ( arg ) ;
StringBuffer <unk> = new StringBuffer ( arg ) ;
StringBuffer u = new StringBuffer ( arg ) ;
StringBuilder builder = null ;
StringBuilder methods = new StringBuilder ( arg ) ;
StringBuilder sb = new StringBuilder ( arg ) ;
<unk> <unk> = null ;
System . clearProperty ( arg ) ;
System . clearProperty ( arg ) ;
System . err . println ( arg ) ;
System . err . println ( arg ) ;
System . err . println ( arg ) ;
System . err . println ( arg ) ;
System . err . println ( arg ) ;
System . err . println ( arg ) ;
System . err . println ( arg ) ;
System . err . println ( arg ) ;
System . exit ( arg ) ;
System . exit ( arg ) ;
System . exit ( arg ) ;
System . exit ( arg ) ;
System . exit ( arg ) ;
System . out . print ( arg ) ;
System . out . print ( arg ) ;
System . out . print ( arg ) ;
System . out . println ( arg ) ;
System . out . println ( arg ) ;
System . out . println ( arg ) ;
System . out . println ( arg ) ;
System . out . println ( arg ) ;
System . out . println ( arg ) ;
System . out . println ( arg ) ;
System . out . println ( arg ) ;
System . out . println ( arg ) ;
System . out . println ( arg ) ;
System . out . println ( arg ) ;
System . out . println ( arg ) ;
System . out . println ( arg ) ;
System . out . println ( arg ) ;
System . out . println ( arg ) ;
System . out . println ( arg ) ;
System . out . println ( arg ) ;
System . out . println ( arg ) ;
System . out . println ( arg ) ;
System . out . println ( arg ) ;
System . out . println ( arg ) ;
System . out . println ( arg ) ;
System . out . println ( arg ) ;
System . out . println ( arg ) ;
System . out . println ( arg ) ;
System . out . println ( arg ) ;
System . out . println ( arg ) ;
System . out . println ( arg ) ;
System . out . println ( arg ) ;
System . out . println ( arg ) ;
System . out . println ( arg ) ;
System . out . println ( arg ) ;
System . out . println ( arg ) ;
System . out . println ( arg ) ;
System . out . println ( arg ) ;
System . out . println ( arg ) ;
System . out . println ( arg ) ;
System . out . println ( arg ) ;
System . out . println ( arg ) ;
System . out . println ( arg ) ;
System . out . println ( arg ) ;
System . out . println ( arg ) ;
System . out . println ( arg ) ;
System . out . println ( arg ) ;
System . out . println ( arg ) ;
System . out . println ( arg ) ;
System . out . println ( arg ) ;
System . out . println ( arg ) ;
System . out . println ( arg ) ;
System . out . println ( arg ) ;
System . out . println ( arg ) ;
System . setProperty ( arg ) ;
System . setProperty ( arg ) ;
SystemModstamp = systemModstamp ;
T rc = <unk> . <unk> ( arg ) ;
<unk> . set ( arg ) ;
TaskOptions answer = TaskOptions . Builder . url ( arg ) ;
TestBean bean = context . getRegistry ( arg ) . lookup ( arg ) ;
TestBean bean = context . getRegistry ( arg ) . lookup ( arg ) ;
TestPojo pojo = ( TestPojo ) context . getBean ( arg ) ;
TestPojo pojo = ( TestPojo ) context . getRegistry ( arg ) . lookup ( arg ) ;
TestPool testPool = new TestPool ( arg ) ;
TestPool testPool = new TestPool ( arg ) ;
TestPool testPool = new TestPool ( arg ) ;
TestPool testPool = new TestPool ( arg ) ;
TestPool testPool = new TestPool ( arg ) ;
TestSupport . assertNotNull ( arg ) ;
TestSupport . deleteDirectory ( arg ) ;
TestSupport . deleteDirectory ( arg ) ;
TestSupport . deleteDirectory ( arg ) ;
Thread . currentThread ( arg ) . sleep ( arg ) ;
Thread . currentThread ( arg ) . sleep ( arg ) ;
Thread . currentThread ( arg ) . sleep ( arg ) ;
Thread . currentThread ( arg ) . sleep ( arg ) ;
Thread . currentThread ( arg ) . sleep ( arg ) ;
Thread . currentThread ( arg ) . sleep ( arg ) ;
Thread . currentThread ( arg ) . sleep ( arg ) ;
Thread . currentThread ( arg ) . sleep ( arg ) ;
Thread . currentThread ( arg ) . sleep ( arg ) ;
Thread . currentThread ( arg ) . sleep ( arg ) ;
Thread . currentThread ( arg ) . sleep ( arg ) ;
Thread . currentThread ( arg ) . sleep ( arg ) ;
Thread . sleep ( arg ) ;
Thread . sleep ( arg ) ;
Thread . sleep ( arg ) ;
Thread . sleep ( arg ) ;
Thread . sleep ( arg ) ;
Thread . sleep ( arg ) ;
Thread . sleep ( arg ) ;
Thread . sleep ( arg ) ;
Thread . sleep ( arg ) ;
Thread . sleep ( arg ) ;
Thread . sleep ( arg ) ;
Thread . sleep ( arg ) ;
Thread . sleep ( arg ) ;
Thread . sleep ( arg ) ;
Thread . sleep ( arg ) ;
Thread . sleep ( arg ) ;
Thread . sleep ( arg ) ;
Thread . sleep ( arg ) ;
Thread . sleep ( arg ) ;
Thread . sleep ( arg ) ;
Thread . sleep ( arg ) ;
Thread . sleep ( arg ) ;
Thread . sleep ( arg ) ;
Thread . sleep ( arg ) ;
Thread . sleep ( arg ) ;
Thread . sleep ( arg ) ;
Thread . sleep ( arg ) ;
Thread . sleep ( arg ) ;
Thread . sleep ( arg ) ;
Thread . sleep ( arg ) ;
Thread . sleep ( arg ) ;
ThreadPoolExecutor answer = new ThreadPoolExecutor ( arg ) ;
ThreadPoolExecutor executor = endpoint . <unk> ( arg ) ;
ThreadPoolExecutor threadPoolExecutor = ( ThreadPoolExecutor ) getSplitter ( arg ) . <unk> ( arg ) ;
ThreadPoolExecutor threadPoolExecutor = getSplitter ( arg ) . <unk> ( arg ) ;
ThreadPoolProfile profile = context . getExecutorServiceStrategy ( arg ) . getDefaultThreadPoolProfile ( arg ) ;
ThreadPoolProfile profile = context . getExecutorServiceStrategy ( arg ) . getDefaultThreadPoolProfile ( arg ) ;
ThreadPoolProfile profile = context . getExecutorServiceStrategy ( arg ) . getDefaultThreadPoolProfile ( arg ) ;
ThreadPoolProfile profile = context . getExecutorServiceStrategy ( arg ) . getThreadPoolProfile ( arg ) ;
ThreadPoolProfile profile = context . getExecutorServiceStrategy ( arg ) . getThreadPoolProfile ( arg ) ;
ThreadPoolProfile profile = new ThreadPoolProfileSupport ( arg ) ;
ThreadPoolProfile profile = new ThreadPoolProfileSupport ( arg ) ;
ThreadSafeClientConnManager answer = new ThreadSafeClientConnManager ( arg ) ;
ThreadsDefinition answer = threads ( arg ) ;
ThreadsDefinition answer = threads ( arg ) ;
ThreadsDefinition answer = threads ( arg ) ;
ThrottlerDefinition answer = new ThrottlerDefinition ( arg ) ;
Throwable cause = e . getTargetException ( arg ) ;
Throwable e ;
Throwable e = exchange . getException ( arg ) ;
Throwable e = null ;
Throwable exception = exchange . getException ( arg ) ;
Throwable exception = exchange . getException ( arg ) ;
Throwable fault = exchange . getFault ( arg ) ;
Throwable <unk> = exchange . getException ( arg ) ;
Throwable <unk> = ( t == null ) ? new Throwable ( arg ) : t ;
Throwable <unk> = e . getTargetException ( arg ) ;
TimedTaskManagerFactory . getInstance ( arg ) . addTask ( arg ) ;
TimedTaskManagerFactory . getInstance ( arg ) . <unk> ( arg ) ;
TraceEvent event = ( TraceEvent ) exchange ;
TraceFormatter <unk> = context . getRegistry ( arg ) . lookup ( arg ) ;
TraceHandlerTestHandler handler = ( TraceHandlerTestHandler ) tracer . getTraceHandler ( arg ) ;
Tracer tracer = ( Tracer ) this . applicationContext . getBean ( arg ) ;
<unk> rce ;
<unk> <unk> = null ;
TransactionErrorHandler answer = new TransactionErrorHandler ( arg ) ;
TransactionErrorHandlerBuilder errorHandler = ( TransactionErrorHandlerBuilder ) ctx . getBean ( arg ) ;
TransactionErrorHandlerBuilder errorHandler = ( TransactionErrorHandlerBuilder ) ctx . getBean ( arg ) ;
TransformType node = assertNthProcessorInstanceOf ( arg ) ;
TransformType node = <unk> ( arg ) ;
Transformer transformer = <unk> ( arg ) ;
Transformer transformer = getTemplate ( arg ) . newTransformer ( arg ) ;
TreeMap < Integer , List < String >> sortValues = new TreeMap < Integer , List < String >> ( arg ) ;
TreeMap < Integer , List > sortValues = new TreeMap < Integer , List > ( arg ) ;
TreeMap < String , Endpoint > answer = new TreeMap < String , Endpoint > ( arg ) ;
TreeMap < String , Object > answer = new TreeMap < String , Object > ( arg ) ;
TreeMap answer = new TreeMap ( arg ) ;
<unk> result = null ;
TryType tryType = from ( arg ) . tryBlock ( arg ) . process ( arg ) . to ( arg ) ;
TryType tryType = from ( arg ) . tryBlock ( arg ) . process ( arg ) . to ( arg ) ;
<unk> <unk> = twitterEndpoint . getTwitter ( arg ) ;
<unk> tc = new <unk> ( arg ) ;
<unk> endpoint = null ;
TwitterProperties properties = new TwitterProperties ( arg ) ;
<unk> converter = <unk> ( arg ) ;
TypeConverterLoader loader = ( TypeConverterLoader ) bundleContext . getService ( arg ) ;
<unk> <unk> = <unk> ( arg ) ;
URI <unk> = null ;
URI wsAddressingAction = wsAddressingActionHeader != null ? wsAddressingActionHeader : endpoint . getConfiguration ( arg ) . <unk> ( arg ) ;
URL mainClasses = new File ( arg ) . toURL ( arg ) ;
URL mainClasses = new File ( arg ) . toURL ( arg ) ;
URL url = urls . nextElement ( arg ) ;
URLConnection urlConnection = url . openConnection ( arg ) ;
URLConnection urlConnection = url . openConnection ( arg ) ;
<unk> handler = ObjectHelper . newInstance ( arg ) ;
UnitOfWork uow = UnitOfWorkHelper . createUoW ( arg ) ;
UnmarshalProcessor processor = new UnmarshalProcessor ( arg ) ;
UnmarshalProcessor processor = new UnmarshalProcessor ( arg ) ;
UnmarshalProcessor processor = new UnmarshalProcessor ( arg ) ;
UnmarshalProcessor processor = new UnmarshalProcessor ( arg ) ;
<unk> unmarshaller = <unk> ( arg ) ;
V answer = super . get ( arg ) ;
<unk> <unk> = <unk> ( arg ) . <unk> ( arg ) ;
ValueHolder that = ( ValueHolder ) o ;
Vector files = channel . ls ( arg ) ;
Vector files = channel . ls ( arg ) ;
Vector files = channel . ls ( arg ) ;
WaitForTaskToComplete wait = waitTaskComplete ;
WaitForTaskToComplete wait = waitTaskComplete ;
<unk> servlet = <unk> . get ( arg ) ;
<unk> loadBalancer = null ;
WireTapDefinition answer = new WireTapDefinition ( arg ) ;
WireTapDefinition answer = new WireTapDefinition ( arg ) ;
WireTapDefinition answer = new WireTapDefinition ( arg ) ;
WireTapDefinition answer = new WireTapDefinition ( arg ) ;
WireTapDefinition answer = new WireTapDefinition ( arg ) ;
<unk> <unk> = this . getCamelContext ( arg ) . getRegistry ( arg ) . lookup ( arg ) ;
Writer out = new BufferedWriter ( arg ) ;
Writer writer = new BufferedWriter ( arg ) ;
<unk> <unk> = null ;
XMLStreamWriter writer = XMLOutputFactory . newInstance ( arg ) . createXMLStreamWriter ( arg ) ;
XMLStreamWriter writer = exchange . getContext ( arg ) . getTypeConverter ( arg ) . convertTo ( arg ) ;
XMLStreamWriter writer = <unk> ( arg ) . createXMLStreamWriter ( arg ) ;
<unk> . <unk> ( arg ) . newTransformer ( arg ) . transform ( arg ) ;
<unk> connection ;
<unk> annotation = ( RoutesType . class ) . getAnnotation ( arg ) ;
XmlRpcClientConfigImpl config = new XmlRpcClientConfigImpl ( arg ) ;
XmppBinding binding = ( XmppBinding ) getExchange ( arg ) . getProperty ( arg ) ;
XmppBinding binding = ( XmppBinding ) getExchange ( arg ) . getProperty ( arg ) ;
XmppExchange exchange = endpoint . createExchange ( arg ) ;
<unk> <unk> = receivedExchange . getIn ( arg ) ;
XmppRouteTest . log . debug ( arg ) ;
XmppRouteTest . log . debug ( arg ) ;
XsltBuilder < E > answer = new XsltBuilder < E > ( arg ) ;
XsltBuilder <unk> = getCamelContext ( arg ) . getInjector ( arg ) . newInstance ( arg ) ;
<unk> config = getConfiguration ( arg ) ;
ZooKeeperEndpoint <unk> = ( ZooKeeperEndpoint ) camelContext . getEndpoint ( arg ) ;
activity . <unk> ( arg ) ;
<unk> . <unk> ( arg ) ;
actual = ExchangeHelper . getMandatoryInBody ( arg ) ;
actual = ExchangeHelper . getMandatoryInBody ( arg ) ;
actual = ExchangeHelper . getMandatoryInBody ( arg ) ;
actual = ExchangeHelper . getMandatoryInBody ( arg ) ;
actual = ExchangeHelper . getMandatoryInBody ( arg ) ;
actual = ExchangeHelper . getMandatoryInBody ( arg ) ;
actual = ExchangeHelper . getMandatoryOutBody ( arg ) ;
actual = ExchangeHelper . getMandatoryOutBody ( arg ) ;
actual = ExchangeHelper . getMandatoryOutBody ( arg ) ;
actual = ExchangeHelper . getMandatoryOutBody ( arg ) ;
actual = ExchangeHelper . getMandatoryOutBody ( arg ) ;
actual = ExchangeHelper . getMandatoryOutBody ( arg ) ;
actual = endpoint . createExchange ( arg ) ;
actual = endpoint . toExchangeType ( arg ) ;
<unk> = ExchangeHelper . getMandatoryInBody ( arg ) ;
<unk> = new ArrayList ( arg ) ;
<unk> ( arg ) ;
<unk> ( arg ) ;
<unk> ( arg ) ;
addConsumer ( arg ) ;
<unk> ( arg ) ;
addInterceptor ( arg ) ;
addInterceptor ( arg ) ;
addRoutes ( arg ) ;
addRoutes ( arg ) ;
<unk> ( arg ) ;
addService ( arg ) ;
<unk> ( arg ) ;
addTask ( arg ) ;
addTask ( arg ) ;
<unk> . add ( arg ) ;
addressUri = UnsafeUriCharactersEncoder . encode ( arg ) ;
addressUri = UnsafeUriCharactersEncoder . encode ( arg ) ;
adviceById ( arg ) . after ( arg ) . to ( arg ) . transform ( arg ) ;
adviceById ( arg ) . before ( arg ) . to ( arg ) . transform ( arg ) ;
adviceById ( arg ) . remove ( arg ) ;
adviceById ( arg ) . replace ( arg ) . multicast ( arg ) . to ( arg ) . to ( arg ) ;
adviceById ( arg ) . replace ( arg ) . multicast ( arg ) . to ( arg ) . to ( arg ) ;
adviceById ( arg ) . replace ( arg ) . to ( arg ) ;
adviceByToString ( arg ) . after ( arg ) . to ( arg ) . transform ( arg ) ;
adviceByToString ( arg ) . before ( arg ) . to ( arg ) . transform ( arg ) ;
adviceByToString ( arg ) . remove ( arg ) ;
adviceByToString ( arg ) . replace ( arg ) . multicast ( arg ) . to ( arg ) . to ( arg ) ;
adviceByToString ( arg ) . replace ( arg ) . to ( arg ) ;
<unk> = Thread . currentThread ( arg ) . getName ( arg ) ;
agent . setSanitize ( arg ) ;
agg . <unk> ( arg ) ;
<unk> = camelContext . getExecutorServiceStrategy ( arg ) . newThreadPool ( arg ) ;
aggregated . expectedBodiesReceived ( arg ) ;
aggregationCount ++ ;
aggregationCount = 0 ;
<unk> . submit ( arg ) ;
aggregationStrategy = routeContext . lookup ( arg ) ;
aggregationStrategy = routeContext . lookup ( arg ) ;
aggregationStrategy = routeContext . lookup ( arg ) ;
aggregationStrategy = routeContext . lookup ( arg ) ;
<unk> = new HashSet < Class > ( arg ) ;
<unk> = context . getRegistry ( arg ) . lookup ( arg ) ;
annotedFields . put ( arg ) ;
annotedFields . put ( arg ) ;
answer . add ( arg ) ;
answer . <unk> ( arg ) ;
answer . getSslContextFactory ( arg ) . setKeyManagerPassword ( arg ) ;
answer . getSslContextFactory ( arg ) . setKeyManagerPassword ( arg ) ;
answer . getSslContextFactory ( arg ) . setKeyStore ( arg ) ;
answer . getSslContextFactory ( arg ) . setKeyStore ( arg ) ;
answer . getSslContextFactory ( arg ) . setKeyStorePassword ( arg ) ;
answer . getSslContextFactory ( arg ) . setKeyStorePassword ( arg ) ;
answer . getSslContextFactory ( arg ) . setKeyStorePath ( arg ) ;
answer . getSslContextFactory ( arg ) . setKeyStorePath ( arg ) ;
answer . setAbsoluteFileName ( arg ) ;
answer . setAbsoluteFileName ( arg ) ;
answer . setAbsoluteFileName ( arg ) ;
answer . <unk> ( arg ) ;
answer . setDelay ( arg ) ;
answer . <unk> ( arg ) ;
answer . setException ( arg ) ;
answer . <unk> ( arg ) ;
answer . <unk> ( arg ) ;
answer . setHeader ( arg ) ;
answer . setHeaders ( arg ) ;
answer . <unk> ( arg ) ;
answer . setInitialRedeliveryDelay ( arg ) ;
answer . setJMSReplyTo ( arg ) ;
answer . setJMSReplyTo ( arg ) ;
answer . setJMSReplyTo ( arg ) ;
answer . setKeyPassword ( arg ) ;
answer . setKeyPassword ( arg ) ;
answer . setKeystore ( arg ) ;
answer . setKeystore ( arg ) ;
answer . setLogExhausted ( arg ) ;
answer . setMaximumCacheSize ( arg ) ;
answer . setMaximumCacheSize ( arg ) ;
answer . <unk> ( arg ) ;
answer . <unk> ( arg ) ;
answer . <unk> ( arg ) ;
answer . setPassword ( arg ) ;
answer . setPassword ( arg ) ;
answer . setRedeliverDelay ( arg ) ;
answer . setRelativeFileName ( arg ) ;
answer . setRelativeFileName ( arg ) ;
answer . setRelativeFileName ( arg ) ;
answer . setRelativeFileName ( arg ) ;
answer . setRelativeFileName ( arg ) ;
answer . start ( arg ) ;
answer . start ( arg ) ;
answer = ( ( JAXBElement ) answer ) . getValue ( arg ) ;
answer = ( BlockingQueue < Exchange > ) createQueue ( arg ) ;
answer = ( GroupedExchange ) oldExchange ;
answer = DefaultExchange . DEFAULT_ID_GENERATOR . generateId ( arg ) ;
answer = ExecutorServiceHelper . newCachedThreadPool ( arg ) ;
answer = ExecutorServiceHelper . newThreadPool ( arg ) ;
answer = FileUtil . normalizePath ( arg ) ;
answer = URISupport . <unk> ( arg ) ;
answer = UuidGenerator . get ( arg ) . generateUuid ( arg ) ;
answer = <unk> + getGenericFileEndpoint ( arg ) . <unk> ( arg ) ;
answer = camelContext . getExecutorServiceStrategy ( arg ) . newCachedThreadPool ( arg ) ;
answer = camelContext . getRegistry ( arg ) . lookup ( arg ) ;
answer = component . createEndpoint ( arg ) ;
answer = component . createEndpoint ( arg ) ;
answer = context . getTypeConverter ( arg ) . convertTo ( arg ) ;
answer = context . getTypeConverter ( arg ) . convertTo ( arg ) ;
answer = context . getTypeConverter ( arg ) . convertTo ( arg ) ;
answer = converter . convertTo ( arg ) ;
answer = <unk> ;
answer = exchange . getHeader ( arg ) ;
answer = exchange . getHeaders ( arg ) . getHeader ( arg ) ;
answer = exchange . getProperty ( arg ) ;
answer = exchange . getProperty ( arg ) ;
answer = false ;
answer = <unk> ( arg ) . <unk> ( arg ) ;
answer = <unk> ? HttpMethods . <unk> : HttpMethods . <unk> ;
answer = jmsMessage . getObjectProperty ( arg ) ;
answer = marshaller . unmarshallExchange ( arg ) ;
answer = marshaller . unmarshallExchange ( arg ) ;
answer = message . getHeaders ( arg ) . getHeader ( arg ) ;
answer = new BeanExpression ( arg ) ;
answer = new BeanExpression ( arg ) ;
answer = new ClassPathXmlApplicationContext ( arg ) ;
answer = new DefaultFactoryFinder ( arg ) ;
answer = new DefaultProducerTemplate ( arg ) ;
answer = new DefaultProducerTemplate ( arg ) ;
answer = new HttpNettyServerBootstrapFactory ( arg ) ;
answer = new <unk> ( arg ) ;
answer = new ManagedService ( arg ) ;
answer = <unk> ;
answer = pool . acquireIfAbsent ( arg ) ;
answer = routeContext . lookup ( arg ) ;
answer = super . getHeader ( arg ) ;
answer = unmarshallExchange ( arg ) ;
answer = unmarshaller . unmarshal ( arg ) ;
answer = unmarshaller . unmarshal ( arg ) ;
answer = unmarshaller . unmarshal ( arg ) ;
ap . <unk> ( arg ) ;
ap . setEagerEvaluateCompletionPredicate ( arg ) ;
ap . setEagerEvaluateCompletionPredicate ( arg ) ;
ap . setEagerEvaluateCompletionPredicate ( arg ) ;
ap . setEagerEvaluateCompletionPredicate ( arg ) ;
<unk> ( arg ) ;
applicationContext . getBean ( arg ) ;
applicationContext = createApplicationContext ( arg ) ;
applicationContext = createApplicationContext ( arg ) ;
applicationContext = new ClassPathXmlApplicationContext ( arg ) ;
archive = ArchiveUtil . createJBossASArchive ( arg ) ;
archive = ArchiveUtil . createJBossASArchive ( arg ) ;
archive = ArchiveUtil . createWeldArchive ( arg ) ;
archive = ArchiveUtil . createWeldArchive ( arg ) ;
args . add ( arg ) ;
args . add ( arg ) ;
arguments . add ( arg ) ;
asserFiles ( arg ) ;
asserFiles ( arg ) ;
asserFiles ( arg ) ;
asserFiles ( arg ) ;
<unk> ( arg ) ;
assertEquals ( arg ) ;
assertEquals ( arg ) ;
assertEquals ( arg ) ;
assertEquals ( arg ) ;
assertEquals ( arg ) ;
assertEquals ( arg ) ;
assertEquals ( arg ) ;
assertEquals ( arg ) ;
assertEquals ( arg ) ;
assertEquals ( arg ) ;
assertEquals ( arg ) ;
assertEquals ( arg ) ;
assertEquals ( arg ) ;
assertEquals ( arg ) ;
assertEquals ( arg ) ;
assertEquals ( arg ) ;
assertEquals ( arg ) ;
assertEquals ( arg ) ;
assertEquals ( arg ) ;
assertEquals ( arg ) ;
assertEquals ( arg ) ;
assertEquals ( arg ) ;
assertEquals ( arg ) ;
assertEquals ( arg ) ;
assertEquals ( arg ) ;
assertEquals ( arg ) ;
assertEquals ( arg ) ;
assertEquals ( arg ) ;
assertEquals ( arg ) ;
assertEquals ( arg ) ;
assertEquals ( arg ) ;
assertEquals ( arg ) ;
assertEquals ( arg ) ;
assertEquals ( arg ) ;
assertEquals ( arg ) ;
assertEquals ( arg ) ;
assertEquals ( arg ) ;
assertEquals ( arg ) ;
assertEquals ( arg ) ;
assertEquals ( arg ) ;
assertEquals ( arg ) ;
assertEquals ( arg ) ;
assertEquals ( arg ) ;
assertEquals ( arg ) ;
assertEquals ( arg ) ;
assertEquals ( arg ) ;
assertEquals ( arg ) ;
assertEquals ( arg ) ;
assertEquals ( arg ) ;
assertEquals ( arg ) ;
assertEquals ( arg ) ;
assertEquals ( arg ) ;
assertEquals ( arg ) ;
assertEquals ( arg ) ;
assertExpression ( arg ) ;
assertExpression ( arg ) ;
assertExpression ( arg ) ;
assertExpression ( arg ) ;
assertExpression ( arg ) ;
assertExpression ( arg ) ;
assertExpression ( arg ) ;
assertExpression ( arg ) ;
assertExpression ( arg ) ;
assertFalse ( arg ) ;
assertFalse ( arg ) ;
assertFalse ( arg ) ;
assertFalse ( arg ) ;
assertFalse ( arg ) ;
assertFalse ( arg ) ;
assertFalse ( arg ) ;
assertFilePath ( arg ) ;
assertFilePath ( arg ) ;
assertFilePath ( arg ) ;
assertIsInstanceOf ( arg ) ;
assertIsInstanceOf ( arg ) ;
assertIsInstanceOf ( arg ) ;
assertIsInstanceOf ( arg ) ;
assertIsInstanceOf ( arg ) ;
assertIsInstanceOf ( arg ) ;
assertIsInstanceOf ( arg ) ;
assertIsInstanceOf ( arg ) ;
assertIsSatisfied ( arg ) ;
assertIsSatisfied ( arg ) ;
assertIsSatisfied ( arg ) ;
assertIsSatisfied ( arg ) ;
assertIsSatisfied ( arg ) ;
assertIsSatisfied ( arg ) ;
assertIsSatisfied ( arg ) ;
assertIsSatisfied ( arg ) ;
assertIsSatisfied ( arg ) ;
assertIsSatisfied ( arg ) ;
assertIsSatisfied ( arg ) ;
assertIsSatisfied ( arg ) ;
assertIsSatisfied ( arg ) ;
assertIsSatisfied ( arg ) ;
assertMessageHeader ( arg ) ;
assertMessageHeader ( arg ) ;
<unk> ( arg ) ;
assertMockEndpointsSatisifed ( arg ) ;
assertMockEndpointsSatisifed ( arg ) ;
assertMockEndpointsSatisifed ( arg ) ;
assertMockEndpointsSatisifed ( arg ) ;
assertMockEndpointsSatisifed ( arg ) ;
assertMockEndpointsSatisifed ( arg ) ;
assertMockEndpointsSatisifed ( arg ) ;
assertMockEndpointsSatisifed ( arg ) ;
assertMockEndpointsSatisifed ( arg ) ;
assertMockEndpointsSatisifed ( arg ) ;
assertMockEndpointsSatisifed ( arg ) ;
assertMockEndpointsSatisifed ( arg ) ;
assertMockEndpointsSatisifed ( arg ) ;
assertMockEndpointsSatisifed ( arg ) ;
assertMockEndpointsSatisifed ( arg ) ;
assertMockEndpointsSatisifed ( arg ) ;
assertMockEndpointsSatisifed ( arg ) ;
assertMockEndpointsSatisifed ( arg ) ;
assertMockEndpointsSatisifed ( arg ) ;
assertMockEndpointsSatisifed ( arg ) ;
assertMockEndpointsSatisifed ( arg ) ;
assertMockEndpointsSatisifed ( arg ) ;
assertMockEndpointsSatisifed ( arg ) ;
assertMockEndpointsSatisifed ( arg ) ;
assertMockEndpointsSatisifed ( arg ) ;
assertMockEndpointsSatisifed ( arg ) ;
assertMockEndpointsSatisifed ( arg ) ;
assertMockEndpointsSatisifed ( arg ) ;
assertMockEndpointsSatisifed ( arg ) ;
assertMockEndpointsSatisifed ( arg ) ;
assertMockEndpointsSatisifed ( arg ) ;
assertMockEndpointsSatisifed ( arg ) ;
assertMockEndpointsSatisifed ( arg ) ;
assertMockEndpointsSatisifed ( arg ) ;
assertMockEndpointsSatisifed ( arg ) ;
assertMockEndpointsSatisifed ( arg ) ;
assertMockEndpointsSatisifed ( arg ) ;
assertMockEndpointsSatisifed ( arg ) ;
assertMockEndpointsSatisifed ( arg ) ;
assertMockEndpointsSatisifed ( arg ) ;
assertMockEndpointsSatisifed ( arg ) ;
assertMockEndpointsSatisifed ( arg ) ;
assertMockEndpointsSatisifed ( arg ) ;
assertMockEndpointsSatisifed ( arg ) ;
assertMockEndpointsSatisifed ( arg ) ;
assertMockEndpointsSatisifed ( arg ) ;
assertMockEndpointsSatisifed ( arg ) ;
assertMockEndpointsSatisifed ( arg ) ;
assertMockEndpointsSatisifed ( arg ) ;
assertMockEndpointsSatisifed ( arg ) ;
assertMockEndpointsSatisifed ( arg ) ;
assertMockEndpointsSatisifed ( arg ) ;
assertMockEndpointsSatisifed ( arg ) ;
assertMockEndpointsSatisifed ( arg ) ;
assertMockEndpointsSatisifed ( arg ) ;
assertMockEndpointsSatisifed ( arg ) ;
assertMockEndpointsSatisifed ( arg ) ;
assertMockEndpointsSatisifed ( arg ) ;
assertMockEndpointsSatisifed ( arg ) ;
assertMockEndpointsSatisifed ( arg ) ;
assertMockEndpointsSatisifed ( arg ) ;
assertMockEndpointsSatisifed ( arg ) ;
assertMockEndpointsSatisifed ( arg ) ;
assertMockEndpointsSatisifed ( arg ) ;
assertMockEndpointsSatisifed ( arg ) ;
assertMockEndpointsSatisifed ( arg ) ;
assertMockEndpointsSatisifed ( arg ) ;
assertMockEndpointsSatisifed ( arg ) ;
assertMockEndpointsSatisifed ( arg ) ;
assertMockEndpointsSatisifed ( arg ) ;
assertMockEndpointsSatisifed ( arg ) ;
assertMockEndpointsSatisifed ( arg ) ;
assertMockEndpointsSatisifed ( arg ) ;
assertMockEndpointsSatisifed ( arg ) ;
assertMockEndpointsSatisifed ( arg ) ;
assertMockEndpointsSatisifed ( arg ) ;
assertMockEndpointsSatisifed ( arg ) ;
assertMockEndpointsSatisifed ( arg ) ;
assertMockEndpointsSatisifed ( arg ) ;
assertMockEndpointsSatisifed ( arg ) ;
assertMockEndpointsSatisifed ( arg ) ;
assertMockEndpointsSatisifed ( arg ) ;
assertMockEndpointsSatisifed ( arg ) ;
assertMockEndpointsSatisifed ( arg ) ;
assertMockEndpointsSatisifed ( arg ) ;
assertMockEndpointsSatisifed ( arg ) ;
assertMockEndpointsSatisifed ( arg ) ;
assertMockEndpointsSatisifed ( arg ) ;
assertMockEndpointsSatisifed ( arg ) ;
assertMockEndpointsSatisifed ( arg ) ;
assertMockEndpointsSatisifed ( arg ) ;
assertMockEndpointsSatisifed ( arg ) ;
assertMockEndpointsSatisifed ( arg ) ;
assertMockEndpointsSatisifed ( arg ) ;
assertMockEndpointsSatisifed ( arg ) ;
assertMockEndpointsSatisifed ( arg ) ;
assertMockEndpointsSatisifed ( arg ) ;
assertMockEndpointsSatisifed ( arg ) ;
assertMockEndpointsSatisifed ( arg ) ;
assertMockEndpointsSatisifed ( arg ) ;
assertMockEndpointsSatisifed ( arg ) ;
assertMockEndpointsSatisifed ( arg ) ;
assertMockEndpointsSatisifed ( arg ) ;
assertMockEndpointsSatisifed ( arg ) ;
assertMockEndpointsSatisifed ( arg ) ;
assertMockEndpointsSatisifed ( arg ) ;
assertMockEndpointsSatisifed ( arg ) ;
assertMockEndpointsSatisifed ( arg ) ;
assertMockEndpointsSatisifed ( arg ) ;
assertMockEndpointsSatisifed ( arg ) ;
assertMockEndpointsSatisifed ( arg ) ;
assertMockEndpointsSatisifed ( arg ) ;
assertMockEndpointsSatisifed ( arg ) ;
assertMockEndpointsSatisifed ( arg ) ;
assertMockEndpointsSatisifed ( arg ) ;
assertMockEndpointsSatisifed ( arg ) ;
assertMockEndpointsSatisifed ( arg ) ;
assertMockEndpointsSatisifed ( arg ) ;
assertMockEndpointsSatisifed ( arg ) ;
assertMockEndpointsSatisifed ( arg ) ;
assertMockEndpointsSatisifed ( arg ) ;
assertMockEndpointsSatisifed ( arg ) ;
assertMockEndpointsSatisifed ( arg ) ;
assertMockEndpointsSatisifed ( arg ) ;
assertMockEndpointsSatisifed ( arg ) ;
assertMockEndpointsSatisifed ( arg ) ;
assertMockEndpointsSatisifed ( arg ) ;
assertMockEndpointsSatisifed ( arg ) ;
assertMockEndpointsSatisifed ( arg ) ;
assertMockEndpointsSatisifed ( arg ) ;
assertMockEndpointsSatisifed ( arg ) ;
assertMockEndpointsSatisifed ( arg ) ;
assertMockEndpointsSatisifed ( arg ) ;
assertMockEndpointsSatisifed ( arg ) ;
assertMockEndpointsSatisifed ( arg ) ;
assertMockEndpointsSatisifed ( arg ) ;
assertMockEndpointsSatisifed ( arg ) ;
assertMockEndpointsSatisifed ( arg ) ;
assertMockEndpointsSatisifed ( arg ) ;
assertMockEndpointsSatisifed ( arg ) ;
assertMockEndpointsSatisifed ( arg ) ;
assertMockEndpointsSatisifed ( arg ) ;
assertMockEndpointsSatisifed ( arg ) ;
assertMockEndpointsSatisifed ( arg ) ;
assertMockEndpointsSatisifed ( arg ) ;
assertMockEndpointsSatisifed ( arg ) ;
assertMockEndpointsSatisifed ( arg ) ;
assertMockEndpointsSatisifed ( arg ) ;
assertNotNull ( arg ) ;
assertNotNull ( arg ) ;
assertNotNull ( arg ) ;
assertNotSame ( arg ) ;
assertNotSame ( arg ) ;
assertNull ( arg ) ;
assertNull ( arg ) ;
assertNull ( arg ) ;
assertNull ( arg ) ;
assertNull ( arg ) ;
assertNull ( arg ) ;
assertNull ( arg ) ;
assertNull ( arg ) ;
assertOutMessageHeader ( arg ) ;
assertOutMessageHeader ( arg ) ;
assertOutMessageHeader ( arg ) ;
<unk> ( arg ) ;
assertThat ( arg ) ;
assertThat ( arg ) ;
assertTo ( arg ) ;
assertTo ( arg ) ;
assertTo ( arg ) ;
assertTo ( arg ) ;
assertTo ( arg ) ;
assertTrue ( arg ) ;
assertTrue ( arg ) ;
assertTrue ( arg ) ;
assertTrue ( arg ) ;
assertTrue ( arg ) ;
assertTrue ( arg ) ;
assertTrue ( arg ) ;
assertTrue ( arg ) ;
assertTrue ( arg ) ;
assertTrue ( arg ) ;
assertValidContext ( arg ) ;
assertValidContext ( arg ) ;
assertValidContext ( arg ) ;
asyncProcessor = AsyncProcessorTypeConverter . convert ( arg ) ;
asyncProcessor = AsyncProcessorTypeConverter . convert ( arg ) ;
authorities [ i ] = new <unk> ( arg ) ;
<unk> = CONVERTER . convertTo ( arg ) ;
<unk> ( arg ) ;
b . <unk> ( arg ) . after ( arg ) . <unk> ( arg ) . <unk> ( arg ) ;
base = new File ( arg ) . getPath ( arg ) ;
<unk> ( arg ) ;
<unk> ++ ;
bean . addPropertyReference ( arg ) ;
bean . addPropertyReference ( arg ) ;
bean = ( S ) getApplicationContext ( arg ) . getBean ( arg ) ;
bean = ( S ) <unk> . getBean ( arg ) ;
bean = context . getRegistry ( arg ) . lookup ( arg ) ;
bean = context . getRegistry ( arg ) . lookup ( arg ) ;
bean = context . getRegistry ( arg ) . lookup ( arg ) ;
bean = context . getRegistry ( arg ) . lookup ( arg ) ;
bean = context . getRegistry ( arg ) . lookup ( arg ) ;
bean = getMandatoryBean ( arg ) ;
beanMock = EasyMock . <unk> ( arg ) ;
beanMock = EasyMock . createStrictMock ( arg ) ;
beanType = ObjectHelper . loadClass ( arg ) ;
beansOfType = applicationContext . getBeansOfType ( arg ) ;
<unk> ( arg ) ;
<unk> = Thread . currentThread ( arg ) . getName ( arg ) ;
bind ( arg ) . to ( arg ) . <unk> ( arg ) ;
binding . <unk> ( arg ) ;
binding . populateExchangeFromCxfResponse ( arg ) ;
binding . setBody ( arg ) ;
binding = new <unk> ( arg ) ;
binding = new HttpBinding ( arg ) ;
bindy . <unk> ( arg ) ;
body = ( ( WrappedFile ) body ) . getFile ( arg ) ;
body = ( ( WrappedFile ) body ) . getFile ( arg ) ;
body = ( ( WrappedFile ) body ) . getFile ( arg ) ;
body = body . replaceAll ( arg ) ;
body = body . replaceAll ( arg ) ;
body = consumer . getContext ( arg ) . getTypeConverter ( arg ) . mandatoryConvertTo ( arg ) ;
body = context . getTypeConverter ( arg ) . mandatoryConvertTo ( arg ) ;
body = endpoint . getCamelContext ( arg ) . getTypeConverter ( arg ) . convertTo ( arg ) ;
body = endpoint . getConfiguration ( arg ) . getWebServiceTemplate ( arg ) . sendSourceAndReceive ( arg ) ;
body = endpoint . getConfiguration ( arg ) . getWebServiceTemplate ( arg ) . sendSourceAndReceive ( arg ) ;
body = exchange . getFault ( arg ) . getBody ( arg ) ;
body = exchange . getFault ( arg ) ;
body = exchange . getIn ( arg ) . getBody ( arg ) ;
body = exchange . getOut ( arg ) . getBody ( arg ) ;
body = exchange . getOut ( arg ) ;
body = producer . getContext ( arg ) . getTypeConverter ( arg ) . mandatoryConvertTo ( arg ) ;
book = ( Book ) sendFindBookRequest ( arg ) ;
book = ( Book ) sendFindBookRequest ( arg ) ;
book = ( Book ) sendFindBookRequest ( arg ) ;
book = ( Book ) sendFindBookRequest ( arg ) ;
book = ( Book ) sendFindBookRequest ( arg ) ;
boolean absolute = file . isAbsolute ( arg ) ;
boolean absolute = file . isAbsolute ( arg ) ;
boolean alwaysCopy = ( endpoint != null ) && endpoint . getConfiguration ( arg ) . isAlwaysCopyMessage ( arg ) ;
boolean alwaysCopy = ( endpoint != null ) ? endpoint . getConfiguration ( arg ) . isAlwaysCopyMessage ( arg ) : false ;
boolean answer = false ;
boolean answer = lastModifiedCheck && sizeCheck ;
boolean answer = super . isRunAllowed ( arg ) ;
boolean <unk> = <unk> ( arg ) ;
boolean <unk> = false ;
boolean deleted = local . delete ( arg ) ;
boolean deleted = lock . delete ( arg ) ;
boolean disabled = camelContext . getManagementStrategy ( arg ) . <unk> ( arg ) == false || camelContext . getManagementStrategy ( arg ) . getStatisticsLevel ( arg ) == ManagementStatisticsLevel . <unk> ;
boolean disconnect = endpoint . getConfiguration ( arg ) . isDisconnect ( arg ) ;
boolean disconnect = endpoint . getConfiguration ( arg ) . isDisconnect ( arg ) ;
boolean done = exchange . getException ( arg ) == null || ExchangeHelper . isFailureHandled ( arg ) ;
boolean done = false ;
boolean <unk> = false ;
boolean dynamicSelector = ( getConfiguration ( arg ) . getReplyToDestinationSelectorName ( arg ) == null ) ;
boolean dynamicSelector = ( getConfiguration ( arg ) . getReplyToDestinationSelectorName ( arg ) == null ) ;
boolean <unk> = <unk> . <unk> ( arg ) ;
boolean enabled = context . getManagementStrategy ( arg ) . getStatisticsLevel ( arg ) == ManagementStatisticsLevel . <unk> ;
boolean <unk> = <unk> ( arg ) ;
boolean existFile = existFile ( arg ) ;
boolean existFile = existFile ( arg ) ;
boolean <unk> = server . isRegistered ( arg ) ;
boolean <unk> = exchange . getFromEndpoint ( arg ) . getEndpointUri ( arg ) . startsWith ( arg ) || exchange . getFromEndpoint ( arg ) . getEndpointUri ( arg ) . startsWith ( arg ) ;
boolean haederExist = false ;
boolean hasOut = result . getOut ( arg ) != null ;
boolean <unk> = header . equals ( arg ) &&! <unk> ;
boolean hit = latch . await ( arg ) ;
boolean hit = latch . await ( arg ) ;
boolean <unk> = <unk> . contains ( arg ) ;
boolean isDirectory = endpoint . getConfiguration ( arg ) . isDirectory ( arg ) ;
boolean <unk> = ObjectHelper . isNotEmpty ( arg ) ;
boolean <unk> = ObjectHelper . isNotEmpty ( arg ) ;
boolean matches = notify . matches ( arg ) ;
boolean matches = notify . matches ( arg ) ;
boolean matches = notify . matches ( arg ) ;
boolean matches = notify . matches ( arg ) ;
boolean matches = notify . matches ( arg ) ;
boolean <unk> = jdbcTemplate . queryForInt ( arg ) != 0 ;
boolean renamed = ftp . renameFile ( arg ) ;
boolean renamed = getOperations ( arg ) . renameFile ( arg ) ;
boolean renamed = operations . renameFile ( arg ) ;
boolean <unk> = security . getContextPathMatcher ( arg ) == null || security . getContextPathMatcher ( arg ) . matches ( arg ) ;
boolean result = true ;
boolean sanitize = camelContext . getManagementStrategy ( arg ) . getManagementAgent ( arg ) . getSanitize ( arg ) != null && camelContext . getManagementStrategy ( arg ) . getManagementAgent ( arg ) . getSanitize ( arg ) ;
boolean sanitize = <unk> . sanitize ( arg ) ;
boolean sanitize = strategy . getManagementAgent ( arg ) . getSanitize ( arg ) != null ? strategy . getManagementAgent ( arg ) . getSanitize ( arg ) : false ;
boolean secure = isSecureConnection ( arg ) ;
boolean <unk> = <unk> ( arg ) && <unk> ( arg ) ;
boolean skip = getSkipSendToOriginalEndpoint ( arg ) != null ? getSkipSendToOriginalEndpoint ( arg ) : false ;
boolean skip = skipSendToOriginalEndpoint != null ? skipSendToOriginalEndpoint : false ;
boolean skip = stopIntercept != null ? stopIntercept : false ;
boolean <unk> ;
boolean success = <unk> ( arg ) ;
boolean success = false ;
boolean success = ftp . storeFile ( arg ) ;
boolean success = getOperations ( arg ) . storeFile ( arg ) ;
boolean sync = AsyncProcessorHelper . process ( arg ) ;
boolean sync = <unk> ( arg ) ;
boolean sync = false ;
boolean sync = false ;
boolean wait = waitTaskComplete ;
boolean writeAsTempAndRename = ObjectHelper . isNotNullAndNonEmpty ( arg ) ;
boolean writeAsTempAndRename = ObjectHelper . isNotNullAndNonEmpty ( arg ) ;
boolean writeAsTempAndRename = ObjectHelper . isNotNullAndNonEmpty ( arg ) ;
<unk> = new NettyBossPoolBuilder ( arg ) . withBossCount ( arg ) . <unk> ( arg ) . build ( arg ) ;
<unk> . add ( arg ) ;
buffer . append ( arg ) . append ( arg ) . append ( arg ) ;
buffer . append ( arg ) . append ( arg ) ;
buffer . append ( arg ) ;
<unk> ( arg ) ;
builder . <unk> ( arg ) ;
builder . <unk> ( arg ) ;
builder . append ( arg ) ;
builder . setContainer ( arg ) ;
builder . <unk> ( arg ) ;
builder . <unk> ( arg ) ;
builder . <unk> ( arg ) . <unk> ( arg ) ;
builder = <unk> . lookupErrorHandlerBuilder ( arg ) ;
builder = builderRef . lookupErrorHandlerBuilder ( arg ) ;
builder = builderRef . lookupErrorHandlerBuilder ( arg ) ;
builder = ref . lookupErrorHandlerBuilder ( arg ) ;
bundleContext = <unk> . <unk> ( arg ) ;
bundles = new org . osgi . framework . Bundle [ ] { val } ;
bundles = new org . osgi . framework . Bundle [ ] { val } ;
bus = ( Bus ) ctx . getBean ( arg ) ;
bus = BusFactory . getDefaultBus ( arg ) ;
bus = b ;
bus = <unk> ( arg ) ;
byte [ ] body = ( byte [ ] ) exchange . getIn ( arg ) . getBody ( arg ) ;
byte [ ] body = u02C7ABu0000u02C7u007Fu02C7 . getBytes ( arg ) ;
byte [ ] body = u02C7ABu0000u02C7u007Fu02C7 . getBytes ( arg ) ;
byte [ ] body = { val } ;
byte [ ] body = { val } ;
byte [ ] buf = new byte [ 1 * 1024 * 1024 ] ;
byte [ ] bytes = IOConverter . <unk> ( arg ) ;
byte [ ] bytes = context . getTypeConverter ( arg ) . convertTo ( arg ) ;
byte [ ] bytesCRLF = Converter . getByteReturn ( arg ) ;
byte [ ] bytesCRLF = Converter . getByteReturn ( arg ) ;
byte [ ] ciphertext = ExchangeHelper . getMandatoryInBody ( arg ) ;
byte [ ] ciphertext = ExchangeHelper . getMandatoryInBody ( arg ) ;
byte [ ] data = input . getBytes ( arg ) ;
byte [ ] out = ( byte [ ] ) template . sendBody ( arg ) ;
byte [ ] result = endpoint . <unk> ( arg ) ;
byte [ ] result = null ;
byte <unk> = <unk> . <unk> ;
c . expectedBodiesReceived ( arg ) ;
cache . releaseProducer ( arg ) ;
cache . releaseProducer ( arg ) ;
cache . stop ( arg ) ;
cache = cacheManager . <unk> ( arg ) ;
cacheManager = CacheManager . getInstance ( arg ) ;
cacheManager = <unk> . <unk> ( arg ) ;
cacheManager = new CacheManagerFactory ( arg ) . instantiateCacheManager ( arg ) ;
cacheManager = new CacheManagerFactory ( arg ) . instantiateCacheManager ( arg ) ;
cacheManager = new CacheManagerFactory ( arg ) . instantiateCacheManager ( arg ) ;
cacheManager = new DefaultCacheManagerFactory ( arg ) . instantiateCacheManager ( arg ) ;
cacheManager = new DefaultCacheManagerFactory ( arg ) . instantiateCacheManager ( arg ) ;
cacheManager = new DefaultCacheManagerFactory ( arg ) . instantiateCacheManager ( arg ) ;
cacheMap . clear ( arg ) ;
<unk> = configuration . <unk> ( arg ) ;
cacheSettings = URISupport . parseParameters ( arg ) ;
<unk> . close ( arg ) ;
callback . done ( arg ) ;
callback . done ( arg ) ;
callback . onDataReceived ( arg ) ;
callback . onDataReceived ( arg ) ;
callback . onTaskCompleted ( arg ) ;
callback . onTaskCompleted ( arg ) ;
called . set ( arg ) ;
called . set ( arg ) ;
called . set ( arg ) ;
camel . getExecutorServiceStrategy ( arg ) . setDefaultThreadPoolProfile ( arg ) ;
camelContext . activateEndpoints ( arg ) ;
camelContext . activateEndpoints ( arg ) ;
camelContext . deactivateEndpoints ( arg ) ;
camelContext . deactivateEndpoints ( arg ) ;
camelContext . deactivateEndpoints ( arg ) ;
camelContext . deactivateEndpoints ( arg ) ;
camelContext . deactivateEndpoints ( arg ) ;
camelContext . getExecutorServiceManager ( arg ) . shutdown ( arg ) ;
camelContext . getExecutorServiceManager ( arg ) . shutdown ( arg ) ;
camelContext . getExecutorServiceManager ( arg ) . shutdown ( arg ) ;
camelContext . getExecutorServiceManager ( arg ) . shutdown ( arg ) ;
camelContext . getExecutorServiceManager ( arg ) . shutdown ( arg ) ;
camelContext . getExecutorServiceManager ( arg ) . shutdown ( arg ) ;
camelContext . getExecutorServiceManager ( arg ) . shutdownNow ( arg ) ;
camelContext . getExecutorServiceManager ( arg ) . shutdownNow ( arg ) ;
camelContext . getExecutorServiceManager ( arg ) . shutdownNow ( arg ) ;
camelContext . getExecutorServiceManager ( arg ) . shutdownNow ( arg ) ;
camelContext . getExecutorServiceManager ( arg ) . shutdownNow ( arg ) ;
camelContext . getExecutorServiceManager ( arg ) . shutdownNow ( arg ) ;
camelContext . getExecutorServiceManager ( arg ) . shutdownNow ( arg ) ;
camelContext . getExecutorServiceManager ( arg ) . shutdownNow ( arg ) ;
camelContext . getExecutorServiceManager ( arg ) . shutdownNow ( arg ) ;
camelContext . getExecutorServiceStrategy ( arg ) . shutdownNow ( arg ) ;
camelContext . getExecutorServiceStrategy ( arg ) . shutdownNow ( arg ) ;
camelContext . getExecutorServiceStrategy ( arg ) . shutdownNow ( arg ) ;
camelContext . getExecutorServiceStrategy ( arg ) . shutdownNow ( arg ) ;
camelContext . setRoutes ( arg ) ;
camelContext . start ( arg ) ;
camelContext = ( CamelContext ) applicationContext . getBean ( arg ) ;
camelContext = ( CamelContext ) applicationContext . getBean ( arg ) ;
camelContext = ( CamelContext ) applicationContext . getBean ( arg ) ;
camelContext = applicationContext . getBean ( arg ) ;
camelContext = context ;
camelContextLifecycle . <unk> ( arg ) ;
camelContextLifecycle . <unk> ( arg ) ;
camelContextLifecycle . <unk> ( arg ) ;
camelContextLifecycle . <unk> ( arg ) ;
camelEndpoint . onExchange ( arg ) ;
<unk> = agent ;
camelServlet . <unk> ( arg ) ;
camelServlet = new CamelServlet ( arg ) ;
cause = null ;
<unk> . shutdown ( arg ) ;
cfb . getServiceFactory ( arg ) . setEndpointName ( arg ) ;
cfb . getServiceFactory ( arg ) . setEndpointName ( arg ) ;
cfb . getServiceFactory ( arg ) . setServiceName ( arg ) ;
cfb . getServiceFactory ( arg ) . setServiceName ( arg ) ;
channel . close ( arg ) . <unk> ( arg ) ;
channel . <unk> ( arg ) ;
channel . write ( arg ) ;
channelPipeline . addLast ( arg ) ;
channelPipeline . addLast ( arg ) ;
char separator = <unk> . getCharDelimitor ( arg ) ;
char separator = Converter . getCharDelimitor ( arg ) ;
char separator = Converter . getCharDelimitor ( arg ) ;
charset = IOConverter . <unk> ( arg ) ;
charsetName = exchange . getIn ( arg ) . getHeader ( arg ) ;
<unk> . <unk> ( arg ) ;
checkSum = checkSum ;
childServices = new CopyOnWriteArrayList ( arg ) ;
childServices = new LinkedHashSet ( arg ) ;
children = routeContext . createProcessor ( arg ) ;
choice . getOtherwise ( arg ) . addOutput ( arg ) ;
cinterfaces [ i ] = load ( arg ) ;
<unk> . close ( arg ) ;
cl . <unk> ( arg ) . <unk> ( arg ) ;
clazz = Thread . currentThread ( arg ) . <unk> ( arg ) . loadClass ( arg ) ;
clazz = bundle . loadClass ( arg ) ;
clazz = entry . bundle . loadClass ( arg ) ;
clazz = loader . loadClass ( arg ) ;
clean ( arg ) ;
clean ( arg ) ;
clean ( arg ) ;
clear ( arg ) ;
client . <unk> ( arg ) ;
client . <unk> ( arg ) ;
client . getEndpoint ( arg ) . getBinding ( arg ) . getInInterceptors ( arg ) . add ( arg ) ;
client . <unk> ( arg ) . <unk> ( arg ) ;
client . getState ( arg ) . <unk> ( arg ) ;
client . getState ( arg ) . <unk> ( arg ) ;
client . invock ( arg ) ;
client . invock ( arg ) ;
client . login ( arg ) ;
client . send ( arg ) ;
client . sendBody ( arg ) ;
client . sendBody ( arg ) ;
client . sendBody ( arg ) ;
client . sendBody ( arg ) ;
client . sendBody ( arg ) ;
client . stop ( arg ) ;
client . stop ( arg ) ;
client = <unk> ( arg ) ;
client = new CamelClient < Exchange > ( arg ) ;
client = new CamelClient < Exchange > ( arg ) ;
client = new <unk> ( arg ) ;
<unk> . <unk> ( arg ) ;
<unk> . setPipeline ( arg ) ;
clientFactory = <unk> ? new <unk> ( arg ) : new ClientFactoryBean ( arg ) ;
clientFactory = new ClientFactoryBean ( arg ) ;
closedCorrelationKeys = new HashMap < Object , Object > ( arg ) ;
closedCorrelationKeys = new LRUCache < Object , Object > ( arg ) ;
cls = ClassLoaderUtils . loadClass ( arg ) ;
cls = bundleContext . getBundle ( arg ) . loadClass ( arg ) ;
comparator = routeContext . getCamelContext ( arg ) . getRegistry ( arg ) . lookup ( arg ) ;
<unk> . add ( arg ) ;
<unk> . countDown ( arg ) ;
completedPredicate = new CompletedPredicate ( arg ) ;
completedPredicate = new CompletedPredicate ( arg ) ;
component . getMultiplexChannelHandler ( arg ) . addConsumer ( arg ) ;
component . getMultiplexChannelHandler ( arg ) . removeConsumer ( arg ) ;
component . <unk> ( arg ) ;
component . setContainer ( arg ) ;
component . setContext ( arg ) ;
component . setContext ( arg ) ;
component . setMaxConnections ( arg ) ;
component . setMaxConnections ( arg ) ;
component . setMaxConnections ( arg ) ;
component . setMaxConnections ( arg ) ;
component . setMaxConnections ( arg ) ;
component . setMaxConnections ( arg ) ;
component . start ( arg ) ;
component . start ( arg ) ;
component . start ( arg ) ;
component . start ( arg ) ;
component . start ( arg ) ;
conduit . send ( arg ) ;
conduit . send ( arg ) ;
conduit . send ( arg ) ;
conf . parseURI ( arg ) ;
conf . parseURI ( arg ) ;
conf . parseURI ( arg ) ;
conf . parseURI ( arg ) ;
config . configure ( arg ) ;
config . parseURI ( arg ) ;
config . setFile ( arg ) ;
config = getConfiguraiton ( arg ) ;
config = new <unk> ( arg ) ;
configuration . <unk> ( arg ) ;
configuration . <unk> ( arg ) ;
configuration . <unk> ( arg ) ;
<unk> ( arg ) ;
configureConsumer ( arg ) ;
configureConsumer ( arg ) ;
configureConsumer ( arg ) ;
configureConsumer ( arg ) ;
configureExchange ( arg ) ;
configureExchange ( arg ) ;
<unk> ( arg ) ;
<unk> ( arg ) ;
configureSocketCodecFactory ( arg ) ;
configureSocketCodecFactory ( arg ) ;
<unk> ( arg ) ;
conn . rollback ( arg ) ;
conn = source . getConnection ( arg ) ;
connectIfNecessary ( arg ) ;
connectIfNecessary ( arg ) ;
connectionResource . <unk> ( arg ) ;
<unk> . setPipeline ( arg ) ;
connectionlessServerBootstrap . setOption ( arg ) ;
connectionlessServerBootstrap . setOption ( arg ) ;
connectionlessServerBootstrap . setOption ( arg ) ;
connector . start ( arg ) ;
connector = new <unk> ( arg ) ;
<unk> = jmxExporter . register ( arg ) ;
connectorPort = port ;
connectorPort = value ;
connectors . put ( arg ) ;
consumer . getAllChannels ( arg ) . add ( arg ) ;
consumer . getAllChannels ( arg ) . remove ( arg ) ;
consumer . <unk> ( arg ) . process ( arg ) ;
consumer . <unk> ( arg ) ;
consumer . start ( arg ) ;
consumer . start ( arg ) ;
consumer . start ( arg ) ;
consumer . stop ( arg ) ;
<unk> = ( MockEndpoint ) context . getEndpoint ( arg ) ;
<unk> ( arg ) ;
consumerSuspended . set ( arg ) ;
consumerSuspended . set ( arg ) ;
consumers . clear ( arg ) ;
consumers . put ( arg ) ;
consumers . remove ( arg ) ;
container . activateEndpoints ( arg ) ;
container . activateEndpoints ( arg ) ;
container . activateEndpoints ( arg ) ;
container . activateEndpoints ( arg ) ;
container . activateEndpoints ( arg ) ;
container . activateEndpoints ( arg ) ;
container . deactivateEndpoints ( arg ) ;
container . deactivateEndpoints ( arg ) ;
container . deactivateEndpoints ( arg ) ;
container . deactivateEndpoints ( arg ) ;
container . deactivateEndpoints ( arg ) ;
container . deactivateEndpoints ( arg ) ;
container . setRoutes ( arg ) ;
container . start ( arg ) ;
container . start ( arg ) ;
container . stop ( arg ) ;
container . stop ( arg ) ;
container . stop ( arg ) ;
container . stop ( arg ) ;
container . stop ( arg ) ;
container . stop ( arg ) ;
content = ( <unk> ) <unk> . getContent ( arg ) ;
content = new ArrayList ( arg ) ;
contentType = <unk> . parse ( arg ) ;
context . addFilter ( arg ) ;
context . addFilter ( arg ) ;
context . addInterceptStrategy ( arg ) ;
context . addInterceptStrategy ( arg ) ;
context . addInterceptStrategy ( arg ) ;
context . addRouteDefinitions ( arg ) ;
context . addService ( arg ) ;
context . createProducerTemplate ( arg ) . sendBody ( arg ) ;
context . getEndpoint ( arg ) . createProducer ( arg ) ;
context . getExecutorServiceManager ( arg ) . shutdownNow ( arg ) ;
context . getExecutorServiceStrategy ( arg ) . registerThreadPoolProfile ( arg ) ;
context . getExecutorServiceStrategy ( arg ) . registerThreadPoolProfile ( arg ) ;
context . getExecutorServiceStrategy ( arg ) . registerThreadPoolProfile ( arg ) ;
context . getExecutorServiceStrategy ( arg ) . setDefaultThreadPoolProfile ( arg ) ;
context . getExecutorServiceStrategy ( arg ) . setDefaultThreadPoolProfile ( arg ) ;
context . getExecutorServiceStrategy ( arg ) . <unk> ( arg ) ;
context . getExecutorServiceStrategy ( arg ) . shutdownNow ( arg ) ;
context . getExecutorServiceStrategy ( arg ) . shutdownNow ( arg ) ;
context . getManagementStrategy ( arg ) . getManagementAgent ( arg ) . setSanitize ( arg ) ;
context . getManagementStrategy ( arg ) . setEventNotifier ( arg ) ;
context . getManagementStrategy ( arg ) . setEventNotifier ( arg ) ;
context . getManagementStrategy ( arg ) . setSatisticsLevel ( arg ) ;
context . getManagementStrategy ( arg ) . setSatisticsLevel ( arg ) ;
context . getRegistry ( arg ) . lookup ( arg ) ;
context . getRegistry ( arg ) . lookup ( arg ) ;
context . getStreamCachingStrategy ( arg ) . setTemporaryDirectory ( arg ) ;
context . getStreamCachingStrategy ( arg ) . setTemporaryDirectory ( arg ) ;
context . <unk> ( arg ) ;
context . setFactoryFinderClass ( arg ) ;
context . setFactoryFinderClass ( arg ) ;
context . <unk> ( arg ) ;
context . start ( arg ) ;
context . <unk> ( arg ) ;
context . stopRoute ( arg ) ;
context = ( CamelContext ) c . getBean ( arg ) ;
context = ( CamelContext ) c . getBean ( arg ) ;
context = ( Map ) camelExchange . getProperty ( arg ) ;
context = ( ModelCamelContext ) SpringCamelContext . springCamelContext ( arg ) ;
context = ( ModelCamelContext ) SpringCamelContext . springCamelContext ( arg ) ;
context = ( ModelCamelContext ) SpringCamelContext . springCamelContext ( arg ) ;
context = ( ModelCamelContext ) c . getBean ( arg ) ;
context = ( ModelCamelContext ) c . getBean ( arg ) ;
context = ( SpringCamelContext ) applicationContext . getBean ( arg ) ;
context = SpringCamelContext . springCamelContext ( arg ) ;
context = createCamelContext ( arg ) ;
context = createCamelContext ( arg ) ;
context = createContext ( arg ) ;
context = new DefaultCamelContext ( arg ) ;
context = new <unk> ( arg ) ;
context = new SpringCamelContext ( arg ) ;
<unk> . set ( arg ) ;
contextId = camelContext ;
contextId = camelContext ;
converter . convertTo ( arg ) ;
converter = ( Converter ) con . newInstance ( arg ) ;
converter = <unk> ( arg ) ;
copy ( arg ) ;
copy = new ByteArrayInputStream ( arg ) ;
<unk> = new <unk> ( arg ) ;
cos = new CachedOutputStream ( arg ) ;
count = jdbc . queryForInt ( arg ) ;
count = jdbc . queryForInt ( arg ) ;
counter . <unk> ( arg ) ;
counter . incrementAndGet ( arg ) ;
counterMap . put ( arg ) ;
createConnector = flag ;
createConnector = value ;
createFileOutputStream ( arg ) ;
createFileOutputStream ( arg ) ;
createFileOutputStream ( arg ) ;
credentials = new Credentials ( arg ) ;
<unk> = Converter . getByteReturn ( arg ) ;
ctx . <unk> ( arg ) ;
current ++ ;
current ++ ;
current ++ ;
current ++ ;
current ++ ;
current ++ ;
current ++ ;
current ++ ;
current ++ ;
current ++ ;
current = 0 ;
current = 0 ;
current = 0 ;
current = 0 ;
current = 0 ;
current = 0 ;
current = 0 ;
current = 0 ;
current = 0 ;
currentStream = IOHelper . buffered ( arg ) ;
currentStream = new BufferedOutputStream ( arg ) ;
<unk> ( arg ) ;
cxfEndpoint = ( CxfEndpoint ) context . getEndpoint ( arg ) ;
cxfHeaders = new HashMap < String , List < String >> ( arg ) ;
data . <unk> = null ;
data . <unk> = processor ;
data . original = <unk> ( arg ) ;
data . redeliveryDelay = data . currentRedeliveryPolicy . <unk> ( arg ) ;
data . redeliveryDelay = data . currentRedeliveryPolicy . getRedeliveryDelay ( arg ) ;
data . redeliveryDelay = data . currentRedeliveryPolicy . sleep ( arg ) ;
data . <unk> = exceptionPolicy . <unk> ( arg ) ;
data . <unk> = exceptionPolicy . getUseOriginalExchangePolicy ( arg ) ;
data . useOriginalInBody = exceptionPolicy . <unk> ( arg ) ;
data . useOriginalInBody = exceptionPolicy . getUseOriginalExchangePolicy ( arg ) ;
data . <unk> = exceptionPolicy . <unk> ( arg ) ;
dataField = ( DataField ) <unk> . next ( arg ) ;
dataFormat = type . createDataFormat ( arg ) ;
dataSource = context . getRegistry ( arg ) . lookup ( arg ) ;
dataSource = context . getRegistry ( arg ) . lookup ( arg ) ;
dataSource = context . getRegistry ( arg ) . lookup ( arg ) ;
dataSource = context . getRegistry ( arg ) . lookup ( arg ) ;
dataStore = <unk> . <unk> ( arg ) ;
<unk> . close ( arg ) ;
deactivateEndpoints ( arg ) ;
<unk> . message ( arg ) . bodyAs ( arg ) . isEqualTo ( arg ) ;
<unk> . process ( arg ) ;
debugger . stop ( arg ) ;
defContainer . <unk> ( arg ) ;
defContainer . <unk> ( arg ) ;
defContainer . <unk> ( arg ) ;
defContainer . <unk> ( arg ) ;
defContainer . <unk> ( arg ) ;
<unk> = 20000L ;
<unk> . removeRouteDefinition ( arg ) ;
<unk> = new RecipientList < E > ( arg ) ;
<unk> = new <unk> ( arg ) ;
defaultcreds = new UsernamePasswordCredentials ( arg ) ;
definition . idOrCreate ( arg ) ;
delegate . start ( arg ) ;
delegate . stop ( arg ) ;
deleteDirectory ( arg ) ;
deleteDirectory ( arg ) ;
deleteDirectory ( arg ) ;
deleted = operations . deleteFile ( arg ) ;
<unk> ( arg ) ;
<unk> = this . <unk> ( arg ) ;
description = new Description ( arg ) ;
description = new Description ( arg ) ;
destination . getCamelContext ( arg ) . getExecutorServiceManager ( arg ) . shutdown ( arg ) ;
destination . getCamelContext ( arg ) . getExecutorServiceManager ( arg ) . shutdownNow ( arg ) ;
destination . onExchange ( arg ) ;
destination . send ( arg ) ;
destination = ( <unk> ) endpoint . <unk> ( arg ) . getDestination ( arg ) ;
destination = address ;
destination = endpoint . <unk> ( arg ) . <unk> ( arg ) ;
destination = session . createQueue ( arg ) ;
destination = session . <unk> ( arg ) ;
disabled = value ;
<unk> = ( HashMap < String , String > ) component . resolveAndRemoveReferenceParameter ( arg ) ;
<unk> = camelContext . getEndpoint ( arg ) ;
doAggregation ( arg ) ;
doAggregation ( arg ) ;
doGetChildServices ( arg ) ;
doGetChildServices ( arg ) ;
doGetChildServices ( arg ) ;
doGetChildServies ( arg ) ;
doGetChildServies ( arg ) ;
<unk> ( arg ) ;
<unk> ( arg ) ;
<unk> ( arg ) ;
<unk> ( arg ) ;
<unk> ( arg ) ;
doReturn ( arg ) . when ( arg ) . getUnmarshaller ( arg ) ;
doReturn ( arg ) . when ( arg ) . getUnmarshaller ( arg ) ;
<unk> ( arg ) ;
doStartRoutes ( arg ) ;
doStartRoutes ( arg ) ;
<unk> ( arg ) ;
document = endpoint . <unk> ( arg ) ;
done = false ;
done = true ;
done = true ;
done <unk> answer . contains ( arg ) ;
<unk> ( arg ) ;
<unk> <unk> = <unk> ;
ds = ( DataSource ) applicationContext . getBean ( arg ) ;
dummy . getIn ( arg ) . setHeader ( arg ) ;
<unk> . setParameter ( arg ) ;
e . printStackTrace ( arg ) ;
e . printStackTrace ( arg ) ;
e = new JAXBElement ( arg ) ;
<unk> ( arg ) ;
element . <unk> ( arg ) . <unk> ( arg ) ;
element . setAttribute ( arg ) ;
element . setAttribute ( arg ) ;
<unk> = exchange . getContext ( arg ) . getRegistry ( arg ) . lookup ( arg ) ;
elementString = converter . toString ( arg ) ;
elementString = element . toString ( arg ) ;
enc = ( <unk> ) <unk> . <unk> ( arg ) ;
encoder = <unk> . <unk> ( arg ) . <unk> ( arg ) ;
endLatch . await ( arg ) ;
endLatch . await ( arg ) ;
endpoint . connect ( arg ) ;
endpoint . disconnect ( arg ) ;
endpoint . disconnect ( arg ) ;
endpoint . expectedMessageCount ( arg ) ;
endpoint . expectedMessageCount ( arg ) ;
endpoint . expectsMessageCount ( arg ) ;
endpoint . <unk> ( arg ) . <unk> ( arg ) ;
endpoint . getBinding ( arg ) . <unk> ( arg ) ;
endpoint . getBinding ( arg ) . <unk> ( arg ) ;
endpoint . getCamelContext ( arg ) . getExecutorServiceManager ( arg ) . shutdown ( arg ) ;
endpoint . getCamelContext ( arg ) . getExecutorServiceManager ( arg ) . shutdown ( arg ) ;
endpoint . getCamelContext ( arg ) . getExecutorServiceManager ( arg ) . <unk> ( arg ) ;
endpoint . getCamelContext ( arg ) . getExecutorServiceManager ( arg ) . shutdownNow ( arg ) ;
endpoint . getCamelContext ( arg ) . getExecutorServiceManager ( arg ) . shutdownNow ( arg ) ;
endpoint . getCamelContext ( arg ) . getExecutorServiceManager ( arg ) . shutdownNow ( arg ) ;
endpoint . getCamelContext ( arg ) . getExecutorServiceManager ( arg ) . shutdownNow ( arg ) ;
endpoint . getCamelContext ( arg ) . getExecutorServiceStrategy ( arg ) . shutdown ( arg ) ;
endpoint . getCamelContext ( arg ) . getExecutorServiceStrategy ( arg ) . shutdownNow ( arg ) ;
endpoint . getCamelContext ( arg ) . getExecutorServiceStrategy ( arg ) . shutdownNow ( arg ) ;
endpoint . getCamelContext ( arg ) . getExecutorServiceStrategy ( arg ) . shutdownNow ( arg ) ;
endpoint . getCamelContext ( arg ) . getExecutorServiceStrategy ( arg ) . shutdownNow ( arg ) ;
endpoint . getConfiguration ( arg ) . <unk> ( arg ) ;
endpoint . getCxfBinding ( arg ) . populateExchangeFromCxfResponse ( arg ) ;
endpoint . getCxfBinding ( arg ) . populateExchangeFromCxfResponse ( arg ) ;
endpoint . getGenericFileProcessStrategy ( arg ) . prepareOnStartup ( arg ) ;
endpoint . getInProgressRepository ( arg ) . remove ( arg ) ;
endpoint . <unk> ( arg ) . onExchange ( arg ) ;
endpoint . getPrepareStatementStrategy ( arg ) . populateStatement ( arg ) ;
endpoint . getQueue ( arg ) . put ( arg ) ;
endpoint . getSqlClient ( arg ) . <unk> ( arg ) ;
endpoint . onExchange ( arg ) ;
endpoint . onListenerConstainerStopped ( arg ) ;
endpoint . send ( arg ) ;
endpoint . send ( arg ) ;
endpoint . <unk> ( arg ) ;
endpoint . setContext ( arg ) ;
endpoint . <unk> ( arg ) ;
endpoint . <unk> ( arg ) ;
endpoint = ( CxfEndpoint ) camelContext . getEndpoint ( arg ) ;
endpoint = ( Endpoint < E > ) exchange . getContext ( arg ) . endpoint ( arg ) ;
endpoint = ( Endpoint < E > ) exchange . getContext ( arg ) . resolveEndpoint ( arg ) ;
endpoint = ( PojoEndpoint ) container . endpoint ( arg ) ;
endpoint = camelContext . getEndpoint ( arg ) ;
endpoint = camelContext . getRegistry ( arg ) . lookup ( arg ) ;
endpoint = camelContext . resolveEndpoint ( arg ) ;
endpoint = camelContext . resolveEndpoint ( arg ) ;
endpoint = container . resolveEndpoint ( arg ) ;
endpoint = container . resolveEndpoint ( arg ) ;
endpoint = context . getEndpoint ( arg ) ;
endpoint = context . resolveEndpoint ( arg ) ;
endpoint = context . resolveEndpoint ( arg ) ;
endpoint = context . resolveEndpoint ( arg ) ;
endpoint = <unk> ( arg ) ;
endpoint = <unk> ( arg ) ;
endpoint = <unk> ( arg ) ;
endpoint = exchange . getContainer ( arg ) . endpoint ( arg ) ;
endpoint = getCamelContext ( arg ) . getRegistry ( arg ) . lookup ( arg ) ;
<unk> . expectedBodiesReceived ( arg ) ;
<unk> . setId ( arg ) ;
<unk> . set ( arg ) ;
endpoints . clear ( arg ) ;
endpoints . put ( arg ) ;
engine = new JSonPathEngine ( arg ) ;
engine = new JSonPathEngine ( arg ) ;
entityManager . <unk> ( arg ) ;
entityManager = endpoint . createEntityManager ( arg ) ;
entityManager = endpoint . createEntityManager ( arg ) ;
entityManager = endpoint . createEntityManager ( arg ) ;
entityManager = endpoint . getEntityManager ( arg ) ;
entityManager = endpoint . getEntityManager ( arg ) ;
entityManager = endpoint . getEntityManager ( arg ) ;
entityManager = endpoint . getEntityManager ( arg ) ;
<unk> = System . getProperties ( arg ) ;
entry = endpoint . getQueue ( arg ) . poll ( arg ) ;
<unk> [ i ] = endpoint ;
error . expectedMessageCount ( arg ) ;
error . expectedMessageCount ( arg ) ;
errorHandler ( arg ) ;
errorHandler ( arg ) ;
errorHandler . <unk> ( arg ) ;
errorHandler = ( DefaultErrorHandlerBuilder ) ctx . getBean ( arg ) ;
errorHandlerBuilder = new DeadLetterChannelBuilder < E > ( arg ) ;
<unk> . shutdown ( arg ) ;
<unk> ( arg ) ;
<unk> ( arg ) ;
ex . getOut ( arg ) . setHeader ( arg ) ;
exception ( arg ) . initialRedeliveryDelay ( arg ) . maximumRedeliveries ( arg ) . backOffMultiplier ( arg ) . useExponentialBackOff ( arg ) . setHeader ( arg ) . to ( arg ) ;
exception ( arg ) . maximumRedeliveries ( arg ) . to ( arg ) ;
exception ( arg ) . maximumRedeliveries ( arg ) . to ( arg ) ;
exception ( arg ) . setBody ( arg ) . to ( arg ) ;
exception ( arg ) . to ( arg ) ;
exception ( arg ) . to ( arg ) ;
exception ( arg ) . to ( arg ) ;
exception ( arg ) . to ( arg ) ;
exception ( arg ) . to ( arg ) ;
exception ( arg ) . to ( arg ) ;
exception ( arg ) . to ( arg ) ;
exception = ( ( RuntimeCamelException ) exception ) . getCause ( arg ) ;
exception = new HttpOperationFailedException ( arg ) ;
exception = new HttpOperationFailedException ( arg ) ;
exception = new HttpOperationFailedException ( arg ) ;
exception = new HttpOperationFailedException ( arg ) ;
exception = new HttpOperationFailedException ( arg ) ;
exception = new HttpOperationFailedException ( arg ) ;
exception = new HttpOperationFailedException ( arg ) ;
exception = new HttpOperationFailedException ( arg ) ;
exception = new JettyHttpOperationFailedException ( arg ) ;
exception = new JettyHttpOperationFailedException ( arg ) ;
exception = new JettyHttpOperationFailedException ( arg ) ;
exceptionEndpoint . assertIsSatisfied ( arg ) ;
exceptionEndpoint . assertIsSatisfied ( arg ) ;
exceptionEndpoint . assertIsSatisfied ( arg ) ;
exceptionEndpoint . expectedMessageCount ( arg ) ;
exceptionEndpoint . expectedMessageCount ( arg ) ;
<unk> . put ( arg ) ;
exchange . getException ( arg ) . printStackTrace ( arg ) ;
exchange . getFault ( arg ) . setHeader ( arg ) ;
exchange . getIn ( arg ) . getHeaders ( arg ) . setHeader ( arg ) ;
exchange . getIn ( arg ) . getHeaders ( arg ) . setHeader ( arg ) ;
exchange . getIn ( arg ) . removeHeader ( arg ) ;
exchange . getIn ( arg ) . setBody ( arg ) ;
exchange . getIn ( arg ) . setHeader ( arg ) ;
exchange . getIn ( arg ) . setHeader ( arg ) ;
exchange . getIn ( arg ) . setHeader ( arg ) ;
exchange . getOut ( arg ) . setBody ( arg ) ;
exchange . getOut ( arg ) . setBody ( arg ) ;
exchange . getOut ( arg ) . setBody ( arg ) ;
exchange . getOut ( arg ) . setBody ( arg ) ;
exchange . getOut ( arg ) . setBody ( arg ) ;
exchange . getOut ( arg ) . setBody ( arg ) ;
exchange . getOut ( arg ) . setBody ( arg ) ;
exchange . getOut ( arg ) . setBody ( arg ) ;
exchange . getOut ( arg ) . setHeader ( arg ) ;
exchange . getOut ( arg ) . setHeaders ( arg ) ;
exchange . getOut ( arg ) . setHeaders ( arg ) ;
exchange . getOut ( arg ) . setHeaders ( arg ) ;
exchange . getOut ( arg ) . setHeaders ( arg ) ;
exchange . getUnitOfWork ( arg ) . <unk> ( arg ) ;
exchange . put ( arg ) ;
exchange . <unk> ( arg ) ;
exchange . setException ( arg ) ;
exchange . <unk> ( arg ) ;
exchange . <unk> ( arg ) ;
exchange . setProperty ( arg ) ;
exchange . <unk> ( arg ) ;
exchange . <unk> ( arg ) ;
exchange = ( RemoteFileExchange ) mock . getExchanges ( arg ) . get ( arg ) ;
exchange = ( RemoteFileExchange ) mock . getExchanges ( arg ) . get ( arg ) ;
exchange = endpoint . getQueue ( arg ) . poll ( arg ) ;
exchange2 . setHeader ( arg ) ;
exchangeId = DefaultExchange . DEFAULT_ID_GENERATOR . generateId ( arg ) ;
exchangeId = marshaller . <unk> ( arg ) ;
exchangeId = marshaller . unmarshallKey ( arg ) ;
<unk> = exchange . <unk> ( arg ) ;
exchanges . add ( arg ) ;
exchanges = new CopyOnWriteArrayList < Exchange > ( arg ) ;
<unk> . add ( arg ) ;
<unk> = CastUtils . cast ( arg ) ;
executableDependencies = result . getArtifacts ( arg ) ;
executableDependencies = result . getArtifacts ( arg ) ;
executor . schedule ( arg ) ;
executor . scheduleWithFixedDelay ( arg ) ;
executor . shutdown ( arg ) ;
executor . shutdownNow ( arg ) ;
executor = ExecutorServiceHelper . newCachedThreadPool ( arg ) ;
executor = ExecutorServiceHelper . newFixedThreadPool ( arg ) ;
executor = ExecutorServiceHelper . newScheduledThreadPool ( arg ) ;
executor = ExecutorServiceHelper . newSingleThreadExecutor ( arg ) ;
executor = Executors . newSingleThreadExecutor ( arg ) ;
executor = camelContext . getExecutorServiceManager ( arg ) . getExecutorService ( arg ) ;
executor = camelContext . getExecutorServiceStrategy ( arg ) . newSingleThreadExecutor ( arg ) ;
executor = context . getExecutorServiceManager ( arg ) . getDefaultExecutorService ( arg ) ;
executor = context . getExecutorServiceManager ( arg ) . newDefaultThreadPool ( arg ) ;
executor = context . getExecutorServiceStrategy ( arg ) . newCachedThreadPool ( arg ) ;
executor = context . getExecutorServiceStrategy ( arg ) . newDefaultThreadPool ( arg ) ;
executor = endpoint . getCamelContext ( arg ) . getExecutorServiceManager ( arg ) . getExecutorService ( arg ) ;
executor = endpoint . getCamelContext ( arg ) . getExecutorServiceStrategy ( arg ) . newFixedThreadPool ( arg ) ;
executor = endpoint . getCamelContext ( arg ) . getExecutorServiceStrategy ( arg ) . newSingleThreadExecutor ( arg ) ;
executorService . shutdown ( arg ) ;
executorService . shutdownNow ( arg ) ;
executorService . shutdownNow ( arg ) ;
executorService . shutdownNow ( arg ) ;
executorService . shutdownNow ( arg ) ;
executorService . shutdownNow ( arg ) ;
executorService . shutdownNow ( arg ) ;
executorService . submit ( arg ) ;
executorService = ExecutorServiceHelper . <unk> ( arg ) ;
executorService = ExecutorServiceHelper . newCachedThreadPool ( arg ) ;
executorService = ExecutorServiceHelper . newCachedThreadPool ( arg ) ;
executorService = ExecutorServiceHelper . newCachedThreadPool ( arg ) ;
executorService = ExecutorServiceHelper . newFixedThreadPool ( arg ) ;
executorService = ExecutorServiceHelper . newScheduledThreadPool ( arg ) ;
executorService = ExecutorServiceHelper . newScheduledThreadPool ( arg ) ;
executorService = ExecutorServiceHelper . newSingleThreadExecutor ( arg ) ;
executorService = ExecutorServiceHelper . newSingleThreadExecutor ( arg ) ;
executorService = ExecutorServiceHelper . newThreadPool ( arg ) ;
executorService = ExecutorServiceHelper . newThreadPool ( arg ) ;
executorService = Executors . newScheduledThreadPool ( arg ) ;
executorService = camelContext . <unk> ( arg ) ;
executorService = camelContext . getExecutorServiceManager ( arg ) . getExecutorService ( arg ) ;
executorService = camelContext . getExecutorServiceStrategy ( arg ) . newSingleThreadExecutor ( arg ) ;
executorService = camelContext . getRegistry ( arg ) . lookup ( arg ) ;
executorService = context . getExecutorServiceManager ( arg ) . getDefaultExecutorService ( arg ) ;
executorService = <unk> ( arg ) ;
executorService = endpoint . getCamelContext ( arg ) . getExecutorServiceStrategy ( arg ) . newSingleThreadExecutor ( arg ) ;
executorService = executorServiceManager . getDefaultExecutorService ( arg ) ;
executorService = executorServiceManager . getDefaultExecutorService ( arg ) ;
executorService = executorServiceManager . <unk> ( arg ) ;
executorService = manager . getDefaultExecutorService ( arg ) ;
executorService = manager . getDefaultExecutorService ( arg ) ;
executorService = manager . getDefaultExecutorService ( arg ) ;
executorService = manager . getDefaultExecutorService ( arg ) ;
executorService = routeContext . getCamelContext ( arg ) . getExecutorServiceStrategy ( arg ) . newCachedThreadPool ( arg ) ;
executorService = routeContext . getCamelContext ( arg ) . getExecutorServiceStrategy ( arg ) . newCachedThreadPool ( arg ) ;
executorService = routeContext . getCamelContext ( arg ) . getExecutorServiceStrategy ( arg ) . newCachedThreadPool ( arg ) ;
executorService = routeContext . getCamelContext ( arg ) . getExecutorServiceStrategy ( arg ) . newCachedThreadPool ( arg ) ;
executorService = routeContext . getCamelContext ( arg ) . getExecutorServiceStrategy ( arg ) . newCachedThreadPool ( arg ) ;
executorService = routeContext . getCamelContext ( arg ) . getExecutorServiceStrategy ( arg ) . newCachedThreadPool ( arg ) ;
executorService = routeContext . getCamelContext ( arg ) . getExecutorServiceStrategy ( arg ) . newCachedThreadPool ( arg ) ;
executorService = routeContext . getCamelContext ( arg ) . getExecutorServiceStrategy ( arg ) . newDefaultThreadPool ( arg ) ;
executorService = routeContext . getCamelContext ( arg ) . getExecutorServiceStrategy ( arg ) . newDefaultThreadPool ( arg ) ;
executorService = routeContext . getCamelContext ( arg ) . getExecutorServiceStrategy ( arg ) . newSingleThreadExecutor ( arg ) ;
executorService = routeContext . getCamelContext ( arg ) . getExecutorServiceStrategy ( arg ) . <unk> ( arg ) ;
<unk> = true ;
expect ( arg ) . andReturn ( arg ) ;
expect ( arg ) . andReturn ( arg ) ;
expected . add ( arg ) ;
expected . add ( arg ) ;
expected . addAll ( arg ) ;
expected . addAll ( arg ) ;
expectedType = ( Class ) expectedType . <unk> ( arg ) . get ( arg ) ;
expression = ExpressionBuilder . bodyExpression ( arg ) ;
expression = ExpressionBuilder . tokenizeExpression ( arg ) ;
expression = language . createExpression ( arg ) ;
<unk> = ExpressionFactory . newInstance ( arg ) ;
factory = ObjectHelper . loadClass ( arg ) ;
factory = bus . getExtension ( arg ) ;
fail ( arg ) ;
fail ( arg ) ;
failed = false ;
failed = false ;
failed = newExchange . hasOut ( arg ) ;
failed = newExchange . hasOut ( arg ) ;
<unk> . message ( arg ) . header ( arg ) . isEqualTo ( arg ) ;
<unk> = true ;
fault = ( in != null && in instanceof MessageSupport ) ? ( ( MessageSupport ) in ) . newInstance ( arg ) : createFaultMessage ( arg ) ;
fault = createFaultMessage ( arg ) ;
features . add ( arg ) ;
features . add ( arg ) ;
field = annotedFields . get ( arg ) ;
file = ( RemoteFile ) exchange . getProperty ( arg ) ;
file = ( RemoteFile ) exchange . getProperty ( arg ) ;
file = exchange . getFile ( arg ) ;
file = new File ( arg ) . getAbsoluteFile ( arg ) ;
file = new File ( arg ) . getAbsoluteFile ( arg ) ;
file = new File ( arg ) . getAbsoluteFile ( arg ) ;
file = new File ( arg ) . getAbsoluteFile ( arg ) ;
file = new File ( arg ) ;
fileExpressionResult = ( String ) endpoint . getFileExpression ( arg ) . evaluate ( arg ) ;
fileExpressionResult = ( String ) endpoint . getFileName ( arg ) . evaluate ( arg ) ;
fileName = normalizePath ( arg ) ;
<unk> . createNewFile ( arg ) ;
filename += report.txt + FileEndpoint . DEFAULT_LOCK_FILE_POSTFIX ;
filename += report.txt + <unk> . DEFAULT_LOCK_FILE_POSTFIX ;
filename += report.txt + NewFileComponent . DEFAULT_LOCK_FILE_POSTFIX ;
filename += report.txt + <unk> . DEFAULT_LOCK_FILE_POSTFIX ;
files = new File ( arg ) . getAbsoluteFile ( arg ) . list ( arg ) ;
files = new File ( arg ) . getAbsoluteFile ( arg ) . list ( arg ) ;
filterProcessor . getProcessor ( arg ) . process ( arg ) ;
<unk> = new <unk> ( arg ) ;
final AtomicBoolean <unk> = new AtomicBoolean ( arg ) ;
final BlockingQueue queue = endpoint . getQueue ( arg ) ;
final Boolean value = <unk> ( arg ) ;
final Buffer confirmKeyBuffer = marshaller . marshallConfirmKey ( arg ) ;
final Buffer confirmKeyBuffer = marshaller . marshallConfirmKey ( arg ) ;
final Buffer confirmKeyBuffer = marshaller . marshallConfirmKey ( arg ) ;
final Buffer confirmKeyBuffer = marshaller . marshallKey ( arg ) ;
final Buffer confirmKeyBuffer = marshaller . marshallKey ( arg ) ;
final Buffer keyBuffer = marshallKey ( arg ) ;
final Buffer keyBuffer = marshaller . marshallKey ( arg ) ;
final Class type = <unk> . get ( arg ) ;
final ClassPathXmlApplicationContext applicationContext = new ClassPathXmlApplicationContext ( arg ) ;
final ClientAuthentication clientAuthValue = this . getClientAuthentication ( arg ) ;
final ClientAuthentication clientAuthValue = this . getClientAuthentication ( arg ) ;
final <unk> < ? > <unk> = getDelegate ( arg ) . <unk> ( arg ) ;
final DataSetEndpoint endpoint = new DataSetEndpoint ( arg ) ;
final <unk> callback = ( <unk> ) ? <unk> . <unk> ( arg ) : null ;
final Dictionary <unk> = new Hashtable ( arg ) ;
final Exchange copy = exchange . copy ( arg ) ;
final Exchange copy = exchange . copy ( arg ) ;
final Exchange copy = exchange . newCopy ( arg ) ;
final Exchange copy = exchange . newCopy ( arg ) ;
final Exchange exchange ;
final Exchange exchange = event . getExchange ( arg ) ;
final Exchange exchange = new DefaultExchange ( arg ) ;
final ExpressionClause clause = new ExpressionClause < MockEndpoint > ( arg ) ;
final ExpressionClause clause = new ExpressionClause < MockEndpoint > ( arg ) ;
final ExpressionClause clause = new ExpressionClause < MockEndpoint > ( arg ) ;
final ExpressionClause clause = new ExpressionClause < MockEndpoint > ( arg ) ;
final File file = exchange . getFile ( arg ) ;
final File file = new File ( arg ) . getAbsoluteFile ( arg ) ;
final GenericFile < T > file = ( GenericFile < T > ) exchange . getProperty ( arg ) ;
final GenericFile < T > file = exchange . getGenericFile ( arg ) ;
final GenericFile < T > target = ( GenericFile < T > ) exchange . getProperty ( arg ) ;
final <unk> <unk> = endpoint . getGenericFileProcessStrategy ( arg ) ;
final HazelcastSedaEndpoint hzlqEndpoint = ( HazelcastSedaEndpoint ) hzlqComponent . createEndpoint ( arg ) ;
final IdempotentRepository repo = MemoryIdempotentRepository . memoryIdempotentRepository ( arg ) ;
final IdempotentRepository repo = MemoryIdempotentRepository . memoryIdempotentRepository ( arg ) ;
final IrcEndpoint endpoint = new IrcEndpoint ( arg ) ;
final <unk> < ProcessorExchangePair > pairs ;
final Iterator it = ObjectHelper . createIterator ( arg ) ;
final Iterator it = ObjectHelper . createIterator ( arg ) ;
final Iterator it = ObjectHelper . createIterator ( arg ) ;
final Iterator it = ObjectHelper . createIterator ( arg ) ;
final Iterator it = ObjectHelper . createIterator ( arg ) ;
final JSonPathEngine engine ;
final JSonPathEngine engine ;
final JmsExchange exchange = createExchange ( arg ) ;
final LinkedHashMap <unk> = new LinkedHashMap ( arg ) ;
final List < Future > <unk> = new ArrayList < Future > ( arg ) ;
final List < String > enabledCipherSuites = this . getCipherSuites ( arg ) == null ? null : this . getCipherSuites ( arg ) . getCipherSuite ( arg ) ;
final List < String > enabledCipherSuites = this . getCipherSuites ( arg ) == null ? null : this . getCipherSuites ( arg ) . getCipherSuite ( arg ) ;
final List < String > enabledCipherSuites = this . getCipherSuites ( arg ) == null ? null : this . getCipherSuites ( arg ) . getCipherSuite ( arg ) ;
final List < String > enabledSecureSocketProtocols = this . getSecureSocketProtocols ( arg ) == null ? null : this . getSecureSocketProtocols ( arg ) . getSecureSocketProtocol ( arg ) ;
final List < String > enabledSecureSocketProtocols = this . getSecureSocketProtocols ( arg ) == null ? null : this . getSecureSocketProtocols ( arg ) . getSecureSocketProtocol ( arg ) ;
final List < String > enabledSecureSocketProtocols = this . getSecureSocketProtocols ( arg ) == null ? null : this . getSecureSocketProtocols ( arg ) . getSecureSocketProtocol ( arg ) ;
final List list = new ArrayList ( arg ) ;
final List received = new ArrayList ( arg ) ;
final Map < String , Integer > retval = new Hashtable ( arg ) ;
final MockEndpoint mock = ( MockEndpoint ) <unk> . getEndpoint ( arg ) ;
final NodeState <unk> = getNodeState ( arg ) ;
final NotifyBuilder notify = new NotifyBuilder ( arg ) . from ( arg ) . whenDone ( arg ) . create ( arg ) ;
final Object [ ] arguments = ( Object [ ] ) <unk> . evaluate ( arg ) ;
final Processor <unk> = routeContext . createProcessor ( arg ) ;
final ProducerTemplate < Exchange > template = context . createProducerTemplate ( arg ) ;
final ProducerTemplate producer = ( ProducerTemplate ) context . getBean ( arg ) ;
final ProducerTemplate producer = ( ProducerTemplate ) context . getBean ( arg ) ;
final Promise <unk> = new Promise ( arg ) ;
final SedaEndpoint . Entry < E > entry ;
final SedaEndpoint . Entry entry ;
final Set < AuthMethod > <unk> = new HashSet < AuthMethod > ( arg ) ;
final Set < Document > result = new HashSet < Document > ( arg ) ;
final SimpleAnalyzer <unk> = new SimpleAnalyzer ( arg ) ;
final SimpleLangaugeOperator operator = asOperator ( arg ) ;
final SimpleLangaugeOperator operator = asOperator ( arg ) ;
final StopWatch watch = exchange != null ? new StopWatch ( arg ) : null ;
final String [ ] <unk> = { val } ;
final String <unk> = " + System . getProperty ( arg ) + " ;
final String contentType = json . equals ( arg ) ? <unk> : <unk> ;
final String <unk> = ( String ) properties . remove ( arg ) ;
final String name = target . getAbsoluteFileName ( arg ) ;
final String path = <unk> ;
final String preparedQuery = endpoint . getPrepareStatementStrategy ( arg ) . prepareQuery ( arg ) ;
final String preparedQuery = endpoint . getPrepareStatementStrategy ( arg ) . prepareQuery ( arg ) ;
final String preparedQuery = getEndpoint ( arg ) . getPrepareStatementStrategy ( arg ) . prepareQuery ( arg ) ;
final String preparedQuery = getEndpoint ( arg ) . getPrepareStatementStrategy ( arg ) . prepareQuery ( arg ) ;
final String <unk> = remaining ;
final String <unk> = objectMapper . <unk> ( arg ) ;
final String target = endpoint . getConfiguration ( arg ) . getTarget ( arg ) ;
final String type = <unk> . get ( arg ) ;
final TransactionTemplate <unk> = getTemplate ( arg ) ;
final UnitOfWork uow = <unk> ( arg ) ;
final boolean success = client . storeFile ( arg ) ;
final long sleep = ( long ) ( num * delay ) ;
finallyProcessor = <unk> . createProcessor ( arg ) ;
finallyProcessor = new SendDefinition ( arg ) . createProcessor ( arg ) ;
finallyProcessor = new <unk> ( arg ) . createProcessor ( arg ) ;
<unk> ( arg ) ;
fis . close ( arg ) ;
fis . close ( arg ) ;
foo = foo + stop ;
<unk> . close ( arg ) ;
<unk> = CONVERTER . convertTo ( arg ) ;
from ( arg ) . aggregate ( arg ) . batchSize ( arg ) . batchTimeout ( arg ) . to ( arg ) . end ( arg ) ;
from ( arg ) . aggregate ( arg ) . batchTimeout ( arg ) . batchSize ( arg ) . to ( arg ) ;
from ( arg ) . aggregate ( arg ) . bean ( arg ) . to ( arg ) ;
from ( arg ) . aggregate ( arg ) . completedPredicate ( arg ) . process ( arg ) . to ( arg ) ;
from ( arg ) . aggregate ( arg ) . completedPredicate ( arg ) . to ( arg ) ;
from ( arg ) . aggregate ( arg ) . <unk> ( arg ) . to ( arg ) ;
from ( arg ) . aggregate ( arg ) . completionPredicate ( arg ) . batchTimeout ( arg ) . to ( arg ) ;
from ( arg ) . aggregate ( arg ) . completionPredicate ( arg ) . to ( arg ) ;
from ( arg ) . aggregate ( arg ) . completionTimeout ( arg ) . completionSize ( arg ) . to ( arg ) ;
from ( arg ) . aggregate ( arg ) . constant ( arg ) . batchSize ( arg ) . batchTimeout ( arg ) . groupExchanges ( arg ) . to ( arg ) ;
from ( arg ) . aggregate ( arg ) . constant ( arg ) . batchSize ( arg ) . batchTimeout ( arg ) . to ( arg ) . end ( arg ) ;
from ( arg ) . aggregate ( arg ) . constant ( arg ) . batchTimeout ( arg ) . groupExchanges ( arg ) . to ( arg ) ;
from ( arg ) . aggregate ( arg ) . constant ( arg ) . completionSize ( arg ) . completionTimeout ( arg ) . groupExchanges ( arg ) . to ( arg ) ;
from ( arg ) . aggregate ( arg ) . constant ( arg ) . completionTimeout ( arg ) . groupExchanges ( arg ) . to ( arg ) ;
from ( arg ) . aggregate ( arg ) . constant ( arg ) . groupExchanges ( arg ) . completionSize ( arg ) . to ( arg ) . end ( arg ) ;
from ( arg ) . aggregate ( arg ) . constant ( arg ) . groupExchanges ( arg ) . eagerCheckCompletion ( arg ) . completionSize ( arg ) . to ( arg ) . end ( arg ) ;
from ( arg ) . aggregate ( arg ) . eagerCheckCompletion ( arg ) . completionPredicate ( arg ) . completionTimeout ( arg ) . to ( arg ) ;
from ( arg ) . aggregate ( arg ) . eagerCheckCompletion ( arg ) . completionPredicate ( arg ) . to ( arg ) ;
from ( arg ) . aggregate ( arg ) . header ( arg ) . aggregationStrategy ( arg ) . completionTimeout ( arg ) . to ( arg ) ;
from ( arg ) . aggregate ( arg ) . header ( arg ) . batchTimeout ( arg ) . groupExchanges ( arg ) . to ( arg ) ;
from ( arg ) . aggregate ( arg ) . header ( arg ) . batchTimeout ( arg ) . to ( arg ) ;
from ( arg ) . aggregate ( arg ) . header ( arg ) . groupExchanges ( arg ) . completionTimeout ( arg ) . to ( arg ) ;
from ( arg ) . aggregate ( arg ) . header ( arg ) . to ( arg ) ;
from ( arg ) . aggregate ( arg ) . method ( arg ) . batchTimeout ( arg ) . to ( arg ) . to ( arg ) ;
from ( arg ) . aggregate ( arg ) . setHeader ( arg ) . to ( arg ) ;
from ( arg ) . aggregate ( arg ) . simple ( arg ) . batchTimeout ( arg ) . groupExchanges ( arg ) . to ( arg ) ;
from ( arg ) . aggregate ( arg ) . to ( arg ) . to ( arg ) ;
from ( arg ) . aggregate ( arg ) . to ( arg ) ;
from ( arg ) . aggregator ( arg ) . batchTimeout ( arg ) . to ( arg ) ;
from ( arg ) . aggregator ( arg ) . batchTimeout ( arg ) . to ( arg ) ;
from ( arg ) . aggregator ( arg ) . completedPredicate ( arg ) . process ( arg ) . to ( arg ) ;
from ( arg ) . aggregator ( arg ) . completedPredicate ( arg ) . to ( arg ) ;
from ( arg ) . aggregator ( arg ) . header ( arg ) . batchTimeout ( arg ) . batchSize ( arg ) . <unk> ( arg ) . to ( arg ) ;
from ( arg ) . aggregator ( arg ) . header ( arg ) . batchTimeout ( arg ) . batchSize ( arg ) . to ( arg ) ;
from ( arg ) . aggregator ( arg ) . header ( arg ) . batchTimeout ( arg ) . to ( arg ) ;
from ( arg ) . aggregator ( arg ) . header ( arg ) . batchTimeout ( arg ) . to ( arg ) ;
from ( arg ) . aggregator ( arg ) . header ( arg ) . batchTimeout ( arg ) . to ( arg ) ;
from ( arg ) . aggregator ( arg ) . to ( arg ) ;
from ( arg ) . bean ( arg ) . aggregate ( arg ) . completionSize ( arg ) . to ( arg ) ;
from ( arg ) . bean ( arg ) . id ( arg ) . log ( arg ) . to ( arg ) ;
from ( arg ) . bean ( arg ) . to ( arg ) ;
from ( arg ) . beanRef ( arg ) . to ( arg ) ;
from ( arg ) . beanRef ( arg ) ;
from ( arg ) . beanRef ( arg ) ;
from ( arg ) . choice ( arg ) . when ( arg ) . expression ( arg ) . to ( arg ) . otherwise ( arg ) . to ( arg ) . end ( arg ) ;
from ( arg ) . choice ( arg ) . when ( arg ) . <unk> ( arg ) . to ( arg ) . otherwise ( arg ) . to ( arg ) ;
from ( arg ) . choice ( arg ) . when ( arg ) . jsonPath ( arg ) . to ( arg ) . when ( arg ) . jsonPath ( arg ) . to ( arg ) . otherwise ( arg ) . to ( arg ) ;
from ( arg ) . choice ( arg ) . when ( arg ) . language ( arg ) . to ( arg ) . when ( arg ) . language ( arg ) . to ( arg ) . otherwise ( arg ) . to ( arg ) ;
from ( arg ) . choice ( arg ) . when ( arg ) . recipientList ( arg ) . end ( arg ) . when ( arg ) . recipientList ( arg ) . end ( arg ) . otherwise ( arg ) . to ( arg ) ;
from ( arg ) . choice ( arg ) . when ( arg ) . setHeader ( arg ) . to ( arg ) . when ( arg ) . to ( arg ) . otherwise ( arg ) . to ( arg ) ;
from ( arg ) . choice ( arg ) . when ( arg ) . to ( arg ) . otherwise ( arg ) . to ( arg ) . end ( arg ) ;
from ( arg ) . choice ( arg ) . when ( arg ) . to ( arg ) . otherwise ( arg ) . to ( arg ) ;
from ( arg ) . choice ( arg ) . when ( arg ) . to ( arg ) . when ( arg ) . to ( arg ) . otherwise ( arg ) . to ( arg ) ;
from ( arg ) . choice ( arg ) . when ( arg ) . xpath ( arg ) . to ( arg ) . to ( arg ) . when ( arg ) . xpath ( arg ) . to ( arg ) . to ( arg ) ;
from ( arg ) . choice ( arg ) . when ( arg ) . xpath ( arg ) . to ( arg ) . when ( arg ) . xpath ( arg ) . to ( arg ) . otherwise ( arg ) . to ( arg ) ;
from ( arg ) . choice ( arg ) . when ( arg ) . xpath ( arg ) . to ( arg ) . when ( arg ) . xpath ( arg ) . to ( arg ) ;
from ( arg ) . choice ( arg ) . when ( arg ) . xquery ( arg ) . to ( arg ) . otherwise ( arg ) . to ( arg ) ;
from ( arg ) . convertBodyTo ( arg ) . choice ( arg ) . when ( arg ) . xpath ( arg ) . to ( arg ) . when ( arg ) . xpath ( arg ) . to ( arg ) ;
from ( arg ) . convertBodyTo ( arg ) . to ( arg ) ;
from ( arg ) . convertBodyTo ( arg ) . to ( arg ) ;
from ( arg ) . convertBodyTo ( arg ) . to ( arg ) ;
from ( arg ) . delay ( arg ) . to ( arg ) . setBody ( arg ) ;
from ( arg ) . delayer ( arg ) . to ( arg ) ;
from ( arg ) . delayer ( arg ) . transform ( arg ) ;
from ( arg ) . doTry ( arg ) . process ( arg ) . to ( arg ) . doCatch ( arg ) . process ( arg ) . <unk> ( arg ) . to ( arg ) . end ( arg ) ;
from ( arg ) . doTry ( arg ) . throwException ( arg ) . doCatch ( arg ) . handled ( arg ) . to ( arg ) . to ( arg ) . end ( arg ) ;
from ( arg ) . errorHandler ( arg ) . filter ( arg ) . inheritErrorHandler ( arg ) . to ( arg ) ;
from ( arg ) . errorHandler ( arg ) . onException ( arg ) . handled ( arg ) . end ( arg ) . to ( arg ) . to ( arg ) ;
from ( arg ) . errorHandler ( arg ) . process ( arg ) ;
from ( arg ) . errorHandler ( arg ) . tryBlock ( arg ) . process ( arg ) . handle ( arg ) . process ( arg ) . finallyBlock ( arg ) . choice ( arg ) . when ( arg ) . to ( arg ) . otherwise ( arg ) . to ( arg ) ;
from ( arg ) . filter ( arg ) . bean ( arg ) . bean ( arg ) ;
from ( arg ) . filter ( arg ) . bean ( arg ) ;
from ( arg ) . filter ( arg ) . expression ( arg ) . to ( arg ) ;
from ( arg ) . filter ( arg ) . expression ( arg ) . to ( arg ) ;
from ( arg ) . filter ( arg ) . recipientList ( arg ) . splitter ( arg ) . throttler ( arg ) . to ( arg ) ;
from ( arg ) . filter ( arg ) . recipientList ( arg ) . splitter ( arg ) . to ( arg ) ;
from ( arg ) . filter ( arg ) . to ( arg ) ;
from ( arg ) . from ( arg ) . to ( arg ) ;
from ( arg ) . id ( arg ) . onException ( arg ) . to ( arg ) . end ( arg ) . to ( arg ) ;
from ( arg ) . id ( arg ) . to ( arg ) ;
from ( arg ) . idempotentConsumer ( arg ) . async ( arg ) . to ( arg ) ;
from ( arg ) . inOut ( arg ) . process ( arg ) ;
from ( arg ) . inOut ( arg ) . routingSlip ( arg ) . to ( arg ) . to ( arg ) ;
from ( arg ) . inOut ( arg ) . to ( arg ) . log ( arg ) . threads ( arg ) . log ( arg ) . delay ( arg ) . log ( arg ) . to ( arg ) ;
from ( arg ) . inOut ( arg ) . to ( arg ) . threads ( arg ) . log ( arg ) . delay ( arg ) . log ( arg ) . to ( arg ) ;
from ( arg ) . intercept ( arg ) . add ( arg ) . add ( arg ) . target ( arg ) . to ( arg ) ;
from ( arg ) . intercept ( arg ) . add ( arg ) . add ( arg ) . target ( arg ) . to ( arg ) ;
from ( arg ) . intercept ( arg ) . intercept ( arg ) . to ( arg ) ;
from ( arg ) . intercept ( arg ) . target ( arg ) . to ( arg ) ;
from ( arg ) . intercept ( arg ) . to ( arg ) ;
from ( arg ) . loadBalance ( arg ) . failOver ( arg ) . to ( arg ) ;
from ( arg ) . loadBalance ( arg ) . failOver ( arg ) . to ( arg ) ;
from ( arg ) . loadBalance ( arg ) . failOver ( arg ) . to ( arg ) ;
from ( arg ) . loadBalance ( arg ) . failOver ( arg ) . to ( arg ) ;
from ( arg ) . loadBalance ( arg ) . random ( arg ) . to ( arg ) ;
from ( arg ) . log ( arg ) . split ( arg ) . streaming ( arg ) . convertBodyTo ( arg ) . to ( arg ) . end ( arg ) . log ( arg ) ;
from ( arg ) . log ( arg ) . to ( arg ) ;
from ( arg ) . marshal ( arg ) . secureXML ( arg ) . process ( arg ) ;
from ( arg ) . marshal ( arg ) . secureXML ( arg ) . unmarshal ( arg ) . secureXML ( arg ) . process ( arg ) ;
from ( arg ) . marshal ( arg ) . setHeader ( arg ) . <unk> ( arg ) . to ( arg ) ;
from ( arg ) . marshal ( arg ) . to ( arg ) . process ( arg ) . unmarshal ( arg ) ;
from ( arg ) . marshal ( arg ) . to ( arg ) . unmarshal ( arg ) . to ( arg ) ;
from ( arg ) . marshal ( arg ) . to ( arg ) ;
from ( arg ) . multicast ( arg ) . executor ( arg ) . to ( arg ) ;
from ( arg ) . multicast ( arg ) . <unk> ( arg ) . to ( arg ) ;
from ( arg ) . multicast ( arg ) . stopOnException ( arg ) . to ( arg ) . throwException ( arg ) . to ( arg ) ;
from ( arg ) . multicast ( arg ) . stopOnException ( arg ) . to ( arg ) ;
from ( arg ) . multicast ( arg ) . to ( arg ) . to ( arg ) ;
from ( arg ) . multicast ( arg ) . to ( arg ) . to ( arg ) ;
from ( arg ) . onException ( arg ) . end ( arg ) . to ( arg ) . to ( arg ) ;
from ( arg ) . onException ( arg ) . handled ( arg ) . bean ( arg ) . to ( arg ) . end ( arg ) . bean ( arg ) . to ( arg ) ;
from ( arg ) . onException ( arg ) . handled ( arg ) . to ( arg ) . end ( arg ) . resequence ( arg ) . stream ( arg ) . timeout ( arg ) . <unk> ( arg ) . to ( arg ) ;
from ( arg ) . onException ( arg ) . handled ( arg ) . unmarshal ( arg ) . end ( arg ) . marshal ( arg ) . to ( arg ) . unmarshal ( arg ) ;
from ( arg ) . onException ( arg ) . marshal ( arg ) . end ( arg ) . marshal ( arg ) . to ( arg ) ;
from ( arg ) . onException ( arg ) . retryUntil ( arg ) . end ( arg ) . recipientList ( arg ) . parallelProcessing ( arg ) . to ( arg ) ;
from ( arg ) . onException ( arg ) . retryUntil ( arg ) . end ( arg ) . recipientList ( arg ) . to ( arg ) ;
from ( arg ) . onException ( arg ) . to ( arg ) . end ( arg ) . convertBodyTo ( arg ) . to ( arg ) . to ( arg ) ;
from ( arg ) . onException ( arg ) . to ( arg ) . end ( arg ) . process ( arg ) . to ( arg ) ;
from ( arg ) . onException ( arg ) . to ( arg ) . end ( arg ) . to ( arg ) . to ( arg ) ;
from ( arg ) . process ( arg ) . multicast ( arg ) . parallelProcessing ( arg ) . to ( arg ) ;
from ( arg ) . process ( arg ) . multicast ( arg ) . parallelProcessing ( arg ) . to ( arg ) ;
from ( arg ) . process ( arg ) . multicast ( arg ) . setParallelProcessing ( arg ) . to ( arg ) ;
from ( arg ) . process ( arg ) . multicast ( arg ) . setParallelProcessing ( arg ) . to ( arg ) ;
from ( arg ) . process ( arg ) . multicast ( arg ) . setParallelProcessing ( arg ) . to ( arg ) ;
from ( arg ) . process ( arg ) . multicast ( arg ) . setParallelProcessing ( arg ) . to ( arg ) ;
from ( arg ) . process ( arg ) . multicast ( arg ) . to ( arg ) ;
from ( arg ) . process ( arg ) . to ( arg ) ;
from ( arg ) . recipientList ( arg ) . aggregationStrategy ( arg ) ;
from ( arg ) . recipientList ( arg ) . header ( arg ) ;
from ( arg ) . recipientList ( arg ) ;
from ( arg ) . resequence ( arg ) . stream ( arg ) . to ( arg ) ;
from ( arg ) . resequence ( arg ) . to ( arg ) ;
from ( arg ) . resequencer ( arg ) . stream ( arg ) . to ( arg ) ;
from ( arg ) . resequencer ( arg ) . to ( arg ) ;
from ( arg ) . routeId ( arg ) . noAutoStartup ( arg ) . shutdownRunningTask ( arg ) . delay ( arg ) . process ( arg ) . to ( arg ) ;
from ( arg ) . routeId ( arg ) . noAutoStartup ( arg ) . shutdownRunningTask ( arg ) . delay ( arg ) . to ( arg ) ;
from ( arg ) . routeId ( arg ) . noAutoStartup ( arg ) . shutdownRunningTask ( arg ) . delay ( arg ) . to ( arg ) ;
from ( arg ) . routeId ( arg ) . noAutoStartup ( arg ) . to ( arg ) ;
from ( arg ) . routeId ( arg ) . noAutoStartup ( arg ) . to ( arg ) ;
from ( arg ) . routeId ( arg ) . shutdownRunningTask ( arg ) . delay ( arg ) . to ( arg ) ;
from ( arg ) . routeId ( arg ) . split ( arg ) . to ( arg ) ;
from ( arg ) . routeId ( arg ) . throwException ( arg ) ;
from ( arg ) . routeId ( arg ) . to ( arg ) . delay ( arg ) . to ( arg ) ;
from ( arg ) . routeId ( arg ) . to ( arg ) . id ( arg ) . choice ( arg ) . id ( arg ) . when ( arg ) . id ( arg ) . to ( arg ) . id ( arg ) . to ( arg ) . id ( arg ) . when ( arg ) . id ( arg ) . to ( arg ) . id ( arg ) . otherwise ( arg ) . id ( arg ) . to ( arg ) . id ( arg ) . end ( arg ) . to ( arg ) . id ( arg ) ;
from ( arg ) . routeId ( arg ) . to ( arg ) ;
from ( arg ) . routeId ( arg ) . transform ( arg ) . simple ( arg ) . to ( arg ) ;
from ( arg ) . routePolicy ( arg ) . noAutoStartup ( arg ) . id ( arg ) . to ( arg ) . to ( arg ) ;
from ( arg ) . routePolicy ( arg ) . to ( arg ) ;
from ( arg ) . routingSlip ( arg ) ;
from ( arg ) . setHeader ( arg ) . constant ( arg ) . marshal ( arg ) . removeHeader ( arg ) . to ( arg ) . setHeader ( arg ) . constant ( arg ) . unmarshal ( arg ) . removeHeader ( arg ) . to ( arg ) ;
from ( arg ) . setHeader ( arg ) . groovy ( arg ) . to ( arg ) ;
from ( arg ) . setHeader ( arg ) . to ( arg ) ;
from ( arg ) . shutdownRunningTask ( arg ) . delay ( arg ) . to ( arg ) ;
from ( arg ) . shutdownRunningTask ( arg ) . delay ( arg ) . to ( arg ) ;
from ( arg ) . <unk> ( arg ) . to ( arg ) ;
from ( arg ) . split ( arg ) . body ( arg ) . choice ( arg ) . when ( arg ) . method ( arg ) . to ( arg ) . otherwise ( arg ) . to ( arg ) ;
from ( arg ) . split ( arg ) . parallelProcessing ( arg ) . executor ( arg ) . to ( arg ) ;
from ( arg ) . split ( arg ) . parallelProcessing ( arg ) . to ( arg ) ;
from ( arg ) . split ( arg ) . streaming ( arg ) . parallelProcessing ( arg ) . to ( arg ) ;
from ( arg ) . split ( arg ) . streaming ( arg ) . to ( arg ) ;
from ( arg ) . split ( arg ) . to ( arg ) ;
from ( arg ) . splitter ( arg ) . to ( arg ) ;
from ( arg ) . splitter ( arg ) . to ( arg ) ;
from ( arg ) . streamCaching ( arg ) . multicast ( arg ) . to ( arg ) ;
from ( arg ) . streamCaching ( arg ) . to ( arg ) . to ( arg ) . to ( arg ) ;
from ( arg ) . streamCaching ( arg ) . toF ( arg ) . to ( arg ) . to ( arg ) . to ( arg ) . to ( arg ) ;
from ( arg ) . streamCaching ( arg ) . toF ( arg ) . to ( arg ) . to ( arg ) ;
from ( arg ) . thread ( arg ) . marshal ( arg ) . to ( arg ) ;
from ( arg ) . thread ( arg ) . pipeline ( arg ) ;
from ( arg ) . thread ( arg ) . to ( arg ) ;
from ( arg ) . thread ( arg ) . transform ( arg ) . xquery ( arg ) . to ( arg ) ;
from ( arg ) . threads ( arg ) . keepAliveTime ( arg ) . <unk> ( arg ) . to ( arg ) ;
from ( arg ) . threads ( arg ) . poolSize ( arg ) . maxPoolSize ( arg ) . to ( arg ) ;
from ( arg ) . threads ( arg ) . to ( arg ) ;
from ( arg ) . threads ( arg ) . waitForTaskToComplete ( arg ) . to ( arg ) . throwException ( arg ) ;
from ( arg ) . throttler ( arg ) . timePeriodMillis ( arg ) . to ( arg ) ;
from ( arg ) . <unk> ( arg ) ;
from ( arg ) . to ( arg ) . delay ( arg ) . to ( arg ) ;
from ( arg ) . to ( arg ) . delay ( arg ) . transform ( arg ) . to ( arg ) ;
from ( arg ) . to ( arg ) . delayer ( arg ) . to ( arg ) ;
from ( arg ) . to ( arg ) . <unk> ( arg ) . process ( arg ) . to ( arg ) ;
from ( arg ) . to ( arg ) . id ( arg ) . to ( arg ) . id ( arg ) . transform ( arg ) . constant ( arg ) . id ( arg ) . to ( arg ) . id ( arg ) ;
from ( arg ) . to ( arg ) . policy ( arg ) . to ( arg ) ;
from ( arg ) . to ( arg ) . throwException ( arg ) . throwException ( arg ) . to ( arg ) ;
from ( arg ) . to ( arg ) . throwException ( arg ) . to ( arg ) ;
from ( arg ) . to ( arg ) . to ( arg ) . async ( arg ) . unmarshal ( arg ) . delay ( arg ) . to ( arg ) . to ( arg ) ;
from ( arg ) . to ( arg ) . to ( arg ) . setHeader ( arg ) . to ( arg ) . to ( arg ) ;
from ( arg ) . to ( arg ) . to ( arg ) . to ( arg ) ;
from ( arg ) . to ( arg ) . to ( arg ) ;
from ( arg ) . to ( arg ) . to ( arg ) ;
from ( arg ) . to ( arg ) ;
from ( arg ) . to ( arg ) ;
from ( arg ) . to ( arg ) ;
from ( arg ) . to ( arg ) ;
from ( arg ) . to ( arg ) ;
from ( arg ) . to ( arg ) ;
from ( arg ) . to ( arg ) ;
from ( arg ) . to ( arg ) ;
from ( arg ) . to ( arg ) ;
from ( arg ) . to ( arg ) ;
from ( arg ) . to ( arg ) ;
from ( arg ) . to ( arg ) ;
from ( arg ) . to ( arg ) ;
from ( arg ) . to ( arg ) ;
from ( arg ) . to ( arg ) ;
from ( arg ) . to ( arg ) ;
from ( arg ) . to ( arg ) ;
from ( arg ) . to ( arg ) ;
from ( arg ) . to ( arg ) ;
from ( arg ) . to ( arg ) ;
from ( arg ) . toAsync ( arg ) . to ( arg ) ;
from ( arg ) . toAsync ( arg ) . to ( arg ) ;
from ( arg ) . trace ( arg ) . process ( arg ) . to ( arg ) ;
from ( arg ) . transform ( arg ) . async ( arg ) . to ( arg ) . delay ( arg ) . process ( arg ) . to ( arg ) ;
from ( arg ) . transform ( arg ) . async ( arg ) . to ( arg ) . delay ( arg ) . process ( arg ) . to ( arg ) ;
from ( arg ) . transform ( arg ) . async ( arg ) . waitForTaskToComplete ( arg ) . to ( arg ) . delay ( arg ) . process ( arg ) . to ( arg ) ;
from ( arg ) . transform ( arg ) . async ( arg ) . waitForTaskToComplete ( arg ) . to ( arg ) . delay ( arg ) . process ( arg ) . to ( arg ) ;
from ( arg ) . transform ( arg ) . async ( arg ) . waitForTaskToComplete ( arg ) . to ( arg ) . delay ( arg ) . process ( arg ) . to ( arg ) ;
from ( arg ) . transform ( arg ) . async ( arg ) . waitForTaskToComplete ( arg ) . to ( arg ) . delay ( arg ) . process ( arg ) . to ( arg ) ;
from ( arg ) . transform ( arg ) . jsonPath ( arg ) . to ( arg ) ;
from ( arg ) . transform ( arg ) . language ( arg ) . to ( arg ) ;
from ( arg ) . transform ( arg ) . log ( arg ) . to ( arg ) ;
from ( arg ) . transform ( arg ) . to ( arg ) ;
from ( arg ) . transform ( arg ) . to ( arg ) ;
from ( arg ) . transform ( arg ) ;
from ( arg ) . tryBlock ( arg ) . process ( arg ) . handle ( arg ) . setHeader ( arg ) . end ( arg ) . tryBlock ( arg ) . process ( arg ) . to ( arg ) . handle ( arg ) . pipeline ( arg ) ;
from ( arg ) . tryBlock ( arg ) . process ( arg ) . process ( arg ) . handle ( arg ) . process ( arg ) . end ( arg ) . process ( arg ) ;
from ( arg ) . tryBlock ( arg ) . process ( arg ) . process ( arg ) . handle ( arg ) . process ( arg ) . finallyBlock ( arg ) . process ( arg ) . end ( arg ) . process ( arg ) ;
from ( arg ) . tryBlock ( arg ) . process ( arg ) . process ( arg ) . handle ( arg ) . process ( arg ) . finallyBlock ( arg ) . process ( arg ) . process ( arg ) ;
from ( arg ) . tryBlock ( arg ) . process ( arg ) . process ( arg ) . handle ( arg ) . process ( arg ) . handleAll ( arg ) . process ( arg ) . end ( arg ) . process ( arg ) ;
from ( arg ) . tryBlock ( arg ) . process ( arg ) . process ( arg ) . handle ( arg ) . process ( arg ) . handleAll ( arg ) . process ( arg ) . process ( arg ) ;
from ( arg ) . tryBlock ( arg ) . process ( arg ) . process ( arg ) . handle ( arg ) . process ( arg ) . process ( arg ) ;
from ( arg ) . tryBlock ( arg ) . process ( arg ) . setHeader ( arg ) . handle ( arg ) . setHeader ( arg ) . finallyBlock ( arg ) . setBody ( arg ) . choice ( arg ) . when ( arg ) . to ( arg ) . otherwise ( arg ) . to ( arg ) ;
from ( arg ) . tryBlock ( arg ) . process ( arg ) . to ( arg ) . handle ( arg ) . pipeline ( arg ) ;
from ( arg ) . tryBlock ( arg ) . process ( arg ) . to ( arg ) . handle ( arg ) . process ( arg ) . end ( arg ) ;
from ( arg ) . tryBlock ( arg ) . process ( arg ) . to ( arg ) . handle ( arg ) . process ( arg ) ;
from ( arg ) . tryBlock ( arg ) . process ( arg ) . to ( arg ) . handle ( arg ) . to ( arg ) ;
from ( arg ) . tryBlock ( arg ) . process ( arg ) . to ( arg ) . handle ( arg ) . tryBlock ( arg ) . process ( arg ) . to ( arg ) . handle ( arg ) . pipeline ( arg ) ;
from ( arg ) . tryBlock ( arg ) . routingSlip ( arg ) . to ( arg ) . handle ( arg ) . to ( arg ) ;
from ( arg ) . unmarshal ( arg ) . bindy ( arg ) . to ( arg ) ;
from ( arg ) . unmarshal ( arg ) . <unk> ( arg ) . to ( arg ) ;
from ( arg ) . unmarshal ( arg ) . split ( arg ) . streaming ( arg ) . convertBodyTo ( arg ) . to ( arg ) . end ( arg ) . log ( arg ) ;
from ( arg ) . unmarshal ( arg ) . to ( arg ) ;
from ( arg ) . validate ( arg ) . regex ( arg ) . to ( arg ) ;
from ( arg ) . validate ( arg ) . transform ( arg ) ;
from ( arg ) . validate ( arg ) . transform ( arg ) ;
from ( arg ) . wireTap ( arg ) . choice ( arg ) . when ( arg ) . to ( arg ) . when ( arg ) . to ( arg ) . otherwise ( arg ) . to ( arg ) . end ( arg ) ;
from ( arg ) . wireTap ( arg ) . copy ( arg ) . newExchange ( arg ) . to ( arg ) ;
from ( arg ) . wireTap ( arg ) . newExchange ( arg ) . to ( arg ) ;
from = exchange . getFromEndpoint ( arg ) . getEndpointUri ( arg ) ;
<unk> . add ( arg ) ;
ftp . disconnect ( arg ) ;
future . get ( arg ) ;
future = executor . scheduleAtFixedRate ( arg ) ;
future = executor . scheduleWithFixedDelay ( arg ) ;
<unk> . setFile ( arg ) ;
get . releaseConnection ( arg ) ;
get . releaseConnection ( arg ) ;
get . releaseConnection ( arg ) ;
getApplicationContext ( arg ) . <unk> ( arg ) ;
getCamelContext ( arg ) . addRouteDefinitions ( arg ) ;
getCamelContext ( arg ) . addRouteDefinitions ( arg ) ;
getCamelContext ( arg ) . getExecutorServiceManager ( arg ) . shutdown ( arg ) ;
getCamelContext ( arg ) . getExecutorServiceManager ( arg ) . shutdown ( arg ) ;
getCamelContext ( arg ) . getExecutorServiceManager ( arg ) . shutdown ( arg ) ;
getCamelContext ( arg ) . getExecutorServiceManager ( arg ) . shutdown ( arg ) ;
getCamelContext ( arg ) . getExecutorServiceManager ( arg ) . shutdown ( arg ) ;
getCamelContext ( arg ) . getExecutorServiceManager ( arg ) . shutdownNow ( arg ) ;
getCamelContext ( arg ) . getExecutorServiceManager ( arg ) . shutdownNow ( arg ) ;
getCamelContext ( arg ) . getExecutorServiceManager ( arg ) . shutdownNow ( arg ) ;
getCamelContext ( arg ) . getExecutorServiceManager ( arg ) . shutdownNow ( arg ) ;
getCamelContext ( arg ) . getExecutorServiceManager ( arg ) . shutdownNow ( arg ) ;
getCamelContext ( arg ) . getExecutorServiceStrategy ( arg ) . shutdown ( arg ) ;
getCamelContext ( arg ) . removeRouteDefinition ( arg ) ;
<unk> ( arg ) . add ( arg ) ;
getComponent ( arg ) . addServlet ( arg ) ;
getComponent ( arg ) . addServlet ( arg ) ;
getConfiguration ( arg ) . <unk> ( arg ) ;
getConfiguration ( arg ) . setFile ( arg ) ;
getContext ( arg ) . activateEndpoints ( arg ) ;
getContext ( arg ) . addInterceptStrategy ( arg ) ;
getContext ( arg ) . deactivateEndpoints ( arg ) ;
getContext ( arg ) . getManagementStrategy ( arg ) . setSatisticsLevel ( arg ) ;
getContext ( arg ) . getManagementStrategy ( arg ) . setSatisticsLevel ( arg ) ;
getContext ( arg ) . <unk> ( arg ) ;
getContext ( arg ) . <unk> ( arg ) ;
getContext ( arg ) . <unk> ( arg ) ;
getContext ( arg ) ;
getDestination ( arg ) . getCamelContext ( arg ) . getExecutorServiceManager ( arg ) . shutdownNow ( arg ) ;
getEndpoint ( arg ) . getCamelContext ( arg ) . getExecutorServiceManager ( arg ) . shutdown ( arg ) ;
getEndpoint ( arg ) . getCamelContext ( arg ) . getExecutorServiceManager ( arg ) . shutdown ( arg ) ;
getEndpoint ( arg ) . getCamelContext ( arg ) . getExecutorServiceManager ( arg ) . shutdown ( arg ) ;
getEndpoint ( arg ) . getCamelContext ( arg ) . getExecutorServiceManager ( arg ) . shutdownNow ( arg ) ;
getEndpoint ( arg ) . getCamelContext ( arg ) . getExecutorServiceManager ( arg ) . shutdownNow ( arg ) ;
getEndpoint ( arg ) . getCamelContext ( arg ) . getExecutorServiceManager ( arg ) . shutdownNow ( arg ) ;
getEndpoint ( arg ) . getCamelContext ( arg ) . getExecutorServiceManager ( arg ) . shutdownNow ( arg ) ;
getEndpoint ( arg ) . getCamelContext ( arg ) . getExecutorServiceStrategy ( arg ) . shutdown ( arg ) ;
getEndpoint ( arg ) . getGenericFileProcessStrategy ( arg ) . prepareOnStartup ( arg ) ;
getEndpoint ( arg ) . getInProgressRepository ( arg ) . remove ( arg ) ;
getEndpoint ( arg ) . onListenerConstainerStopped ( arg ) ;
getExceptionHandler ( arg ) . handleException ( arg ) ;
getExceptions ( arg ) . add ( arg ) ;
getExecutorServiceManager ( arg ) . shutdown ( arg ) ;
<unk> ( arg ) . add ( arg ) ;
getHeaders ( arg ) . put ( arg ) ;
<unk> ( arg ) . <unk> ( arg ) . <unk> ( arg ) ;
getInterceptors ( arg ) . add ( arg ) ;
<unk> ( arg ) . add ( arg ) ;
getLoadBalancer ( arg ) . <unk> ( arg ) ;
getLoadBalancer ( arg ) . process ( arg ) ;
getLoadBalancer ( arg ) . <unk> ( arg ) ;
getLog ( arg ) . warn ( arg ) ;
getLogger ( arg ) . log ( arg ) ;
getLogger ( arg ) . log ( arg ) ;
getLogger ( arg ) . log ( arg ) ;
getLogger ( arg ) . log ( arg ) ;
getLogger ( arg ) . log ( arg ) ;
getManagementStrategy ( arg ) . manageObject ( arg ) ;
getManagementStrategy ( arg ) . manageObject ( arg ) ;
getManagementStrategy ( arg ) . manageObject ( arg ) ;
getManagementStrategy ( arg ) . manageObject ( arg ) ;
getManagementStrategy ( arg ) . manageObject ( arg ) ;
getManagementStrategy ( arg ) . manageObject ( arg ) ;
getManagementStrategy ( arg ) . manageObject ( arg ) ;
getManagementStrategy ( arg ) . unmanageObject ( arg ) ;
getManagementStrategy ( arg ) . unmanageObject ( arg ) ;
getManagementStrategy ( arg ) . unmanageObject ( arg ) ;
getManagementStrategy ( arg ) . unmanageObject ( arg ) ;
getManagementStrategy ( arg ) . unmanageObject ( arg ) ;
<unk> ( arg ) . marshal ( arg ) ;
getMockEndpoint ( arg ) . <unk> ( arg ) ;
getMockEndpoint ( arg ) . expectedBodiesReceived ( arg ) ;
getMockEndpoint ( arg ) . expectedBodiesReceived ( arg ) ;
getMockEndpoint ( arg ) . expectedBodiesReceived ( arg ) ;
getMockEndpoint ( arg ) . expectedBodiesReceivedInAnyOrder ( arg ) ;
getMockEndpoint ( arg ) . expectedHeaderReceived ( arg ) ;
getMockEndpoint ( arg ) . expectedHeaderReceived ( arg ) ;
getMockEndpoint ( arg ) . expectedHeaderReceived ( arg ) ;
getMockEndpoint ( arg ) . expectedMessageCount ( arg ) ;
getMockEndpoint ( arg ) . expectedMessageCount ( arg ) ;
getMockEndpoint ( arg ) . expectedMinimumMessageCount ( arg ) ;
getMockEndpoint ( arg ) . expectedMinimumMessageCount ( arg ) ;
getMockEndpoint ( arg ) . expectedMinimumMessageCount ( arg ) ;
getMockEndpoint ( arg ) . <unk> ( arg ) ;
getMockEndpoint ( arg ) . message ( arg ) . outBody ( arg ) . isEqualTo ( arg ) ;
getMockEndpoint ( arg ) . message ( arg ) . outBody ( arg ) . isEqualTo ( arg ) ;
getMockEndpoint ( arg ) . message ( arg ) . outBody ( arg ) . isEqualTo ( arg ) ;
getMockEndpoint ( arg ) . setExpectedMessageCount ( arg ) ;
getMockEndpoint ( arg ) . setExpectedMessageCount ( arg ) ;
getMockEndpoint ( arg ) . setExpectedMessageCount ( arg ) ;
getMockEndpoint ( arg ) . setExpectedMessageCount ( arg ) ;
getMulticastProcessor ( arg ) . getProcessors ( arg ) . add ( arg ) ;
getMulticastProcessor ( arg ) . getProcessors ( arg ) . remove ( arg ) ;
getMulticastProcessor ( arg ) . process ( arg ) ;
<unk> ( arg ) . add ( arg ) ;
getOrCreateRedeliveryPolicy ( arg ) . delay ( arg ) ;
getOrCreateRedeliveryPolicy ( arg ) . <unk> ( arg ) ;
getOrCreateRedeliveryPolicy ( arg ) . <unk> ( arg ) ;
getOrCreateRedeliveryPolicy ( arg ) . setLogExhasted ( arg ) ;
getOrCreateRedeliveryPolicy ( arg ) . setLogExhausted ( arg ) ;
getOrCreateRedeliveryPolicy ( arg ) . <unk> ( arg ) ;
getOrCreateRedeliveryPolicy ( arg ) . <unk> ( arg ) ;
getOrCreateRedeliveryPolicy ( arg ) . <unk> ( arg ) ;
getOrCreateRedeliveryPolicy ( arg ) . <unk> ( arg ) ;
getOrCreateRedeliveryPolicy ( arg ) . <unk> ( arg ) ;
getOutputs ( arg ) . add ( arg ) ;
getOutputs ( arg ) . add ( arg ) ;
getOutputs ( arg ) . add ( arg ) ;
getOutputs ( arg ) . add ( arg ) ;
getOutputs ( arg ) . add ( arg ) ;
getOutputs ( arg ) . add ( arg ) ;
getProcessor ( arg ) . add ( arg ) ;
getProcessor ( arg ) . add ( arg ) ;
getProcessor ( arg ) . onExchange ( arg ) ;
getProcessor ( arg ) . onExchange ( arg ) ;
getProcessor ( arg ) . onExchange ( arg ) ;
getProcessor ( arg ) . onExchange ( arg ) ;
getProcessor ( arg ) . onExchange ( arg ) ;
getProcessor ( arg ) . onExchange ( arg ) ;
getProcessor ( arg ) . process ( arg ) ;
getRedeliveryPolicy ( arg ) . initialRedeliveryDelay ( arg ) ;
getRedeliveryPolicy ( arg ) . redeliverDelay ( arg ) ;
getRouteboxEndpoint ( arg ) . getCamelContext ( arg ) . getExecutorServiceStrategy ( arg ) . shutdown ( arg ) ;
<unk> ( arg ) . <unk> ( arg ) ;
getServer ( arg ) . removeConnector ( arg ) ;
getServer ( arg ) . removeConnector ( arg ) ;
getStrategy ( arg ) . manageObject ( arg ) ;
getStrategy ( arg ) . manageObject ( arg ) ;
getStrategy ( arg ) . manageObject ( arg ) ;
getStrategy ( arg ) . manageObject ( arg ) ;
getStrategy ( arg ) . manageObject ( arg ) ;
getStrategy ( arg ) . manageObject ( arg ) ;
getStrategy ( arg ) . unmanageObject ( arg ) ;
getStrategy ( arg ) . unmanageObject ( arg ) ;
getStrategy ( arg ) . unmanageObject ( arg ) ;
getThrottler ( arg ) . setMaximumRequestsPerPeriod ( arg ) ;
graph = <unk> ;
groovy ( arg ) . onExchange ( arg ) ;
group = encode ( arg ) ;
grouped = new GroupedExchange ( arg ) ;
grouped = out . getProperty ( arg ) ;
grouped = out . getProperty ( arg ) ;
grouped = out . getProperty ( arg ) ;
grouped = out . getProperty ( arg ) ;
<unk> . <unk> ( arg ) . put ( arg ) ;
<unk> . shutdown ( arg ) ;
haederExist = true ;
handleAll ( arg ) ;
handleAll ( arg ) ;
handleException ( arg ) ;
handleException ( arg ) ;
handleInteruptedException ( arg ) ;
handleInteruptedException ( arg ) ;
<unk> ( arg ) ;
<unk> ( arg ) ;
<unk> = PredicateBuilder . toPredicate ( arg ) ;
handler = ( ErrorHandlerBuilder ) lookupErrorHandlerBuilder ( arg ) ;
handler = lookupErrorHandlerBuilder ( arg ) ;
handler = this . <unk> . lookup ( arg ) ;
handlerExecutor = endpoint . getCamelContext ( arg ) . getExecutorServiceManager ( arg ) . getExecutorService ( arg ) ;
handlerExecutor = endpoint . getCamelContext ( arg ) . getExecutorServiceStrategy ( arg ) . newFixedThreadPool ( arg ) ;
hawtDBFile . start ( arg ) ;
hawtDBFile . stop ( arg ) ;
header = exchange . getHeader ( arg ) ;
header = exchange . getHeaders ( arg ) . getHeader ( arg ) ;
headerValue = ( String ) headerValue ;
headers . put ( arg ) ;
headers . put ( arg ) ;
headers = <unk> ( arg ) ;
headers = new <unk> ( arg ) ;
headers = new HashMap ( arg ) ;
headers = new HashMap < String , Object > ( arg ) ;
holder = new <unk> ( arg ) ;
holder = new StartupRouteHolder ( arg ) ;
httpExchange . <unk> ( arg ) ;
httpRegistry = HttpRegistryImpl . getSingletonHttpRegistry ( arg ) ;
httpRegistry = HttpRegistryImpl . getSingletonHttpRegistry ( arg ) ;
httpRequest . getParams ( arg ) . setParameter ( arg ) ;
<unk> . <unk> ( arg ) . consumeContent ( arg ) ;
httpclient . getConnectionManager ( arg ) . shutdown ( arg ) ;
httpclient . getConnectionManager ( arg ) . shutdown ( arg ) ;
httpclient . getConnectionManager ( arg ) . shutdown ( arg ) ;
httpclient . getConnectionManager ( arg ) . shutdown ( arg ) ;
httpclient . getConnectionManager ( arg ) . shutdown ( arg ) ;
httpclient . getConnectionManager ( arg ) . shutdown ( arg ) ;
httpclient . getConnectionManager ( arg ) . shutdown ( arg ) ;
httpclient . getConnectionManager ( arg ) . shutdown ( arg ) ;
httpclient . getConnectionManager ( arg ) . shutdown ( arg ) ;
httpclient . getConnectionManager ( arg ) . shutdown ( arg ) ;
httpclient . getConnectionManager ( arg ) . shutdown ( arg ) ;
httpclient . getConnectionManager ( arg ) . shutdown ( arg ) ;
httpclient . getConnectionManager ( arg ) . shutdown ( arg ) ;
httpclient . getConnectionManager ( arg ) . shutdown ( arg ) ;
httpclient . getConnectionManager ( arg ) . shutdown ( arg ) ;
httpclient . getConnectionManager ( arg ) . shutdown ( arg ) ;
httpclient . getConnectionManager ( arg ) . shutdown ( arg ) ;
httpclient . getConnectionManager ( arg ) . shutdown ( arg ) ;
httpclient . getConnectionManager ( arg ) . shutdown ( arg ) ;
httpclient . getConnectionManager ( arg ) . shutdown ( arg ) ;
httpclient = new DefaultHttpClient ( arg ) ;
hzlqEndpoint = ( HazelcastSedaEndpoint ) hzlqComponent . createEndpoint ( arg ) ;
iAgent . getMBeanServer ( arg ) . <unk> ( arg ) ;
iAgent = new <unk> ( arg ) ;
id = ( ( OptionalIdentifiedDefinition ) source ) . idOrCreate ( arg ) ;
id = DEFAULT_ID_GENERATOR . generateId ( arg ) ;
id = UuidGenerator . get ( arg ) . generateUuid ( arg ) ;
id = id ;
idempotentRepository = <unk> . <unk> ( arg ) ;
idempotentRepository = routeContext . lookup ( arg ) ;
if ( ! <unk> &&! consumers . isEmpty ( arg ) ) throw new IllegalStateException ( arg ) ;
if ( <unk> == null ) throw new IllegalRouteException ( arg ) ;
in . close ( arg ) ;
in . close ( arg ) ;
in = <unk> ( arg ) ;
in = endpoint . getCamelContext ( arg ) . getTypeConverter ( arg ) . convertTo ( arg ) ;
in = new BufferedInputStream ( arg ) ;
inMessage . setHeaders ( arg ) ;
inMessage = CxfSoapBinding . getCxfInMessage ( arg ) ;
inOrder . verify ( arg ) . getBody ( arg ) ;
inOrder . verify ( arg ) . getBody ( arg ) ;
inOrder . verify ( arg ) . getBody ( arg ) ;
inOrder . verify ( arg ) . getBody ( arg ) ;
inOrder . verify ( arg ) . getBody ( arg ) ;
inOrder . verify ( arg ) . sendExchange ( arg ) ;
inOrder . verify ( arg ) . sendExchange ( arg ) ;
inOrder . verify ( arg ) . sendExchange ( arg ) ;
<unk> = true ;
index = counter ;
indexName = endpoint . getConfig ( arg ) . getIndexName ( arg ) ;
indexName = endpoint . getConfig ( arg ) . getIndexName ( arg ) ;
indexName = endpoint . getConfig ( arg ) . getIndexName ( arg ) ;
indexReader = IndexReader . open ( arg ) ;
indexReader = IndexReader . open ( arg ) ;
indexSearcher . close ( arg ) ;
indexSearcher = new IndexSearcher ( arg ) ;
indexSearcher = new IndexSearcher ( arg ) ;
indexType = endpoint . getConfig ( arg ) . getIndexType ( arg ) ;
indexType = endpoint . getConfig ( arg ) . getIndexType ( arg ) ;
indexType = endpoint . getConfig ( arg ) . getIndexType ( arg ) ;
info . <unk> ( arg ) . delete ( arg ) ;
info . setSanitize ( arg ) ;
inheritErrorHandler ( arg ) ;
initAnnotedFields ( arg ) ;
initAnnotedFields ( arg ) ;
initAnnotedFields ( arg ) ;
<unk> ( arg ) ;
<unk> ( arg ) ;
<unk> ( arg ) ;
initParent ( arg ) ;
initParent ( arg ) ;
initParent ( arg ) ;
initParent ( arg ) ;
initParent ( arg ) ;
initParent ( arg ) ;
<unk> ( arg ) ;
<unk> ( arg ) ;
<unk> ( arg ) ;
<unk> ( arg ) ;
<unk> = method . getName ( arg ) ;
injector . close ( arg ) ;
injector . close ( arg ) ;
inmem = false ;
inmem = true ;
inmem = true ;
innerContext = ( CamelContext ) component . resolveAndRemoveReferenceParameter ( arg ) ;
innerContext = ( CamelContext ) component . resolveAndRemoveReferenceParameter ( arg ) ;
<unk> = ( <unk> ) component . resolveAndRemoveReferenceParameter ( arg ) ;
<unk> . incrementAndGet ( arg ) ;
input . close ( arg ) ;
<unk> = <unk> . newInstance ( arg ) ;
instance = ObjectHelper . newInstance ( arg ) ;
int b = ( ( text != null ? <unk> : 0x00 ) + ( encoding != null ? <unk> : 0x00 ) + ( <unk> ( arg ) != null ? <unk> : 0x00 ) + ( <unk> ( arg ) != null ? <unk> : 0x00 ) ) ;
int consumers = component . getMultiplexChannelHandler ( arg ) . consumers ( arg ) ;
int count = 0 ;
int count = configuration . getWorkerCount ( arg ) > 0 ? configuration . getWorkerCount ( arg ) : <unk> ;
int count = jdbc . queryForInt ( arg ) ;
int count = jdbc . queryForInt ( arg ) ;
int count = jdbc . queryForInt ( arg ) ;
int count = jdbc . queryForInt ( arg ) ;
int count = jdbc . queryForInt ( arg ) ;
int count = jdbc . queryForInt ( arg ) ;
int count = jdbc . queryForInt ( arg ) ;
int count = jdbc . queryForInt ( arg ) ;
int count = jdbc . queryForInt ( arg ) ;
int count = jdbc . queryForInt ( arg ) ;
int count = jdbc . queryForInt ( arg ) ;
int count = jdbc . queryForInt ( arg ) ;
int count = jdbc . queryForInt ( arg ) ;
int count = jdbc . queryForInt ( arg ) ;
int count = jdbc . queryForInt ( arg ) ;
int count = jdbc . queryForInt ( arg ) ;
int count = jdbc . queryForInt ( arg ) ;
int count = jdbc . queryForInt ( arg ) ;
int count = jdbc . queryForInt ( arg ) ;
int count = jdbc . queryForInt ( arg ) ;
int count = jdbc . queryForInt ( arg ) ;
int count = jdbc . queryForInt ( arg ) ;
int count = jdbc . queryForInt ( arg ) ;
int count = jdbc . queryForInt ( arg ) ;
int count = jdbc . queryForInt ( arg ) ;
int count = jdbc . queryForInt ( arg ) ;
int count = jdbc . queryForInt ( arg ) ;
int count = jdbc . queryForInt ( arg ) ;
int endIdx = uri . indexOf ( arg ) ;
int exitCode = CommandLineUtils . executeCommandLine ( arg ) ;
int exitCode = CommandLineUtils . executeCommandLine ( arg ) ;
int expected = ps . <unk> ( arg ) . <unk> ( arg ) ;
int <unk> = endpoint . getConfiguration ( arg ) . <unk> ( arg ) ;
int idx = expression . lastIndexOf ( arg ) ;
int idx = null ;
int idx = null ;
int idx = null ;
int idx = schemeSpecificPart . lastIndexOf ( arg ) ;
int idx = uri . indexOf ( arg ) ;
int <unk> ;
int index = 0 ;
int index = random . nextInt ( arg ) ;
int <unk> = client . <unk> ( arg ) ;
int <unk> = IOHelper . copy ( arg ) ;
int <unk> = endpoint . <unk> ( arg ) ;
int <unk> = 0 ;
int <unk> = Message . <unk> ;
int <unk> = s . length ( arg ) ;
int <unk> = jdbc . queryForInt ( arg ) ;
int numMessages = <unk> ;
int numMessages = <unk> ;
int number = JOBS . get ( arg ) ;
int <unk> ;
int p1 = AvailablePortFinder . getNextAvailable ( arg ) ;
int p1 = AvailablePortFinder . getNextAvailable ( arg ) ;
int <unk> = poll ( arg ) ;
int <unk> = 0 ;
int read = 0 ;
int rows = jdbcTemplate . queryForInt ( arg ) ;
int rows = jdbcTemplate . queryForInt ( arg ) ;
int rows = jdbcTemplate . queryForInt ( arg ) ;
int <unk> = ( <unk> == null ? null : soapAction . indexOf ( arg ) ) ;
int size = <unk> ;
int total = 0 ;
int total = 1 ;
int total = 100 ;
int total = 100 ;
int total = 10000 ;
int total = 2000 ;
int updateCount = getEndpoint ( arg ) . getProcessingStrategy ( arg ) . commit ( arg ) ;
int updateCount = getEndpoint ( arg ) . getProcessingStrategy ( arg ) . <unk> ( arg ) ;
intercept ( arg ) . to ( arg ) ;
intercept ( arg ) . to ( arg ) ;
intercept ( arg ) ;
interceptEndpoint ( arg ) . to ( arg ) . transform ( arg ) ;
interceptEndpoint ( arg ) . to ( arg ) . transform ( arg ) ;
interceptEndpoint ( arg ) . transform ( arg ) . to ( arg ) . stop ( arg ) ;
interceptEndpoint ( arg ) . when ( arg ) . to ( arg ) . transform ( arg ) ;
interceptFrom ( arg ) . choice ( arg ) . when ( arg ) . to ( arg ) . otherwise ( arg ) . proceed ( arg ) ;
interceptFrom ( arg ) . filter ( arg ) . to ( arg ) . stop ( arg ) ;
interceptFrom ( arg ) . to ( arg ) . proceed ( arg ) ;
interceptFrom ( arg ) . to ( arg ) . to ( arg ) . proceed ( arg ) ;
interceptFrom ( arg ) . when ( arg ) . choice ( arg ) . when ( arg ) . to ( arg ) . otherwise ( arg ) . to ( arg ) . end ( arg ) . stop ( arg ) ;
interceptFrom ( arg ) . when ( arg ) . to ( arg ) . proceed ( arg ) ;
interceptFrom ( arg ) . when ( arg ) . to ( arg ) . proceed ( arg ) ;
interceptFrom ( arg ) . when ( arg ) . to ( arg ) ;
<unk> . clear ( arg ) ;
interceptSendToEndpoint ( arg ) . transform ( arg ) . to ( arg ) . skip ( arg ) ;
<unk> = nextTarget != null ? nextTarget : target ;
interceptor . <unk> ( arg ) ;
interceptors . add ( arg ) ;
internal . addTask ( arg ) ;
internal . addTask ( arg ) ;
internal . addTask ( arg ) ;
internal . addTask ( arg ) ;
internal . addTask ( arg ) ;
internal . addTask ( arg ) ;
internal . addTask ( arg ) ;
internal . addTask ( arg ) ;
internal . addTask ( arg ) ;
internalProcessor . addTask ( arg ) ;
internalProcessor . addTask ( arg ) ;
internalProcessor . addTask ( arg ) ;
<unk> ( arg ) ;
invoked ++ ;
invoked . incrementAndGet ( arg ) ;
invoked = 0 ;
invoked = 0 ;
invoked = 0 ;
invoked = 0 ;
invoked = 0 ;
invoked = 0 ;
invoked = 0 ;
<unk> . <unk> ( arg ) ;
is . close ( arg ) ;
is . close ( arg ) ;
is = ExchangeHelper . getMandatoryInBody ( arg ) ;
is = exchange . getIn ( arg ) . getBody ( arg ) ;
is = method . getResponseBodyAsStream ( arg ) ;
is = new BufferedInputStream ( arg ) ;
is = new ByteArrayInputStream ( arg ) ;
isEnabled = enabled ;
isStarted = false ;
it . close ( arg ) ;
it . close ( arg ) ;
it . close ( arg ) ;
<unk> ( arg ) ;
<unk> ( arg ) ;
iter . remove ( arg ) ;
iter . remove ( arg ) ;
java . util . List list = ( java . util . List ) ctx . getDelegate ( arg ) . parseListElement ( arg ) ;
java . util . logging . Logger . getLogger ( arg ) . log ( arg ) ;
java . util . logging . Logger . getLogger ( arg ) . log ( arg ) ;
java . util . logging . Logger . getLogger ( arg ) . log ( arg ) ;
jaxbContext = JAXBContext . newInstance ( arg ) ;
jaxbContext = JAXBContext . newInstance ( arg ) ;
jcApplicationContext . <unk> ( arg ) ;
jcApplicationContext . <unk> ( arg ) ;
jcApplicationContext . <unk> ( arg ) ;
<unk> . <unk> ( arg ) ;
jdbc = new SimpleJdbcTemplate ( arg ) ;
jdbc = new SimpleJdbcTemplate ( arg ) ;
jmsComponent = jmsComponentClientAcknowledge ( arg ) ;
jmsComponent = jmsComponentClientAcknowledge ( arg ) ;
jmsMessage . <unk> ( arg ) ;
jmxExporter . export ( arg ) ;
jmxExporter . export ( arg ) ;
jmxExporter . register ( arg ) ;
<unk> = null ;
jobs . decrementAndGet ( arg ) ;
jobs . incrementAndGet ( arg ) ;
jpaTemplate . flush ( arg ) ;
jpaTemplate . flush ( arg ) ;
jpaTemplate . flush ( arg ) ;
jpaTemplate . remove ( arg ) ;
jpaTemplate . remove ( arg ) ;
jpaTemplate . remove ( arg ) ;
jpaTemplate = ( JpaTemplate ) applicationContext . getBean ( arg ) ;
jpaTemplate = ( JpaTemplate ) applicationContext . getBean ( arg ) ;
jpaTemplate = ( JpaTemplate ) applicationContext . getBean ( arg ) ;
jpaTemplate = ( JpaTemplate ) applicationContext . getBean ( arg ) ;
jpaTemplate = ( JpaTemplate ) applicationContext . getBean ( arg ) ;
jpaTemplate = ( JpaTemplate ) applicationContext . getBean ( arg ) ;
jpaTemplate = ( JpaTemplate ) applicationContext . getBean ( arg ) ;
jpaTemplate = ( JpaTemplate ) applicationContext . getBean ( arg ) ;
jpaTemplate = ( JpaTemplate ) applicationContext . getBean ( arg ) ;
jpaTemplate = ( JpaTemplate ) applicationContext . getBean ( arg ) ;
jpaTemplate = ( JpaTemplate ) applicationContext . getBean ( arg ) ;
jpaTemplate = ( JpaTemplate ) applicationContext . getBean ( arg ) ;
jpaTemplate = ( JpaTemplate ) applicationContext . getBean ( arg ) ;
jpaTemplate = ( JpaTemplate ) applicationContext . getBean ( arg ) ;
jpaTemplate = ( JpaTemplate ) applicationContext . getBean ( arg ) ;
jpaTemplate = ( JpaTemplate ) applicationContext . getBean ( arg ) ;
jpaTemplate = ( JpaTemplate ) applicationContext . getBean ( arg ) ;
jpaTemplate = ( JpaTemplate ) applicationContext . getBean ( arg ) ;
jpaTemplate = applicationContext . getBean ( arg ) ;
jpaTemplate = applicationContext . getBean ( arg ) ;
<unk> = ObjectHelper . loadClass ( arg ) ;
json = ( ( WrappedFile ) json ) . getFile ( arg ) ;
keepAliveTime = _defaultProfile . getKeepAliveTime ( arg ) ;
keepAliveTime = defaultProfile2 . getKeepAliveTime ( arg ) ;
key = ( String ) exchange . getIn ( arg ) . getHeader ( arg ) ;
key = marshaller . unmarshallKey ( arg ) ;
<unk> = contextProps . get ( arg ) ;
<unk> = file . toURI ( arg ) ;
keys = new String [ keySet . size ( arg ) ] ;
<unk> = twitterEndpoint . getProperties ( arg ) . <unk> ( arg ) ;
<unk> = this . <unk> ( arg ) . toCharArray ( arg ) ;
<unk> = this . <unk> . toCharArray ( arg ) ;
last . setNext ( arg ) ;
last . setNext ( arg ) ;
<unk> . <unk> ( arg ) ;
lastModifiedCheck = ( <unk> >= <unk> ( arg ) ) ;
<unk> = updated ;
latch . await ( arg ) ;
latch . await ( arg ) ;
latch . await ( arg ) ;
latch . await ( arg ) ;
latch . await ( arg ) ;
latch . await ( arg ) ;
latch . await ( arg ) ;
latch . await ( arg ) ;
latch . await ( arg ) ;
latch . await ( arg ) ;
latch . await ( arg ) ;
latch . await ( arg ) ;
latch . await ( arg ) ;
latch . await ( arg ) ;
latch . await ( arg ) ;
latch . await ( arg ) ;
latch . await ( arg ) ;
latch . await ( arg ) ;
latch . await ( arg ) ;
latch . await ( arg ) ;
latch . await ( arg ) ;
latch . await ( arg ) ;
latch . await ( arg ) ;
latch . await ( arg ) ;
latch . await ( arg ) ;
latch . await ( arg ) ;
latch . await ( arg ) ;
latch . await ( arg ) ;
latch . await ( arg ) ;
latch . await ( arg ) ;
latch . await ( arg ) ;
latch . await ( arg ) ;
latch . await ( arg ) ;
latch . await ( arg ) ;
latch . await ( arg ) ;
latch . await ( arg ) ;
latch . await ( arg ) ;
latch . await ( arg ) ;
latch . await ( arg ) ;
latch . await ( arg ) ;
latch . await ( arg ) ;
latch . countDown ( arg ) ;
ldapContext . close ( arg ) ;
<unk> . onContextStart ( arg ) ;
<unk> = br . <unk> ( arg ) ;
list = exchange . getContext ( arg ) . getTypeConverter ( arg ) . convertTo ( arg ) ;
list = new ArrayList < V > ( arg ) ;
listener = new <unk> ( arg ) ;
listenerContainer . destroy ( arg ) ;
<unk> = new Thread ( arg ) ;
loadBalancer = new <unk> ( arg ) ;
loadBalancer = new <unk> ( arg ) ;
loadBalancer = new <unk> ( arg ) ;
loadBalancer = new <unk> ( arg ) ;
loadBalancerType = new LoadBalancerDefinition ( arg ) ;
loadBalancerType = new LoadBalancerDefinition ( arg ) ;
loadBalancerType = new LoadBalancerDefinition ( arg ) ;
loadBalancerType = new LoadBalancerDefinition ( arg ) ;
loadBalancerType = new LoadBalancerDefinition ( arg ) ;
loadBalancerType = new LoadBalancerDefinition ( arg ) ;
loadBalancerType = new LoadBalancerDefinition ( arg ) ;
localExchange . getIn ( arg ) . removeHeader ( arg ) ;
localExchange . getIn ( arg ) . setHeader ( arg ) ;
<unk> = new <unk> ( arg ) ;
localResponse = IOUtils . toString ( arg ) ;
lock . lock ( arg ) ;
lock . unlock ( arg ) ;
lock = new File ( arg ) ;
lockFileName = file . getAbsoluteFilePath ( arg ) + FileComponent . DEFAULT_LOCK_FILE_POSTFIX ;
log ( arg ) ;
log . debug ( arg ) ;
log . debug ( arg ) ;
log . debug ( arg ) ;
log . debug ( arg ) ;
log . debug ( arg ) ;
log . debug ( arg ) ;
log . debug ( arg ) ;
log . debug ( arg ) ;
log . debug ( arg ) ;
log . debug ( arg ) ;
log . debug ( arg ) ;
log . debug ( arg ) ;
log . debug ( arg ) ;
log . debug ( arg ) ;
log . debug ( arg ) ;
log . debug ( arg ) ;
log . debug ( arg ) ;
log . debug ( arg ) ;
log . debug ( arg ) ;
log . debug ( arg ) ;
log . debug ( arg ) ;
log . debug ( arg ) ;
log . debug ( arg ) ;
log . debug ( arg ) ;
log . debug ( arg ) ;
log . debug ( arg ) ;
log . debug ( arg ) ;
log . debug ( arg ) ;
log . debug ( arg ) ;
log . debug ( arg ) ;
log . debug ( arg ) ;
log . debug ( arg ) ;
log . debug ( arg ) ;
log . debug ( arg ) ;
log . debug ( arg ) ;
log . debug ( arg ) ;
log . debug ( arg ) ;
log . debug ( arg ) ;
log . debug ( arg ) ;
log . debug ( arg ) ;
log . debug ( arg ) ;
log . debug ( arg ) ;
log . debug ( arg ) ;
log . debug ( arg ) ;
log . debug ( arg ) ;
log . debug ( arg ) ;
log . debug ( arg ) ;
log . debug ( arg ) ;
log . debug ( arg ) ;
log . debug ( arg ) ;
log . debug ( arg ) ;
log . debug ( arg ) ;
log . debug ( arg ) ;
log . debug ( arg ) ;
log . debug ( arg ) ;
log . debug ( arg ) ;
log . debug ( arg ) ;
log . debug ( arg ) ;
log . debug ( arg ) ;
log . debug ( arg ) ;
log . debug ( arg ) ;
log . debug ( arg ) ;
log . debug ( arg ) ;
log . debug ( arg ) ;
log . debug ( arg ) ;
log . error ( arg ) ;
log . error ( arg ) ;
log . error ( arg ) ;
log . error ( arg ) ;
log . error ( arg ) ;
log . fatal ( arg ) ;
log . fatal ( arg ) ;
log . info ( arg ) ;
log . trace ( arg ) ;
log . trace ( arg ) ;
log . trace ( arg ) ;
log . trace ( arg ) ;
log . trace ( arg ) ;
log . trace ( arg ) ;
log . trace ( arg ) ;
log . trace ( arg ) ;
log . trace ( arg ) ;
log . trace ( arg ) ;
log . trace ( arg ) ;
log . warn ( arg ) ;
log . warn ( arg ) ;
log . warn ( arg ) ;
log . warn ( arg ) ;
log . warn ( arg ) ;
log . warn ( arg ) ;
log . warn ( arg ) ;
log . warn ( arg ) ;
log . warn ( arg ) ;
log . warn ( arg ) ;
log . warn ( arg ) ;
log . warn ( arg ) ;
log . warn ( arg ) ;
log . warn ( arg ) ;
log . warn ( arg ) ;
log . warn ( arg ) ;
log . warn ( arg ) ;
log . warn ( arg ) ;
log . warn ( arg ) ;
log . warn ( arg ) ;
log . warn ( arg ) ;
log . warn ( arg ) ;
log . warn ( arg ) ;
log . warn ( arg ) ;
log . warn ( arg ) ;
log . warn ( arg ) ;
log . warn ( arg ) ;
log . warn ( arg ) ;
log . warn ( arg ) ;
log . warn ( arg ) ;
log . warn ( arg ) ;
log . warn ( arg ) ;
log . warn ( arg ) ;
log . warn ( arg ) ;
log . warn ( arg ) ;
log . warn ( arg ) ;
log . warn ( arg ) ;
log = LogFactory . getLog ( arg ) ;
<unk> = new <unk> ( arg ) ;
logSchedulerService = camelContext . getExecutorServiceManager ( arg ) . getScheduledExecutorService ( arg ) ;
logSchedulerService = camelContext . getExecutorServiceStrategy ( arg ) . newScheduledThreadPool ( arg ) ;
logStrackTrace = data . currentRedeliveryPolicy . <unk> ( arg ) ;
logStrackTrace = data . currentRedeliveryPolicy . <unk> ( arg ) ;
loggedIn = ( ( RemoteFileOperations ) operations ) . connect ( arg ) ;
loggedIn = ftp . connect ( arg ) ;
loggedIn = operations . connect ( arg ) ;
loggedIn = <unk> . connect ( arg ) ;
logger . debug ( arg ) ;
logger . error ( arg ) ;
logger . error ( arg ) ;
logger . log ( arg ) ;
logger . log ( arg ) ;
logger . setLevel ( arg ) ;
logger . <unk> ( arg ) ;
logger . trace ( arg ) ;
logger . trace ( arg ) ;
logger = new Logger ( arg ) ;
logger = new Logger ( arg ) ;
long count = jdbc . queryForLong ( arg ) ;
long count = jdbc . queryForLong ( arg ) ;
long count = jdbc . queryForLong ( arg ) ;
long delta = System . currentTimeMillis ( arg ) - start ;
long delta = System . currentTimeMillis ( arg ) - start ;
long delta = System . currentTimeMillis ( arg ) - start ;
long <unk> = ( long ) ( ( <unk> - <unk> ) * <unk> ) ;
long <unk> = recoverable . <unk> ( arg ) ;
long milliseconds = TimePatternConverter . toMilliSeconds ( arg ) ;
long milliseconds = TimePatternConverter . toMilliSeconds ( arg ) ;
long milliseconds = TimePatternConverter . toMilliSeconds ( arg ) ;
long redeliverDelay = redelivery . getRedeliverDelay ( arg ) ;
long redeliveryDelay ;
long start = 0 ;
long start = 0 ;
long start = System . currentTimeMillis ( arg ) ;
long start = System . currentTimeMillis ( arg ) ;
long start = System . currentTimeMillis ( arg ) ;
long start = System . currentTimeMillis ( arg ) ;
long start = System . currentTimeMillis ( arg ) ;
long start = System . currentTimeMillis ( arg ) ;
long start = System . currentTimeMillis ( arg ) ;
long start = System . currentTimeMillis ( arg ) ;
long start = System . currentTimeMillis ( arg ) ;
long start = System . currentTimeMillis ( arg ) ;
long start = System . currentTimeMillis ( arg ) ;
long start = System . currentTimeMillis ( arg ) ;
long start = System . currentTimeMillis ( arg ) ;
long start = System . currentTimeMillis ( arg ) ;
long start = System . currentTimeMillis ( arg ) ;
long start = System . currentTimeMillis ( arg ) ;
long start = System . currentTimeMillis ( arg ) ;
long start = System . currentTimeMillis ( arg ) ;
long start = System . currentTimeMillis ( arg ) ;
long start = System . currentTimeMillis ( arg ) ;
long start = System . nanoTime ( arg ) ;
long startTime = System . currentTimeMillis ( arg ) ;
long startTime = System . nanoTime ( arg ) ;
long t1 = mock . getReceivedExchanges ( arg ) . get ( arg ) . getIn ( arg ) . getHeader ( arg ) . getTime ( arg ) ;
long t1 = mock . getReceivedExchanges ( arg ) . get ( arg ) . getIn ( arg ) . getHeader ( arg ) . getTime ( arg ) ;
long t1 = mock . getReceivedExchanges ( arg ) . get ( arg ) . getIn ( arg ) . getHeader ( arg ) . getTime ( arg ) ;
long t1 = mock . getReceivedExchanges ( arg ) . get ( arg ) . getIn ( arg ) . getHeader ( arg ) . getTime ( arg ) ;
long t1 = mock . getReceivedExchanges ( arg ) . get ( arg ) . getIn ( arg ) . getHeader ( arg ) . getTime ( arg ) ;
long t1 = mock . getReceivedExchanges ( arg ) . get ( arg ) . getIn ( arg ) . getHeader ( arg ) . getTime ( arg ) ;
long timeTaken = System . currentTimeMillis ( arg ) - start ;
long timeTaken = System . currentTimeMillis ( arg ) - start ;
long timeTaken = System . currentTimeMillis ( arg ) - start ;
long timeout = System . currentTimeMillis ( arg ) + 10000 ;
long timeout = System . currentTimeMillis ( arg ) + <unk> ;
long timeout = client . getTimeout ( arg ) ;
long <unk> = System . currentTimeMillis ( arg ) + 2000 ;
lookedUpBean = context . getRegistry ( arg ) . lookup ( arg ) ;
lookedUpBean = context . getRegistry ( arg ) . lookup ( arg ) ;
<unk> = endpoint . <unk> ( arg ) ;
<unk> = value ;
<unk> = value ;
<unk> . reset ( arg ) ;
main . <unk> ( arg ) ;
<unk> = name ;
manager . setExecutorService ( arg ) ;
map . clear ( arg ) ;
map . put ( arg ) ;
map . put ( arg ) ;
map . put ( arg ) ;
map . remove ( arg ) ;
map = ( Map ) ctx . getMessageContext ( arg ) . get ( arg ) ;
map = new HashMap < Object , AggregationStrategy > ( arg ) ;
map = new HashMap < Object , AggregationStrategy > ( arg ) ;
map = registry . lookupByType ( arg ) ;
mapAnnotedLinkField . put ( arg ) ;
mapAnnotedLinkField . put ( arg ) ;
mapper . writeValue ( arg ) ;
marshaller . marshal ( arg ) ;
matches = false ;
matches = true ;
maxPoolSize = _defaultProfile . getMaxPoolSize ( arg ) ;
maxPoolSize = defaultProfile2 . getMaxPoolSize ( arg ) ;
maxQueueSize = _defaultProfile . getMaxQueueSize ( arg ) ;
maxQueueSize = defaultProfile2 . getMaxQueueSize ( arg ) ;
mayBeAddComponentFor ( arg ) ;
mayBeAddComponentFor ( arg ) ;
mayBeRemoveComponentFor ( arg ) ;
mayBeRemoveComponentFor ( arg ) ;
mbean = new <unk> ( arg ) ;
<unk> = value ;
mbeanServer . isRegistered ( arg ) ;
mbeanServer . isRegistered ( arg ) ;
mbeanServer . isRegistered ( arg ) ;
mbeanServer . isRegistered ( arg ) ;
mbeanServer . isRegistered ( arg ) ;
mbeanServer . isRegistered ( arg ) ;
mbeanServer . isRegistered ( arg ) ;
mbeanServer . isRegistered ( arg ) ;
<unk> = value ;
mbeans . add ( arg ) ;
mbeansRegistered . add ( arg ) ;
me . run ( arg ) ;
mediaSizeName = mediaSizeAssigner . <unk> ( arg ) ;
mediaSizeName = mediaSizeAssigner . <unk> ( arg ) ;
mediaSizeName = mediaSizeAssigner . <unk> ( arg ) ;
message . getHeaders ( arg ) . setHeader ( arg ) ;
message . getHeaders ( arg ) . setHeader ( arg ) ;
message . setJMSReplyTo ( arg ) ;
message = ( Message ) future . get ( arg ) ;
message = ( Message ) future . get ( arg ) ;
messageConsumer = ts . createDurableSubscriber ( arg ) ;
messageConsumer = ts . createDurableSubscriber ( arg ) ;
messageConsumer = ts . createSubscriber ( arg ) ;
messageConsumer = ts . createSubscriber ( arg ) ;
messageRecieved = true ;
<unk> = ( <unk> ) <unk> . iterator ( arg ) . next ( arg ) ;
method . <unk> ( arg ) ;
method . getParams ( arg ) . <unk> ( arg ) ;
<unk> . setHeader ( arg ) ;
<unk> = null ;
<unk> . clear ( arg ) ;
mock . assertIsSatisfied ( arg ) ;
mock . assertIsSatisfied ( arg ) ;
mock . assertIsSatisfied ( arg ) ;
mock . assertIsSatisfied ( arg ) ;
mock . assertIsSatisfied ( arg ) ;
mock . assertIsSatisfied ( arg ) ;
mock . assertIsSatisfied ( arg ) ;
mock . assertIsSatisfied ( arg ) ;
mock . await ( arg ) ;
mock . await ( arg ) ;
mock . expectedBodiesReceived ( arg ) ;
mock . expectedBodiesReceived ( arg ) ;
mock . expectedBodiesReceived ( arg ) ;
mock . expectedBodiesReceived ( arg ) ;
mock . expectedBodiesReceived ( arg ) ;
mock . expectedBodiesReceived ( arg ) ;
mock . expectedBodiesReceived ( arg ) ;
mock . expectedBodiesReceivedInAnyOrder ( arg ) ;
mock . expectedBodiesReceivedInAnyOrder ( arg ) ;
mock . expectedBodiesReceivedInAnyOrder ( arg ) ;
mock . expectedHeaderReceived ( arg ) ;
mock . expectedHeaderReceived ( arg ) ;
mock . expectedMessageCount ( arg ) ;
mock . expectedMessageCount ( arg ) ;
mock . expectedMessageCount ( arg ) ;
mock . expectedMessageCount ( arg ) ;
mock . expectedMessageCount ( arg ) ;
mock . expectedMessageCount ( arg ) ;
mock . expectedMessageCount ( arg ) ;
mock . expectedMessageCount ( arg ) ;
mock . expectedMessageCount ( arg ) ;
mock . expectedMessageCount ( arg ) ;
mock . expectedMessageCount ( arg ) ;
mock . expectedMessageCount ( arg ) ;
mock . expectedMessageCount ( arg ) ;
mock . expectedMessageCount ( arg ) ;
mock . expectedMessageCount ( arg ) ;
mock . expectedMessageCount ( arg ) ;
mock . expectedMessageCount ( arg ) ;
mock . expectedMessageCount ( arg ) ;
mock . expectedMessageCount ( arg ) ;
mock . expectedMessageCount ( arg ) ;
mock . expectedMessageCount ( arg ) ;
mock . expectedMinimumMessageCount ( arg ) ;
mock . expectedMinimumMessageCount ( arg ) ;
mock . expectedMinimumMessageCount ( arg ) ;
mock . expectedMinimumMessageCount ( arg ) ;
mock . expectedMinimumMessageCount ( arg ) ;
mock . message ( arg ) . body ( arg ) . isEqualTo ( arg ) ;
mock . message ( arg ) . bodyAs ( arg ) . contains ( arg ) ;
mock . message ( arg ) . bodyAs ( arg ) . contains ( arg ) ;
mock . message ( arg ) . bodyAs ( arg ) . contains ( arg ) ;
mock . message ( arg ) . bodyAs ( arg ) . contains ( arg ) ;
mock . message ( arg ) . bodyAs ( arg ) . contains ( arg ) ;
mock . message ( arg ) . bodyAs ( arg ) . contains ( arg ) ;
mock . message ( arg ) . bodyAs ( arg ) . contains ( arg ) ;
mock . message ( arg ) . bodyAs ( arg ) . contains ( arg ) ;
mock . message ( arg ) . bodyAs ( arg ) . contains ( arg ) ;
mock . message ( arg ) . bodyAs ( arg ) . contains ( arg ) ;
mock . message ( arg ) . bodyAs ( arg ) . equals ( arg ) ;
mock . message ( arg ) . bodyAs ( arg ) . isEqualTo ( arg ) ;
mock . message ( arg ) . bodyAs ( arg ) . isEqualTo ( arg ) ;
mock . message ( arg ) . bodyAs ( arg ) . isEqualTo ( arg ) ;
mock . message ( arg ) . bodyAs ( arg ) . isEqualTo ( arg ) ;
mock . message ( arg ) . constant ( arg ) ;
mock . message ( arg ) . constant ( arg ) ;
mock . message ( arg ) . constant ( arg ) ;
mock . message ( arg ) . constant ( arg ) ;
mock . message ( arg ) . outBody ( arg ) . contains ( arg ) ;
mock . message ( arg ) . outBody ( arg ) . isEqualTo ( arg ) ;
mockEndpoint . assertIsSatisfied ( arg ) ;
mockEndpoint . assertIsSatisfied ( arg ) ;
mockEndpoint . expectedMessageCount ( arg ) ;
mockResultendpoint . expectedMessageCount ( arg ) ;
mock_output . assertIsSatisfied ( arg ) ;
mock_output . assertIsSatisfied ( arg ) ;
mock_output . expectedMessageCount ( arg ) ;
mock_output . expectedMessageCount ( arg ) ;
models = ClassHelper . <unk> ( arg ) ;
mojo . <unk> ( arg ) ;
mojo . <unk> ( arg ) ;
mojo . <unk> = <unk> ;
<unk> = new <unk> ( arg ) ;
multicastExecutor = getCamelContext ( arg ) . getExecutorServiceManager ( arg ) . getDefaultExecutorService ( arg ) ;
multicastExecutor = getCamelContext ( arg ) . getExecutorServiceStrategy ( arg ) . newDefaultThreadPool ( arg ) ;
myPool = context . getExecutorServiceManager ( arg ) . getDefaultExecutorService ( arg ) ;
myPool = context . getExecutorServiceStrategy ( arg ) . newCachedThreadPool ( arg ) ;
myPool = context . getExecutorServiceStrategy ( arg ) . newDefaultThreadPool ( arg ) ;
myProcessor = ( Processor ) applicationContext . getBean ( arg ) ;
myProcessor = ( Processor ) applicationContext . getBean ( arg ) ;
myProcessor = ( Processor < Exchange > ) ctx . getBean ( arg ) ;
myProcessor = ( Processor < Exchange > ) ctx . getBean ( arg ) ;
myService = context . getRegistry ( arg ) . lookup ( arg ) ;
<unk> . setExecutorService ( arg ) ;
name . value = <unk> ;
name = Exchange . CAMEL_CONTENT_TYPE ;
name = Exchange . CAMEL_CONTENT_TYPE ;
namingStrategy = new <unk> ( arg ) ;
nb . matchesMockWaitTime ( arg ) ;
nb . matchesMockWaitTime ( arg ) ;
nb . matchesMockWaitTime ( arg ) ;
nb . matchesMockWaitTime ( arg ) ;
nb . matchesMockWaitTime ( arg ) ;
new GroovyRenderer ( arg ) . renderRoute ( arg ) ;
new GroovyRenderer ( arg ) . renderRoute ( arg ) ;
new IllegalArgumentException ( arg ) ;
new SimpleJdbcTemplate ( arg ) . <unk> ( arg ) ;
newExchange . getIn ( arg ) . copyFrom ( arg ) ;
newExchange . setException ( arg ) ;
newExchangeProcessor . process ( arg ) ;
newExchangeProcessor = routeContext . lookup ( arg ) ;
<unk> = f . <unk> ( arg ) . <unk> ( arg ) ;
next . process ( arg ) ;
next = bodyMap != null ? bodyMap . get ( arg ) : null ;
nextProcessor . process ( arg ) ;
nextTarget . process ( arg ) ;
<unk> = ( Configuration ) getConfiguraiton ( arg ) . clone ( arg ) ;
nodeData . <unk> = <unk> + <unk> ;
nodeData . label = node . toString ( arg ) ;
nodeData . <unk> = nodeData . label ;
nodeMetadatas = ( Set < NodeMetadata > ) exchange . getIn ( arg ) . getBody ( arg ) ;
nodeMetadatas = ( Set < NodeMetadata > ) exchange . getIn ( arg ) . getBody ( arg ) ;
nodeState = NodeState . valueOf ( arg ) ;
nodeState = NodeState . valueOf ( arg ) ;
<unk> = <unk> ;
notEmpty ( arg ) ;
notNull ( arg ) ;
notNull ( arg ) ;
<unk> = <unk> ;
notify . matchesMockWaitTime ( arg ) ;
<unk> = endpoint . <unk> ( arg ) ;
<unk> = <unk> ( arg ) . <unk> ( arg ) ;
oid = ( String ) headers . get ( arg ) ;
oid = ( String ) headers . get ( arg ) ;
oldExchange . getIn ( arg ) . copyFrom ( arg ) ;
oldExchange . getOut ( arg ) . setBody ( arg ) ;
<unk> = oldExchange . getOut ( arg ) . getBody ( arg ) ;
<unk> ( arg ) ;
onException ( arg ) . delay ( arg ) . maximumRedeliveries ( arg ) . maximumRedeliveryDelay ( arg ) . backOffMultiplier ( arg ) . useExponentialBackOff ( arg ) . retryAttemptedLogLevel ( arg ) . retriesExhaustedLogLevel ( arg ) . setHeader ( arg ) . to ( arg ) ;
onException ( arg ) . handled ( arg ) . useOriginalBody ( arg ) . maximumRedeliveries ( arg ) . to ( arg ) ;
onException ( arg ) . handled ( arg ) . useOriginalBody ( arg ) . maximumRedeliveries ( arg ) . to ( arg ) ;
onException ( arg ) . handled ( arg ) . useOriginalBody ( arg ) . redeliverDelay ( arg ) . maximumRedeliveries ( arg ) . to ( arg ) ;
onException ( arg ) . handled ( arg ) . useOriginalBody ( arg ) . redeliveryDelay ( arg ) . maximumRedeliveries ( arg ) . to ( arg ) ;
onException ( arg ) . initialRedeliveryDelay ( arg ) . maximumRedeliveries ( arg ) . maximumRedeliveryDelay ( arg ) . backOffMultiplier ( arg ) . useExponentialBackOff ( arg ) . retryAttemptedLogLevel ( arg ) . retriesExhaustedLogLevel ( arg ) . setHeader ( arg ) . to ( arg ) ;
onException ( arg ) . maximumRedeliveries ( arg ) . redeliveryDelay ( arg ) . <unk> ( arg ) ;
onException ( arg ) . maximumRedeliveries ( arg ) . to ( arg ) ;
onException ( arg ) . maximumRedeliveries ( arg ) . useOriginalBody ( arg ) . handled ( arg ) . to ( arg ) ;
onException ( arg ) . onException ( arg ) . maximumRedeliveries ( arg ) . setHeader ( arg ) . to ( arg ) ;
onException ( arg ) . <unk> ( arg ) . maximumRedeliveries ( arg ) . backOffMultiplier ( arg ) . redeliverDelay ( arg ) . to ( arg ) ;
onException ( arg ) . process ( arg ) ;
onException ( arg ) . retryUntil ( arg ) . end ( arg ) ;
onException ( arg ) . retryUntil ( arg ) . end ( arg ) ;
onException ( arg ) . retryUntil ( arg ) . handled ( arg ) . transform ( arg ) . constant ( arg ) . stop ( arg ) ;
onException ( arg ) . retryUntil ( arg ) . handled ( arg ) . transform ( arg ) . constant ( arg ) ;
onException ( arg ) . setDelay ( arg ) . maximumRedeliveries ( arg ) . maximumRedeliveryDelay ( arg ) . backOffMultiplier ( arg ) . useExponentialBackOff ( arg ) . retryAttemptedLogLevel ( arg ) . retriesExhaustedLogLevel ( arg ) . setHeader ( arg ) . to ( arg ) ;
onException ( arg ) . when ( arg ) . maximumRedeliveries ( arg ) . to ( arg ) ;
onException ( arg ) . when ( arg ) . maximumRedeliveries ( arg ) . to ( arg ) ;
onExceptionRetry . incrementAndGet ( arg ) ;
onExceptionRetry . incrementAndGet ( arg ) ;
onExceptionRetry . incrementAndGet ( arg ) ;
onExceptionRetry . incrementAndGet ( arg ) ;
onExceptionRetry . incrementAndGet ( arg ) ;
onExceptionRetry . incrementAndGet ( arg ) ;
onExchange ( arg ) ;
onExchange ( arg ) ;
onExchange ( arg ) ;
<unk> ( arg ) ;
oneExchangeDone . matchesMockWaitTime ( arg ) ;
oneExchangeDone . matchesMockWaitTime ( arg ) ;
oneExchangeDone = new NotifyBuilder ( arg ) . whenDone ( arg ) . create ( arg ) ;
openConnection ( arg ) ;
operation = endpoint . getConfig ( arg ) . getOperation ( arg ) ;
<unk> = <unk> . getName ( arg ) ;
operations . <unk> ( arg ) ;
operations . disconnect ( arg ) ;
order += A ;
order += A ;
order += A ;
order += A ;
order += A ;
order += A ;
order += A ;
order += A ;
order += A ;
order += A ;
order += B ;
order += B ;
order += B ;
order += B ;
order += B ;
order += B ;
order += B ;
order += B ;
order += B ;
order += B ;
order += C ;
order += C ;
order += C ;
order += C ;
order += C ;
order . addAndGet ( arg ) ;
order . addAndGet ( arg ) ;
order . addAndGet ( arg ) ;
order . addAndGet ( arg ) ;
order . addAndGet ( arg ) ;
order . addAndGet ( arg ) ;
order . addAndGet ( arg ) ;
order . addAndGet ( arg ) ;
order . addAndGet ( arg ) ;
order . addAndGet ( arg ) ;
order . addAndGet ( arg ) ;
order . addAndGet ( arg ) ;
order . addAndGet ( arg ) ;
order . addAndGet ( arg ) ;
order . addAndGet ( arg ) ;
order . addAndGet ( arg ) ;
order . addAndGet ( arg ) ;
order . addAndGet ( arg ) ;
order . addAndGet ( arg ) ;
order . addAndGet ( arg ) ;
order . addAndGet ( arg ) ;
order . addAndGet ( arg ) ;
order . addAndGet ( arg ) ;
order . addAndGet ( arg ) ;
order . addAndGet ( arg ) ;
order . set ( arg ) ;
order . set ( arg ) ;
order . set ( arg ) ;
order . set ( arg ) ;
order . set ( arg ) ;
order . set ( arg ) ;
order . set ( arg ) ;
order . set ( arg ) ;
order . set ( arg ) ;
order . set ( arg ) ;
org . apache . camel . Exchange exchange = this . producer . createExchange ( arg ) ;
org . apache . cxf . message . Message answer = CxfSoapBinding . getCxfInMessage ( arg ) ;
org . apache . cxf . message . Message inMessage = CxfSoapBinding . getCxfInMessage ( arg ) ;
org . osgi . framework . Bundle [ ] bundles = null ;
org . springframework . integration . Message message = siMessage . getMessage ( arg ) ;
org . springframework . integration . Message request = SpringIntegrationBinding . createSpringIntegrationMessage ( arg ) ;
org . springframework . integration . Message <unk> = SpringIntegrationBinding . <unk> ( arg ) ;
org . springframework . integration . Message siOutmessage = SpringIntegrationBinding . createSpringIntegrationMessage ( arg ) ;
org . springframework . integration . core . Message message = siMessage . getMessage ( arg ) ;
org . springframework . integration . core . Message request = SpringIntegrationBinding . createSpringIntegrationMessage ( arg ) ;
org . springframework . integration . core . Message siOutmessage = SpringIntegrationBinding . createSpringIntegrationMessage ( arg ) ;
org . springframework . integration . message . Message message = siMessage . getMessage ( arg ) ;
original . <unk> ( arg ) ;
original . setProperty ( arg ) ;
<unk> = null ;
<unk> = null ;
os . close ( arg ) ;
os . close ( arg ) ;
os = response . <unk> ( arg ) ;
otherwiseProcessor = otherwise . createProcessor ( arg ) ;
<unk> = new ObjectName ( arg ) ;
out . close ( arg ) ;
out . setBody ( arg ) ;
out . setHeader ( arg ) ;
out = ( in != null && in instanceof MessageSupport ) ? ( ( MessageSupport ) in ) . newInstance ( arg ) : createOutMessage ( arg ) ;
out = createOutMessage ( arg ) ;
out = exchange . getOut ( arg ) ;
<unk> . put ( arg ) ;
output . process ( arg ) ;
output = createOutputsProcessor ( arg ) ;
<unk> = XMLOutputFactory . newInstance ( arg ) ;
outputsWithoutCatches = new ArrayList < ProcessorDefinition < ? >> ( arg ) ;
outputsWithoutCatches = new ArrayList < ProcessorDefinition > ( arg ) ;
outputsWithoutCatches = new ArrayList < ProcessorDefinition > ( arg ) ;
outputsWithoutCatches = new ArrayList < ProcessorType < ? >> ( arg ) ;
outputsWithoutCatches = new ArrayList < ProcessorType > ( arg ) ;
<unk> . process ( arg ) ;
overdueEndpoint . expectedMessageCount ( arg ) ;
overdueEndpoint . setDefaulResultWaitMillis ( arg ) ;
<unk> = new <unk> ( arg ) ;
<unk> = <unk> ;
param . <unk> ( arg ) ;
param . <unk> ( arg ) ;
params [ 0 ] = exchange . getIn ( arg ) . getBody ( arg ) ;
params [ 0 ] = exchange . getIn ( arg ) . getBody ( arg ) ;
parent . <unk> ( arg ) ;
<unk> = CamelContextHelper . mandatoryLookup ( arg ) ;
part = ( ( <unk> ) part ) . value ;
<unk> = component . resolveAndRemoveReferenceParameter ( arg ) ;
path = CONVERTER . convertTo ( arg ) ;
path = new File ( arg ) ;
payload . inBody = checkSerializableObject ( arg ) ;
payload . inBody = exchange . getIn ( arg ) . getBody ( arg ) ;
payload . outBody = checkSerializableObject ( arg ) ;
payload . outBody = exchange . getOut ( arg ) . getBody ( arg ) ;
pc . <unk> ( arg ) ;
<unk> . value = <unk> ;
<unk> . <unk> ( arg ) ;
<unk> . <unk> ( arg ) ;
pivot = endIdx + 1 ;
pivot = idx + 2 ;
policies = new HashMap < Class , ExceptionType > ( arg ) ;
policies = new HashMap < Class , ExceptionType > ( arg ) ;
policy . setRedeliverDelay ( arg ) ;
<unk> ( arg ) ;
<unk> ( arg ) ;
pollerExecutor = endpoint . getCamelContext ( arg ) . getExecutorServiceManager ( arg ) . getExecutorService ( arg ) ;
pollerExecutor = endpoint . getCamelContext ( arg ) . getExecutorServiceStrategy ( arg ) . newSingleThreadExecutor ( arg ) ;
pollingConsumer . start ( arg ) ;
pool = new <unk> ( arg ) ;
poolSize = _defaultProfile . getPoolSize ( arg ) ;
poolSize = defaultProfile2 . getPoolSize ( arg ) ;
<unk> . clear ( arg ) ;
popluateAttachments ( arg ) ;
popluateAttachments ( arg ) ;
popluateRequestParameters ( arg ) ;
popluateRequestParameters ( arg ) ;
<unk> ( arg ) ;
populateStatement ( arg ) ;
<unk> ( arg ) ;
port ++ ;
port = <unk> + new <unk> ( arg ) . nextInt ( arg ) ;
<unk> = QName . valueOf ( arg ) ;
<unk> = in . <unk> ( arg ) ;
post . releaseConnection ( arg ) ;
post . releaseConnection ( arg ) ;
post . releaseConnection ( arg ) ;
post . releaseConnection ( arg ) ;
post . releaseConnection ( arg ) ;
post . releaseConnection ( arg ) ;
post . releaseConnection ( arg ) ;
<unk> ( arg ) ;
<unk> ( arg ) ;
predicate . assertMatches ( arg ) ;
predicate . assertMatches ( arg ) ;
predicate . assertMatches ( arg ) ;
predicate . assertMatches ( arg ) ;
predicate . assertMatches ( arg ) ;
predicate = PredicateBuilder . toPredicate ( arg ) ;
predicate = exchange . getContext ( arg ) . resolveLanguage ( arg ) . createPredicate ( arg ) ;
<unk> . add ( arg ) ;
<unk> ( arg ) ;
prepareExchangeForFailover ( arg ) ;
prepareExchangeForFailover ( arg ) ;
prepareFiles ( arg ) ;
prepareFiles ( arg ) ;
prepareFiles ( arg ) ;
prepareFiles ( arg ) ;
prepareResult ( arg ) ;
prepareResult ( arg ) ;
prepareResult ( arg ) ;
prepareResult ( arg ) ;
prepareResult ( arg ) ;
prepareResult ( arg ) ;
<unk> ( arg ) ;
printSettings = URISupport . parseParameters ( arg ) ;
private AtomicBoolean sentTo = new AtomicBoolean ( arg ) ;
private Object next ;
private boolean <unk> = false ;
private boolean done ;
private boolean matches ;
private boolean matches = true ;
private boolean sentTo ;
private final Exchange copy = ExchangeHelper . createCopy ( arg ) ;
private int current ;
private int current ;
private int current ;
private int current ;
private int current ;
private int current ;
private int current ;
privateChat = connection . getChatManager ( arg ) . getThreadChat ( arg ) ;
<unk> ( arg ) ;
process ( arg ) ;
processBatch ( arg ) ;
processBatch ( arg ) ;
<unk> ( arg ) ;
<unk> ( arg ) ;
<unk> ( arg ) ;
<unk> ( arg ) ;
processor . onExchange ( arg ) ;
processor . onExchange ( arg ) ;
processor . onExchange ( arg ) ;
processor . onExchange ( arg ) ;
processor . onExchange ( arg ) ;
processor . process ( arg ) ;
processor . process ( arg ) ;
processor = new CompositeProcessor < E > ( arg ) ;
processor = new <unk> ( arg ) ;
processor = p1 . getNext ( arg ) ;
processor = processorType . <unk> ( arg ) ;
processor = <unk> ( arg ) ;
processor = <unk> ( arg ) ;
processorDefinition = ( ProcessorDefinition ) definition ;
producer . onExchange ( arg ) ;
producer . onExchange ( arg ) ;
producer . onExchange ( arg ) ;
producer . onExchange ( arg ) ;
producer . process ( arg ) ;
producer . start ( arg ) ;
producer . start ( arg ) ;
producer . stop ( arg ) ;
producer . stop ( arg ) ;
producer . stop ( arg ) ;
producer = builder . <unk> ( arg ) ;
producer = endpoint . createProducer ( arg ) ;
producer = endpoint . createProducer ( arg ) ;
producer = pool . acquireIfAbsent ( arg ) ;
producerCache . send ( arg ) ;
producerCache . stop ( arg ) ;
producerExecutorService . shutdownNow ( arg ) ;
producerExecutorService = ExecutorServiceHelper . newCachedThreadPool ( arg ) ;
producerExecutorService = destination . getCamelContext ( arg ) . getExecutorServiceStrategy ( arg ) . newCachedThreadPool ( arg ) ;
producerServicePool . start ( arg ) ;
producerServicePool . stop ( arg ) ;
producerTemplate . sendBody ( arg ) ;
producerTemplate . sendBody ( arg ) ;
producerTemplate . sendBody ( arg ) ;
properties . put ( arg ) ;
properties . put ( arg ) ;
properties = new HashMap < String , Object > ( arg ) ;
properties = new Properties ( arg ) ;
<unk> = getRegistry ( arg ) . lookup ( arg ) ;
props . put ( arg ) ;
proxy . run ( arg ) ;
<unk> = secure ? https4 : http4 ;
put . releaseConnection ( arg ) ;
put . releaseConnection ( arg ) ;
<unk> . put ( arg ) ;
queryString = ( ( HttpEndpoint ) getEndpoint ( arg ) ) . getHttpUri ( arg ) . getQuery ( arg ) ;
queryString = UnsafeUriCharactersEncoder . encode ( arg ) ;
queryString = UnsafeUriCharactersEncoder . encode ( arg ) ;
queryString = UnsafeUriCharactersEncoder . encode ( arg ) ;
queryString = UnsafeUriCharactersEncoder . encode ( arg ) ;
queryString = endpoint . getHttpUri ( arg ) . getQuery ( arg ) ;
queryString = getEndpoint ( arg ) . getHttpUri ( arg ) . getQuery ( arg ) ;
queryString = getEndpoint ( arg ) . getHttpUri ( arg ) . getQuery ( arg ) ;
queue . add ( arg ) ;
queue . add ( arg ) ;
queue . <unk> ( arg ) ;
queue . remove ( arg ) ;
queue . write ( arg ) ;
queue = new LinkedBlockingQueue < Exchange > ( arg ) ;
queue = new LinkedBlockingQueue < Runnable > ( arg ) ;
queue = new LinkedBlockingQueue < Runnable > ( arg ) ;
queue = new <unk> < Runnable > ( arg ) ;
queues . clear ( arg ) ;
queues . put ( arg ) ;
r = Response . <unk> ( arg ) . build ( arg ) ;
r = new PEMReader ( arg ) ;
rc = UNKOWN ;
rc [ 0 ] = splitURI [ 1 ] ;
rc [ 0 ] = splitURI [ 1 ] ;
rc [ 0 ] = splitURI [ 2 ] ;
rc [ 0 ] = splitURI [ 2 ] ;
rce = new RuntimeCamelException ( arg ) ;
rce = new RuntimeCamelException ( arg ) ;
rce = new RuntimeCamelException ( arg ) ;
rce = new RuntimeCamelException ( arg ) ;
rce = wrapRuntimeCamelException ( arg ) ;
reader = encoding != null ? new InputStreamReader ( arg ) : new InputStreamReader ( arg ) ;
reader = new BufferedInputStream ( arg ) ;
reader = new BufferedInputStream ( arg ) ;
reader = new BufferedInputStream ( arg ) ;
reader = new BufferedReader ( arg ) ;
reader = new BufferedReader ( arg ) ;
reader = new BufferedReader ( arg ) ;
reader = new BufferedReader ( arg ) ;
reader = new BufferedReader ( arg ) ;
received = consumer . receiveBodyNoWait ( arg ) ;
receivedCountDown . await ( arg ) ;
receivedCountDown . await ( arg ) ;
receivedExchange = ( XmppExchange ) e ;
receivedExchange = e ;
receivedExchanges . add ( arg ) ;
recipientKeyAlias = contextProps . get ( arg ) ;
recipientKeyAlias = contextProps . get ( arg ) ;
recipients . put ( arg ) ;
<unk> . unlock ( arg ) ;
recoverService . scheduleAtFixedRate ( arg ) ;
recoverService = camelContext . getExecutorServiceManager ( arg ) . getScheduledExecutorService ( arg ) ;
recoverService = camelContext . getExecutorServiceStrategy ( arg ) . newScheduledThreadPool ( arg ) ;
recursiveDelete ( arg ) ;
recursiveDelete ( arg ) ;
recursiveDelete ( arg ) ;
recursiveDelete ( arg ) ;
recursiveDelete ( arg ) ;
recursiveDelete ( arg ) ;
recursiveDelete ( arg ) ;
redelivery . getRedeliveryPolicy ( arg ) . setRedeliverDelay ( arg ) ;
<unk> . <unk> = true ;
redeliveryDelay += redeliveryDelay * <unk> ;
redeliveryDelay = Math . round ( arg ) ;
redeliveryDelay = delay ;
redeliveryDelay = initialRedeliveryDelay ;
redeliveryDelay = maximumRedeliveryDelay ;
redeliveryDelay = <unk> ;
redeliveryDelay = redeliverDelay ;
redeliveryDelay = <unk> . getRedeliveryDelay ( arg ) ;
<unk> ( arg ) ;
<unk> ( arg ) ;
registery . put ( arg ) ;
registry . addTypeConverter ( arg ) ;
registry . addTypeConverter ( arg ) ;
registry . bind ( arg ) ;
registry . bind ( arg ) ;
registry . lookup ( arg ) ;
<unk> = value ;
rejectedPolicy = _defaultProfile . getRejectedPolicy ( arg ) ;
rejectedPolicy = defaultProfile2 . getRejectedPolicy ( arg ) ;
relatedPath = relatedURI . intern ( arg ) ;
relatedPath = relatedURI . intern ( arg ) ;
relatedPath = <unk> . get ( arg ) ;
relatedURI = <unk> ( arg ) ;
relevantDependencies = Collections . EMPTY_SET ;
relevantDependencies = Collections . EMPTY_SET ;
relevantDependencies = new HashSet ( arg ) ;
relevantDependencies = new HashSet ( arg ) ;
remote . setAbsoluteFileName ( arg ) ;
remote . setAbsolutelFileName ( arg ) ;
remote . setAbsolutelFileName ( arg ) ;
remote . <unk> ( arg ) ;
remote . <unk> ( arg ) ;
remoteFileProcessStrategy . commit ( arg ) ;
remoteFileProcessStrategy . rollback ( arg ) ;
<unk> ( arg ) ;
replaceFrom ( arg ) ;
replaceFrom ( arg ) ;
replaceFrom ( arg ) ;
replaceFrom ( arg ) ;
replaceFrom ( arg ) ;
replaceFrom ( arg ) ;
reply = ( Exchange ) <unk> ( arg ) ;
reply = ( MessageChannel ) context . getApplicationContext ( arg ) . getBean ( arg ) ;
<unk> = channel ;
replyManager = endpoint . getReplyManager ( arg ) ;
replyManager = endpoint . getReplyManager ( arg ) ;
replyManagerExecutorService = getCamelContext ( arg ) . getExecutorServiceManager ( arg ) . getScheduledExecutorService ( arg ) ;
replyManagerExecutorService = getCamelContext ( arg ) . getExecutorServiceStrategy ( arg ) . newScheduledThreadPool ( arg ) ;
repo . <unk> ( arg ) ;
repo = Hazelcast . getMap ( arg ) ;
repo = context . getRegistry ( arg ) . lookup ( arg ) ;
repo = context . getRegistry ( arg ) . lookup ( arg ) ;
repo = new HawtDBAggregationRepository < String > ( arg ) ;
repo = new HawtDBAggregationRepository < String > ( arg ) ;
repo = new HawtDBAggregationRepository < String > ( arg ) ;
repo = new HawtDBAggregationRepository < String > ( arg ) ;
repo = new HawtDBAggregationRepository < String > ( arg ) ;
repo = new HawtDBAggregationRepository < String > ( arg ) ;
repo = new HawtDBAggregationRepository < String > ( arg ) ;
request . getParameterMap ( arg ) ;
request . <unk> ( arg ) ;
requestReplyTemplate . <unk> ( arg ) ;
requestReplyTemplate . <unk> ( arg ) ;
reseq . <unk> ( arg ) ;
<unk> = classes ;
resourceExchange = exchange . getContext ( arg ) . createProducerTemplate ( arg ) . send ( arg ) ;
resourceExchange = <unk> ( arg ) . send ( arg ) ;
resourceURI = relatedURI . intern ( arg ) ;
resourceURI = relatedURI . intern ( arg ) ;
<unk> . <unk> ( arg ) . println ( arg ) ;
<unk> . consumeContent ( arg ) ;
response = ( GetResponse ) template . requestBody ( arg ) ;
response = ( GetResponse ) template . requestBodyAndHeaders ( arg ) ;
response = <unk> . getMessage ( arg ) ;
response = template . requestBody ( arg ) ;
response = template . requestBody ( arg ) ;
<unk> ( arg ) ;
result += queue + File . separator + getSanitizedString ( arg ) ;
result += <unk> + File . separator + getSanitizedString ( arg ) ;
result . assertIsSatisfied ( arg ) ;
result . assertIsSatisfied ( arg ) ;
result . expectedBodiesReceived ( arg ) ;
result . expectedBodiesReceived ( arg ) ;
result . expectedBodiesReceivedInAnyOrder ( arg ) ;
result . expectedMessageCount ( arg ) ;
result . expectedMessageCount ( arg ) ;
result . expectedMessageCount ( arg ) ;
result . expectedMessageCount ( arg ) ;
result . expectedMessageCount ( arg ) ;
result . expectedMessageCount ( arg ) ;
result . expectedMessageCount ( arg ) ;
result . getProperties ( arg ) . clear ( arg ) ;
result . getProperties ( arg ) . clear ( arg ) ;
result . setDefaulResultWaitMillis ( arg ) ;
result . setDefaulResultWaitMillis ( arg ) ;
result . setDefaulResultWaitMillis ( arg ) ;
result . setDefaulResultWaitMillis ( arg ) ;
result . setDefaulResultWaitMillis ( arg ) ;
result . <unk> ( arg ) ;
result = copy ;
result = <unk> . <unk> ( arg ) ;
result = getDefaultValueforPrimitive ( arg ) ;
result = <unk> . getLoanQuote ( arg ) ;
result = new ArrayList < ProcessorExchangePair > ( arg ) ;
result = newExchange ;
result = out . <unk> ( arg ) ;
result = paralleLoanBroker . getLoanQuote ( arg ) ;
result = template . sendBodyAndHeader ( arg ) ;
resultEndpoint . assertIsNotSatisfied ( arg ) ;
resultEndpoint . assertIsSatisfied ( arg ) ;
resultEndpoint . assertIsSatisfied ( arg ) ;
resultEndpoint . assertIsSatisfied ( arg ) ;
resultEndpoint . assertIsSatisfied ( arg ) ;
resultEndpoint . assertIsSatisfied ( arg ) ;
resultEndpoint . assertIsSatisfied ( arg ) ;
resultEndpoint . assertIsSatisfied ( arg ) ;
resultEndpoint . expectedBodiesReceived ( arg ) ;
resultEndpoint . expectedBodiesReceived ( arg ) ;
resultEndpoint . expectedBodiesReceived ( arg ) ;
resultEndpoint . expectedMessageCount ( arg ) ;
resultEndpoint . setDefaulResultWaitMillis ( arg ) ;
resultEndpoint = ( MockEndpoint ) context . getEndpoint ( arg ) ;
resultEndpoint = ( MockEndpoint ) context . getEndpoint ( arg ) ;
resultEndpoint = ( MockEndpoint ) context . getEndpoint ( arg ) ;
resultEndpoint = ( MockEndpoint ) context . getEndpoint ( arg ) ;
resultEndpoint = ( MockEndpoint ) context . getEndpoint ( arg ) ;
resultEndpoint = ( MockEndpoint ) context . getEndpoint ( arg ) ;
resultEndpoint = ( MockEndpoint ) context . getEndpoint ( arg ) ;
resultEndpoint = ( MockEndpoint ) resolveMandatoryEndpoint ( arg ) ;
resultEndpoint = ( MockEndpoint ) resolveMandatoryEndpoint ( arg ) ;
resultEndpoint = ( MockEndpoint ) resolveMandatoryEndpoint ( arg ) ;
resultEndpoint = ( MockEndpoint ) resolveMandatoryEndpoint ( arg ) ;
resultEndpoint = ( MockEndpoint ) resolveMandatoryEndpoint ( arg ) ;
resultEndpoint = ( MockEndpoint ) resolveMandatoryEndpoint ( arg ) ;
resultEndpoint = ( MockEndpoint ) resolveMandatoryEndpoint ( arg ) ;
resultEndpoint = ( MockEndpoint ) resolveMandatoryEndpoint ( arg ) ;
resultEndpoint = ( MockEndpoint ) resolveMandatoryEndpoint ( arg ) ;
resultEndpoint = ( MockEndpoint ) resolveMandatoryEndpoint ( arg ) ;
resultEndpoint = ( MockEndpoint ) resolveMandatoryEndpoint ( arg ) ;
resultEndpoint = ( MockEndpoint ) resolveMandatoryEndpoint ( arg ) ;
resultEndpoint = ( MockEndpoint ) resolveMandatoryEndpoint ( arg ) ;
resultEndpoint = ( MockEndpoint ) resolveMandatoryEndpoint ( arg ) ;
resultEndpoint = ( MockEndpoint ) resolveMandatoryEndpoint ( arg ) ;
resultEndpoint = ( MockEndpoint ) resolveMandatoryEndpoint ( arg ) ;
resultEndpoint = ( MockEndpoint ) resolveMandatoryEndpoint ( arg ) ;
resultEndpoint = ( MockEndpoint ) resolveMandatoryEndpoint ( arg ) ;
resultEndpoint = getMockEndpoint ( arg ) ;
resultEndpoint = getMockEndpoint ( arg ) ;
resultEndpoint = getMockEndpoint ( arg ) ;
resultType = XPathConstants . <unk> ;
resultType = XPathConstants . <unk> ;
resultType = XPathConstants . <unk> ;
resultType = XPathConstants . <unk> ;
resultType = XPathConstants . <unk> ;
<unk> = 20000L ;
results . assertIsNotSatisfied ( arg ) ;
results = jpaTemplate . find ( arg ) ;
results = jpaTemplate . find ( arg ) ;
results = jpaTemplate . find ( arg ) ;
results = new HashMap < Integer , List < String >> ( arg ) ;
results = new HashMap < Integer , List < String >> ( arg ) ;
results = new HashMap < Integer , List > ( arg ) ;
results = new HashMap < Integer , List > ( arg ) ;
results = template . find ( arg ) ;
results = template . find ( arg ) ;
<unk> ( arg ) ;
ret = Sides . <unk> ;
ret = Sides . <unk> ;
ret = Sides . <unk> ;
ret = Sides . <unk> ;
ret = Sides . <unk> ;
retry . incrementAndGet ( arg ) ;
retry . incrementAndGet ( arg ) ;
retry . incrementAndGet ( arg ) ;
retry . incrementAndGet ( arg ) ;
retry . incrementAndGet ( arg ) ;
retry . incrementAndGet ( arg ) ;
return  + getExpression ( arg ) +  per  + getTimePeriodMillis ( arg ) +  ( ms ) ;
return  + getMaximumRequestsPerPeriod ( arg ) +  per  + getTimePeriodMillis ( arg ) +  ( ms ) ;
return ! ( <unk> . get ( arg ) || stopped . get ( arg ) ) ;
return ! ObjectHelper . equals ( arg ) ;
return ! attributeName . equals ( arg ) &&! attributeName . startsWith ( arg ) &&! attributeName . equals ( arg ) &&! attributeName . equals ( arg ) &&! attributeName . equals ( arg ) &&! attributeName . equals ( arg ) &&! attributeName . equals ( arg ) ;
return ! attributeName . equals ( arg ) &&! attributeName . startsWith ( arg ) &&! attributeName . equals ( arg ) &&! attributeName . equals ( arg ) &&! attributeName . equals ( arg ) &&! attributeName . equals ( arg ) ;
return ! <unk> . contains ( arg ) ;
return ! endpoint . getInProgressRepository ( arg ) . add ( arg ) ;
return ! getEndpoint ( arg ) . getInProgressRepository ( arg ) . add ( arg ) ;
return ! isJavaVendor ( arg ) &&! isJavaVendor ( arg ) ;
return ( arg ) && ( parameterTypes . length == 1 || ( parameterTypes . length == 2 && parameterTypes [ 1 ] == Exchange . class ) ) ;
return ( arg ) && ( traceFilter == null || traceFilter . matches ( arg ) ) ;
return ( arg ) && ( tracer . getTraceFilter ( arg ) == null || tracer . getTraceFilter ( arg ) . matches ( arg ) ) ;
return ( arg ) . copy ( arg ) ;
return ( arg ) . copy ( arg ) ;
return ( arg ) . <unk> ( arg ) ;
return ( arg ) . toString ( arg ) ;
return ( arg ) ;
return ( arg ) < <unk> . getLength ( arg ) ;
return ( arg ) < length ( arg ) ;
return ( arg ) < nodeList . getLength ( arg ) ;
return ( arg ) Executors . newFixedThreadPool ( arg ) ;
return ( arg ) <unk> . <unk> ( arg ) ;
return ( arg ) Math . round ( arg ) ;
return ( arg ) ObjectHelper . <unk> ( arg ) ;
return ( arg ) SpringCamelContext . springCamelContext ( arg ) ;
return ( arg ) SpringCamelContext . springCamelContext ( arg ) ;
return ( arg ) answer ;
return ( arg ) applicationContext . getBean ( arg ) ;
return ( arg ) applicationContext . getBean ( arg ) ;
return ( arg ) applicationContext . getBean ( arg ) ;
return ( arg ) applicationContext . getBean ( arg ) ;
return ( arg ) applicationContext . getBean ( arg ) ;
return ( arg ) applicationContext . getBean ( arg ) ;
return ( arg ) args . toArray ( arg ) ;
return ( arg ) args . toArray ( arg ) ;
return ( arg ) body ;
return ( arg ) completionQueue . <unk> ( arg ) ;
return ( arg ) configuraiton . clone ( arg ) ;
return ( arg ) context . getBean ( arg ) ;
return ( arg ) context . getBean ( arg ) ;
return ( arg ) context . getBean ( arg ) ;
return ( arg ) <unk> ;
return ( arg ) endpoint . createExchange ( arg ) ;
return ( arg ) endpoint . createExchange ( arg ) ;
return ( arg ) entry . getKey ( arg ) ;
return ( arg ) <unk> . clone ( arg ) ;
return ( arg ) exchange . getContext ( arg ) . getInjector ( arg ) . newInstance ( arg ) ;
return ( arg ) expression . evaluate ( arg ) ;
return ( arg ) f ;
return ( arg ) factoryBean . create ( arg ) ;
return ( arg ) getApplicationContext ( arg ) . getBean ( arg ) ;
return ( arg ) getCamelContext ( arg ) . getEndpoint ( arg ) ;
return ( arg ) getCamelContext ( arg ) . getEndpoint ( arg ) ;
return ( arg ) getCamelContext ( arg ) . getEndpoint ( arg ) ;
return ( arg ) getRouteboxEndpoint ( arg ) ;
return ( arg ) i . next ( arg ) ;
return ( arg ) map ;
return ( arg ) new DefaultExchange ( arg ) ;
return ( arg ) new DefaultExchange ( arg ) ;
return ( arg ) new RemoteFileExchange ( arg ) ;
return ( arg ) <unk> ;
return ( arg ) <unk> ;
return ( arg ) service . <unk> ( arg ) ;
return ( arg ) super . getEndpoint ( arg ) ;
return ( arg ) super . getExchange ( arg ) ;
return ( arg ) template . sendBody ( arg ) ;
return ( arg ) this . applicationContext . getBean ( arg ) ;
return ( arg ) this ;
return ( arg ) this ;
return ( arg ) this ;
return ( arg ) this ;
return ( arg ) this ;
return ( arg ) this ;
return ( arg ) this ;
return ( arg ) this ;
return ( arg ) tokens . toArray ( arg ) ;
return ( arg ) type . <unk> ( arg ) ;
return ( arg ) type . newInstance ( arg ) ;
return ( arg ) value ;
return ( arg ) <unk> ;
return ( arg ) <unk> ;
return ++ idx < nodeList . getLength ( arg ) ;
return ++ idx == 0 && ObjectHelper . isNotEmpty ( arg ) ;
return ++ idx == 0 ;
return ++ <unk> ;
return 0 ;
return <unk> ;
return <unk> ;
return <unk> ;
return <unk> ;
return Age ;
return <unk> . valueOf ( arg ) ;
return Arrays . asList ( arg ) ;
return Arrays . asList ( arg ) ;
return AsyncProcessorHelper . process ( arg ) ;
return <unk> . <unk> ( arg ) ;
return <unk> ;
return Boolean . TRUE . equals ( arg ) ;
return BooleanWritable . class ;
return BooleanWritable . class ;
return Builder . < E , T > bodyAs ( arg ) ;
return Builder . < E , T > outBody ( arg ) ;
return Builder . < E > body ( arg ) ;
return Builder . < E > header ( arg ) ;
return Builder . < E > outBody ( arg ) ;
return Builder . < E > systemProperty ( arg ) ;
return Builder . < E > systemProperty ( arg ) ;
return Builder . outBody ( arg ) ;
return Builder . simple ( arg ) ;
return Builder . xpath ( arg ) ;
return BusFactory . getDefaultBus ( arg ) ;
return BusFactory . getThreadDefaultBus ( arg ) ;
return Byte . class ;
return Byte . <unk> ( arg ) ;
return Byte . valueOf ( arg ) ;
return <unk> . class ;
return BytesWritable . class ;
return BytesWritable . class ;
return <unk> . <unk> ( arg ) ;
return CacheManager . create ( arg ) ;
return CacheManager . create ( arg ) ;
return CamelContext . class ;
return CamelContext ;
return CamelContextHelper . <unk> ( arg ) ;
return <unk> . instance ;
return CamelTemplate . class ;
return CastUtils . cast ( arg ) ;
return CastUtils . cast ( arg ) ;
return <unk> ;
return Charset . <unk> ( arg ) . toString ( arg ) ;
return <unk> ;
return Collections . < Class < ? >> emptySet ( arg ) ;
return Collections . < Class < ? >> emptySet ( arg ) ;
return Collections . EMPTY_LIST . iterator ( arg ) ;
return Collections . EMPTY_LIST ;
return Collections . EMPTY_LIST ;
return Collections . EMPTY_LIST ;
return Collections . EMPTY_LIST ;
return Collections . EMPTY_LIST ;
return Collections . EMPTY_LIST ;
return Collections . EMPTY_LIST ;
return Collections . EMPTY_LIST ;
return Collections . EMPTY_LIST ;
return Collections . EMPTY_LIST ;
return Collections . EMPTY_MAP ;
return Collections . EMPTY_MAP ;
return Collections . EMPTY_SET ;
return Collections . EMPTY_SET ;
return Collections . <unk> ( arg ) ;
return Collections . emptyList ( arg ) ;
return Collections . emptyList ( arg ) ;
return Collections . <unk> ( arg ) ;
return CreatedById ;
return CreatedDate ;
return CxfEndpointBean . class ;
return <unk> . class ;
return <unk> . generateId ( arg ) ;
return DefaultCamelContext ( arg ) ;
return DefaultConsumerTemplate . class ;
return DefaultMessageListenerContainer . <unk> ;
return <unk> ( arg ) ;
return Double . class ;
return Double . parseDouble ( arg ) ;
return Double . valueOf ( arg ) ;
return <unk> . class ;
return ExchangeHelper . <unk> ( arg ) ;
return ExecutorServiceHelper . newCachedThreadPool ( arg ) ;
return ExecutorServiceHelper . newScheduledThreadPool ( arg ) ;
return ExecutorServiceHelper . newScheduledThreadPool ( arg ) ;
return ExecutorServiceHelper . newScheduledThreadPool ( arg ) ;
return ExpressionBuilder . <unk> ( arg ) ;
return ExpressionBuilder . <unk> ( arg ) ;
return ExpressionBuilder . propertyExpression ( arg ) ;
return ExpressionBuilder . <unk> ( arg ) ;
return ExpressionBuilder . systemProperty ( arg ) ;
return ExpressionBuilder . tokenizeExpression ( arg ) ;
return ExpressionBuilder . <unk> ( arg ) ;
return ExpressionBuilder . <unk> ( arg ) ;
return ExpressionClause . createAndSetExpression ( arg ) ;
return ExpressionClause . createAndSetExpression ( arg ) ;
return <unk> . <unk> ( arg ) ;
return <unk> ;
return File . separator ;
return File . <unk> ;
return FileEndpoint . class ;
return Float . class ;
return Float . <unk> ( arg ) ;
return Float . valueOf ( arg ) ;
return <unk> . class ;
return <unk> . description ( arg ) ;
return GZIPHelper . getInputStream ( arg ) ;
return <unk> . <unk> ( arg ) ;
return GroovyRenderer . <unk> + buffer . toString ( arg ) + GroovyRenderer . footer ;
return GroovyRenderer . header + buffer . toString ( arg ) + GroovyRenderer . footer ;
return <unk> ( arg ) ;
return HandlerEndpoint . class ;
return <unk>  + me + <unk>  + <unk> ;
return INDEX_FACTORY . open ( arg ) ;
return IOConverter . getCharsetName ( arg ) ;
return IOHelper . buffered ( arg ) ;
return Id ;
return Id ;
return Id ;
return <unk> ;
return <unk> ( arg ) ;
return <unk> . class ;
return Integer . class ;
return Integer . compare ( arg ) ;
return Integer . <unk> ( arg ) ;
return Integer . valueOf ( arg ) ;
return IsDeleted ;
return <unk> . get ( arg ) ;
return LOG . <unk> ( arg ) ;
return LOG ;
return LOG ;
return LOG ;
return LastActivityDate ;
return LastModifiedById ;
return LastModifiedDate ;
return <unk> . <unk> ;
return List . class ;
return Long . class ;
return Long . <unk> ( arg ) ;
return Long . valueOf ( arg ) ;
return LongWritable . class ;
return LongWritable . class ;
return MinaPayloadHolder . marshal ( arg ) ;
return MinaPayloadHolder . marshal ( arg ) ;
return Multicast + endpoints ;
return Multicast + getEndpoints ( arg ) ;
return Multicast + getProcessors ( arg ) ;
return Multicast ;
return <unk> + CONTEXT_COUNTER . incrementAndGet ( arg ) ;
return Name ;
return Name ;
return NullWritable . class ;
return ObjectConverter . toBoolean ( arg ) ;
return ObjectHelper . equals ( arg ) && ObjectHelper . equals ( arg ) && ObjectHelper . equals ( arg ) ;
return ObjectHelper . equals ( arg ) && ObjectHelper . equals ( arg ) ;
return ObjectHelper . equals ( arg ) && ObjectHelper . equals ( arg ) ;
return ObjectHelper . equals ( arg ) ;
return ObjectHelper . equals ( arg ) ;
return ObjectHelper . equals ( arg ) ;
return ObjectHelper . isNotNullAndNonEmpty ( arg ) ;
return ObjectHelper . <unk> ( arg ) || <unk> . equals ( arg ) ;
return ObjectHelper . toBoolean ( arg ) ;
return ObjectHelper . toBoolean ( arg ) ;
return <unk> ;
return <unk> ;
return OsgiCamelContextHelper . createTypeConverter ( arg ) ;
return OsgiCamelContextHelper . createTypeConverter ( arg ) ;
return <unk> ;
return OwnerId ;
return Pipeline + endpoints ;
return Pipeline + getEndpoints ( arg ) ;
return Pipeline + getProcessors ( arg ) ;
return Pipeline ;
return PredicateBuilder . isEqualTo ( arg ) ;
return PredicateBuilder . <unk> ( arg ) ;
return PredicateBuilder . <unk> ( arg ) ;
return PredicateBuilder . <unk> ( arg ) ;
return PredicateBuilder . <unk> ( arg ) ;
return PredicateBuilder . <unk> ( arg ) ;
return PredicateBuilder . <unk> ( arg ) ;
return PredicateBuilder . <unk> ( arg ) ;
return PredicateBuilder . <unk> ( arg ) ;
return PredicateBuilder . regex ( arg ) ;
return PredicateBuilder . toPredicate ( arg ) ;
return PredicateBuilder . toPredicate ( arg ) ;
return PredicateBuilder . toPredicate ( arg ) ;
return PredicateBuilder . toPredicate ( arg ) ;
return PredicateBuilder . toPredicate ( arg ) ;
return PredicateBuilder . toPredicate ( arg ) ;
return PredicateBuilder . toPredicate ( arg ) ;
return PredicateBuilder . toPredicate ( arg ) ;
return <unk> . <unk> ( arg ) ;
return <unk> ;
return <unk> . <unk> ( arg ) ;
return <unk> ;
return Route ;
return RoutePolicy ;
return RoutesBuilder . class . isAssignableFrom ( arg ) || <unk> . class . isAssignableFrom ( arg ) ;
return <unk> . createExpression ( arg ) ;
return <unk> ;
return ServiceStatus . <unk> ;
return <unk> . this . getConfiguration ( arg ) . <unk> ( arg ) ;
return Short . class ;
return Short . <unk> ( arg ) ;
return Short . valueOf ( arg ) ;
return ShrinkWrap . create ( arg ) . addPackage ( arg ) . addAsManifestResource ( arg ) ;
return ShrinkWrap . create ( arg ) . addPackage ( arg ) . addClass ( arg ) . addClass ( arg ) . addAsManifestResource ( arg ) ;
return ShrinkWrap . create ( arg ) . addPackage ( arg ) . addPackage ( arg ) . addAsManifestResource ( arg ) ;
return <unk> . newInstance ( arg ) . createBus ( arg ) ;
return <unk> . createSpringCamelContext ( arg ) ;
return <unk> ;
return StreamCachingInterceptor ( arg ) ;
return StreamCachingInterceptor ;
return <unk> ;
return String . format ( arg ) . trim ( arg ) ;
return System . currentTimeMillis ( arg ) ;
return SystemModstamp ;
return Text . class ;
return Text . class ;
return <unk> ;
return UNKOWN ;
return <unk> ;
return UnitOfWorkHelper . createUoW ( arg ) ;
return <unk> ( arg ) ;
return UnsafeUriCharactersEncoder . encode ( arg ) ;
return UuidGenerator . <unk> ( arg ) ;
return activity ;
return address ;
return address ;
return adr . getMessage ( arg ) ;
return adr . getMessage ( arg ) ;
return <unk> . getMessage ( arg ) ;
return aggregate ;
return aggregationCount ;
return aggregator ;
return albp . process ( arg ) ;
return <unk> ;
return allowDuplicates != null && allowDuplicates . booleanValue ( arg ) ;
return annotation . contextName ( arg ) ;
return answer . createAndSetExpression ( arg ) ;
return answer . createAndSetExpression ( arg ) ;
return answer . createAndSetExpression ( arg ) ;
return answer . get ( arg ) ;
return answer ;
return <unk> ? <unk> : all ;
return applicationContext . getBean ( arg ) ;
return applicationContext . getBeansOfType ( arg ) ;
return args ;
return <unk> . process ( arg ) ;
return <unk> . get ( arg ) ;
return attributeName != null && super . isEligibleAttribute ( arg ) &&! attributeName . equals ( arg ) ;
return attributeName != null &&! <unk> . equals ( arg ) &&! attributeName . equals ( arg ) &&! attributeName . startsWith ( arg ) &&! attributeName . equals ( arg ) ;
return awaitCreation ;
return bean . toString ( arg ) ;
return beanType . getName ( arg ) ;
return binding . getBody ( arg ) ;
return binding ;
return <unk> ;
return block . createExpression ( arg ) ;
return block . createExpression ( arg ) ;
return blueprintContainer . <unk> ( arg ) ;
return body != null ? body . toString ( arg ) : null ;
return body != null ? body . toString ( arg ) : null ;
return body ;
return <unk> ;
return builder . getRouteList ( arg ) ;
return builder . getRouteList ( arg ) ;
return builder . getRouteList ( arg ) ;
return builder . getRouteList ( arg ) ;
return builder . getRouteList ( arg ) ;
return builder . getRouteList ( arg ) ;
return builder . getRouteList ( arg ) ;
return builder . getRouteList ( arg ) ;
return builder . getRouteList ( arg ) ;
return builder . getRouteList ( arg ) ;
return builder . getRouteList ( arg ) ;
return builder ;
return builder ;
return builder ;
return builder ;
return builder ;
return builder ;
return builder ;
return builder ;
return builder ;
return builder ;
return builder ;
return bundleContext . getBundle ( arg ) . <unk> ( arg ) ;
return camelContext . getEndpoint ( arg ) ;
return camelContext . getExecutorServiceStrategy ( arg ) . newCachedThreadPool ( arg ) ;
return camelContext . getExecutorServiceStrategy ( arg ) . newThreadPool ( arg ) ;
return camelContext . getTypeConverter ( arg ) . mandatoryConvertTo ( arg ) ;
return charset ;
return charsetName ;
return childServices != null ? childServices . remove ( arg ) : false ;
return client . <unk> ( arg ) ;
return client . deleteFile ( arg ) ;
return client . storeFile ( arg ) ;
return client ;
return <unk> . get ( arg ) ;
return compare ( arg ) < 0 ;
return completed ;
return <unk> ;
return component . createEntityManager ( arg ) ;
return component . getHeaderFilterStrategy ( arg ) ;
return component . <unk> ( arg ) ;
return config . <unk> ( arg ) ;
return configuration . getAmazonSdbClient ( arg ) != null ? configuration . getAmazonSdbClient ( arg ) : <unk> ( arg ) ;
return configuration . <unk> ( arg ) ;
return configuration . remoteServerInformation ( arg ) ;
return <unk> ( arg ) ;
return <unk> ( arg ) ;
return consumer . getEndpoint ( arg ) . getEndpointUri ( arg ) ;
return consumer . getEndpoint ( arg ) . getNettyHttpBinding ( arg ) . toHttpResponse ( arg ) ;
return consumer . getEndpoint ( arg ) . getNettyHttpBinding ( arg ) . toHttpResponse ( arg ) ;
return consumerCache . receive ( arg ) ;
return consumerCache . receive ( arg ) ;
return consumerCache . receiveNoWait ( arg ) ;
return consumers . get ( arg ) ;
return context . getEndpoint ( arg ) ;
return context . getManagementStrategy ( arg ) ;
return context . getRegistry ( arg ) . lookup ( arg ) ;
return context . getRegistry ( arg ) . lookup ( arg ) ;
return context . getRegistry ( arg ) . lookup ( arg ) ;
return context . getRegistry ( arg ) . lookup ( arg ) ;
return context . getRegistry ( arg ) . lookup ( arg ) ;
return context . getRegistry ( arg ) . lookup ( arg ) ;
return context . getTypeConverter ( arg ) . convertTo ( arg ) ;
return context . getTypeConverter ( arg ) . convertTo ( arg ) ;
return context . getTypeConverter ( arg ) . convertTo ( arg ) ;
return context . getTypeConverter ( arg ) . convertTo ( arg ) ;
return context . getTypeConverter ( arg ) . convertTo ( arg ) ;
return context . getTypeConverter ( arg ) . convertTo ( arg ) ;
return context . getTypeConverter ( arg ) . convertTo ( arg ) ;
return context . resolveEndpoint ( arg ) ;
return context ;
return contextPath != null ? contextPath : delegate . getContextPath ( arg ) ;
return contextPath != null ? contextPath : delegate . getContextPath ( arg ) ;
return convertLFtoCR ;
return convertTo ( arg ) ;
return converter . convertTo ( arg ) ;
return cool . process ( arg ) ;
return copy != null && copy ;
return copy ;
return cos . getInputStream ( arg ) ;
return cos . getInputStream ( arg ) ;
return cos . getStreamCache ( arg ) ;
return cos . getStreamCache ( arg ) ;
return count . get ( arg ) ;
return counter ;
return createEndpoint ( arg ) ;
return createExchange ( arg ) ;
return createOutputsProcessor ( arg ) ;
return createOutputsProcessor ( arg ) ;
return createOutputsProcessor ( arg ) ;
return <unk> ( arg ) ;
return <unk> ( arg ) ;
return createSpringCamelContext ( arg ) ;
return createSpringCamelContext ( arg ) ;
return created ;
return createdById ;
return createdDate ;
return current ( arg ) ;
return current == number ;
return current == number ;
return current == number ;
return current >= number ;
return current >= number ;
return current >= number ;
return current >= number ;
return <unk> . <unk> ( arg ) ;
return <unk> ;
return dataFormat ( arg ) ;
return <unk> . next ( arg ) ;
return <unk> ;
return <unk> . getExecutorService ( arg ) ;
return debugger . <unk> ( arg ) ;
return <unk> ;
return <unk> ;
return <unk> ;
return <unk> ;
return <unk> ;
return delay ;
return delayer ;
return delegate ( arg ) ;
return delegate . lookupByType ( arg ) ;
return delegate . <unk> ( arg ) ;
return delegate . <unk> ( arg ) ;
return destination . getEndpointUri ( arg ) ;
return destination ;
return <unk> ;
return <unk> ;
return doDeserializeJavaObjectFromResponse ( arg ) ;
return doDeserializeJavaObjectFromResponse ( arg ) ;
return <unk> ( arg ) ;
return <unk> ( arg ) ;
return done ;
return <unk> ;
return eagerCheckCompletion ;
return encoder ;
return endByte1 ;
return endByte2 ;
return endpoint + <unk> . incrementAndGet ( arg ) ;
return endpoint . createExchange ( arg ) ;
return endpoint . createExchange ( arg ) ;
return endpoint . createExchange ( arg ) ;
return endpoint . getBinding ( arg ) ;
return endpoint . getBinding ( arg ) ;
return endpoint . getCamelContext ( arg ) . getTypeConverter ( arg ) . convertTo ( arg ) ;
return endpoint . getConfiguration ( arg ) . getTempPrefix ( arg ) + fileName ;
return endpoint . getConfiguration ( arg ) . remoteServerInformation ( arg ) ;
return endpoint . getConfiguration ( arg ) . remoteServerInformation ( arg ) ;
return endpoint . getEndpointUri ( arg ) ;
return endpoint . getExchanges ( arg ) . size ( arg ) ;
return endpoint . getPath ( arg ) ;
return endpoint . getPath ( arg ) ;
return endpoint . <unk> ( arg ) ;
return endpoint . <unk> ( arg ) ;
return endpoint . getSqlClient ( arg ) . getDataSource ( arg ) . getConnection ( arg ) ;
return endpoint . getSqlClient ( arg ) . getDataSource ( arg ) . getConnection ( arg ) ;
return endpoint . <unk> ( arg ) && dir . <unk> ( arg ) ;
return endpoint . remoteServerInformation ( arg ) ;
return endpoint ;
return endpoint ;
return endpoint ;
return endpoint ;
return <unk> . <unk> ( arg ) ;
return endpointUri . <unk> ( arg ) * <unk> + 1 ;
return endpointUri ;
return er . resolve ( arg ) ;
return er . resolveEndpoint ( arg ) ;
return errorHandlerBuilder ;
return evaluateStringExpression ( arg ) + evaluateStringExpression ( arg ) ;
return evaluateValuePredicate ( arg ) ;
return evaluateValuePredicate ( arg ) ;
return event . getSeverity ( arg ) == 0 ;
return event . getSeverity ( arg ) == 0 ;
return event instanceof <unk> ;
return <unk> ;
return exception ;
return exception ;
return exception ;
return exchange != null ? ( T ) exchange . getProperty ( arg ) : null ;
return exchange . getContext ( arg ) . getProperties ( arg ) . get ( arg ) ;
return exchange . getContext ( arg ) . getRegistry ( arg ) . lookup ( arg ) ;
return exchange . getContext ( arg ) . getRegistry ( arg ) . lookup ( arg ) ;
return exchange . getContext ( arg ) . resolveLanguage ( arg ) . createExpression ( arg ) . evaluate ( arg ) ;
return exchange . getException ( arg ) == null || ExchangeHelper . isFailureHandled ( arg ) ;
return exchange . getException ( arg ) == null || ExchangeHelper . isFailureHandled ( arg ) || ExchangeHelper . <unk> ( arg ) ;
return exchange . getFault ( arg ) . getBody ( arg ) ;
return exchange . getFault ( arg ) . getBody ( arg ) ;
return exchange . getIn ( arg ) . getBody ( arg ) ;
return exchange . getIn ( arg ) . getHeader ( arg ) ;
return exchange . getOut ( arg ) . getHeader ( arg ) ;
return exchange . getOut ( arg ) ;
return exchange . getProperties ( arg ) . containsKey ( arg ) && ( ( Boolean ) exchange . getProperties ( arg ) . get ( arg ) ) ;
return exchange . getProperties ( arg ) ;
return exchange . getProperty ( arg ) != null ;
return exchange . getProperty ( arg ) ;
return exchange . getResponse ( arg ) ;
return exchange . toString ( arg ) ;
return exchange ;
return excludes ;
return <unk> ;
return expression ( arg ) ;
return expression . toString ( arg ) ;
return extractResultBody ( arg ) ;
return extractResultBody ( arg ) ;
return extractResultBody ( arg ) ;
return extractResultBody ( arg ) ;
return f ;
return <unk> ;
return <unk> . get ( arg ) ;
return false ;
return false ;
return false ;
return false ;
return false ;
return false ;
return false ;
return false ;
return false ;
return false ;
return false ;
return false ;
return false ;
return false ;
return false ;
return false ;
return false ;
return false ;
return false ;
return false ;
return false ;
return fault ;
return file . getBody ( arg ) ;
return file ;
return <unk> ;
return filter ( arg )  + processor ;
return filterProcessor . process ( arg ) ;
return filterProcessor . processNext ( arg ) ;
return format ( arg ) ;
return format ( arg ) ;
return format ;
return format ;
return found ;
return future != null ;
return genericFile . getBody ( arg ) ;
return genericFile ;
return genericFile ;
return get ( arg ) ;
return getAbsoluteFileName ( arg ) ;
return <unk> ( arg ) . <unk> ( arg ) . <unk> ( arg ) ;
return getCamelContext ( arg ) . getRegistry ( arg ) . lookup ( arg ) ;
return getCamelContext ( arg ) . getRegistry ( arg ) . lookupByType ( arg ) ;
return getComponent ( arg ) . getApplicationContext ( arg ) ;
return getContainer ( arg ) . getExchangeConverter ( arg ) . convertTo ( arg ) ;
return getContext ( arg ) . getExchangeConverter ( arg ) . convertTo ( arg ) ;
return getContext ( arg ) . getTypeConverter ( arg ) . convertTo ( arg ) ;
return getContext ( arg ) . resolveEndpoint ( arg ) ;
return <unk> ( arg ) ;
return <unk> ( arg ) . <unk> ( arg ) ;
return getEndpointResolver ( arg ) . resolve ( arg ) ;
return getEndpointUri ( arg ) . startsWith ( arg ) ? new DigitalSignatureProducer ( arg ) : new DigitalSignatureProducer ( arg ) ;
return getEndpointsDTO ( arg ) . getEndpoints ( arg ) ;
return <unk> ( arg ) . getEndpointsDTO ( arg ) . getEndpoints ( arg ) ;
return <unk> ( arg ) . <unk> ( arg ) ;
return getExceptionClasses ( arg ) . toString ( arg ) ;
return getExchange ( arg ) . getBinding ( arg ) . <unk> ( arg ) ;
return getExchange ( arg ) . getEndpoint ( arg ) . getBinding ( arg ) . <unk> ( arg ) ;
return getExchange ( arg ) . getInMessage ( arg ) ;
return getExchange ( arg ) . <unk> ( arg ) ;
return getExchangeConverter ( arg ) . convertTo ( arg ) ;
return getExchangesReceived ( arg ) . get ( arg ) ;
return getExchangesReceived ( arg ) . size ( arg ) ;
return <unk> ( arg ) ;
return getGenericFileEndpoint ( arg ) . getTempPrefix ( arg ) + fileName ;
return getName ( arg ) ;
return getOperations ( arg ) != null ;
return getOsgiService ( arg ) ;
return getOsgiService ( arg ) ;
return getOsgiService ( arg ) ;
return getOsgiService ( arg ) ;
return getOut ( arg ) . <unk> ( arg ) ;
return getPendingExchanges ( arg ) ;
return <unk> ( arg ) . getService ( arg ) ;
return getProcessor ( arg ) . process ( arg ) ;
return getQName ( arg ) ;
return getReceivedExchanges ( arg ) . get ( arg ) ;
return getReceivedExchanges ( arg ) . size ( arg ) ;
return getRedeliverDelay ( arg ) ;
return getRegistry ( arg ) . convertTo ( arg ) ;
return getRegistry ( arg ) . convertTo ( arg ) ;
return getRegistry ( arg ) . mandatoryConvertTo ( arg ) ;
return getRegistry ( arg ) . mandatoryConvertTo ( arg ) ;
return <unk> ( arg ) ;
return getShortName ( arg ) ;
return getSjmsComponent ( arg ) . getHeaderFilterStrategy ( arg ) ;
return getSjmsComponent ( arg ) . <unk> ( arg ) ;
return getSjmsEndpoint ( arg ) . <unk> ( arg ) . intValue ( arg ) ;
return getSjmsEndpoint ( arg ) . <unk> ( arg ) ;
return getSjmsEndpoint ( arg ) . getConnectionResource ( arg ) ;
return getSjmsEndpoint ( arg ) . <unk> ( arg ) ;
return getSjmsEndpoint ( arg ) . <unk> ( arg ) ;
return getSjmsEndpoint ( arg ) . <unk> ( arg ) ;
return getSjmsEndpoint ( arg ) . <unk> ( arg ) ;
return getSjmsEndpoint ( arg ) . <unk> ( arg ) ;
return getSjmsEndpoint ( arg ) . <unk> ( arg ) ;
return getSjmsEndpoint ( arg ) . <unk> ( arg ) ;
return getSjmsEndpoint ( arg ) . <unk> ( arg ) ;
return getSjmsEndpoint ( arg ) . <unk> ( arg ) ;
return getSjmsEndpoint ( arg ) . <unk> ( arg ) ;
return getSjmsEndpoint ( arg ) . <unk> ( arg ) ;
return getStrategy ( arg ) . manageProcessor ( arg ) ;
return getThrottler ( arg ) . getMaximumRequestsPerPeriod ( arg ) ;
return getUnmarshaller ( arg ) . unmarshal ( arg ) ;
return groupExchanges ;
return <unk> ( arg ) ;
return headerValue != null &&! <unk> ( arg ) . contains ( arg ) ;
return headerValue != null ;
return headerValue . toString ( arg ) ;
return headerValue . toString ( arg ) ;
return headers ;
return <unk> . get ( arg ) ;
return httpUri . getPath ( arg ) ;
return httpUri . getPath ( arg ) ;
return iSeries != null && iSeries . <unk> ( arg ) ;
return iSeries ;
return id ;
return id ;
return id ;
return <unk> . generateId ( arg ) ;
return <unk> ;
return idx + 1 == 0 && ( <unk> || ObjectHelper . isNotEmpty ( arg ) ) ;
return <unk> ;
return <unk> ;
return includes ;
return index < batchSize ;
return index >= batchSize ;
return indexFactory . open ( arg ) ;
return inheritErrorHandlerFlag != null && inheritErrorHandlerFlag . booleanValue ( arg ) ;
return initialRedeliveryDelay ;
return inputStream . <unk> ( arg ) ;
return inputStream . read ( arg ) ;
return instance ;
return instance ;
return interceptEndpoint ;
return interceptSendToEndpoint ;
return interceptor . <unk> ( arg ) . getId ( arg ) ;
return isDeleted ;
return isEnabled ;
return <unk> ;
return <unk> ( arg ) ;
return isRunAllowed ( arg ) &&! <unk> ( arg ) ;
return isStarted ;
return <unk> ( arg ) ;
return isUseVersion102 ( arg ) ? new DefaultMessageListenerContainer102 ( arg ) : new DefaultMessageListenerContainer ( arg ) ;
return isUseVersion102 ( arg ) ? new <unk> ( arg ) : new SimpleMessageListenerContainer ( arg ) ;
return <unk> . indexOf ( arg ) > null ;
return <unk> . indexOf ( arg ) > null ;
return <unk> ;
return jdbcTemplate . queryForInt ( arg ) ;
return language ( arg ) ;
return language ( arg ) ;
return language ( arg ) ;
return language ( arg ) ;
return language ( arg ) ;
return language ( arg ) ;
return language ( arg ) ;
return language ( arg ) ;
return language ( arg ) ;
return language ( arg ) ;
return language ( arg ) ;
return language ( arg ) ;
return language ( arg ) ;
return language ( arg ) ;
return language ;
return last != null ? extractTraceLabel ( arg ) : null ;
return last != null ? extractTraceLabel ( arg ) : null ;
return lastActivityDate ;
return lastModifiedById ;
return lastModifiedDate ;
return <unk> ;
return <unk> +   + operator +   + right ;
return <unk> ;
return list ;
return list == null ? false : index < list . size ( arg ) ;
return literalMap . get ( arg ) ;
return load ( arg ) ;
return loader . getClass ( arg ) . getName ( arg ) . startsWith ( arg ) ;
return localServer . getServiceHostName ( arg ) ;
return localServer . getServicePort ( arg ) ;
return loggingFeatureEnabled ;
return loggingFeatureEnabled ;
return loggingFeatureEnabled ;
return loggingFeatureEnabled ;
return lookupByType ( arg ) ;
return map . size ( arg ) ;
return map . values ( arg ) . iterator ( arg ) ;
return <unk> ;
return <unk> ;
return marshaller . unmarshallExchange ( arg ) ;
return matches && current == bodies . size ( arg ) ;
return matches && current >= bodies . size ( arg ) ;
return matches ;
return matches ;
return mediaSizeName ;
return memoryIdempotentRepository ( arg ) ;
return messageIdRepository ;
return messageIdRepository ;
return method ;
return <unk> . get ( arg ) ;
return <unk> ;
return models ;
return models ;
return models ;
return moveNamePostfix != null || moveNamePrefix != null ;
return moveNamePostfix != null || moveNamePrefix != null || <unk> != null || <unk> != null || expression != null ;
return name ;
return name ;
return <unk> . get ( arg ) ;
return nameParser ;
return nameParser ;
return new <unk> ( arg ) ;
return new AdviceWithBuilder ( arg ) ;
return new AdviceWithBuilder ( arg ) ;
return new <unk> ( arg ) ;
return new BeanExchange ( arg ) ;
return new BeanExchange ( arg ) ;
return new BeanExpression ( arg ) ;
return new BeanExpression ( arg ) ;
return new BeanExpression ( arg ) ;
return new BeanExpression < Exchange > ( arg ) ;
return new BindyFixedLengthFactory ( arg ) ;
return new BufferedInputStream ( arg ) ;
return new BufferedInputStream ( arg ) ;
return new BufferedOutputStream ( arg ) ;
return new BufferedReader ( arg ) ;
return new BufferedReader ( arg ) ;
return new BufferedWriter ( arg ) ;
return new BundleDescriptor ( arg ) ;
return new ByteArrayInputStream ( arg ) ;
return new <unk> ( arg ) ;
return new CamelContainer < E > ( arg ) ;
return new CamelContext < E > ( arg ) ;
return new CamelTemplate ( arg ) ;
return new <unk> ( arg ) ;
return new <unk> < E > ( arg ) ;
return new <unk> ( arg ) ;
return new CompositeProcessor < E > ( arg ) ;
return new ConcurrentHashMap < String , Object > ( arg ) ;
return new ConcurrentHashMap < String , Object > ( arg ) ;
return new DOMSource ( arg ) ;
return new DOMSource ( arg ) ;
return new DataTypeClause < ProcessorType < Type >> ( arg ) ;
return new DataTypeClause < ProcessorType < Type >> ( arg ) ;
return new DataTypeExpression < ProcessorType < Type >> ( arg ) ;
return new DataTypeExpression < ProcessorType < Type >> ( arg ) ;
return new DataTypeExpression < Type > ( arg ) ;
return new DataTypeExpression < Type > ( arg ) ;
return new DeadLetterChannelBuilder ( arg ) ;
return new DeadLetterChannelBuilder < E > ( arg ) ;
return new DeadLetterChannelBuilder < E > ( arg ) ;
return new DefaultCamelContext ( arg ) ;
return new DefaultCamelContext < E > ( arg ) ;
return new DefaultConsumer ( arg ) ;
return new <unk> < E > ( arg ) ;
return new DefaultErrorHandlerBuilder ( arg ) ;
return new DefaultFactoryFinder ( arg ) ;
return new DefaultJmsExchange ( arg ) ;
return new DefaultJmsExchange ( arg ) ;
return new DefaultPollingConsumer ( arg ) ;
return new DefaultPollingConsumer < E > ( arg ) ;
return new DefaultProducerTemplate ( arg ) ;
return new DefaultProducerTemplate < E > ( arg ) ;
return new <unk> ( arg ) ;
return new <unk> ( arg ) ;
return new DirectProducer ( arg ) ;
return new DirectProducer < E > ( arg ) ;
return new DirectProducer < E > ( arg ) ;
return new <unk> ( arg ) . parse ( arg ) ;
return new <unk> ( arg ) ;
return new EventDrivenPollingConsumer ( arg ) ;
return new EventDrivenPollingConsumer < E > ( arg ) ;
return new EventDrivenPollingConsumer < Exchange > ( arg ) ;
return new EventDrivenPollingConsumer < HttpExchange > ( arg ) ;
return new ExceptionIterator ( arg ) ;
return new <unk> ( arg ) ;
return new FailOverLoadBalancer ( arg ) ;
return new FailOverLoadBalancer ( arg ) ;
return new FileInputStream ( arg ) ;
return new FilterType ( arg ) ;
return new <unk> ( arg ) ;
return new GenericFileExchange ( arg ) ;
return new GenericFileExchange < T > ( arg ) ;
return new <unk> ( arg ) ;
return new GenericMessage ( arg ) ;
return new GenericMessage ( arg ) ;
return new GenericMessage ( arg ) ;
return new <unk> ( arg ) ;
return new HashMap < String , Endpoint > ( arg ) ;
return new HashMap < String , Object > ( arg ) ;
return new <unk> ( arg ) ;
return new HttpExchange ( arg ) ;
return new InputStreamCache ( arg ) ;
return new InputStreamReader ( arg ) ;
return new InputStreamRequestEntity ( arg ) ;
return new InputStreamRequestEntity ( arg ) ;
return new InputStreamRequestEntity ( arg ) ;
return new <unk> ( arg ) ;
return new <unk> ( arg ) ;
return new <unk> ( arg ) ;
return new <unk> ( arg ) ;
return new LRUCache ( arg ) ;
return new LRUCache < Object , Object > ( arg ) ;
return new LRUSoftCache < Object , Object > ( arg ) ;
return new LRUSoftCache < String , <unk> > ( arg ) ;
return new LRUSoftCache < String , Producer > ( arg ) ;
return new LinkedBlockingQueue < E > ( arg ) ;
return new LinkedBlockingQueue < Exchange > ( arg ) ;
return new LinkedBlockingQueue < Exchange > ( arg ) ;
return new LinkedBlockingQueue < SedaEndpoint . Entry < E >> ( arg ) ;
return new LinkedBlockingQueue < SedaEndpoint . Entry > ( arg ) ;
return new <unk> ( arg ) ;
return new <unk> ( arg ) ;
return new <unk> ( arg ) ;
return new Logger ( arg ) ;
return new Logger ( arg ) ;
return new Logger ( arg ) ;
return new Logger ( arg ) ;
return new Logger < E > ( arg ) ;
return new LoggingErrorHandlerBuilder < E > ( arg ) ;
return new LoggingErrorHandlerBuilder < E > ( arg ) ;
return new LoggingErrorHandlerBuilder < E > ( arg ) ;
return new <unk> ( arg ) ;
return new MailExchange ( arg ) ;
return new MailExchange ( arg ) ;
return new MarkableInputStreamCache ( arg ) ;
return new <unk> ( arg ) ;
return new MinaExchange ( arg ) ;
return new MulticastProcessor < E > ( arg ) ;
return new <unk> ( arg ) ;
return new NoErrorHandlerBuilder < E > ( arg ) ;
return new NoErrorHandlerBuilder < E > ( arg ) ;
return new <unk> ( arg ) ;
return new <unk> ( arg ) ;
return new ObjectName ( arg ) ;
return new ObjectName ( arg ) ;
return new ObjectName ( arg ) ;
return new ObjectName ( arg ) ;
return new ObjectName ( arg ) ;
return new <unk> ( arg ) ;
return new Pipeline < E > ( arg ) ;
return new <unk> ( arg ) ;
return new <unk> ( arg ) ;
return new ProcessorExchangePair ( arg ) ;
return new <unk> ( arg ) ;
return new QuartzExchange ( arg ) ;
return new QueueEndpoint < E > ( arg ) ;
return new <unk> < E > ( arg ) ;
return new RecipientList ( arg ) ;
return new RecipientList ( arg ) ;
return new RecipientList < E > ( arg ) ;
return new <unk> ( arg ) ;
return new RemoteFileExchange ( arg ) ;
return new RemoteFileProducer ( arg ) ;
return new RemoteFileProducer < T > ( arg ) ;
return new RenameFileStrategy ( arg ) ;
return new RenameFileStrategy ( arg ) ;
return new RouteType ( arg ) ;
return new ScheduledThreadPoolExecutor ( arg ) ;
return new <unk> < E > ( arg ) ;
return new SedaEndpoint < E > ( arg ) ;
return new <unk> ( arg ) ;
return new SendProcessor < E > ( arg ) ;
return new SimpleDateFormat ( arg ) ;
return new SimpleDateFormat ( arg ) ;
return new <unk> ( arg ) ;
return new <unk> ( arg ) ;
return new SpringIntegrationExchange ( arg ) ;
return new <unk> ( arg ) ;
return new StreamCachingInterceptor ( arg ) ;
return new <unk> ( arg ) ;
return new <unk> ( arg ) ;
return new <unk> ( arg ) ;
return new <unk> ( arg ) ;
return new <unk> ( arg ) ;
return new TreeMap ( arg ) ;
return new UnitOfWorkProcessor ( arg ) ;
return new ValueBuilder < E > ( arg ) ;
return new ValueBuilder < E > ( arg ) ;
return new XmppExchange ( arg ) ;
return new XmppExchange ( arg ) ;
return new XsltBuilder < E > ( arg ) ;
return new org . apache . camel . converter . <unk> . <unk> ( arg ) ;
return new org . apache . camel . processor . loadbalancer . FailOverLoadBalancer ( arg ) ;
return new org . apache . camel . processor . loadbalancer . FailOverLoadBalancer ( arg ) ;
return newExchange . getException ( arg ) != null ? newExchange . getException ( arg ) : oldExchange . getException ( arg ) ;
return <unk> ;
return <unk>  + predicate ;
return null ;
return number . <unk> ( arg ) ;
return number . <unk> ( arg ) ;
return number . <unk> ( arg ) ;
return number . intValue ( arg ) ;
return number . longValue ( arg ) ;
return number . <unk> ( arg ) ;
return o ;
return o1 . getFileName ( arg ) . compareTo ( arg ) ;
return o1 . getId ( arg ) . compareTo ( arg ) ;
return object . toString ( arg ) ;
return object . toString ( arg ) ;
return object . toString ( arg ) ;
return oldOstream . getNumOfWrittenBytes ( arg ) >= value ;
return oldOstream . getNumOfWrittenBytes ( arg ) >= value ;
return oldOstream . getNumOfWrittenBytes ( arg ) >= value ;
return oldOstream . getNumOfWrittenBytes ( arg ) >= value ;
return oldOstream . getNumOfWrittenBytes ( arg ) >= value ;
return oldOstream . getNumOfWrittenMessages ( arg ) >= value ;
return oldOstream . getNumOfWrittenMessages ( arg ) >= value ;
return oldOstream . getNumOfWrittenMessages ( arg ) >= value ;
return oldOstream . getNumOfWrittenMessages ( arg ) >= value ;
return oldOstream . getNumOfWrittenMessages ( arg ) >= value ;
return oldOstream . getNumOfWrittenMessages ( arg ) >= value ;
return oldOstream . getNumOfWrittenMessages ( arg ) >= value ;
return onCompleteOnly != null && onCompleteOnly . booleanValue ( arg ) ;
return onFailureOnly != null && onFailureOnly . booleanValue ( arg ) ;
return <unk> ( arg ) ;
return operation != null ? operation : <unk> . <unk> ;
return org . mvel . MVEL . executeExpression ( arg ) ;
return <unk> ;
return <unk> ;
return <unk> ;
return os . toString ( arg ) ;
return <unk> . indexOf ( arg ) > null ;
return otherwise . process ( arg ) ;
return output ;
return <unk> ;
return outputs ;
return ownerId ;
return parallelProcessing != null ? parallelProcessing : false ;
return parallelProcessing != null ? parallelProcessing : false ;
return parallelProcessing ;
return parallelProcessing ;
return parameter != null && parameter . startsWith ( arg ) ;
return parent ;
return <unk> . convertTo ( arg ) ;
return <unk> ( arg ) ;
return parser . getValidationContext ( arg ) instanceof NoValidation ;
return parser . getValidationContext ( arg ) instanceof NoValidation ;
return <unk> ;
return path . getParent ( arg ) ;
return path . getParent ( arg ) ;
return path . replaceAll ( arg ) ;
return pendingExchanges ;
return pendingExchanges ;
return pendingExchanges ;
return pendingExchanges ;
return pendingExchanges ;
return pendingExchanges ;
return pendingExchanges ;
return pendingExchanges ;
return pendingExchanges ;
return policy . toString ( arg ) ;
return process ( arg ) ;
return processNext ( arg ) ;
return processor . getDestination ( arg ) . getEndpointUri ( arg ) ;
return processor . process ( arg ) ;
return processor . process ( arg ) ;
return processor ;
return processorType . marshal ( arg ) ;
return processorType . unmarshal ( arg ) ;
return producer . getEndpoint ( arg ) . getEndpointUri ( arg ) ;
return producer . idle . get ( arg ) ;
return producer . idle . get ( arg ) ;
return producer . idle . get ( arg ) ;
return producer ;
return producerCache . send ( arg ) ;
return producerCache . send ( arg ) ;
return <unk> ;
return protocol . equals ( arg ) || protocol . equals ( arg ) || protocol . equals ( arg ) ;
return provider . <unk> ( arg ) ;
return proxy . getServiceHostName ( arg ) ;
return proxy . getServicePort ( arg ) ;
return <unk> ;
return queue ;
return rc . getRoute ( arg ) . getId ( arg ) ;
return readLockStrategy ;
return receiveNoWait ( arg ) ;
return receiveNoWait ( arg ) ;
return <unk> ;
return receivedExchanges . size ( arg ) ;
return recipients . get ( arg ) ;
return redeliverDelay ;
return redelivery . getRedeliveryPolicy ( arg ) . getRedeliverDelay ( arg ) ;
return redeliveryCounter < getMaximumRedeliveries ( arg ) ;
return redeliveryCounter <unk> getMaximumRedeliveries ( arg ) ;
return redeliveryDelay ;
return <unk> . type ( arg ) ;
return regexTokenize ( arg ) ;
return registery . get ( arg ) ;
return registery . lookup ( arg ) ;
return registery . lookupByType ( arg ) ;
return registry . lookup ( arg ) ;
return registry . lookup ( arg ) ;
return registry . lookupByType ( arg ) ;
return request . getInputStream ( arg ) ;
return <unk> ;
return requestTimeout ;
return reseq . getTimeout ( arg ) ;
return resequencer ;
return resolveMandatoryEndpoint ( arg ) ;
return resolveMandatoryEndpoint ( arg ) ;
return resolveMandatoryResource ( arg ) . <unk> ( arg ) ;
return resolveQueueComponent ( arg ) ;
return resource . getInputStream ( arg ) ;
return result != null ? result . getOut ( arg ) . getBody ( arg ) : null ;
return result . length == 1 ? new Locale ( arg ) : new Locale ( arg ) ;
return ret ;
return retval . trim ( arg ) ;
return retval ;
return reverse != null && reverse . booleanValue ( arg ) ;
return <unk> ;
return <unk> . process ( arg ) ;
return roundRobin != null && roundRobin . booleanValue ( arg ) ;
return roundRobin != null && roundRobin . booleanValue ( arg ) ;
return roundRobin ;
return roundRobin ;
return routeCollection . exception ( arg ) ;
return routeCollection . toString ( arg ) ;
return routeContext . <unk> ( arg ) ;
return routeContext . createProcessor ( arg ) ;
return routeContext . createProcessor ( arg ) ;
return routeContext . getCamelContext ( arg ) . <unk> ( arg ) ;
return routeContext . getCamelContext ( arg ) . <unk> ( arg ) ;
return routeContext . lookup ( arg ) ;
return <unk> ;
return routes ;
return <unk> . get ( arg ) ;
return s . <unk> ( arg ) . <unk> ( arg ) ;
return s ;
return s ;
return sb . toString ( arg ) ;
return scanner ;
return <unk> ;
return sendBody ( arg ) ;
return sendBody ( arg ) ;
return sendBodyAndHeader ( arg ) ;
return sendBodyAndHeader ( arg ) ;
return sendBodyAndHeaders ( arg ) ;
return sendBodyAndHeaders ( arg ) ;
return sendBodyAndProperty ( arg ) ;
return sendBodyAndProperty ( arg ) ;
return sentTo ;
return server . isRegistered ( arg ) ;
return services . get ( arg ) ;
return setOperations . add ( arg ) ;
return setOperations . remove ( arg ) ;
return siMessage . getHeader ( arg ) . getAttribute ( arg ) ;
return signatureHeaderName != null ? signatureHeaderName : <unk> ;
return singleton ;
return singleton ;
return size ( arg ) > <unk> ;
return source . <unk> ( arg ) ;
return split ;
return splitter ;
return startByte ;
return startService ( arg ) ;
return startService ( arg ) ;
return <unk> ;
return started . get ( arg ) &&! starting . get ( arg ) ;
return started . get ( arg ) ;
return state . get ( arg ) ;
return <unk> . iterator ( arg ) ;
return stopOnException != null ? stopOnException : false ;
return stopOnException != null ? stopOnException : false ;
return stopOnException ;
return stopped ;
return strategy . <unk> ( arg ) ;
return strategy . manageProcessor ( arg ) ;
return strategy ;
return streamCachingStrategy . <unk> ( arg ) ;
return streamCachingStrategy . <unk> ( arg ) ;
return streamCachingStrategy . <unk> ( arg ) ;
return streamCachingStrategy . <unk> ( arg ) ;
return streaming != null ? streaming : false ;
return streaming != null ? streaming : false ;
return streaming != null ? streaming : false ;
return super . <unk> ( arg ) ;
return super . createProcessor ( arg ) ;
return super . createProducer ( arg ) ;
return super . <unk> ( arg ) ;
return super . <unk> ( arg ) ;
return super . getValue ( arg ) ;
return super . isEligibleAttribute ( arg ) &&! attributeName . equals ( arg ) ;
return super . process ( arg ) ;
return super . process ( arg ) ;
return super . process ( arg ) ;
return super . process ( arg ) ;
return super . process ( arg ) ;
return super . process ( arg ) ;
return super . process ( arg ) ;
return super . process ( arg ) ;
return super . process ( arg ) ;
return super . processNext ( arg ) ;
return super . resolveComponent ( arg ) ;
return system ;
return systemModstamp ;
return target ;
return te . getProperties ( arg ) . getTwitter ( arg ) . getMentions ( arg ) ;
return te . getTwitter ( arg ) . getDirectMessages ( arg ) ;
return te . getTwitter ( arg ) . getHomeTimeline ( arg ) ;
return te . getTwitter ( arg ) . getMentions ( arg ) ;
return te . getTwitter ( arg ) . <unk> ( arg ) ;
return te . getTwitter ( arg ) . getRetweetsOfMe ( arg ) ;
return te . getTwitter ( arg ) . getUserTimeline ( arg ) ;
return text ;
return this . ApiVersion ;
return this . Description ;
return this . IsActive ;
return this . NotifyForFields ;
return this . NotifyForOperations ;
return this . Query ;
return this . apiVersion ;
return this . <unk> ;
return this . borrowObject ( arg ) ;
return this . borrowObject ( arg ) ;
return this . certFilename ;
return this . createChildProcessor ( arg ) ;
return this . description ;
return this . getSjmsComponent ( arg ) . getConnectionResource ( arg ) ;
return this . isActive ;
return this . notifyForFields ;
return this . notifyForOperations ;
return this . producerCache ;
return this . profile ;
return this . query ;
return this . requestReplyTemplate . request ( arg ) ;
return this . seed + ( this . sequence ++ ) ;
return this . seed + ( this . sequence ++ ) ;
return this . <unk> ;
return this ;
return this ;
return this == other || ( other != null && this . getClass ( arg ) == other . getClass ( arg ) && <unk> ) ;
return threadPoolExecutor ;
return throttler ;
return <unk> != null ;
return timePeriodMillis ;
return <unk> != null ;
return timeout != null ? timeout : 0 ;
return timeout != null ? timeout : 0 ;
return timeout != null ? timeout : 0 ;
return timeout ;
return <unk> ;
return to ( arg ) ;
return toBoolean ( arg ) ;
return <unk> ( arg ) ;
return toString ( arg ) ;
return toType . cast ( arg ) ;
return toType . cast ( arg ) ;
return total ;
return traceFilter == null || traceFilter . matches ( arg ) ;
return traceHandler ;
return tracer . <unk> ( arg ) . <unk> ( arg ) ;
return <unk> ;
return transform ( arg ) ;
return <unk> ;
return true . equalsIgnoreCase ( arg ) ;
return true . equalsIgnoreCase ( arg ) ? Boolean . TRUE : Boolean . <unk> ;
return true ;
return tryProcessor != null ;
return type != null && <unk> ( arg ) ;
return type != null && type . <unk> ( arg ) ;
return type . cast ( arg ) ;
return type . createDataFormat ( arg ) ;
return type . <unk> ( arg ) ;
return type . <unk> ( arg ) . getExpression ( arg ) . matches ( arg ) ;
return type . <unk> ( arg ) . getExpression ( arg ) . matches ( arg ) ;
return type ;
return typeConverter . convertTo ( arg ) ;
return <unk> . toString ( arg ) ;
return unmarshallExchange ( arg ) ;
return unmarshaller . unmarshal ( arg ) ;
return unmarshaller . unmarshal ( arg ) ;
return uri ;
return url . <unk> ( arg ) ;
return useJmx != null && useJmx . booleanValue ( arg ) ;
return <unk> ;
return useOriginalMessagePolicy != null ? useOriginalMessagePolicy : false ;
return useOriginalMessagePolicy ;
return validate ;
return validate ;
return validate == null || validate . booleanValue ( arg ) ;
return validation ;
return validation == null || validation . booleanValue ( arg ) ;
return value != null ;
return value . booleanValue ( arg ) ;
return value . toCharArray ( arg ) [ 0 ] ;
return value == null || value . booleanValue ( arg ) ;
return values . toArray ( arg ) ;
return wireTap ( arg ) ;
return <unk> ( arg ) ;
return <unk> ;
return xpath ( arg ) ;
return xpath ( arg ) ;
return xquery ( arg ) ;
return xquery ( arg ) ;
retval = <unk> ;
right = ExpressionBuilder . convertTo ( arg ) ;
<unk> = ExpressionBuilder . convertTo ( arg ) ;
route . addOutput ( arg ) ;
route . addOutput ( arg ) ;
route . <unk> ( arg ) ;
<unk> = b ;
<unk> = ( List < RouteBuilder > ) component . resolveAndRemoveReferenceParameter ( arg ) ;
routeCollection . <unk> ( arg ) ;
routeCollection . <unk> ( arg ) ;
routeCollection . <unk> ( arg ) ;
routeContext . addInterceptStrategy ( arg ) ;
routeContext . <unk> ( arg ) ;
routeContext . <unk> ( arg ) ;
routeService . start ( arg ) ;
routeService . stop ( arg ) ;
routeService . stop ( arg ) ;
routeService . stop ( arg ) ;
routers . add ( arg ) ;
routers . add ( arg ) ;
routes . add ( arg ) ;
routes . put ( arg ) ;
routes = new ArrayList < Route > ( arg ) ;
s = CastUtils . cast ( arg ) ;
s = CastUtils . cast ( arg ) ;
s = CastUtils . cast ( arg ) ;
s = iAgent . getMBeanServer ( arg ) . queryNames ( arg ) ;
s = iAgent . getMBeanServer ( arg ) . queryNames ( arg ) ;
s = iAgent . getMBeanServer ( arg ) . queryNames ( arg ) ;
s = mbsc . queryNames ( arg ) ;
s = mbsc . queryNames ( arg ) ;
s = mbsc . queryNames ( arg ) ;
<unk> ( arg ) ;
sb . append ( arg ) ;
sb . append ( arg ) ;
sb . append ( arg ) ;
sb . append ( arg ) ;
scheduled = routeContext . getCamelContext ( arg ) . getExecutorServiceManager ( arg ) . newSingleThreadScheduledExecutor ( arg ) ;
scheduled = routeContext . getCamelContext ( arg ) . getExecutorServiceManager ( arg ) . newSingleThreadScheduledExecutor ( arg ) ;
scheduler . shutdown ( arg ) ;
scheduler = getEndpoint ( arg ) . getCamelContext ( arg ) . getExecutorServiceManager ( arg ) . getScheduledExecutorService ( arg ) ;
scheduler = getEndpoint ( arg ) . getCamelContext ( arg ) . getExecutorServiceStrategy ( arg ) . newScheduledThreadPool ( arg ) ;
scheduler = new <unk> ( arg ) ;
scheme = CONVERTER . convertTo ( arg ) ;
scheme = <unk> . isSecureConnection ( arg ) ? https4 : http4 ;
schemeSpecificPart = CONVERTER . convertTo ( arg ) ;
<unk> . <unk> ( arg ) ;
security . <unk> ( arg ) ;
security . <unk> ( arg ) ;
send ( arg ) ;
send ( arg ) ;
send ( arg ) ;
send ( arg ) ;
send ( arg ) ;
send ( arg ) ;
send ( arg ) ;
send ( arg ) ;
send ( arg ) ;
send ( arg ) ;
send ( arg ) ;
sendFile ( arg ) ;
sendFile ( arg ) ;
sendMessage ( arg ) ;
sendMessage ( arg ) ;
<unk> ( arg ) ;
sentTo . set ( arg ) ;
sentTo = false ;
sentTo = false ;
sentTo = true ;
server . <unk> ( arg ) ;
server . getEndpoint ( arg ) . getBinding ( arg ) . getInInterceptors ( arg ) . add ( arg ) ;
server . getEndpoint ( arg ) . getService ( arg ) . <unk> ( arg ) . add ( arg ) ;
server . removeConnector ( arg ) ;
server . <unk> ( arg ) ;
server . stop ( arg ) ;
server = ApnsServerStub . prepareAndStartServer ( arg ) ;
server = ApnsServerStub . prepareAndStartServer ( arg ) ;
server = ApnsServerStub . prepareAndStartServer ( arg ) ;
server = ApnsServerStub . prepareAndStartServer ( arg ) ;
server = <unk> . <unk> ( arg ) ;
server = <unk> ( arg ) . create ( arg ) ;
<unk> . setOption ( arg ) ;
service . shutdown ( arg ) ;
service = new SubmitOrderedCompletionService ( arg ) ;
<unk> = ( List ) obj ;
serviceClass = ClassHelper . <unk> ( arg ) . getName ( arg ) ;
serviceClass = ClassLoaderUtils . loadClass ( arg ) ;
serviceClass = className ;
<unk> = QName . valueOf ( arg ) ;
<unk> = ( QName ) services . keySet ( arg ) . iterator ( arg ) . next ( arg ) ;
serviceReferenceQueue . add ( arg ) ;
<unk> = value ;
<unk> = context . getRegistry ( arg ) . lookup ( arg ) ;
session . close ( arg ) . <unk> ( arg ) ;
session . close ( arg ) ;
session . close ( arg ) ;
session . close ( arg ) ;
session . close ( arg ) ;
session . write ( arg ) ;
<unk> = ( LogFactory ) <unk> . iterator ( arg ) . next ( arg ) ;
set . add ( arg ) ;
set = CastUtils . cast ( arg ) ;
set = converter . convertTo ( arg ) ;
<unk> ( arg ) ;
<unk> ( arg ) ;
setDefaulResultWaitMillis ( arg ) ;
<unk> ( arg ) ;
<unk> ( arg ) ;
<unk> ( arg ) ;
setExpression ( arg ) ;
<unk> ( arg ) ;
setFile ( arg ) ;
<unk> ( arg ) ;
<unk> ( arg ) ;
setHeaders ( arg ) ;
setId ( arg ) ;
<unk> ( arg ) ;
<unk> ( arg ) ;
setInitialRedeliveryDelay ( arg ) ;
setIsLowercase ( arg ) ;
setIsLowercase ( arg ) ;
setLogExhasted ( arg ) ;
setMaximumRequestsPerPeriod ( arg ) ;
setProperty ( arg ) ;
setProperty ( arg ) ;
<unk> ( arg ) ;
setRelativeFileName ( arg ) ;
setRelativeFileName ( arg ) ;
setResultHandler ( arg ) ;
setResultHandler ( arg ) ;
setResultHandler ( arg ) ;
<unk> ( arg ) ;
<unk> ( arg ) ;
<unk> ( arg ) ;
<unk> ( arg ) ;
<unk> . <unk> ( arg ) ;
<unk> = new NettyBossPoolBuilder ( arg ) . withBossCount ( arg ) . build ( arg ) ;
sharedNettyHttpServer . stop ( arg ) ;
sharedNettyHttpServer = new <unk> ( arg ) ;
shutdown = ( ( ShutdownAware ) consumer ) . <unk> ( arg ) ;
shutdownConsumer ( arg ) ;
shutdownConsumer ( arg ) ;
shutdownNow ( arg ) ;
<unk> . shutdown ( arg ) ;
siMessage . getHeader ( arg ) . setAttribute ( arg ) ;
siMessage = message ;
<unk> . <unk> ( arg ) ;
simple . lookup ( arg ) ;
size += ( ( ShutdownAware ) consumer ) . getPendingExchanges ( arg ) ;
sizeCheck = ( 0 == sizeDifference ) ;
sizeCheck = ( sizeDifference == 0 ) ;
sizeCheck = 0 == sizeDifference ;
<unk> = <unk> ;
socket . close ( arg ) ;
socket . close ( arg ) ;
socket . close ( arg ) ;
socket . close ( arg ) ;
source = converter . toSource ( arg ) ;
source = converter . toSource ( arg ) ;
source = exchange . getContext ( arg ) . getTypeConverter ( arg ) . convertTo ( arg ) ;
source = exchange . getContext ( arg ) . getTypeConverter ( arg ) . convertTo ( arg ) ;
source = exchange . getContext ( arg ) . getTypeConverter ( arg ) . convertTo ( arg ) ;
source = exchange . getContext ( arg ) . getTypeConverter ( arg ) . convertTo ( arg ) ;
source = exchange . getContext ( arg ) . getTypeConverter ( arg ) . convertTo ( arg ) ;
source = exchange . getContext ( arg ) . getTypeConverter ( arg ) . convertTo ( arg ) ;
source = exchange . getContext ( arg ) . getTypeConverter ( arg ) . convertTo ( arg ) ;
source = exchange . getContext ( arg ) . getTypeConverter ( arg ) . convertTo ( arg ) ;
source = <unk> . toSource ( arg ) ;
<unk> = ( ( OptionalIdentifiedDefinition ) source ) . getShortName ( arg ) ;
<unk> . add ( arg ) ;
spring . destroy ( arg ) ;
src = ( Source ) src ;
sslContextParameters = this . sslContextParameters ;
sslSocketConnector . getSslContextFactory ( arg ) . setKeyStore ( arg ) ;
sslSocketConnector . getSslContextFactory ( arg ) . setKeyStore ( arg ) ;
sslSocketConnector . <unk> ( arg ) ;
sslSocketConnector = new SslSocketConnector ( arg ) ;
start ( arg ) ;
start = System . currentTimeMillis ( arg ) ;
start = System . currentTimeMillis ( arg ) ;
startLatch . await ( arg ) ;
startLatch . await ( arg ) ;
<unk> ( arg ) ;
startServices ( arg ) ;
startServices ( arg ) ;
startServices ( arg ) ;
startServices ( arg ) ;
startServices ( arg ) ;
startTime = System . currentTimeMillis ( arg ) ;
startTime = System . nanoTime ( arg ) ;
starting . set ( arg ) ;
<unk> = <unk> ++ ;
state . remove ( arg ) ;
state . set ( arg ) ;
staticQueryContext . <unk> ( arg ) ;
staticQueryContext = new <unk> ( arg ) ;
stop = Boolean . TRUE ;
stopRoute ( arg ) ;
stopRouteService ( arg ) ;
stopRouteService ( arg ) ;
<unk> ( arg ) ;
stopServices ( arg ) ;
stopServices ( arg ) ;
stopServices ( arg ) ;
stopServices ( arg ) ;
stopped = true ;
<unk> = state . getRoute ( arg ) ;
strategy . commit ( arg ) ;
strategy . <unk> ( arg ) ;
strategy . manageObject ( arg ) ;
strategy . manageObject ( arg ) ;
strategy . manageObject ( arg ) ;
strategy . manageObject ( arg ) ;
strategy . manageObject ( arg ) ;
strategy . onContextStart ( arg ) ;
strategy . <unk> ( arg ) ;
strategy . <unk> ( arg ) ;
strategy . unmanageObject ( arg ) ;
strategy . unmanageObject ( arg ) ;
strategy . unmanageObject ( arg ) ;
strategy . unmanageObject ( arg ) ;
strategy = <unk> ( arg ) ;
strategy = new <unk> ( arg ) ;
strategy = routeContext . lookup ( arg ) ;
stream ( arg ) ;
stream = IOHelper . buffered ( arg ) ;
stream = new BufferedInputStream ( arg ) ;
stream = new FileInputStream ( arg ) ;
<unk> . <unk> ( arg ) ;
super . <unk> ( arg ) ;
super . getMap ( arg ) . remove ( arg ) ;
super . processExchange ( arg ) ;
super . registerPojo ( arg ) ;
super . registerPojo ( arg ) ;
super . registerPojo ( arg ) ;
super . registerPojo ( arg ) ;
super . registerPojo ( arg ) ;
super . registerPojo ( arg ) ;
super . <unk> ( arg ) ;
<unk> = new BeanInfo ( arg ) ;
svrBean . create ( arg ) ;
svrBean . create ( arg ) ;
sync = new NodeSynchronizationImpl ( arg ) ;
sync = new NodeSynchronizationImpl ( arg ) ;
sync = new NodeSynchronizationImpl ( arg ) ;
sync = new NodeSynchronizationImpl ( arg ) ;
sync = new NodeSynchronizationImpl ( arg ) ;
sync = new NodeSynchronizationImpl ( arg ) ;
sync = new NodeSynchronizationImpl ( arg ) ;
sync = new NodeSynchronizationImpl ( arg ) ;
sync = processExchange ( arg ) ;
table . close ( arg ) ;
table = context . getRegistry ( arg ) . lookup ( arg ) ;
table = context . getRegistry ( arg ) . lookup ( arg ) ;
table = context . getRegistry ( arg ) . lookup ( arg ) ;
table = context . getRegistry ( arg ) . lookup ( arg ) ;
table = context . getRegistry ( arg ) . lookup ( arg ) ;
table = context . getRegistry ( arg ) . lookup ( arg ) ;
table = context . getRegistry ( arg ) . lookup ( arg ) ;
table = context . getRegistry ( arg ) . lookup ( arg ) ;
table = context . getRegistry ( arg ) . lookup ( arg ) ;
table = context . getRegistry ( arg ) . lookup ( arg ) ;
target . createNewFile ( arg ) ;
target . process ( arg ) ;
target = ( ( org . apache . camel . <unk> . InstrumentationProcessor ) target ) . getProcessor ( arg ) ;
target = lookupJndi ( arg ) ;
target = lookupJndi ( arg ) ;
target = <unk> ( arg ) ;
<unk> . decrementAndGet ( arg ) ;
te . getProperties ( arg ) . getTwitter ( arg ) . updateStatus ( arg ) ;
te . getTwitter ( arg ) . <unk> ( arg ) ;
te . getTwitter ( arg ) . updateStatus ( arg ) ;
te . getTwitter ( arg ) . updateStatus ( arg ) ;
tearDownAfterClass ( arg ) ;
<unk> = new File ( arg ) ;
template . requestBody ( arg ) ;
template . sendBody ( arg ) ;
template . sendBody ( arg ) ;
template . sendBody ( arg ) ;
template . sendBody ( arg ) ;
template . sendBody ( arg ) ;
template . sendBody ( arg ) ;
template . sendBody ( arg ) ;
template . sendBody ( arg ) ;
template . sendBody ( arg ) ;
template . sendBody ( arg ) ;
template . sendBody ( arg ) ;
template . sendBody ( arg ) ;
template . sendBody ( arg ) ;
template . sendBody ( arg ) ;
template . sendBodyAndHeader ( arg ) ;
template . sendBodyAndProperty ( arg ) ;
template . sendBodyAndProperty ( arg ) ;
template . <unk> ( arg ) ;
template = endpoint . getTemplate ( arg ) ;
template = endpoint . getTemplate ( arg ) ;
template = new CamelTemplate ( arg ) ;
template = new CamelTemplate ( arg ) ;
template = new CamelTemplate < Exchange > ( arg ) ;
template = new CamelTemplate < Exchange > ( arg ) ;
template = new CamelTemplate < Exchange > ( arg ) ;
test . stream = AbstractBulkApiTestBase . class . getResourceAsStream ( arg ) ;
test . stream = AbstractBulkApiTestBase . class . getResourceAsStream ( arg ) ;
testComponent ( arg ) ;
testComponent ( arg ) ;
testDecryption ( arg ) ;
testDecryption ( arg ) ;
testDecryption ( arg ) ;
testDecryption ( arg ) ;
testDecryption ( arg ) ;
testDecryption ( arg ) ;
testDecryption ( arg ) ;
testEncryption ( arg ) ;
testEncryption ( arg ) ;
testEncryption ( arg ) ;
testEncryption ( arg ) ;
testEncryption ( arg ) ;
testEncryption ( arg ) ;
testEncryption ( arg ) ;
testEncryption ( arg ) ;
<unk> ( arg ) ;
this . ApiVersion = ApiVersion ;
this . Description = Description ;
this . IsActive = IsActive ;
this . NotifyForFields = NotifyForFields ;
this . NotifyForOperations = NotifyForOperations ;
this . Query = Query ;
this . <unk> = FileUtil . normalizePath ( arg ) ;
this . absoluteFilePath = needToNormalize ( arg ) ? FileUtil . normalizePath ( arg ) : absoluteFilePath ;
this . apiVersion = apiVersion ;
this . armor = armor ;
this . <unk> = <unk> ;
this . awaitCreation = awaitCreation ;
this . batchSize = batchSize ;
this . batchTimeout = batchTimeout ;
this . binding = binding ;
this . body = os ;
this . cache . stop ( arg ) ;
this . camelContext = camelContext ;
this . camelContextService = camelContextService ;
this . camelContextService = camelContextService ;
this . canonicalFileName = canonicalFileName ;
this . certFilename = certFilename ;
this . charset = Charset . forName ( arg ) ;
this . charset = charset ;
this . classLoaders = classLoaders ;
this . configuraiton = configuraiton ;
this . consumer . sendExchange ( arg ) ;
this . context = context ;
this . convertLFtoCR = convertLFtoCR ;
this . createdById = createdById ;
this . createdDate = createdDate ;
this . debug = true ;
this . <unk> = instance ;
this . defaultTracer = defaultTracer ;
this . <unk> = delay ;
this . description = description ;
this . destination = destination ;
this . <unk> = <unk> . <unk> ( arg ) ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . endByte1 = endByte1 ;
this . endByte2 = endByte2 ;
this . endpoint = ( RemoteFileEndpoint ) endpoint ;
this . endpoint = endpoint ;
this . endpoint = endpoint ;
this . endpointPath = needToNormalize ( arg ) ? FileUtil . normalizePath ( arg ) : endpointPath ;
this . exception = routeContext . getCamelContext ( arg ) . getRegistry ( arg ) . lookup ( arg ) ;
this . <unk> = strategy . <unk> ( arg ) ;
this . excludes = excludes ;
this . expression = new <unk> ( arg ) ;
this . expression = new <unk> ( arg ) ;
this . file = FileUtil . normalizePath ( arg ) ;
this . file = file ;
this . fileName = FileLanguage . file ( arg ) ;
this . fileName = createFileLangugeExpression ( arg ) ;
this . fileName = fileName ;
this . format = format ;
this . format = format ;
this . ftpClientConfigParameters = ftpClientConfigParameters ;
this . getExceptionHandler ( arg ) . handleException ( arg ) ;
this . getUnitOfWork ( arg ) . <unk> ( arg ) ;
this . iSeries . setGuiAvailable ( arg ) ;
this . id = id ;
this . id = id ;
this . id = id ;
this . <unk> = <unk> ;
this . includes = includes ;
this . initialRedeliveryDelay = initialRedeliveryDelay ;
this . isActive = isActive ;
this . isDeleted = isDeleted ;
this . lastActivityDate = lastActivityDate ;
this . lastModifiedById = lastModifiedById ;
this . lastModifiedDate = lastModifiedDate ;
this . loadBalancer = loadBalancer ;
this . <unk> = new <unk> ( arg ) ;
this . messageRecieved = false ;
this . messageRecieved = false ;
this . methodName = methodName ;
this . move = FileLanguage . file ( arg ) ;
this . move = createFileLangugeExpression ( arg ) ;
this . <unk> = createFileLangugeExpression ( arg ) ;
this . name = name ;
this . name = name ;
this . namingStrategy = namingStrategy ;
this . nextProcessor = output ;
this . notifyForFields = notifyForFields ;
this . notifyForOperations = notifyForOperations ;
this . objectMapper . writeValue ( arg ) ;
this . objects . add ( arg ) ;
this . <unk> . add ( arg ) ;
this . otherwise = new DestinationBuilder < E > ( arg ) ;
this . otherwise = new FromBuilder < E > ( arg ) ;
this . ownerId = ownerId ;
this . pathSeparator = ( pathSeparator != null ? pathSeparator : <unk> ) ;
this . preMove = FileLanguage . file ( arg ) ;
this . preMove = createFileLangugeExpression ( arg ) ;
this . predicate = Predicates . and ( arg ) ;
this . predicate = Predicates . <unk> ( arg ) ;
this . privateKeyFilePassphrase = privateKeyFilePassphrase ;
this . processor = AsyncProcessorTypeConverter . convert ( arg ) ;
this . query = query ;
this . registry = null ;
this . registry = null ;
this . relativeFileName = relativeFileName ;
this . relativeFilePath = needToNormalize ( arg ) ? FileUtil . normalizePath ( arg ) : relativeFilePath ;
this . remoteFileProcessStrategy = remoteFileProcessStrategy ;
this . requestReplyTemplate . <unk> ( arg ) ;
this . requestReplyTemplate . <unk> ( arg ) ;
this . requestTimeout = requestTimeout ;
this . routes = new ArrayList < Route > ( arg ) ;
this . <unk> = getCamelContext ( arg ) . getExecutorServiceManager ( arg ) . newScheduledThreadPool ( arg ) ;
this . scheduler = scheduler ;
this . service = configuration . <unk> ( arg ) ;
this . <unk> = PojoComponent . createProxy ( arg ) ;
this . session . commit ( arg ) ;
this . session . rollback ( arg ) ;
this . session = SessionFactoryImpl . newInstance ( arg ) . createSession ( arg ) ;
this . session = SessionFactoryImpl . newInstance ( arg ) . <unk> ( arg ) . get ( arg ) . createSession ( arg ) ;
this . <unk> = new File ( arg ) ;
this . startByte = startByte ;
this . <unk> = cache ;
this . streamCache = trace ;
this . <unk> = <unk> ;
this . system . <unk> ( arg ) ;
this . system . setGuiAvailable ( arg ) ;
this . systemModstamp = systemModstamp ;
this . target = AsyncProcessorTypeConverter . convert ( arg ) ;
this . target = new DestinationBuilder < E > ( arg ) ;
this . target = new FromBuilder < E > ( arg ) ;
this . target = new FromBuilder < E > ( arg ) ;
this . <unk> = createFileLangugeExpression ( arg ) ;
this . template . sendBody ( arg ) ;
this . timePeriodMillis = timePeriodMillis ;
this . timeout . <unk> ( arg ) ;
this . timer . <unk> ( arg ) ;
this . trace = true ;
this . traceHandler = traceHandler ;
this . transactedRedeliveries = new <unk> ( arg ) ;
this . <unk> = <unk> ;
this . wsAddressingAction = new URI ( arg ) ;
threadPoolDefinition . rejectedPolicy ( arg ) ;
threadPoolDefinition . timeUnit ( arg ) ;
threadPoolExecutor = context . getRegistry ( arg ) . lookup ( arg ) ;
threadPoolExecutor = routeContext . lookup ( arg ) ;
throw ( arg ) ;
throw ( arg ) e ;
throw IOHelper . createIOException ( arg ) ;
throw IOHelper . createIOException ( arg ) ;
throw IOHelper . createIOException ( arg ) ;
throw IOHelper . createIOException ( arg ) ;
throw IOHelper . createIOException ( arg ) ;
throw IOHelper . createIOException ( arg ) ;
throw IOHelper . createIOException ( arg ) ;
throw IOHelper . createIOException ( arg ) ;
throw IOHelper . createIOException ( arg ) ;
throw IOHelper . createIOException ( arg ) ;
throw IOHelper . createIOException ( arg ) ;
throw IOHelper . createIOException ( arg ) ;
throw IOHelper . createIOException ( arg ) ;
throw ObjectHelper . <unk> ( arg ) ;
throw ObjectHelper . wrapRuntimeCamelException ( arg ) ;
throw <unk> ;
throw ex ;
throw ex ;
throw new AssertionError ( arg ) ;
throw new AssertionError ( arg ) ;
throw new <unk> ( arg ) ;
throw new <unk> ( arg ) ;
throw new CamelException ( arg ) ;
throw new CamelException ( arg ) ;
throw new CamelException ( arg ) ;
throw new CamelException ( arg ) ;
throw new CamelException ( arg ) ;
throw new CamelException ( arg ) ;
throw new CamelException ( arg ) ;
throw new CamelException ( arg ) ;
throw new CamelException ( arg ) ;
throw new CamelException ( arg ) ;
throw new <unk> ( arg ) ;
throw new <unk> ( arg ) ;
throw new Exception ( arg ) ;
throw new <unk> ( arg ) ;
throw new IOException ( arg ) ;
throw new IOException ( arg ) ;
throw new IOException ( arg ) ;
throw new IOException ( arg ) ;
throw new IllegalArgumentException ( arg ) ;
throw new IllegalRouteException ( arg ) ;
throw new IllegalStateException ( arg ) ;
throw new IllegalSyntaxException ( arg ) ;
throw new IllegalSyntaxException ( arg ) ;
throw new IllegalSyntaxException ( arg ) ;
throw new <unk> ( arg ) ;
throw new <unk> ( arg ) ;
throw new <unk> ( arg ) ;
throw new <unk> ( arg ) ;
throw new MessagePropertyAccessException ( arg ) ;
throw new MessagePropertyAccessException ( arg ) ;
throw new MessagePropertyAcessException ( arg ) ;
throw new MessagePropertyAcessException ( arg ) ;
throw new <unk> ( arg ) ;
throw new <unk> ( arg ) ;
throw new <unk> ( arg ) ;
throw new <unk> ( arg ) ;
throw new NoTypeConversionAvailableException ( arg ) ;
throw new <unk> ( arg ) ;
throw new RemoteFileOperationFailedException ( arg ) ;
throw new RemoteFileOperationFailedException ( arg ) ;
throw new RemoteFileOperationFailedException ( arg ) ;
throw new RemoteFileOperationFailedException ( arg ) ;
throw new RemoteFileOperationFailedException ( arg ) ;
throw new RemoteFileOperationFailedException ( arg ) ;
throw new RemoteFileOperationFailedException ( arg ) ;
throw new RemoteFileOperationFailedException ( arg ) ;
throw new RemoteFileOperationFailedException ( arg ) ;
throw new RemoteFileOperationFailedException ( arg ) ;
throw new RemoteFileOperationFailedException ( arg ) ;
throw new RemoteFileOperationFailedException ( arg ) ;
throw new RemoteFileOperationFailedException ( arg ) ;
throw new RemoteFileOperationFailedException ( arg ) ;
throw new RemoteFileOperationFailedException ( arg ) ;
throw new RemoteFileOperationFailedException ( arg ) ;
throw new RemoteFileOperationFailedException ( arg ) ;
throw new RemoteFileOperationFailedException ( arg ) ;
throw new RemoteFileOperationFailedException ( arg ) ;
throw new RemoteFileOperationFailedException ( arg ) ;
throw new RemoteFileOperationFailedException ( arg ) ;
throw new RemoteFileOperationFailedException ( arg ) ;
throw new RemoteFileOperationFailedException ( arg ) ;
throw new RemoteFileOperationFailedException ( arg ) ;
throw new RemoteFileOperationFailedException ( arg ) ;
throw new RemoteFileOperationFailedException ( arg ) ;
throw new RemoteFileOperationFailedException ( arg ) ;
throw new RemoteFileOperationFailedException ( arg ) ;
throw new RemoteFileOperationFailedException ( arg ) ;
throw new RemoteFileOperationFailedException ( arg ) ;
throw new RemoteFileOperationFailedException ( arg ) ;
throw new RemoteFileOperationFailedException ( arg ) ;
throw new RemoteFileOperationFailedException ( arg ) ;
throw new RemoteFileOperationFailedException ( arg ) ;
throw new RemoteFileOperationFailedException ( arg ) ;
throw new RemoteFileOperationFailedException ( arg ) ;
throw new RuntimeCamelException ( arg ) ;
throw new RuntimeCamelException ( arg ) ;
throw new RuntimeCamelException ( arg ) ;
throw new RuntimeException ( arg ) ;
throw new RuntimeException ( arg ) ;
throw new <unk> ( arg ) ;
throw new <unk> ( arg ) ;
throw new <unk> ( arg ) ;
throw new RuntimeXmppException ( arg ) ;
throw new RuntimeXmppException ( arg ) ;
throw new <unk> ( arg ) ;
throw new java . <unk> . Exception ( arg ) ;
throw org . apache . camel . util . ObjectHelper . wrapRuntimeCamelException ( arg ) ;
throw org . apache . camel . util . ObjectHelper . wrapRuntimeCamelException ( arg ) ;
throw wrapRuntimeCamelException ( arg ) ;
throw wrapRuntimeCamelException ( arg ) ;
throw wrapRuntimeCamelException ( arg ) ;
time += delay ;
time = longValue . longValue ( arg ) ;
timeUnit = _defaultProfile . getTimeUnit ( arg ) ;
timeUnit = defaultProfile2 . getTimeUnit ( arg ) ;
timeout = ftpClientParameters . remove ( arg ) ;
timeout = ftpClientParameters . remove ( arg ) ;
timeoutMap . put ( arg ) ;
timeoutMap . put ( arg ) ;
<unk> = routeContext . getCamelContext ( arg ) . getRegistry ( arg ) . lookup ( arg ) ;
timer . schedule ( arg ) ;
timer = component . <unk> ( arg ) ;
to = renameFile ( arg ) ;
to = renameFile ( arg ) ;
total ++ ;
traceEventProducer . process ( arg ) ;
traceEventProducer = null ;
traceState = <unk> ( arg ) ;
tracer . <unk> ( arg ) ;
tracer . setDestination ( arg ) ;
tracer . setDestination ( arg ) ;
tracer . setLevel ( arg ) ;
transactedRedeliveries . reset ( arg ) ;
transform ( arg ) ;
trimRecordOnUnmarshal = <unk> . trimRecordOnUnmarshal ( arg ) ;
<unk> = contextProps . get ( arg ) ;
tuow . <unk> ( arg ) ;
tuow . <unk> ( arg ) ;
<unk> = new <unk> ( arg ) ;
type = <unk> . findClass ( arg ) ;
type = <unk> . findClass ( arg ) ;
type = <unk> . findClass ( arg ) ;
type = <unk> . findClass ( arg ) ;
type = <unk> . findClass ( arg ) ;
type = routeContext . getCamelContext ( arg ) . <unk> ( arg ) ;
<unk> = answer ;
typeConvertionFailed = e ;
typeConvertionFailed = e ;
unexpected = new RuntimeCamelException ( arg ) ;
unexpected = new RuntimeCamelException ( arg ) ;
updateStatus ( arg ) ;
uri = UnsafeUriCharactersEncoder . encode ( arg ) ;
uri = UnsafeUriCharactersEncoder . encode ( arg ) ;
uri = UnsafeUriCharactersEncoder . encode ( arg ) ;
uri = UnsafeUriCharactersEncoder . encode ( arg ) ;
uri = endpoint . getHttpUri ( arg ) . toString ( arg ) ;
uri = endpoint . getHttpUri ( arg ) . toString ( arg ) ;
uri = uri . <unk> ( arg ) ;
url = <unk> ( arg ) ;
urls [ i ] = file . toURL ( arg ) ;
urls [ i ] = file . toURL ( arg ) ;
usePlatformMBeanServer = flag ;
usePlatformMBeanServer = value ;
userDir = FileUtil . getUserDir ( arg ) . toString ( arg ) ;
userDir = FileUtil . getUserDir ( arg ) . toURI ( arg ) . toString ( arg ) ;
users = ( List < String > ) future . get ( arg ) ;
uuid = new DefaultUuidGenerator ( arg ) . generateUuid ( arg ) ;
uuid = new <unk> ( arg ) . generateUuid ( arg ) ;
uuidGenerator = UuidGenerator . get ( arg ) ;
uuidGenerator = new DefaultUuidGenerator ( arg ) ;
uuidGenerator = new UuidGenerator ( arg ) ;
uuidGenerator = new UuidGenerator ( arg ) ;
validateUnknownParameters ( arg ) ;
validateUnknownParameters ( arg ) ;
<unk> . <unk> ( arg ) ;
value = ( String ) exchange . getIn ( arg ) . getHeader ( arg ) ;
value = ( String ) values . get ( arg ) ;
value = ( String ) values . get ( arg ) ;
value = ExchangeHelper . convertToType ( arg ) ;
value = converter . convertTo ( arg ) ;
value = exchange . getContext ( arg ) . getTypeConverter ( arg ) . mandatoryConvertTo ( arg ) ;
value = getDefaultValueforPrimitive ( arg ) ;
valueFormated = format . format ( arg ) ;
valueFormated = format . format ( arg ) ;
<unk> . <unk> ( arg ) ;
<unk> = component . <unk> ( arg ) ;
verify ( arg ) ;
verify ( arg ) ;
verify ( arg ) ;
verify ( arg ) ;
verify ( arg ) ;
verify ( arg ) ;
verify ( arg ) ;
verify ( arg ) ;
verify ( arg ) ;
verify ( arg ) ;
verify ( arg ) ;
verifyAll ( arg ) ;
verifyAll ( arg ) ;
verifyAll ( arg ) ;
<unk> ( arg ) ;
<unk> = new ArrayList ( arg ) ;
visitedURLs . clear ( arg ) ;
visitedURLs . clear ( arg ) ;
waitForMessages ( arg ) ;
waitForMessages ( arg ) ;
<unk> = true ;
<unk> = true ;
webServiceTemplate = ( WebServiceTemplate ) applicationContext . getBean ( arg ) ;
webServiceTemplate = ( WebServiceTemplate ) applicationContext . getBean ( arg ) ;
webServiceTemplate = ( WebServiceTemplate ) applicationContext . getBean ( arg ) ;
websocketConsumer . sendExchange ( arg ) ;
websocketConsumer . sendExchange ( arg ) ;
websocketConsumer . sendExchange ( arg ) ;
when . addOutput ( arg ) ;
when . setExpression ( arg ) ;
<unk> = new LinkedBlockingQueue < Runnable > ( arg ) ;
<unk> . start ( arg ) ;
<unk> = ( int ) ( Math . random ( arg ) * <unk> ) ;
x509HostnameVerifier = this . x509HostnameVerifier ;
<unk> = camelContext . getRegistry ( arg ) . lookup ( arg ) ;
<unk> . <unk> ( arg ) ;
