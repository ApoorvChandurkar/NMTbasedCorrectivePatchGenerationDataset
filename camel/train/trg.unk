this . map . putAll ( arg ) ;
queue . put ( arg ) ;
<unk> . <unk> ( arg ) ;
camelContext . start ( arg ) ;
camelContext . start ( arg ) ;
( ( HttpEntityEnclosingRequestBase ) httpRequest ) . setEntity ( arg ) ;
( ( HttpEntityEnclosingRequestBase ) method ) . setEntity ( arg ) ;
listenerContainer . destroy ( arg ) ;
getEndpoint ( arg ) . addConsumer ( arg ) ;
getEndpoint ( arg ) . removeConsumer ( arg ) ;
( ( ModelAwareFilter < ? > ) filter ) . apply ( arg ) ;
( ( ModelAwareFilter < ? > ) filter ) . apply ( arg ) ;
( ( ModelAwareFilter < ? > ) getFilter ( arg ) ) . apply ( arg ) ;
( ( ModelAwareFilter < ? > ) getFilter ( arg ) ) . apply ( arg ) ;
( ( RemoteFileOperations ) operations ) . disconnect ( arg ) ;
getOperations ( arg ) . disconnect ( arg ) ;
getEndpoint ( arg ) . connect ( arg ) ;
getEndpoint ( arg ) . disconnect ( arg ) ;
getEndpoint ( arg ) . addConsumer ( arg ) ;
getEndpoint ( arg ) . removeConsumer ( arg ) ;
getEndpoint ( arg ) . removeConsumer ( arg ) ;
getRouteboxEndpoint ( arg ) . getCamelContext ( arg ) . getExecutorServiceStrategy ( arg ) . shutdown ( arg ) ;
message . <unk> ( arg ) ;
( ( SubmitOrderedCompletionService < ? > ) <unk> ) . <unk> ( arg ) ;
( ( TraceHandlerTestHandler ) ( ( Tracer ) context . <unk> ( arg ) ) . getTraceHandlers ( arg ) . get ( arg ) ) . <unk> ( arg ) ;
getComponent ( arg ) . addServlet ( arg ) ;
DeadLetterChannel answer = new DeadLetterChannel ( arg ) ;
Echo service = ProxyHelper . createProxy ( arg ) ;
Echo service = ProxyHelper . createProxy ( arg ) ;
Echo service = ProxyHelper . createProxy ( arg ) ;
Iterator < PGPPublicKeyRing > keyRingIter = ( Iterator < PGPPublicKeyRing > ) pgpSec . getKeyRings ( arg ) ;
Iterator < PGPSecretKey > keyIter = ( Iterator < PGPSecretKey > ) keyRing . getSecretKeys ( arg ) ;
Iterator < PGPSecretKeyRing > keyRingIter = ( Iterator < PGPSecretKeyRing > ) pgpSec . getKeyRings ( arg ) ;
JSONProvider < ? > <unk> = new JSONProvider < Object > ( arg ) ;
List < Exchange > list = endpoint . getExchanges ( arg ) ;
List < Exchange > list = endpoint . getExchanges ( arg ) ;
List < Exchange > list = endpoint . getExchanges ( arg ) ;
List < ProcessorDefinition < ? >> children = defn . getOutputs ( arg ) ;
RouteDefinition definition = context . getRouteDefinition ( arg ) ;
RouteDefinition definition = context . getRouteDefinition ( arg ) ;
Set < String > ids = blueprintContainer . <unk> ( arg ) ;
TransactionErrorHandler answer = new TransactionErrorHandler ( arg ) ;
<unk> <unk> ;
DefaultMessageListenerContainer container = new <unk> ( arg ) ;
DefaultMessageListenerContainer container = config . <unk> ( arg ) ? ( replyToSelectorName != null ) ? new <unk> ( arg ) : new <unk> ( arg ) : ( replyToSelectorName != null ) ? new DefaultMessageListenerContainer ( arg ) : new <unk> ( arg ) ;
DefaultMessageListenerContainer listenerContainer = createMessageListenerContainer ( arg ) ;
AbstractMessageListenerContainer listenerContainer = configuration . createMessageListenerContainer ( arg ) ;
AbstractPhaseInterceptor < ? > interceptor = ( AbstractPhaseInterceptor < ? > ) <unk> ;
<unk> <unk> = context . getRegistry ( arg ) . lookupByNameAndType ( arg ) ;
this . age = age ;
<unk> repository = <unk> ( arg ) ;
AggregateDefinition agg = from ( arg ) . aggregate ( arg ) ;
AggregateDefinition answer = new AggregateDefinition ( arg ) ;
AggregateDefinition answer = new AggregateDefinition ( arg ) ;
AggregateDefinition answer = new AggregateDefinition ( arg ) ;
AggregateDefinition answer = new AggregateDefinition ( arg ) ;
AggregateDefinition answer = new AggregateDefinition ( arg ) ;
<unk> agg = from ( arg ) . aggregate ( arg ) ;
<unk> client = new <unk> ( arg ) ;
<unk> = new <unk> ( arg ) ;
<unk> client = new <unk> ( arg ) ;
<unk> client = new <unk> ( arg ) ;
<unk> client = new <unk> ( arg ) ;
List < Annotation > [ ] parametersAnnotations = <unk> ( arg ) ;
Annotation [ ] parameterAnnotations = parametersAnnotations [ i ] . toArray ( arg ) ;
AbstractApplicationContext ac = new ClassPathXmlApplicationContext ( arg ) ;
AbstractApplicationContext ac = new ClassPathXmlApplicationContext ( arg ) ;
AbstractApplicationContext ac = new ClassPathXmlApplicationContext ( arg ) ;
AbstractApplicationContext appContext = new ClassPathXmlApplicationContext ( arg ) ;
applicationContext = new ClassPathXmlApplicationContext ( arg ) ;
applicationContext = new ClassPathXmlApplicationContext ( arg ) ;
applicationContext = new ClassPathXmlApplicationContext ( arg ) ;
applicationContext = new ClassPathXmlApplicationContext ( arg ) ;
applicationContext = new ClassPathXmlApplicationContext ( arg ) ;
applicationContext = new ClassPathXmlApplicationContext ( arg ) ;
AbstractApplicationContext context = new ClassPathXmlApplicationContext ( arg ) ;
AbstractApplicationContext context = new ClassPathXmlApplicationContext ( arg ) ;
AbstractApplicationContext context = new ClassPathXmlApplicationContext ( arg ) ;
AbstractApplicationContext context = new ClassPathXmlApplicationContext ( arg ) ;
AbstractApplicationContext context = new ClassPathXmlApplicationContext ( arg ) ;
AbstractApplicationContext context = new ClassPathXmlApplicationContext ( arg ) ;
assertIsInstanceOf ( arg ) ;
List < ? > list = ( List < ? > ) field . get ( arg ) ;
List < CamelContext > <unk> = new ArrayList < CamelContext > ( arg ) ;
List < ClassMap > <unk> = new ArrayList < ClassMap > ( arg ) ;
List < HashMap < String , Object >> data = new ArrayList < HashMap < String , Object >> ( arg ) ;
List < HashMap < String , Object >> data = out . getOut ( arg ) . getBody ( arg ) ;
List < Integer > list = new ArrayList < Integer > ( arg ) ;
List < InternetAddress > <unk> = new ArrayList < InternetAddress > ( arg ) ;
List < InternetAddress > <unk> = new ArrayList < InternetAddress > ( arg ) ;
List < Item > expected = <unk> ( arg ) ;
List < Item > <unk> = new ArrayList < Item > ( arg ) ;
List < Map < String , Object >> input = new ArrayList < Map < String , Object >> ( arg ) ;
List < Map < String , Object >> input = new ArrayList < Map < String , Object >> ( arg ) ;
List < Map < String , Object >> input = new ArrayList < Map < String , Object >> ( arg ) ;
List < Object > <unk> = new ArrayList < Object > ( arg ) ;
List < Processor > pipe = new ArrayList < Processor > ( arg ) ;
List < Route > routes = new ArrayList < Route > ( arg ) ;
ArrayList < BuilderAction > <unk> = new ArrayList < BuilderAction > ( arg ) ;
ArrayList < BuilderStatement > routes = new ArrayList < BuilderStatement > ( arg ) ;
List < RouteDefinition > <unk> = new ArrayList < RouteDefinition > ( arg ) ;
List < RouteDefinition > routes = ( List < RouteDefinition > ) applicationContext . getBean ( arg ) ;
List < String > args = new ArrayList < String > ( arg ) ;
List < String > args = new ArrayList < String > ( arg ) ;
List < String > cl = new ArrayList < String > ( arg ) ;
List < String > expected = new ArrayList < String > ( arg ) ;
List < String > expected = new ArrayList < String > ( arg ) ;
List < String > expected = new ArrayList < String > ( arg ) ;
List < String > expected = new ArrayList < String > ( arg ) ;
List < String > expected = new ArrayList < String > ( arg ) ;
List < String > expected = new ArrayList < String > ( arg ) ;
List < String > expected = new ArrayList < String > ( arg ) ;
List < String > expected = new ArrayList < String > ( arg ) ;
List < String > expected = new ArrayList < String > ( arg ) ;
List < String > expected = new ArrayList < String > ( arg ) ;
List < String > expected = new ArrayList < String > ( arg ) ;
List < String > expected = new ArrayList < String > ( arg ) ;
List < String > expected = new ArrayList < String > ( arg ) ;
List < String > expected = new ArrayList < String > ( arg ) ;
List < String > expected = new ArrayList < String > ( arg ) ;
List < String > expected = new ArrayList < String > ( arg ) ;
List < String > expected = new ArrayList < String > ( arg ) ;
List < String > expected = new ArrayList < String > ( arg ) ;
List < String > expected = new ArrayList < String > ( arg ) ;
List < String > expected = new ArrayList < String > ( arg ) ;
List < String > expected = new ArrayList < String > ( arg ) ;
List < String > expected = new ArrayList < String > ( arg ) ;
List < String > expected = new ArrayList < String > ( arg ) ;
List < String > expected = new ArrayList < String > ( arg ) ;
List < String > expected = new ArrayList < String > ( arg ) ;
List < String > expected = new ArrayList < String > ( arg ) ;
List < String > result = new ArrayList < String > ( arg ) ;
List < T > result = new ArrayList < T > ( arg ) ;
ArrayList < String > expected = new ArrayList < String > ( arg ) ;
ArrayList < String > expected = new ArrayList < String > ( arg ) ;
ArrayList < String > expected = new ArrayList < String > ( arg ) ;
ArrayList < String > expected = new ArrayList < String > ( arg ) ;
List < String > list = new ArrayList < String > ( arg ) ;
Artifact classPathElement = iter . next ( arg ) ;
Artifact classPathElement = iter . next ( arg ) ;
Artifact classPathElement = iter . next ( arg ) ;
Artifact classPathElement = iter . next ( arg ) ;
<unk> ( arg ) ;
assertEquals ( arg ) ;
assertEquals ( arg ) ;
assertEquals ( arg ) ;
assertEquals ( arg ) ;
assertEquals ( arg ) ;
assertEquals ( arg ) ;
assertEquals ( arg ) ;
assertEquals ( arg ) ;
assertEquals ( arg ) ;
assertEquals ( arg ) ;
assertEquals ( arg ) ;
assertEquals ( arg ) ;
assertEquals ( arg ) ;
assertEquals ( arg ) ;
assertEquals ( arg ) ;
assertEquals ( arg ) ;
assertEquals ( arg ) ;
assertEquals ( arg ) ;
assertEquals ( arg ) ;
assertEquals ( arg ) ;
assertEquals ( arg ) ;
assertEquals ( arg ) ;
assertEquals ( arg ) ;
assertEquals ( arg ) ;
assertEquals ( arg ) ;
assertEquals ( arg ) ;
assertEquals ( arg ) ;
assertEquals ( arg ) ;
assertEquals ( arg ) ;
assertEquals ( arg ) ;
assertEquals ( arg ) ;
assertEquals ( arg ) ;
assertEquals ( arg ) ;
assertEquals ( arg ) ;
assertEquals ( arg ) ;
assertEquals ( arg ) ;
assertEquals ( arg ) ;
assertEquals ( arg ) ;
assertEquals ( arg ) ;
assertEquals ( arg ) ;
assertEquals ( arg ) ;
assertEquals ( arg ) ;
assertEquals ( arg ) ;
assertEquals ( arg ) ;
assertEquals ( arg ) ;
assertEquals ( arg ) ;
assertNotNull ( arg ) ;
assertNotNull ( arg ) ;
assertNotNull ( arg ) ;
assertNotNull ( arg ) ;
assertNull ( arg ) ;
assertNull ( arg ) ;
<unk> ( arg ) ;
assertTrue ( arg ) ;
assertTrue ( arg ) ;
assertTrue ( arg ) ;
assertTrue ( arg ) ;
assertTrue ( arg ) ;
assertTrue ( arg ) ;
assertTrue ( arg ) ;
assertTrue ( arg ) ;
assertTrue ( arg ) ;
assertTrue ( arg ) ;
assertTrue ( arg ) ;
assertTrue ( arg ) ;
assertTrue ( arg ) ;
fail ( arg ) ;
fail ( arg ) ;
fail ( arg ) ;
fail ( arg ) ;
fail ( arg ) ;
fail ( arg ) ;
fail ( arg ) ;
AsyncProcessor <unk> = AsyncProcessorConverterHelper . convert ( arg ) ;
AsyncProcessor albp = AsyncProcessorConverterHelper . convert ( arg ) ;
AsyncProcessor albp = AsyncProcessorConverterHelper . convert ( arg ) ;
AsyncProcessor ap = AsyncProcessorConverterHelper . convert ( arg ) ;
AsyncProcessor ap = AsyncProcessorConverterHelper . convert ( arg ) ;
AsyncProcessor ap = AsyncProcessorConverterHelper . convert ( arg ) ;
AsyncProcessor async = AsyncProcessorConverterHelper . convert ( arg ) ;
AsyncProcessor async = AsyncProcessorConverterHelper . convert ( arg ) ;
AsyncProcessor async = AsyncProcessorConverterHelper . convert ( arg ) ;
AsyncProcessor async = AsyncProcessorConverterHelper . convert ( arg ) ;
AsyncProcessor asyncProcessor = AsyncProcessorConverterHelper . convert ( arg ) ;
AsyncProcessor processor = AsyncProcessorConverterHelper . convert ( arg ) ;
AsyncProcessor processor = AsyncProcessorConverterHelper . convert ( arg ) ;
AsyncProcessor processor = AsyncProcessorConverterHelper . convert ( arg ) ;
getProcessor ( arg ) . process ( arg ) ;
getProcessor ( arg ) . process ( arg ) ;
<unk> <unk> = newExchange . getIn ( arg ) . getBody ( arg ) ;
BaseDataQueue queue = queueService . getDataQueue ( arg ) ;
BaseDataQueue queue = queueService . getDataQueue ( arg ) ;
BeanDefinition definition = <unk> . <unk> ( arg ) ;
definition = <unk> . parse ( arg ) ;
BeanExchange exchange = ( BeanExchange ) getEndpoint ( arg ) . createExchange ( arg ) ;
<unk> beanHolder ;
BeanDefinition answer = new BeanDefinition ( arg ) ;
BeanDefinition answer = new BeanDefinition ( arg ) ;
BeanDefinition answer = new BeanDefinition ( arg ) ;
BeanDefinition answer = new BeanDefinition ( arg ) ;
BeanDefinition answer = new BeanDefinition ( arg ) ;
BeanDefinition answer = new BeanDefinition ( arg ) ;
BigDecimal thePrice = <unk> . getValue ( arg ) ;
BigDecimal thePrice = new BigDecimal ( arg ) ;
<unk> < Node > <unk> ;
<unk> <unk> = message . get ( arg ) ;
<unk> <unk> = <unk> ;
BindyCsvFactory factory = ( BindyCsvFactory ) getFactory ( arg ) ;
BindyCsvFactory factory = ( BindyCsvFactory ) getFactory ( arg ) ;
Order order = ( Order ) map . values ( arg ) . iterator ( arg ) . next ( arg ) ;
BindyFixedLengthFactory factory = ( BindyFixedLengthFactory ) getFactory ( arg ) ;
BindyFixedLengthFactory factory = ( BindyFixedLengthFactory ) getFactory ( arg ) ;
<unk> factory = getFactory ( arg ) ;
<unk> <unk> = blobStore . <unk> ( arg ) . build ( arg ) ;
<unk> blobStore = <unk> ( arg ) ;
BlockingQueue < SedaEndpoint . Entry < E >> blockingQueue = ( BlockingQueue < SedaEndpoint . Entry < E >> ) getBlockingQueue ( arg ) ;
BlockingQueue < E > queue = component . createQueue ( arg ) ;
BlockingQueue < Entry > answer = queues . get ( arg ) ;
BlockingQueue < Exchange > answer = queues . get ( arg ) ;
BlockingQueue < Entry < E >> answer = queues . get ( arg ) ;
BlockingQueue < Runnable > workQueue ;
BlockingQueue < Exchange > blockingQueue = getBlockingQueue ( arg ) ;
map . put ( arg ) ;
BodyPart <unk> ;
BodyPart <unk> ;
Boolean sanitize = camelContext != null && camelContext . getManagementStrategy ( arg ) . getManagementAgent ( arg ) . getMask ( arg ) ;
Boolean <unk> = getAndRemoveParameter ( arg ) ;
output = new <unk> ( arg ) ;
BufferedReader br = IOHelper . buffered ( arg ) ;
BufferedReader br = IOHelper . buffered ( arg ) ;
BufferedReader br = IOHelper . buffered ( arg ) ;
BufferedReader br = IOHelper . buffered ( arg ) ;
BufferedReader br = IOHelper . buffered ( arg ) ;
BufferedReader br = IOHelper . buffered ( arg ) ;
BufferedReader in = IOHelper . buffered ( arg ) ;
BufferedReader in = IOHelper . buffered ( arg ) ;
BufferedReader in = IOHelper . buffered ( arg ) ;
BufferedReader input = IOHelper . buffered ( arg ) ;
BufferedReader <unk> = IOHelper . buffered ( arg ) ;
BufferedReader reader = IOHelper . buffered ( arg ) ;
BufferedReader reader = IOHelper . buffered ( arg ) ;
BufferedReader reader = IOHelper . buffered ( arg ) ;
BufferedReader reader = IOHelper . buffered ( arg ) ;
BufferedReader reader = IOHelper . buffered ( arg ) ;
BufferedReader reader = IOHelper . buffered ( arg ) ;
BufferedReader reader = IOHelper . buffered ( arg ) ;
BufferedReader <unk> = IOHelper . buffered ( arg ) ;
BufferedWriter <unk> = IOHelper . buffered ( arg ) ;
BufferedWriter <unk> = IOHelper . buffered ( arg ) ;
Bus bus = applicationContext . getBean ( arg ) ;
Bus bus = ctx . getBean ( arg ) ;
Bus bus = SpringBusFactory . newInstance ( arg ) . createBus ( arg ) ;
Bus bus = SpringBusFactory . newInstance ( arg ) . createBus ( arg ) ;
Bus bus = SpringBusFactory . newInstance ( arg ) . createBus ( arg ) ;
bus = factory . createBus ( arg ) ;
BusFactory . <unk> ( arg ) ;
BusFactory . <unk> ( arg ) ;
IoBuffer buf = IoBuffer . <unk> ( arg ) . <unk> ( arg ) ;
<unk> <unk> = ExchangeHelper . getMandatoryHeader ( arg ) ;
<unk> <unk> = conv . toBytesSource ( arg ) ;
DefaultCamelContextNameStrategy . setCounter ( arg ) ;
counter ++ ;
<unk> . incrementAndGet ( arg ) ;
<unk> conf = getConfig ( arg ) ;
if ( <unk> ) {
<unk> cache ;
<unk> endpoint = context . getEndpoint ( arg ) ;
<unk> = new <unk> ( arg ) ;
cos = new CachedOutputStream ( arg ) ;
cos = new CachedOutputStream ( arg ) ;
Calendar cal = Calendar . getInstance ( arg ) ;
Calendar cal = Calendar . getInstance ( arg ) ;
Calendar cal = Calendar . getInstance ( arg ) ;
Calendar cal = Calendar . getInstance ( arg ) ;
Calendar cal = Calendar . getInstance ( arg ) ;
Calendar cal = Calendar . getInstance ( arg ) ;
Calendar cal = Calendar . getInstance ( arg ) ;
Calendar cal = Calendar . getInstance ( arg ) ;
CamelTemplate template = new CamelTemplate ( arg ) ;
CamelContext < E > c = getContainer ( arg ) ;
CamelContext container = new CamelContext ( arg ) ;
CamelContext container = new CamelContext ( arg ) ;
CamelContext container = new CamelContext ( arg ) ;
CamelContext < E > c = getContext ( arg ) ;
CamelContext context = super . getContext ( arg ) ;
<unk> ( arg ) ;
CamelContext camel = context . getBean ( arg ) ;
CamelContext camel = context . getBean ( arg ) ;
CamelContext camelContext = applicationContext . getBean ( arg ) ;
CamelContext camelContext = context . getBean ( arg ) ;
CamelContext camelContext = ctx . getBean ( arg ) ;
camelContext = SpringCamelContext . springCamelContext ( arg ) ;
CamelContext camelContext = getCamelContext ( arg ) ;
ModelCamelContext camelContext = getContext ( arg ) ;
ModelCamelContext camelContext = getContext ( arg ) ;
CamelContext camelContext = routeContext . getCamelContext ( arg ) ;
CamelContext container = new DefaultCamelContext < Exchange > ( arg ) ;
CamelContext container = new DefaultCamelContext < Exchange > ( arg ) ;
CamelContext camelContext = new DefaultCamelContext ( arg ) ;
CamelContext container = new DefaultCamelContext ( arg ) ;
CamelContext container = new DefaultCamelContext ( arg ) ;
CamelContext container = new DefaultCamelContext ( arg ) ;
CamelContext container = new DefaultCamelContext ( arg ) ;
SpringCamelContext context = ac . getBeansOfType ( arg ) . values ( arg ) . iterator ( arg ) . next ( arg ) ;
CamelContext context = applicationContext . getBean ( arg ) ;
CamelContext context = applicationContext . getBean ( arg ) ;
CamelContext context = applicationContext . getBean ( arg ) ;
CamelContext context = applicationContext . getBean ( arg ) ;
CamelContext context = applicationContext . getBean ( arg ) ;
CamelContext context = applicationContext . getBean ( arg ) ;
SpringCamelContext context = applicationContext . getBeansOfType ( arg ) . values ( arg ) . iterator ( arg ) . next ( arg ) ;
SpringCamelContext context = applicationContext . getBeansOfType ( arg ) . values ( arg ) . iterator ( arg ) . next ( arg ) ;
CamelContext context = super . createCamelContext ( arg ) ;
ModelCamelContext context = super . getContext ( arg ) ;
RouteContainer context = assertIsInstanceOf ( arg ) ;
RouteContainer context = <unk> ( arg ) ;
RoutesType context = new RoutesType ( arg ) ;
RoutesType context = new RoutesType ( arg ) ;
<unk> <unk> = resolveAndRemoveReferenceParameter ( arg ) ;
CamelInternalProcessor . <unk> task = internal . getAdvice ( arg ) ;
CamelInternalProcessor . <unk> task = internal . getAdvice ( arg ) ;
DefaultCamelBeanPostProcessor <unk> = new DefaultCamelBeanPostProcessor ( arg ) ;
CamelServlet answer ;
CamelServlet camelServlet = provider ;
CamelServlet camelServlet = new CamelServlet ( arg ) ;
CamelServlet camelServlet = new CamelContinuationServlet ( arg ) ;
CamelServletService servlet = getCamelServletService ( arg ) ;
CamelServletService servlet = getCamelServletService ( arg ) ;
CamelSourceAdapter <unk> = context . getBean ( arg ) ;
CamelSourceAdapter camelSourceB = context . getBean ( arg ) ;
CamelSourceAdapter camelSourceB = ( CamelSourceAdapter ) context . getBean ( arg ) ;
ContextName annotation = <unk> . getAnnotation ( arg ) ;
ContextName <unk> = <unk> . <unk> ( arg ) . getAnnotation ( arg ) ;
CamelTargetAdapter <unk> = context . getBean ( arg ) ;
CamelTargetAdapter <unk> = context . getBean ( arg ) ;
ProducerTemplate < Exchange > template = context . createProducerTemplate ( arg ) ;
ProducerTemplate < Exchange > template = context . createProducerTemplate ( arg ) ;
ProducerTemplate < JmsExchange > camelTemplate = ( ProducerTemplate ) context . getBean ( arg ) ;
ProducerTemplate template = bean . getTemplate ( arg ) ;
ProducerTemplate template = main . <unk> ( arg ) ;
ProducerTemplate template = context . createProducerTemplate ( arg ) ;
ProducerTemplate template = context . createProducerTemplate ( arg ) ;
ProducerTemplate template = context . createProducerTemplate ( arg ) ;
tearDownAfterClass ( arg ) ;
<unk> <unk> = context . getRegistry ( arg ) . lookupByNameAndType ( arg ) ;
channel = <unk> . <unk> ( arg ) ;
channel = connectionlessBootstrap . bind ( arg ) ;
<unk> channel = <unk> ( arg ) ;
<unk> channel = assertIsInstanceOf ( arg ) ;
<unk> buf = <unk> . <unk> ( arg ) ;
<unk> listener = <unk> ( arg ) ;
privateChat = connection . <unk> ( arg ) . getThreadChat ( arg ) ;
ChoiceBuilder answer = new ChoiceBuilder ( arg ) ;
WhenBuilder < E > answer = new WhenBuilder < E > ( arg ) ;
<unk> choice = assertOneProcessorInstanceOf ( arg ) ;
clazz = loader . loadClass ( arg ) ;
Class < ? > <unk> = getEndpoint ( arg ) . <unk> ( arg ) ;
Class < ? > type = context . getClassResolver ( arg ) . resolveClass ( arg ) ;
Class < T > type = bundle . loadClass ( arg ) ;
Class < <unk> < <unk> >> clazz = CastUtils . cast ( arg ) ;
Class < Exchange > <unk> = getExchangeType ( arg ) ;
Class < Throwable > type = context . getClassResolver ( arg ) . resolveMandatoryClass ( arg ) ;
Class < ? > type = bundle . loadClass ( arg ) ;
Class < ? > type = bundle . loadClass ( arg ) ;
Class < ? > [ ] answer = new Class [ objects . length ] ;
Class < ? > [ ] answer = new Class [ parameters . length ] ;
Class < ? > [ ] cinterfaces = new Class [ interfaces . length ] ;
Class < ? > [ ] interfaces = new Class [ endpoint . <unk> ( arg ) . size ( arg ) ] ;
Class < ? > [ ] <unk> = new Class [ <unk> ] ;
Class < T > answer = CastUtils . cast ( arg ) ;
Class < ? > answer = resolveClass ( arg ) ;
Class < ? > answer = resolveClass ( arg ) ;
Class < ? > <unk> = body . getClass ( arg ) ;
Class < ? > c = Class . <unk> ( arg ) ;
Class < ? > cl = <unk> . class ;
Class < ? > cl = null ;
Class < ? > <unk> = cl . getClass ( arg ) ;
Class < ? > clazz ;
Class < ? > clazz = ( ( <unk> ) <unk> ) . <unk> ( arg ) ;
Class clazz = classMap . get ( arg ) ;
Class clazz = classResolver . resolveClass ( arg ) ;
Class < ? > clazz = bean . getClass ( arg ) ;
Class < ? > clazz = bean . getClass ( arg ) ;
Class < ? > clazz = blueprintContainer . loadClass ( arg ) ;
Class < ? > clazz = bundle . loadClass ( arg ) ;
Class < ? > clazz = bundle . loadClass ( arg ) ;
Class < ? > clazz = classLoader . <unk> ( arg ) ;
Class < ? > clazz = classMap . get ( arg ) ;
Class < ? > clazz = classMap . get ( arg ) ;
Class < ? > clazz = classResolver . resolveClass ( arg ) ;
Class < ? > clazz = context . getClassResolver ( arg ) . resolveClass ( arg ) ;
Class < ? > clazz = <unk> ( arg ) ;
Class < ? > clazz = entry . getKey ( arg ) . <unk> ( arg ) ;
Class < ? > clazz = findClass ( arg ) ;
Class < ? > clazz = finder . findClass ( arg ) ;
Class < ? > clazz = getCamelContext ( arg ) . getClassResolver ( arg ) . resolveMandatoryClass ( arg ) ;
Class < ? > clazz = getCamelContext ( arg ) . getTypeConverter ( arg ) . mandatoryConvertTo ( arg ) ;
Class < ? > clazz = resolver . resolveClass ( arg ) ;
Class < ? > clazz = resolver . resolveClass ( arg ) ;
Class < ? > clazz = resolver . resolveClass ( arg ) ;
Class < ? > clazz = resolver . resolveMandatoryClass ( arg ) ;
Class < ? > clazz = resolver . resolveMandatoryClass ( arg ) ;
Class < ? > clazz = target . getClass ( arg ) ;
Class < ? > clazz = target . getClass ( arg ) ;
Class < ? > clazz = target . getClass ( arg ) ;
Class < ? > cls = bundle . loadClass ( arg ) ;
Class < Relationship > <unk> = Relationship . class ;
Class < ? > excludedRoute = excludeRoute ( arg ) ;
Class < ? > excludedRoute = excludeRoute ( arg ) ;
Class < ? > excludedRoute = excludeRoute ( arg ) ;
Class < ? > factory = null ;
Class <unk> = getCamelContext ( arg ) . getClassResolver ( arg ) . resolveClass ( arg ) ;
Class < ? > foo = <unk> . class . getClass ( arg ) ;
Class < ? > from = <unk> . <unk> ( arg ) [ 0 ] . getClass ( arg ) ;
Class < ? > from = file . getBody ( arg ) . getClass ( arg ) ;
Class fromType = null ;
Class fromType = Object . class ;
Class < ? > fromType = method . getParameterTypes ( arg ) [ 0 ] ;
Class < ? > <unk> = genericFile . getFile ( arg ) . getClass ( arg ) ;
Class < ? > key = type ;
Class < ? > key = value . getClass ( arg ) ;
Class < ? > <unk> = <unk> ( arg ) ;
Class < ? > <unk> = <unk> ( arg ) ;
Class < ? > <unk> = obj == null ? null : obj . getClass ( arg ) ;
Class < ? > parameterType = setter . getParameterTypes ( arg ) [ 0 ] ;
Class < ? > parameterType = setter . getParameterTypes ( arg ) [ 0 ] ;
Class < ? > <unk> = inMessage . getHeader ( arg ) ;
Class < ? > <unk> = exchange . getContext ( arg ) . getClassResolver ( arg ) . resolveClass ( arg ) ;
Class < ? > <unk> = classResolver . resolveClass ( arg ) ;
Class < ? > <unk> = rowClassName == null || rowClassName . isEmpty ( arg ) ? String . class : message . getExchange ( arg ) . getContext ( arg ) . getClassResolver ( arg ) . resolveClass ( arg ) ;
Class < ? > <unk> = value . getClass ( arg ) ;
Class < ? > <unk> = type . getSuperclass ( arg ) ;
Class < ? > <unk> = routeContext . getCamelContext ( arg ) . getClassResolver ( arg ) . resolveClass ( arg ) ;
Class < ? > <unk> = method . <unk> ( arg ) ;
Class < ? > <unk> = routeContext . getCamelContext ( arg ) . getClassResolver ( arg ) . resolveClass ( arg ) ;
Class < ? > type ;
Class < Exception > type = CastUtils . cast ( arg ) ;
Class < Exception > type = CastUtils . cast ( arg ) ;
Class < ? > type = classLoader . loadClass ( arg ) ;
Class < ? > type = endpoint . getExchangeType ( arg ) ;
Class < ? > type = field . getType ( arg ) ;
Class < ? > type = field . getType ( arg ) ;
Class < ? > type = findClass ( arg ) ;
Class < ? > type = findClass ( arg ) ;
Class < ? > type = getCamelContext ( arg ) . getClassResolver ( arg ) . resolveClass ( arg ) ;
Class < ? > type = <unk> ( arg ) ;
Class < ? > type = info . getType ( arg ) ;
Class < ? > type = null ;
Class < ? > type = null ;
Class < ? > type = null ;
Class < ? > type = routeContext . getCamelContext ( arg ) . getClassResolver ( arg ) . resolveClass ( arg ) ;
Class < ? > type = routeContext . getCamelContext ( arg ) . getClassResolver ( arg ) . resolveClass ( arg ) ;
Class < ? > type = types [ index ] ;
Class < ? > type = value . getClass ( arg ) ;
Class < ? > <unk> = valueClassName == null || valueClassName . isEmpty ( arg ) ? String . class : message . getExchange ( arg ) . getContext ( arg ) . getClassResolver ( arg ) . resolveClass ( arg ) ;
Class < ? > <unk> = NullWritable . class ;
<unk> cl ;
AbstractXmlApplicationContext applicationContext = createApplicationContext ( arg ) ;
applicationContext = new ClassPathXmlApplicationContext ( arg ) ;
new ClassPathXmlApplicationContext ( arg ) ;
Client client = getEndpoint ( arg ) . getClient ( arg ) ;
ClientProxyFactoryBean clientFactory = null ;
ClientFactoryBean factoryBean = createClientFactoryBean ( arg ) ;
ClientFactoryBean factoryBean = createClientFactoryBean ( arg ) ;
Collection < ? > b1 = consumer . receiveBody ( arg ) ;
Collection < ? > b1 = consumer . receiveBody ( arg ) ;
Collection < Dummy > b1 = CastUtils . cast ( arg ) ;
Collection < Dummy > b1 = CastUtils . cast ( arg ) ;
Collection < ? > b2 = consumer . receiveBody ( arg ) ;
Collection < ? > b2 = consumer . receiveBody ( arg ) ;
Collection < Dummy > b2 = CastUtils . cast ( arg ) ;
Collection < Dummy > b2 = CastUtils . cast ( arg ) ;
Collection < Endpoint > endpoints = context . getEndpoints ( arg ) ;
Collection < ? > body = consumer . receiveBody ( arg ) ;
Collection < ? > body = consumer . receiveBody ( arg ) ;
Collection < ? > list = services ;
Collection < ProcessorDefinition > outputs = getOutputs ( arg ) ;
Collection < ProcessorDefinition > pipe = new ArrayList < ProcessorDefinition > ( arg ) ;
Collection < ProcessorDefinition < ? >> outputs = getOutputs ( arg ) ;
Collection < ProcessorDefinition < ? >> outputs = getOutputs ( arg ) ;
Collection < ProcessorDefinition < ? >> pipe = new ArrayList < ProcessorDefinition < ? >> ( arg ) ;
Collection < ProcessorDefinition < ? >> pipe = new ArrayList < ProcessorDefinition < ? >> ( arg ) ;
Collection < ProcessorType > outputs = getOutputs ( arg ) ;
Collection < ProcessorType < ? >> outputs = getOutputs ( arg ) ;
Collection < Processor > answer = new ArrayList < Processor > ( arg ) ;
List < Route > routes = new ArrayList < Route > ( arg ) ;
Collection < ? > collection = converter . convertTo ( arg ) ;
Collection < String > tokens ;
Collection < ? > children = new ArrayList < Object > ( arg ) ;
Collection < ? > children = new ArrayList < Object > ( arg ) ;
Collection < ? > col = ( Collection < ? > ) value ;
Collection < Object > col = cache . values ( arg ) ;
Collection < ? > collection = ( Collection < ? > ) <unk> ;
Collection < ? > collection = ( Collection < ? > ) result ;
Collection < ? > collection = ( Collection < ? > ) value ;
Collection < ? > collection = ( Collection < ? > ) value ;
Collection < ? > collection = ( Collection < ? > ) value ;
Collection < String > collection = CastUtils . cast ( arg ) ;
Collection < Thread > result = new ArrayList < Thread > ( arg ) ;
Collection < Thread > result = new ArrayList < Thread > ( arg ) ;
Collection < ? > <unk> = ( Collection < ? > ) converted ;
Collection < Object > values = map . values ( arg ) ;
CometdEndpoint endpoint = prodcon . getEndpoint ( arg ) ;
CometdEndpoint endpoint = prodcon . getEndpoint ( arg ) ;
<unk> < Exchange > comparator = <unk> ( arg ) ;
Component component = getComponent ( arg ) ;
Component component = <unk> ( arg ) . <unk> ( arg ) ;
Component < ? > component = getComponent ( arg ) ;
Component component = getComponent ( arg ) ;
<unk> <unk> = <unk> ( arg ) ;
List < <unk> > attributes = <unk> . <unk> ( arg ) ;
Configuration < ? > configuration = <unk> . <unk> ( arg ) . <unk> ( arg ) ;
<unk> configurer = bus . getExtension ( arg ) ;
<unk> = endpoint . getConfiguration ( arg ) . getConnectionFactory ( arg ) ;
ConnectionFactory connectionFactory = CamelJmsTestHelper . createPersistentConnectionFactory ( arg ) ;
ConnectionFactory connectionFactory = CamelJmsTestHelper . createPersistentConnectionFactory ( arg ) ;
ConnectionFactory connectionFactory = CamelJmsTestHelper . createConnectionFactory ( arg ) ;
ConnectionFactory connectionFactory = CamelJmsTestHelper . createConnectionFactory ( arg ) ;
ConnectionFactory connectionFactory = CamelJmsTestHelper . createConnectionFactory ( arg ) ;
ConnectionFactory connectionFactory = CamelJmsTestHelper . createConnectionFactory ( arg ) ;
ConnectionFactory connectionFactory = CamelJmsTestHelper . createConnectionFactory ( arg ) ;
ConnectionFactory connectionFactory = CamelJmsTestHelper . createConnectionFactory ( arg ) ;
ConnectionFactory connectionFactory = CamelJmsTestHelper . createConnectionFactory ( arg ) ;
ConnectorRef connectorRef = getConnectors ( arg ) . get ( arg ) ;
ConnectorRef connectorRef = getConnectors ( arg ) . get ( arg ) ;
DefaultSecurityConstraint matcher = new DefaultSecurityConstraint ( arg ) ;
DefaultSecurityConstraint matcher = new DefaultSecurityConstraint ( arg ) ;
Constructor cns = <unk> . getConstructor ( arg ) ;
Constructor < ? > cns = DOM_TO_SAX_CLASS . getConstructor ( arg ) ;
Constructor cns = DOM_TO_SAX_CLASS . getConstructor ( arg ) ;
Constructor < Converter > con = null ;
Consumer consumer = endpoint . createConsumer ( arg ) ;
Consumer result = new FileConsumer ( arg ) ;
NettyHttpConsumer answer = new NettyHttpConsumer ( arg ) ;
consumer = endpoint . createConsumer ( arg ) ;
Consumer consumer ;
template = new <unk> ( arg ) ;
ConsumerTemplate lookup = context . getRegistry ( arg ) . lookupByNameAndType ( arg ) ;
ConsumerTemplate lookup = context . getRegistry ( arg ) . lookupByNameAndType ( arg ) ;
ConsumerTemplate lookup = context . getRegistry ( arg ) . lookupByNameAndType ( arg ) ;
ConsumerTemplate lookup = context . getRegistry ( arg ) . lookupByNameAndType ( arg ) ;
ConsumerTemplate lookup = context . getRegistry ( arg ) . lookupByNameAndType ( arg ) ;
ConsumerTemplate lookup = context1 . getRegistry ( arg ) . lookupByNameAndType ( arg ) ;
ConsumerTemplate lookup = context1 . getRegistry ( arg ) . lookupByNameAndType ( arg ) ;
ConsumerTemplate lookup = context2 . getRegistry ( arg ) . lookupByNameAndType ( arg ) ;
ConsumerTemplate lookup = context2 . getRegistry ( arg ) . lookupByNameAndType ( arg ) ;
ConsumerTemplate lookup2 = context . getRegistry ( arg ) . lookupByNameAndType ( arg ) ;
ConsumerTemplate lookup2 = context . getRegistry ( arg ) . lookupByNameAndType ( arg ) ;
ConsumerTemplate lookup2 = context . getRegistry ( arg ) . lookupByNameAndType ( arg ) ;
ServletContextHandler context = ( ServletContextHandler ) server . getChildHandlerByClass ( arg ) ;
ServletContextHandler context = new ServletContextHandler ( arg ) ;
CometdServlet servlet = <unk> ( arg ) ;
CometdServlet servlet = new CometdServlet ( arg ) ;
<unk> node = assertOneProcessorInstanceOf ( arg ) ;
<unk> node = assertOneProcessorInstanceOf ( arg ) ;
<unk> cool = context . getRegistry ( arg ) . lookupByNameAndType ( arg ) ;
<unk> se = <unk> . remove ( arg ) ;
<unk> result = OBJECT_MAPPER . readValue ( arg ) ;
this . createdById = createdById ;
this . createdDate = createdDate ;
LoginCredentials credentials = null ;
Credentials defaultcreds = new NTCredentials ( arg ) ;
Credentials defaultcreds = new NTCredentials ( arg ) ;
@ SuppressWarnings ( arg ) CsvIterator iterator = new CsvIterator ( arg ) ;
@ SuppressWarnings ( arg ) CsvIterator iterator = new CsvIterator ( arg ) ;
CustomerServiceImpl serverBean = new CustomerServiceImpl ( arg ) ;
CustomerServiceImpl serverBean = new CustomerServiceImpl ( arg ) ;
CustomerServiceV1customerService = clientContext . getBean ( arg ) ;
CustomerServiceV1customerService = clientContext . getBean ( arg ) ;
CxfBinding binding = endpoint . getBinding ( arg ) ;
CxfEndpoint <unk> = ctx . getBean ( arg ) ;
CxfEndpoint cxfEndpoint = context . getEndpoint ( arg ) ;
CxfEndpoint endpoint = camelContext . getEndpoint ( arg ) ;
CxfEndpoint endpoint = context . getEndpoint ( arg ) ;
CxfEndpoint endpoint = cxfConsumer . getEndpoint ( arg ) ;
CxfEndpoint endpoint = cxfConsumer . getEndpoint ( arg ) ;
CxfEndpoint <unk> = ctx . getBean ( arg ) ;
CxfEndpoint result = null ;
CxfEndpoint result ;
CxfEndpoint routerEndpoint = ctx . getBean ( arg ) ;
CxfEndpoint routerEndpoint = ctx . getBean ( arg ) ;
CxfEndpoint routerEndpoint = ctx . getBean ( arg ) ;
<unk> <unk> = endpoint . <unk> ( arg ) ;
CxfEndpoint routerEndpoint = ( CxfEndpoint ) ctx . getBean ( arg ) ;
CxfEndpoint routerEndpoint = ( CxfEndpoint ) ctx . getBean ( arg ) ;
CxfEndpoint routerEndpoint = ( CxfEndpoint ) ctx . getBean ( arg ) ;
CxfEndpointUtils . getServiceClass ( arg ) ;
CxfEndpointUtils . <unk> ( arg ) ;
CxfExchange cxfExchange = ( CxfExchange ) endpoint . createExchange ( arg ) ;
CxfExchange cxfExchange = endpoint . createExchange ( arg ) ;
Exchange exchange = <unk> ( arg ) ;
Exchange exchange = sendSimpleMessage ( arg ) ;
Exchange exchange = sendSimpleMessage ( arg ) ;
<unk> ( arg ) ;
CxfPayload < ? > p ;
CxfPayload < ? > payload = ( CxfPayload < ? > ) outBody ;
CxfPayload < ? > out = exchange . getOut ( arg ) . getBody ( arg ) ;
@ SuppressWarnings ( arg ) CxfPayload < SoapHeader > payload = ( CxfPayload < SoapHeader > ) obj ;
@ SuppressWarnings ( arg ) CxfPayload < SoapHeader > payload = ( CxfPayload < SoapHeader > ) obj ;
CxfPayload < ? > payload = ( CxfPayload < ? > ) output ;
CxfPayload < ? > payload = exchange . getIn ( arg ) . getBody ( arg ) ;
SAXResult result = new SAXResult ( arg ) ;
<unk> <unk> = null ;
<unk> dataField = <unk> . get ( arg ) ;
<unk> dataFormat = lookup ( arg ) ;
BaseDataQueue queue = endpoint . getDataQueue ( arg ) ;
<unk> < byte [ ] > result = null ;
<unk> ds ;
DataStore < Object , Object > dataStore = null ;
DataStore < Object , Object > dataStore = null ;
DataStore < byte [ ] , byte [ ] > dataStore = null ;
DataStore < byte [ ] , byte [ ] > dataStore = null ;
<unk> = ( <unk> ) connectionlessBootstrap . bind ( arg ) ;
Object <unk> = mBeanServer . getAttribute ( arg ) ;
Date <unk> = first . evaluate ( arg ) ;
Date modified = <unk> . file ( arg ) . evaluate ( arg ) ;
Date modified = <unk> . simple ( arg ) . evaluate ( arg ) ;
Date updated = entry . <unk> ( arg ) ;
<unk> < GenericRecord > reader = new <unk> < GenericRecord > ( arg ) ;
<unk> < Object > <unk> = new <unk> < Object > ( arg ) ;
@ SuppressWarnings ( arg ) DeadLetterChannel answer = new DeadLetterChannel ( arg ) ;
<unk> deadLetterChannel = assertIsInstanceOf ( arg ) ;
DeadLetterChannelBuilder answer = new DeadLetterChannelBuilder ( arg ) ;
DeadLetterChannelBuilder a = deadLetterChannel ( arg ) . maximumRedeliveries ( arg ) . delay ( arg ) . logStackTrace ( arg ) . useOriginalBody ( arg ) . handled ( arg ) ;
DeadLetterChannelBuilder errorHandler = ctx . getBean ( arg ) ;
CamelContext camelContext = appContext . getBean ( arg ) ;
camelContext = new DefaultCamelContext ( arg ) ;
DefaultCamelContext context = factoryBean . getContext ( arg ) ;
final CamelContext context = new DefaultCamelContext ( arg ) ;
ConnectionFactoryResource connectionResource = new ConnectionFactoryResource ( arg ) ;
DefaultConsumer < Exchange > consumer ;
DefaultConsumer consumer = endpoint . <unk> ( arg ) . get ( arg ) ;
DefaultCxfMesssageMapper beanBinding = new DefaultCxfMesssageMapper ( arg ) ;
DefaultCxfMessageMapper beanBinding = new DefaultCxfMessageMapper ( arg ) ;
DefaultCxfMessageMapper mapper = new DefaultCxfMessageMapper ( arg ) ;
DefaultErrorHandlerBuilder errorHandler = ctx . getBean ( arg ) ;
Exchange exchange = createExchange ( arg ) ;
DefaultManagementAgent agent = new DefaultManagementAgent ( arg ) ;
DefaultMessageListenerContainer answer = new <unk> ( arg ) ;
AbstractMessageListenerContainer container = <unk> ( arg ) ;
AbstractMessageListenerContainer listenerContainer = createMessageListenerContainer ( arg ) ;
DefaultProducerTemplate lookup = context1 . getRegistry ( arg ) . lookupByNameAndType ( arg ) ;
DefaultProducerTemplate lookup = context1 . getRegistry ( arg ) . lookupByNameAndType ( arg ) ;
DefaultRequiredModelMBean mbean = new DefaultRequiredModelMBean ( arg ) ;
Consumer result = new <unk> ( arg ) ;
SecurityConstraintMapping matcher = new SecurityConstraintMapping ( arg ) ;
SecurityConstraintMapping matcher = new SecurityConstraintMapping ( arg ) ;
DefaultTimeoutMap < ? , ? > map = new DefaultTimeoutMap < Object , Object > ( arg ) ;
DelayDefinition answer = new DelayDefinition ( arg ) ;
DelayDefinition answer = new DelayDefinition ( arg ) ;
DelegateProcessor < Exchange > p1 = assertIsInstanceOf ( arg ) ;
DelegateProcessor < Exchange > p2 = assertIsInstanceOf ( arg ) ;
DelegateProcessor p1 = assertIsInstanceOf ( arg ) ;
DelegateProcessor p2 = assertIsInstanceOf ( arg ) ;
DeleteResponse deleteResponse = template . requestBody ( arg ) ;
DeleteResponse deleteResponse = template . requestBodyAndHeaders ( arg ) ;
<unk> <unk> = context . getRegistry ( arg ) . lookupByNameAndType ( arg ) ;
Object destination = <unk> ;
Object <unk> = getReplyToDestination ( arg ) ;
Dictionary < String , ? > props = getProperties ( arg ) ;
Dictionary < String , ? > props = getProperties ( arg ) ;
Dictionary < ? , ? > props = getProperties ( arg ) ;
Properties props = new Properties ( arg ) ;
Properties props = new Properties ( arg ) ;
Properties props = new Properties ( arg ) ;
Properties props = new Properties ( arg ) ;
Properties props = new Properties ( arg ) ;
@ SuppressWarnings ( arg ) Dictionary <unk> = bundleContext . getBundle ( arg ) . getHeaders ( arg ) ;
Dictionary < String , Object > <unk> = new Hashtable < String , Object > ( arg ) ;
Dictionary < ? , ? > headers = bundle . getHeaders ( arg ) ;
Dictionary < ? , ? > headers = bundle . getHeaders ( arg ) ;
Dictionary < ? , ? > props = getProperties ( arg ) ;
DirContext dirContext = ( DirContext ) getEndpoint ( arg ) . getCamelContext ( arg ) . getRegistry ( arg ) . lookupByName ( arg ) ;
DirContext dirContext = <unk> ( arg ) ;
DirectChannel channelA = applicationContext . getBean ( arg ) ;
DirectChannel responseChannel = getMandatoryBean ( arg ) ;
DirectChannel responseChannel = getMandatoryBean ( arg ) ;
DirectVmConsumer consumer = endpoint . getComponent ( arg ) . <unk> ( arg ) ;
DirectVmConsumer <unk> = CONSUMERS . <unk> ( arg ) ;
Document doc = xmlConverter . <unk> ( arg ) ;
<unk> builder = <unk> ( arg ) ;
Document document ;
<unk> doc = config . <unk> ( arg ) ;
<unk> number = Double . <unk> ( arg ) ;
Long <unk> = ( Long ) beanServer . getAttribute ( arg ) ;
Long <unk> = ( Long ) beanServer . getAttribute ( arg ) ;
Exchange answer = createExchange ( arg ) ;
E answer = ( E ) createExchange ( arg ) ;
E convertedExchange = exchange ;
E convertedExchange = endpoint . createExchange ( arg ) ;
final SedaEndpoint . Entry < E > entry ;
Exchange exchange = pollingConsumer . receiveNoWait ( arg ) ;
E exchange = ( E ) pollingConsumer . receiveNoWait ( arg ) ;
E exchange = ( E ) producer . createExchange ( arg ) ;
E exchange = ( E ) producer . createExchange ( arg ) ;
E exchange = ( E ) producer . createExchange ( arg ) ;
Exchange newExchange = getEndpoint ( arg ) . createExchange ( arg ) ;
E newExchange = ( E ) getEndpoint ( arg ) . createExchange ( arg ) ;
Exchange result = send ( arg ) ;
Exchange result = send ( arg ) ;
Exchange result = send ( arg ) ;
EasyMock . <unk> ( arg ) . andReturn ( arg ) . <unk> ( arg ) ;
beanMock . c ( arg ) ;
<unk> client = context . getRegistry ( arg ) . lookupByNameAndType ( arg ) ;
<unk> <unk> = applicationContext . getBean ( arg ) ;
new ElasticsearchConfiguration ( arg ) ;
Element element = null ;
Element element = new <unk> ( arg ) . <unk> ( arg ) ;
List < SoapHeader > header = CastUtils . cast ( arg ) ;
List < SoapHeader > headers = CastUtils . cast ( arg ) ;
List < SoapHeader > headers = request . getHeaders ( arg ) ;
Element element = ( Element ) exchange . getIn ( arg ) . getBody ( arg ) ;
Element element = ( Element ) exchange . getIn ( arg ) . getBody ( arg ) ;
ElementNameStrategy elNameStrat = new ServiceInterfaceStrategy ( arg ) ;
ElementNameStrategy elNameStrat = new ServiceInterfaceStrategy ( arg ) ;
endpoint = Endpoint . publish ( arg ) ;
endpoint = Endpoint . publish ( arg ) ;
Endpoint answer ;
Endpoint e = null ;
Endpoint endpoint = null ;
Endpoint ep = mbean . getEndpoint ( arg ) ;
Endpoint ep = route . getEndpoint ( arg ) ;
Endpoint ep = route . getEndpoint ( arg ) ;
Endpoint ep = routeContext . getEndpoint ( arg ) ;
Endpoint answer = <unk> ( arg ) ;
Endpoint endpoint = createEndpoint ( arg ) ;
Endpoint endpoint = getEndpoint ( arg ) ;
Endpoint endpoint = new DirectEndpoint ( arg ) ;
Endpoint endpoint = new DirectEndpoint ( arg ) ;
Endpoint endpoint = new <unk> ( arg ) ;
Endpoint < Exchange > endpoint = container . resolveEndpoint ( arg ) ;
Endpoint < Exchange > endpoint = container . getComponent ( arg ) . createEndpoint ( arg ) ;
Endpoint endpoint = container . getEndpoint ( arg ) ;
Endpoint endpoint = container . getEndpoint ( arg ) ;
Endpoint endpoint = container . getEndpoint ( arg ) ;
Endpoint endpoint = container . getEndpoint ( arg ) ;
Endpoint < Exchange > endpoint = container . getEndpoint ( arg ) ;
Endpoint < Exchange > endpoint = container . getEndpoint ( arg ) ;
Endpoint < Exchange > endpoint = container . getEndpoint ( arg ) ;
Endpoint endpoint = context . getEndpoint ( arg ) ;
Endpoint endpoint = context . getEndpoint ( arg ) ;
Endpoint endpoint = resolveEndpoint ( arg ) ;
Endpoint endpoint = resolveEndpoint ( arg ) ;
Endpoint key = route . getEndpoint ( arg ) ;
Endpoint < JmsExchange > endpoint = container . resolveEndpoint ( arg ) ;
Endpoint < <unk> > endpoint = container . getEndpoint ( arg ) ;
Endpoint < ? > answer ;
StringTemplateEndpoint answer = new StringTemplateEndpoint ( arg ) ;
Endpoint <unk> = getCamelContext ( arg ) . getEndpoint ( arg ) ;
Endpoint e ;
Endpoint endpoint = context . getEndpoint ( arg ) ;
Endpoint endpoint = camelContext . getEndpoint ( arg ) ;
Endpoint endpoint = context . getEndpoint ( arg ) ;
Endpoint endpoint = context . getEndpoint ( arg ) ;
endpoint ( arg ) ;
endpoint ( arg ) ;
<unk> endpoint = null ;
Endpoint < ? extends Exchange > ep = mbean . getEndpoint ( arg ) ;
Endpoint < ? extends Exchange > ep = route . getEndpoint ( arg ) ;
Endpoint lookup = exchange . getContext ( arg ) . <unk> ( arg ) ;
Endpoint value = camelContext . getEndpoint ( arg ) ;
Endpoint value = camelContext . getEndpoint ( arg ) ;
EndpointMessageListener messageListener = new EndpointMessageListener ( arg ) ;
messageListener = new EndpointMessageListener ( arg ) ;
<unk> er = getEndpointResolver ( arg ) ;
EntityManagerFactory <unk> = getEntityManagerFactory ( arg ) ;
Map . Entry entry = ( Map . Entry ) iter . next ( arg ) ;
Enumeration < ? > en = jmsMessage . getPropertyNames ( arg ) ;
Enumeration < ? > en = jmsMessage . getPropertyNames ( arg ) ;
Enumeration < ? > it = message . getAllHeaders ( arg ) ;
Enumeration < ? > iter = <unk> . <unk> ( arg ) ;
Enumeration < Header > iter = CastUtils . cast ( arg ) ;
Enumeration < ? > names ;
Enumeration < ? > names = <unk> . getAllHeaders ( arg ) ;
Enumeration < ? > names = message . getMapNames ( arg ) ;
Enumeration names = message . getMapNames ( arg ) ;
Enumeration names ;
Enumeration < ? > names = request . getAttributeNames ( arg ) ;
Enumeration < ? > names = request . getAttributeNames ( arg ) ;
Enumeration < ? > names = request . getHeaderNames ( arg ) ;
Enumeration < ? > names = request . getHeaderNames ( arg ) ;
Enumeration < ? > names = request . getParameterNames ( arg ) ;
Enumeration < ? > names = request . getParameterNames ( arg ) ;
Enumeration < ? > names = <unk> . <unk> ( arg ) . <unk> ( arg ) ;
Enumeration < String > result = null ;
ErrorHandlerBuilder a = deadLetterChannel ( arg ) . maximumRedeliveries ( arg ) . redeliverDelay ( arg ) . logStackTrace ( arg ) . useOriginalMessage ( arg ) . handled ( arg ) ;
ErrorHandlerBuilder a = deadLetterChannel ( arg ) . maximumRedeliveries ( arg ) . redeliverDelay ( arg ) . logStackTrace ( arg ) . useOriginalMessage ( arg ) . handled ( arg ) ;
ErrorHandlerFactory answer ;
ErrorHandlerFactory answer = camelContext . getErrorHandlerBuilder ( arg ) ;
ErrorHandlerFactory builder = routeContext . getRoute ( arg ) . getErrorHandlerBuilder ( arg ) ;
ErrorHandlerFactory builder = routeContext . getRoute ( arg ) . getErrorHandlerBuilder ( arg ) ;
ErrorHandlerFactory handler = camelContext . getErrorHandlerBuilder ( arg ) ;
ErrorHandlerFactory handler = getErrorHandlerBuilder ( arg ) ;
@ SuppressWarnings ( arg ) ErrorHandlerFactory answer = camelContext . getErrorHandlerBuilder ( arg ) ;
ErrorHandlerBuilder builder = ( ErrorHandlerBuilder ) routeContext . getRoute ( arg ) . getErrorHandlerBuilder ( arg ) ;
@ SuppressWarnings ( arg ) ErrorHandlerFactory handler = camelContext . getErrorHandlerBuilder ( arg ) ;
Event event = ( Event ) <unk> . get ( arg ) ;
EventFactory factory = management . getEventFactory ( arg ) ;
EventFactory factory = management . getEventFactory ( arg ) ;
EventFactory factory = management . getEventFactory ( arg ) ;
EventFactory factory = management . getEventFactory ( arg ) ;
EventFactory factory = management . getEventFactory ( arg ) ;
EventFactory factory = management . getEventFactory ( arg ) ;
EventFactory factory = management . getEventFactory ( arg ) ;
EventFactory factory = management . getEventFactory ( arg ) ;
EventFactory factory = management . getEventFactory ( arg ) ;
EventFactory factory = management . getEventFactory ( arg ) ;
EventFactory factory = management . getEventFactory ( arg ) ;
EventFactory factory = management . getEventFactory ( arg ) ;
EventFactory factory = management . getEventFactory ( arg ) ;
EventFactory factory = management . getEventFactory ( arg ) ;
EventFactory factory = management . getEventFactory ( arg ) ;
EventFactory factory = management . getEventFactory ( arg ) ;
EventFactory factory = management . getEventFactory ( arg ) ;
EventFactory factory = management . getEventFactory ( arg ) ;
EventFactory factory = management . getEventFactory ( arg ) ;
EventFactory factory = management . getEventFactory ( arg ) ;
EventFactory factory = management . getEventFactory ( arg ) ;
EventFactory factory = management . getEventFactory ( arg ) ;
EventHelper . <unk> ( arg ) ;
EventHelper . <unk> ( arg ) ;
EventHelper . <unk> ( arg ) ;
EventObject event = factory . <unk> ( arg ) ;
EventObject event = factory . <unk> ( arg ) ;
EventObject event = factory . <unk> ( arg ) ;
EventObject event = factory . <unk> ( arg ) ;
EventObject event = factory . <unk> ( arg ) ;
EventObject event = factory . <unk> ( arg ) ;
Exception cause = getExchange ( arg ) . getException ( arg ) ;
Exception e = ( Exception ) exchange . getProperty ( arg ) ;
Throwable ex = ( Throwable ) cxfExchange . getFault ( arg ) . getBody ( arg ) ;
Throwable ex = exchange . getException ( arg ) ;
Throwable ex = message . getContent ( arg ) ;
Throwable ex = message . getContent ( arg ) ;
Throwable ex = message . getContent ( arg ) ;
Exception exception ;
final Exception <unk> = new Exception ( arg ) ;
Exception typeConversionFailed = null ;
OnExceptionDefinition answer = new OnExceptionDefinition ( arg ) ;
OnExceptionDefinition answer = new OnExceptionDefinition ( arg ) ;
OnExceptionDefinition exceptionPolicy = getExceptionPolicy ( arg ) ;
OnExceptionDefinition last = null ;
OnExceptionDefinition policy = getExceptionPolicy ( arg ) ;
OnExceptionDefinition result = strategy . getExceptionPolicy ( arg ) ;
OnExceptionDefinition result = strategy . getExceptionPolicy ( arg ) ;
OnExceptionDefinition result = strategy . getExceptionPolicy ( arg ) ;
OnExceptionDefinition result = strategy . getExceptionPolicy ( arg ) ;
OnExceptionDefinition result = strategy . getExceptionPolicy ( arg ) ;
OnExceptionDefinition result = strategy . getExceptionPolicy ( arg ) ;
OnExceptionDefinition result = strategy . getExceptionPolicy ( arg ) ;
OnExceptionDefinition result = strategy . getExceptionPolicy ( arg ) ;
OnExceptionDefinition result = strategy . getExceptionPolicy ( arg ) ;
OnExceptionDefinition result = strategy . getExceptionPolicy ( arg ) ;
OnExceptionDefinition result = strategy . getExceptionPolicy ( arg ) ;
OnExceptionDefinition result = strategy . getExceptionPolicy ( arg ) ;
<unk> <unk> = context . getRegistry ( arg ) . lookupByNameAndType ( arg ) ;
ExceptionDefinition exceptionPolicy = getExceptionPolicy ( arg ) ;
ExceptionDefinition last = null ;
ExceptionDefinition policy = getExceptionPolicy ( arg ) ;
ExceptionDefinition result = strategy . getExceptionPolicy ( arg ) ;
ExceptionDefinition result = strategy . getExceptionPolicy ( arg ) ;
ExceptionDefinition result = strategy . getExceptionPolicy ( arg ) ;
ExceptionDefinition result = strategy . getExceptionPolicy ( arg ) ;
ExceptionDefinition result = strategy . getExceptionPolicy ( arg ) ;
ExceptionDefinition result = strategy . getExceptionPolicy ( arg ) ;
ExceptionDefinition result = strategy . getExceptionPolicy ( arg ) ;
ExceptionDefinition result = strategy . getExceptionPolicy ( arg ) ;
ExceptionDefinition result = strategy . getExceptionPolicy ( arg ) ;
ExceptionDefinition result = strategy . getExceptionPolicy ( arg ) ;
ExceptionDefinition result = strategy . getExceptionPolicy ( arg ) ;
ExceptionDefinition result = strategy . getExceptionPolicy ( arg ) ;
ExceptionType type = <unk> ( arg ) ;
List < Exchange > aggregated = null ;
List < Exchange > aggregated = null ;
Exchange answer = send ( arg ) ;
Exchange answer = new DefaultExchange ( arg ) ;
Exchange answer = getProducerCache ( arg ) . send ( arg ) ;
Exchange <unk> = consumer . receive ( arg ) ;
Exchange <unk> = codec . unmarshallExchange ( arg ) ;
Exchange copy = new DefaultExchange ( arg ) ;
Exchange copy = new DefaultExchange ( arg ) ;
Exchange copy = exchange . copy ( arg ) ;
Exchange copy = exchange . copy ( arg ) ;
Exchange copy = exchange . copy ( arg ) ;
Exchange <unk> = endpoint . createExchange ( arg ) ;
Exchange ex = current . newInstance ( arg ) ;
template . receiveNoWait ( arg ) ;
template . receiveNoWait ( arg ) ;
template . receiveNoWait ( arg ) ;
Exchange exchange = ( Exchange ) continuation . getAttribute ( arg ) ;
GenericFileExchange < T > exchange = ( GenericFileExchange < T > ) exchanges . poll ( arg ) ;
final Exchange exchange = ObjectHelper . cast ( arg ) ;
final Exchange exchange = ObjectHelper . cast ( arg ) ;
final Exchange exchange = consumer . getEndpoint ( arg ) . createExchange ( arg ) ;
Exchange exchange = endpoint . createExchange ( arg ) ;
Exchange exchange = getEndpoint ( arg ) . createExchange ( arg ) ;
Exchange exchange = getEndpoint ( arg ) . createExchange ( arg ) ;
Exchange exchange = exchanges . get ( arg ) ;
Exchange exchange = exchanges . get ( arg ) ;
Exchange exchange = getReceivedExchanges ( arg ) . get ( arg ) ;
Exchange exchange = getReceivedExchange ( arg ) ;
Exchange exchange = getReceivedExchange ( arg ) ;
Exchange exchange = getReceivedExchange ( arg ) ;
Exchange exchange = getReceivedExchange ( arg ) ;
Exchange exchange = getReceivedExchange ( arg ) ;
Exchange exchange = resultEndpoint . getExchanges ( arg ) . get ( arg ) ;
Exchange exchange = mockResultEndpoint . getExchanges ( arg ) . get ( arg ) ;
Exchange exchange = createExchange ( arg ) ;
Exchange exchange = createExchange ( arg ) ;
Exchange exchange = createExchange ( arg ) ;
Exchange exchange = createExchange ( arg ) ;
Exchange exchange = new DefaultExchange ( arg ) ;
Exchange exchange = mock . getExchanges ( arg ) . get ( arg ) ;
final Exchange exchange = getEndpoint ( arg ) . createExchange ( arg ) ;
Exchange <unk> = ExchangeBuilder . anExchange ( arg ) . withHeader ( arg ) . build ( arg ) ;
Exchange exchange2 = ExchangeBuilder . anExchange ( arg ) . withHeader ( arg ) . build ( arg ) ;
Exchange <unk> = new DefaultExchange ( arg ) ;
Exchange newExchange = ExchangeHelper . createCorrelatedCopy ( arg ) ;
Exchange newExchange = ExchangeHelper . createCopy ( arg ) ;
Exchange oldExchange = aggregated . get ( arg ) ;
template . send ( arg ) ;
Exchange result = copy ;
Exchange result ;
Exchange result ;
Exchange result ;
Exchange result = template . extractFutureBody ( arg ) ;
template . extractFutureBody ( arg ) ;
final Exchange subExchange = pair . getExchange ( arg ) ;
Exchange target = ExchangeHelper . createCorrelatedCopy ( arg ) ;
ExchangeHelper . copyResults ( arg ) ;
ExchangeHelper . copyResults ( arg ) ;
ExchangeProperty < ? > <unk> = LITERAL_MAP . get ( arg ) ;
ExchangeProperty < ? > property = LITERAL_MAP . get ( arg ) ;
@ SuppressWarnings ( arg ) <unk> <unk> = null ;
ExcludingPackageScanClassResolver excludingResolver = routeExcludingContext . getBean ( arg ) ;
ExcludingPackageScanClassResolver excludingResolver = routeExcludingContext . getBean ( arg ) ;
ExcludingPackageScanClassResolver excludingResolver = routeExcludingContext . getBean ( arg ) ;
ExcludingPackageScanClassResolver excludingResolver = routeExcludingContext . getBean ( arg ) ;
GenericFileExclusiveReadLockStrategy strategy = ( GenericFileExclusiveReadLockStrategy ) params . get ( arg ) ;
ExecutorService answer = <unk> . newCachedThreadPool ( arg ) ;
ExecutorService answer = getCamelContext ( arg ) . getExecutorServiceStrategy ( arg ) . newThreadPool ( arg ) ;
ExecutorService answer = camelContext . getRegistry ( arg ) . lookupByNameAndType ( arg ) ;
ExecutorService answer = routeContext . getCamelContext ( arg ) . getRegistry ( arg ) . lookupByNameAndType ( arg ) ;
ExecutorService answer = routeContext . getCamelContext ( arg ) . getRegistry ( arg ) . lookupByNameAndType ( arg ) ;
ExecutorService executor = Executors . newFixedThreadPool ( arg ) ;
ExecutorService executor = Executors . newFixedThreadPool ( arg ) ;
ExecutorService executor = builder . poolSize ( arg ) . maxPoolSize ( arg ) . maxQueueSize ( arg ) . keepAliveTime ( arg ) . timeUnit ( arg ) . rejectedPolicy ( arg ) . build ( arg ) ;
ExecutorService executor = context . getExecutorServiceManager ( arg ) . newThreadPool ( arg ) ;
ExecutorService executor = context . getExecutorServiceManager ( arg ) . newThreadPool ( arg ) ;
ExecutorService executor = context . getExecutorServiceManager ( arg ) . newThreadPool ( arg ) ;
ExecutorService executor = context . getExecutorServiceManager ( arg ) . newThreadPool ( arg ) ;
ExecutorService executor = context . getExecutorServiceManager ( arg ) . newFixedThreadPool ( arg ) ;
ExecutorService executor = context . getExecutorServiceManager ( arg ) . getExecutorService ( arg ) ;
ExecutorService executor = context . getExecutorServiceManager ( arg ) . getDefaultExecutorService ( arg ) ;
ExecutorService executor = context . getExecutorServiceManager ( arg ) . getDefaultExecutorService ( arg ) ;
ExecutorService executor = getCamelContext ( arg ) . getExecutorServiceManager ( arg ) . newCachedThreadPool ( arg ) ;
ExecutorService executor = getCamelContext ( arg ) . getExecutorServiceManager ( arg ) . getDefaultExecutorService ( arg ) ;
ExecutorService executor = getEndpoint ( arg ) . getCamelContext ( arg ) . getExecutorServiceManager ( arg ) . newSingleThreadExecutor ( arg ) ;
ExecutorService executor = getEndpoint ( arg ) . getCamelContext ( arg ) . getExecutorServiceManager ( arg ) . getExecutorService ( arg ) ;
ExecutorService myPool = context . getExecutorServiceManager ( arg ) . newDefaultThreadPool ( arg ) ;
ExecutorService myPool = context . getExecutorServiceManager ( arg ) . newDefaultThreadPool ( arg ) ;
ExecutorService myPool = context . getExecutorServiceManager ( arg ) . newDefaultThreadPool ( arg ) ;
pool = Executors . newFixedThreadPool ( arg ) ;
ExecutorService pool = context . getExecutorServiceManager ( arg ) . newThreadPool ( arg ) ;
<unk> = context . getExecutorServiceManager ( arg ) . newCachedThreadPool ( arg ) ;
ExecutorServiceManager <unk> = <unk> ( arg ) ;
Expression < E > expression = ExpressionBuilder . bodyExpression ( arg ) ;
Expression < E > expression = ExpressionBuilder . <unk> ( arg ) ;
Expression < E > expression = ExpressionBuilder . outBodyExpression ( arg ) ;
Expression < E > expression = ExpressionBuilder . outBodyExpression ( arg ) ;
Expression < E > expression = ExpressionBuilder . headerExpression ( arg ) ;
Expression < Exchange > expression = bodyExpression ( arg ) ;
Expression < Exchange > expression = bodyExpression ( arg ) ;
Expression < Exchange > expression = bodyExpression ( arg ) ;
Expression < Exchange > expression = bodyExpression ( arg ) ;
Expression < Exchange > expression = headerExpression ( arg ) ;
Expression < E > expression = expressionFactory . createExpression ( arg ) ;
Expression < E > expression = expressionFactory . createExpression ( arg ) ;
Expression < E > right = asExpression ( arg ) ;
Expression < E > right = asExpression ( arg ) ;
Expression < E > right = asExpression ( arg ) ;
Expression < E > right = asExpression ( arg ) ;
Expression < E > right = asExpression ( arg ) ;
Expression < E > right = asExpression ( arg ) ;
Expression right = asExpression ( arg ) ;
Expression right = asExpression ( arg ) ;
Expression right = asExpression ( arg ) ;
Expression right = asExpression ( arg ) ;
Expression right = asExpression ( arg ) ;
Expression right = asExpression ( arg ) ;
Expression right = asExpression ( arg ) ;
Expression expression = bodyExpression ( arg ) ;
Expression expression = bodyExpression ( arg ) ;
Expression expression = bodyExpression ( arg ) ;
Expression expression = bodyExpression ( arg ) ;
Expression expression = headerExpression ( arg ) ;
Expression expression = language . createExpression ( arg ) ;
Expression expression = language . createExpression ( arg ) ;
Expression expression = language . createExpression ( arg ) ;
Expression expression = <unk> ( arg ) ;
Expression expression = <unk> ( arg ) ;
Expression expression = <unk> ( arg ) ;
Expression expression = tokenizeExpression ( arg ) ;
if ( answer == null ) {
@ SuppressWarnings ( arg ) Expression answer = SimpleBackwardsCompatibleParser . <unk> ( arg ) ;
Long delay = ( Long ) mbeanServer . getAttribute ( arg ) ;
Expression moveExpression = ( Expression ) params . get ( arg ) ;
Expression moveExpression = ( Expression ) params . get ( arg ) ;
Expression expression = XPathBuilder . xpath ( arg ) . <unk> ( arg ) ;
Expression expression = outBodyExpression ( arg ) ;
Expression expression = outBodyExpression ( arg ) ;
Expression expression = endpoint . getExpression ( arg ) ;
Expression expression = endpoint . <unk> ( arg ) ;
Expression expression = endpoint . getFileName ( arg ) ;
final Expression expression = getExpression ( arg ) . createExpression ( arg ) ;
Expression expression = endpoint . getExpression ( arg ) ;
Expression expression = regexTokenizeExpression ( arg ) ;
Expression expression = regexTokenizeExpression ( arg ) ;
Expression newExp = ExpressionBuilder . convertToExpression ( arg ) ;
Expression newExp = ExpressionBuilder . regexTokenizeExpression ( arg ) ;
Expression processAtExpression = <unk> ( arg ) ;
Expression processAtExpression = getExpression ( arg ) != null ? getExpression ( arg ) . createExpression ( arg ) : null ;
ExpressionClause < ResequenceDefinition > clause = new ExpressionClause < ResequenceDefinition > ( arg ) ;
ExpressionClause < ProcessorType < Type >> clause = new ExpressionClause < ProcessorType < Type >> ( arg ) ;
ExpressionClause < ProcessorType < Type >> clause = new ExpressionClause < ProcessorType < Type >> ( arg ) ;
ExpressionClause < ProcessorType < Type >> clause = new ExpressionClause < ProcessorType < Type >> ( arg ) ;
ExpressionClause < ProcessorType < Type >> clause = new ExpressionClause < ProcessorType < Type >> ( arg ) ;
ExpressionClause < ProcessorType < Type >> clause = new ExpressionClause < ProcessorType < Type >> ( arg ) ;
ExpressionClause < ? > clause = ( ExpressionClause < ? > ) exp ;
ExpressionClause < ? > clause = ( ExpressionClause < ? > ) expression ;
ExpressionClause < ? > clause = ( ExpressionClause < ? > ) when . getExpression ( arg ) ;
ExpressionClause < AssertionClause > clause = new ExpressionClause < AssertionClause > ( arg ) ;
<unk> factory = new ExpressionFactoryImpl ( arg ) ;
buffer . append ( arg ) . append ( arg ) ;
ExpressionDefinition expression = getExpressionType ( arg ) ;
ExpressionDefinition expressionType = getExpressionType ( arg ) ;
ExpressionDefinition expressionType = getExpressionType ( arg ) ;
<unk> <unk> = <unk> ( arg ) ;
FactoryFinder finder = <unk> ( arg ) ;
FactoryFinder finder = getCamelContext ( arg ) . <unk> ( arg ) ;
FactoryFinder finder = getCamelContext ( arg ) . createFactoryFinder ( arg ) ;
FactoryFinder finder = getCamelContext ( arg ) . createFactoryFinder ( arg ) ;
<unk> answer ;
Field <unk> = <unk> . getClass ( arg ) . getSuperclass ( arg ) . <unk> ( arg ) ;
Field field = annotatedFields . get ( arg ) ;
Field field = annotatedFields . get ( arg ) ;
Field field = annotedFields . get ( arg ) ;
Field field = annotedFields . get ( arg ) ;
Field field = annotedFields . get ( arg ) ;
File [ ] files = directory . <unk> ( arg ) ;
File dir = new File ( arg ) ;
File dir = new File ( arg ) ;
File dir = new File ( arg ) ;
File dir = new File ( arg ) ;
File dir = new File ( arg ) ;
File dir = <unk> ;
File done = new File ( arg ) ;
File done = new File ( arg ) ;
File done = new File ( arg ) ;
File done = new File ( arg ) ;
File done = new File ( arg ) ;
File done = new File ( arg ) ;
File done = new File ( arg ) ;
File done = new File ( arg ) ;
File file = new File ( arg ) ;
File file = new File ( arg ) ;
File file = new File ( arg ) ;
File file = new File ( arg ) ;
File file = new File ( arg ) ;
File file = new File ( arg ) ;
File file = new File ( arg ) ;
File file = new File ( arg ) ;
File file = new File ( arg ) ;
File file = new File ( arg ) ;
File file = new File ( arg ) ;
File file = new File ( arg ) ;
File file = new File ( arg ) ;
File file = new File ( arg ) ;
File file = new File ( arg ) ;
File file = new File ( arg ) ;
File file = new File ( arg ) ;
File file = new File ( arg ) ;
File file = new File ( arg ) ;
File file = new File ( arg ) ;
File file = new File ( arg ) ;
File file = new File ( arg ) ;
File file = new File ( arg ) ;
File file = new File ( arg ) ;
File file = new File ( arg ) ;
File file = new File ( arg ) ;
File file = new File ( arg ) ;
File file = new File ( arg ) ;
File file = new File ( arg ) ;
File file = new File ( arg ) ;
File file = new File ( arg ) ;
File file = new File ( arg ) ;
File file = new File ( arg ) ;
File file = new File ( arg ) ;
File file = new File ( arg ) ;
File file = new File ( arg ) ;
File file = new File ( arg ) ;
File file = new File ( arg ) ;
File file = new File ( arg ) ;
File file = new File ( arg ) ;
File file = new File ( arg ) ;
File file = new File ( arg ) ;
File file = new File ( arg ) ;
File file = new File ( arg ) ;
File file = new File ( arg ) ;
File file = new File ( arg ) ;
File file = new File ( arg ) ;
File file = new File ( arg ) ;
File file = new File ( arg ) ;
File file = new File ( arg ) ;
File file = new File ( arg ) ;
File file = new File ( arg ) ;
File file = new File ( arg ) ;
File file = new File ( arg ) ;
File file = new File ( arg ) ;
File file = new File ( arg ) ;
File file = new File ( arg ) ;
File file = new File ( arg ) ;
File file = new File ( arg ) ;
File file = new File ( arg ) ;
File file = new File ( arg ) ;
File file = new File ( arg ) ;
File file = new File ( arg ) ;
File file = new File ( arg ) ;
File file = new File ( arg ) ;
File file = new File ( arg ) ;
File file = new File ( arg ) ;
File file = new File ( arg ) ;
File file = new File ( arg ) ;
File file = new File ( arg ) ;
File file = new File ( arg ) ;
File file = new File ( arg ) ;
File file = new File ( arg ) ;
File file = new File ( arg ) ;
File file = new File ( arg ) ;
File file = new File ( arg ) ;
File file = new File ( arg ) ;
File file = new File ( arg ) ;
File file = new File ( arg ) ;
File file = new File ( arg ) ;
File file = new File ( arg ) ;
File file = new File ( arg ) ;
File file = new File ( arg ) ;
File file = new File ( arg ) ;
File file = new File ( arg ) ;
File file = new File ( arg ) ;
InputStream is = getClass ( arg ) . getResourceAsStream ( arg ) ;
<unk> ( arg ) ;
File <unk> = new File ( arg ) ;
File <unk> = new File ( arg ) ;
File <unk> = new File ( arg ) ;
File parent = new File ( arg ) ;
File first = new File ( arg ) ;
File in = new File ( arg ) ;
File in = new File ( arg ) ;
File in = new File ( arg ) ;
File in = new File ( arg ) ;
File in = new File ( arg ) ;
File local = new File ( arg ) ;
File local = new File ( arg ) ;
File local = new File ( arg ) ;
lock = new File ( arg ) ;
File out = new File ( arg ) ;
File out = new File ( arg ) ;
File out = new File ( arg ) ;
File out = new File ( arg ) ;
File out = new File ( arg ) ;
File out = new File ( arg ) ;
File out = new File ( arg ) ;
File out = new File ( arg ) ;
File <unk> = new File ( arg ) . <unk> ( arg ) ;
File pre = new File ( arg ) ;
File pre = new File ( arg ) ;
File pre = new File ( arg ) ;
File pre = new File ( arg ) ;
File pre = new File ( arg ) ;
File pre = new File ( arg ) ;
File pre = new File ( arg ) ;
File pre = new File ( arg ) ;
File <unk> = new File ( arg ) ;
InputStream is = <unk> . class . getResourceAsStream ( arg ) ;
File start = new File ( arg ) ;
File start = new File ( arg ) ;
File styleSheet = new File ( arg ) ;
File styleSheet = new File ( arg ) ;
File styleSheet = new File ( arg ) ;
File styleSheet = new File ( arg ) ;
FileConsumer result = <unk> ( arg ) ;
NewFileEndpoint endpoint = resolveMandatoryEndpoint ( arg ) ;
FileEndpoint fileEndpoint = <unk> . assertIsInstanceOf ( arg ) ;
FileEndpoint fileEndpoint = Assertions . assertInstanceOf ( arg ) ;
FileEndpoint fileEndpoint = assertIsInstanceOf ( arg ) ;
NewFileEndpoint fileEndpoint = resolveMandatoryEndpoint ( arg ) ;
FileExchange fileExchange = ( FileExchange ) endpoint . createExchange ( arg ) ;
FileExpressionRenamer renamer = new FileExpressionRenamer ( arg ) ;
File lock = ExchangeHelper . getMandatoryProperty ( arg ) ;
GenericFileExclusiveReadLockStrategy < File > readLockStrategy = new <unk> ( arg ) ;
GenericFileExclusiveReadLockStrategy < File > readLockStrategy = new GenericFileRenameExclusiveReadLockStrategy < File > ( arg ) ;
GenericFileRenameProcessStrategy < File > strategy = new GenericFileRenameProcessStrategy < File > ( arg ) ;
GenericFileRenameProcessStrategy < File > strategy = new GenericFileRenameProcessStrategy < File > ( arg ) ;
GenericFileRenameProcessStrategy strategy = new GenericFileRenameProcessStrategy ( arg ) ;
FilterDefinition filter = new FilterDefinition ( arg ) ;
FilterProcessor <unk> = filters . get ( arg ) ;
FilterProcessor <unk> = filters . get ( arg ) ;
FilterType filter = assertOneProcessorInstanceOf ( arg ) ;
FilterType filter = assertOneProcessorInstanceOf ( arg ) ;
FilterType filter = assertOneProcessorInstanceOf ( arg ) ;
FilterType filter = assertOneProcessorInstanceOf ( arg ) ;
FilterDefinition filter = assertOneProcessorInstanceOf ( arg ) ;
FilterDefinition filter = assertOneProcessorInstanceOf ( arg ) ;
FilterDefinition filter = assertOneProcessorInstanceOf ( arg ) ;
FilterDefinition filter = assertOneProcessorInstanceOf ( arg ) ;
FilterType filter = <unk> ( arg ) . <unk> ( arg ) ;
FluentArg arg = method . parameterAnnotations . get ( arg ) ;
FluentArg arg = method . parameterAnnotations . get ( arg ) ;
Class type = field . getType ( arg ) ;
@ SuppressWarnings ( arg ) Format < Object > format = ( Format < Object > ) <unk> . getFormat ( arg ) ;
FromDefinition fromType = assertOneElement ( arg ) ;
FromDefinition fromType = inputs . get ( arg ) ;
<unk> config = ftpEndpoint . getConfiguration ( arg ) ;
FtpEndpoint ftpEndpoint = ( FtpEndpoint ) endpoint ;
FtpEndpoint < ? > endpoint = context . getEndpoint ( arg ) ;
FtpEndpoint < ? > endpoint = context . getEndpoint ( arg ) ;
FtpEndpoint < ? > endpoint = context . getEndpoint ( arg ) ;
FtpEndpoint < ? > ftpEndpoint = ( FtpEndpoint < ? > ) endpoint ;
FtpEndpoint < ? > ftpEndpoint = ( FtpEndpoint < ? > ) endpoint ;
RemoteFileProducer producer = ( RemoteFileProducer ) endpoint . createProducer ( arg ) ;
RemoteFileProducer producer = ( RemoteFileProducer ) endpoint . createProducer ( arg ) ;
@ SuppressWarnings ( arg ) Future < Exchange > future = AsyncProcessorHelper . asyncProcess ( arg ) ;
@ SuppressWarnings ( arg ) Future < Exchange > future = AsyncProcessorHelper . asyncProcess ( arg ) ;
Future < Exchange > future = executorService . submit ( arg ) ;
Future < V > answer = completionQueue . poll ( arg ) ;
Future < V > answer = completionQueue . poll ( arg ) ;
Future < ? > future = ( Future < ? > ) value ;
Future < ? > future = getExecutorService ( arg ) . submit ( arg ) ;
Future < List < String >> future = service . getUsers ( arg ) ;
Future < List < String >> future = service . getUsers ( arg ) ;
Future < ? > future = template . asyncRequestBody ( arg ) ;
Future < ? > future = template . asyncRequestBody ( arg ) ;
Future < ? > future = template . asyncRequestBody ( arg ) ;
Future < ? > future = template . asyncRequestBody ( arg ) ;
Future < ? > future = template . asyncRequestBody ( arg ) ;
Future < ? > future = template . asyncRequestBody ( arg ) ;
Future < ? > future = template . asyncRequestBody ( arg ) ;
<unk> future = <unk> ( arg ) ;
exchange . getIn ( arg ) . setHeader ( arg ) ;
exchange . getIn ( arg ) . setHeader ( arg ) ;
<unk> <unk> = null ;
GenericFile < File > consumedFile = FileConsumer . asGenericFile ( arg ) ;
GenericFile < T > file = getExchangeFileProperty ( arg ) ;
GenericFile < T > <unk> = file . copyFrom ( arg ) ;
GenericFile < T > result = file . copyFrom ( arg ) ;
GenericFile < T > result ;
to = renameFile ( arg ) ;
to = renameFile ( arg ) ;
GenericFile < File > consumedFile = <unk> . asGenericFile ( arg ) ;
GenericFile < ? > file = ( GenericFile < ? > ) value ;
GenericFile < ? > file = ( GenericFile < ? > ) value ;
GenericFile < Object > file = new GenericFile < Object > ( arg ) ;
GenericFile < Object > file = new GenericFile < Object > ( arg ) ;
GenericFile < ? > genericFile = ( GenericFile < ? > ) value ;
GenericFile < ? > gf = ( GenericFile < ? > ) body ;
GenericFile < ? > gf = ( GenericFile < ? > ) value ;
GenericFile < T > newName = <unk> . renameFile ( arg ) ;
GenericFile < T > result = file . clone ( arg ) ;
<unk> < ? > consumer = null ;
GenericFileDeleteProcessStrategy < Object > strategy = new GenericFileDeleteProcessStrategy < Object > ( arg ) ;
GenericFileDeleteProcessStrategy < Object > strategy = new GenericFileDeleteProcessStrategy < Object > ( arg ) ;
Exchange answer = endpoint . createExchange ( arg ) ;
Exchange exchange = new DefaultExchange ( arg ) ;
Exchange answer = new DefaultExchange ( arg ) ;
Exchange exchange = ( Exchange ) exchanges . poll ( arg ) ;
Exchange exchange = ( Exchange ) exchanges . poll ( arg ) ;
Exchange exchange = endpoint . createExchange ( arg ) ;
Exchange fileExchange = endpoint . createExchange ( arg ) ;
GenericFileExchange < T > fileExchange = ( GenericFileExchange < T > ) endpoint . createExchange ( arg ) ;
GenericFileExchange < T > exchange = exchanges . get ( arg ) ;
GenericFileExchange < T > fileExchange = ( GenericFileExchange < T > ) <unk> ( arg ) . createExchange ( arg ) ;
FtpChangedExclusiveReadLockStrategy readLockStrategy = new FtpChangedExclusiveReadLockStrategy ( arg ) ;
FileChangedExclusiveReadLockStrategy readLockStrategy = new FileChangedExclusiveReadLockStrategy ( arg ) ;
GenericFileExclusiveReadLockStrategy < File > readLockStrategy = new <unk> ( arg ) ;
GenericFileExclusiveReadLockStrategy < ChannelSftp . LsEntry > strategy = ( GenericFileExclusiveReadLockStrategy < ChannelSftp . LsEntry > ) params . get ( arg ) ;
GenericFileExclusiveReadLockStrategy < File > readLockStrategy = new FileChangedExclusiveReadLockStrategy ( arg ) ;
GenericFileExclusiveReadLockStrategy < <unk> > readLockStrategy = new FtpChangedExclusiveReadLockStrategy ( arg ) ;
GenericFileExclusiveReadLockStrategy < File > readLockStrategy = new GenericFileRenameExclusiveReadLockStrategy < File > ( arg ) ;
GenericFileExclusiveReadLockStrategy < File > readLockStrategy = new <unk> ( arg ) ;
SftpChangedExclusiveReadLockStrategy readLockStrategy = new SftpChangedExclusiveReadLockStrategy ( arg ) ;
GenericFileExclusiveReadLockStrategy < File > strategy = ( GenericFileExclusiveReadLockStrategy < File > ) params . get ( arg ) ;
GenericFileExpressionRenamer < ChannelSftp . LsEntry > renamer = new GenericFileExpressionRenamer < ChannelSftp . LsEntry > ( arg ) ;
GenericFileExpressionRenamer < ChannelSftp . LsEntry > renamer = new GenericFileExpressionRenamer < ChannelSftp . LsEntry > ( arg ) ;
GenericFileExpressionRenamer < ChannelSftp . LsEntry > renamer = new GenericFileExpressionRenamer < ChannelSftp . LsEntry > ( arg ) ;
GenericFileExpressionRenamer < ChannelSftp . LsEntry > renamer = new GenericFileExpressionRenamer < ChannelSftp . LsEntry > ( arg ) ;
GenericFileExpressionRenamer < ChannelSftp . LsEntry > renamer = new GenericFileExpressionRenamer < ChannelSftp . LsEntry > ( arg ) ;
GenericFileExpressionRenamer < File > renamer = new GenericFileExpressionRenamer < File > ( arg ) ;
GenericFileExpressionRenamer < File > renamer = new GenericFileExpressionRenamer < File > ( arg ) ;
GenericFileNoOpProcessStrategy < File > strategy = new GenericFileNoOpProcessStrategy < File > ( arg ) ;
GenericFileProducer < ? > producer = ( GenericFileProducer < ? > ) endpoint . createProducer ( arg ) ;
GenericFileProducer < ? > producer = ( GenericFileProducer < ? > ) endpoint . createProducer ( arg ) ;
GenericFileProducer < ? > producer = ( GenericFileProducer < ? > ) endpoint . createProducer ( arg ) ;
GenericFileProducer < ? > producer = ( GenericFileProducer < ? > ) endpoint . createProducer ( arg ) ;
GenericFileProducer < ? > producer = ( GenericFileProducer < ? > ) endpoint . createProducer ( arg ) ;
GenericFileRenameExclusiveReadLockStrategy < ChannelSftp . LsEntry > readLockStrategy = new GenericFileRenameExclusiveReadLockStrategy < ChannelSftp . LsEntry > ( arg ) ;
GenericFileRenameExclusiveReadLockStrategy < T > readLockStrategy = new GenericFileRenameExclusiveReadLockStrategy < T > ( arg ) ;
FileRenameProcessStrategy < File > strategy = new FileRenameProcessStrategy < File > ( arg ) ;
FileRenameProcessStrategy < File > strategy = new FileRenameProcessStrategy < File > ( arg ) ;
FileRenameProcessStrategy strategy = new FileRenameProcessStrategy ( arg ) ;
GetResponse response = template . requestBody ( arg ) ;
GetResponse response = template . requestBody ( arg ) ;
GetResponse response = template . requestBodyAndHeaders ( arg ) ;
GetResponse response = template . requestBodyAndHeaders ( arg ) ;
List < GrantedAuthority > authorities = new ArrayList < GrantedAuthority > ( arg ) ;
<unk> <unk> = context ( arg ) . getRegistry ( arg ) . lookupByNameAndType ( arg ) ;
<unk> port = getProxy ( arg ) ;
Exchange grouped = null ;
<unk> component = context . getComponent ( arg ) ;
HTableInterface table = tablePool . getTable ( arg ) ;
HTableInterface table = tablePool . getTable ( arg ) ;
HTableInterface table = tablePool . getTable ( arg ) ;
HandlerEndpoint <unk> = ( HandlerEndpoint ) context . getBean ( arg ) ;
Map < String , Condition > <unk> = new HashMap < String , Condition > ( arg ) ;
Map < String , DataHandler > map = new HashMap < String , DataHandler > ( arg ) ;
Map < String , HashSet < String >> map = new LinkedHashMap < String , HashSet < String >> ( arg ) ;
Map < String , Object > body = new HashMap < String , Object > ( arg ) ;
Map < String , Object > headers = new HashMap < String , Object > ( arg ) ;
Map < String , Object > headers = new HashMap < String , Object > ( arg ) ;
Map < String , Object > headers = new HashMap < String , Object > ( arg ) ;
Map < String , Object > headers = new HashMap < String , Object > ( arg ) ;
Map < String , Object > headers = new HashMap < String , Object > ( arg ) ;
Map < String , Object > headers = new HashMap < String , Object > ( arg ) ;
Map < String , Object > headers = new HashMap < String , Object > ( arg ) ;
Map < String , Object > headers = new HashMap < String , Object > ( arg ) ;
Map < String , Object > headers = new HashMap < String , Object > ( arg ) ;
Map < String , Object > headers = new HashMap < String , Object > ( arg ) ;
Map < String , Object > headers = new HashMap < String , Object > ( arg ) ;
Map < String , Object > map = new HashMap < String , Object > ( arg ) ;
Map < String , Object > rc = new LinkedHashMap < String , Object > ( arg ) ;
Map < String , Object > row = data . get ( arg ) ;
Map < String , Object > row = data . get ( arg ) ;
Map < String , Object > row = new HashMap < String , Object > ( arg ) ;
Map < String , String > map = new HashMap < String , String > ( arg ) ;
Map < String , String > map = new HashMap < String , String > ( arg ) ;
Map < String , String > map = new HashMap < String , String > ( arg ) ;
Map < String , String > map = new HashMap < String , String > ( arg ) ;
Map < String , String > map = new HashMap < String , String > ( arg ) ;
Map < String , String > map = new HashMap < String , String > ( arg ) ;
Map < String , String > map = new HashMap < String , String > ( arg ) ;
Map < String , String > values = new HashMap < String , String > ( arg ) ;
Map < String , String > values = new HashMap < String , String > ( arg ) ;
Map < String , String > values = new HashMap < String , String > ( arg ) ;
Map < String , Object > out = CollectionConverter . <unk> ( arg ) ;
HashMap rc = new LinkedHashMap ( arg ) ;
Dictionary < String , Object > props = new Hashtable < String , Object > ( arg ) ;
Map < String , String > <unk> = new Hashtable < String , String > ( arg ) ;
Hashtable < String , Object > <unk> = new Hashtable < String , Object > ( arg ) ;
Map < String , Object > out = CollectionConverter . <unk> ( arg ) ;
Hashtable < ? , ? > properties = new Hashtable < Object , Object > ( arg ) ;
HawtDBAggregationRepository repo = new HawtDBAggregationRepository ( arg ) ;
HawtDBAggregationRepository repo = new HawtDBAggregationRepository ( arg ) ;
HawtDBAggregationRepository repo = new HawtDBAggregationRepository ( arg ) ;
HawtDBAggregationRepository repo = new HawtDBAggregationRepository ( arg ) ;
HawtDBAggregationRepository repo = new HawtDBAggregationRepository ( arg ) ;
HawtDBAggregationRepository repo = new HawtDBAggregationRepository ( arg ) ;
HawtDBAggregationRepository repo = new HawtDBAggregationRepository ( arg ) ;
HawtDBAggregationRepository repo = new HawtDBAggregationRepository ( arg ) ;
HawtDBAggregationRepository repo = new HawtDBAggregationRepository ( arg ) ;
HawtDBAggregationRepository repo = new HawtDBAggregationRepository ( arg ) ;
HawtDBAggregationRepository repo = new HawtDBAggregationRepository ( arg ) ;
HawtDBAggregationRepository repo = new HawtDBAggregationRepository ( arg ) ;
HawtDBAggregationRepository repo = new HawtDBAggregationRepository ( arg ) ;
HawtDBAggregationRepository repo = new HawtDBAggregationRepository ( arg ) ;
HawtDBAggregationRepository repo1 = new HawtDBAggregationRepository ( arg ) ;
HawtDBAggregationRepository repo1 = new HawtDBAggregationRepository ( arg ) ;
HawtDBAggregationRepository repo2 = new HawtDBAggregationRepository ( arg ) ;
HawtDBAggregationRepository repo2 = new HawtDBAggregationRepository ( arg ) ;
HazelcastComponent component = context ( arg ) . getComponent ( arg ) ;
HazelcastComponent component = context ( arg ) . getComponent ( arg ) ;
HazelcastComponent component = context ( arg ) . getComponent ( arg ) ;
HazelcastComponent component = context ( arg ) . getComponent ( arg ) ;
HazelcastComponent component = context ( arg ) . getComponent ( arg ) ;
HazelcastComponent component = context ( arg ) . getComponent ( arg ) ;
HazelcastComponent component = context ( arg ) . getComponent ( arg ) ;
HazelcastComponent component = context ( arg ) . getComponent ( arg ) ;
HdfsInfo answer = HdfsInfoFactory . newHdfsInfo ( arg ) ;
HdfsInfo info = HdfsInfoFactory . newHdfsInfo ( arg ) ;
HdfsInfo info = HdfsInfoFactory . newHdfsInfo ( arg ) ;
Header [ ] headers = response . getAllHeaders ( arg ) ;
Header header = iter . nextElement ( arg ) ;
Header header = <unk> . <unk> ( arg ) ;
Header header = method . <unk> ( arg ) ;
HeaderFilterStrategy strategy = getEndpoint ( arg ) . getHeaderFilterStrategy ( arg ) ;
HeaderFilterStrategy strategy = ( ( HttpEndpoint ) getEndpoint ( arg ) ) . getHeaderFilterStrategy ( arg ) ;
HeaderFilterStrategy strategy = ( ( HttpEndpoint ) getEndpoint ( arg ) ) . getHeaderFilterStrategy ( arg ) ;
HelloWorldService service = applicationContext . getBean ( arg ) ;
HelloWorldService service = getMandatoryBean ( arg ) ;
HeaderFilterStrategy strategy = getEndpoint ( arg ) . getHeaderFilterStrategy ( arg ) ;
HttpClient answer = new DefaultHttpClient ( arg ) ;
HttpClient client = getEndpoint ( arg ) . getClient ( arg ) ;
CloseableHttpClient httpclient = HttpClientBuilder . create ( arg ) . build ( arg ) ;
CloseableHttpClient httpclient = HttpClientBuilder . create ( arg ) . build ( arg ) ;
CloseableHttpClient httpclient = HttpClientBuilder . create ( arg ) . build ( arg ) ;
CloseableHttpClient httpclient = HttpClientBuilder . create ( arg ) . build ( arg ) ;
CloseableHttpClient httpclient = HttpClientBuilder . create ( arg ) . build ( arg ) ;
CloseableHttpClient httpclient = HttpClientBuilder . create ( arg ) . build ( arg ) ;
CloseableHttpClient httpclient = HttpClientBuilder . create ( arg ) . build ( arg ) ;
CloseableHttpClient httpclient = HttpClientBuilder . create ( arg ) . build ( arg ) ;
CloseableHttpClient httpclient = HttpClientBuilder . create ( arg ) . build ( arg ) ;
CloseableHttpClient httpclient = HttpClientBuilder . create ( arg ) . build ( arg ) ;
CloseableHttpClient httpclient = HttpClientBuilder . create ( arg ) . build ( arg ) ;
CloseableHttpClient httpclient = HttpClientBuilder . create ( arg ) . build ( arg ) ;
CloseableHttpClient httpclient = HttpClientBuilder . create ( arg ) . build ( arg ) ;
CloseableHttpClient httpclient = HttpClientBuilder . create ( arg ) . build ( arg ) ;
CloseableHttpClient httpclient = HttpClientBuilder . create ( arg ) . build ( arg ) ;
CloseableHttpClient httpclient = HttpClientBuilder . create ( arg ) . build ( arg ) ;
CloseableHttpClient httpclient = HttpClientBuilder . create ( arg ) . build ( arg ) ;
CloseableHttpClient httpclient = HttpClientBuilder . create ( arg ) . build ( arg ) ;
CloseableHttpClient httpclient = HttpClientBuilder . create ( arg ) . build ( arg ) ;
HttpEndpoint endpoint = consumer . getEndpoint ( arg ) ;
Exchange exchange = ( Exchange ) continuation . getObject ( arg ) ;
Exchange exchange = endpoint . createExchange ( arg ) ;
Exchange exchange = producer . createExchange ( arg ) ;
Exchange exchange = producer . createExchange ( arg ) ;
Exchange exchange = producer . createExchange ( arg ) ;
Exchange exchange = producer . createExchange ( arg ) ;
Exchange exchange = producer . createExchange ( arg ) ;
Exchange exchange = producer . createExchange ( arg ) ;
Exchange exchange = producer . createExchange ( arg ) ;
HttpExchange exchange = ( HttpExchange ) endpoint . createExchange ( arg ) ;
HttpExchange exchange = ( HttpExchange ) producer . createExchange ( arg ) ;
HttpExchange exchange = ( HttpExchange ) producer . createExchange ( arg ) ;
HttpExchange exchange = ( HttpExchange ) producer . createExchange ( arg ) ;
HttpExchange exchange = ( HttpExchange ) producer . createExchange ( arg ) ;
HttpExchange exchange = ( HttpExchange ) producer . createExchange ( arg ) ;
HttpExchange exchange = ( HttpExchange ) producer . createExchange ( arg ) ;
HttpExchange exchange = ( HttpExchange ) producer . createExchange ( arg ) ;
<unk> httpRequest = createMethod ( arg ) ;
HttpMethods methodToUse = HttpHelper . createMethod ( arg ) ;
HttpMethods methodToUse = HttpHelper . createMethod ( arg ) ;
HttpServerBootstrapFactory answer = <unk> . get ( arg ) ;
HttpServerBootstrapFactory factory = getComponent ( arg ) . <unk> ( arg ) ;
Exception answer ;
Exception answer ;
response . setParams ( arg ) ;
response . setParams ( arg ) ;
response . setParams ( arg ) ;
response . setParams ( arg ) ;
response . setParams ( arg ) ;
<unk> answer = <unk> . get ( arg ) ;
<unk> connection = <unk> . openConnection ( arg ) ;
ProtocolVersion ver = request . getRequestLine ( arg ) . getProtocolVersion ( arg ) ;
ProtocolVersion ver = request . getRequestLine ( arg ) . getProtocolVersion ( arg ) ;
ProtocolVersion ver = request . getRequestLine ( arg ) . getProtocolVersion ( arg ) ;
IBatisConsumer consumer = new IBatisConsumer ( arg ) ;
IBindingFactory bindingFactory = createBindingFactory ( arg ) ;
IBindingFactory bindingFactory = createBindingFactory ( arg ) ;
INIT . remove ( arg ) ;
INIT . remove ( arg ) ;
<unk> . incrementAndGet ( arg ) ;
IOHelper . copy ( arg ) ;
IOHelper . copy ( arg ) ;
IOHelper . copy ( arg ) ;
IOHelper . copy ( arg ) ;
IOConverter . validateCharset ( arg ) ;
IOHelper . validateCharset ( arg ) ;
IOException io = new IOException ( arg ) ;
IOException io = new IOException ( arg ) ;
context . close ( arg ) ;
context . close ( arg ) ;
context . close ( arg ) ;
context . close ( arg ) ;
context . close ( arg ) ;
context . close ( arg ) ;
IOHelper . copyAndCloseInput ( arg ) ;
IOHelper . copy ( arg ) ;
IOHelper . copy ( arg ) ;
IOHelper . copy ( arg ) ;
ISay proxy = applicationContext . getBean ( arg ) ;
ISay proxy = applicationContext . getBean ( arg ) ;
ISay proxy = ProxyHelper . createProxy ( arg ) ;
ISay proxy = ProxyHelper . createProxy ( arg ) ;
this . id = id ;
this . id = id ;
this . id = id ;
<unk> idempotentConsumer = assertIsInstanceOf ( arg ) ;
IdempotentRepository < ? > repository = context . getRegistry ( arg ) . lookupByNameAndType ( arg ) ;
IdempotentRepository < String > idempotentRepository = ( IdempotentRepository < String > ) <unk> ( arg ) ;
IdempotentRepository < String > repo = MemoryIdempotentRepository . memoryIdempotentRepository ( arg ) ;
IdempotentRepository < String > repo = MemoryIdempotentRepository . memoryIdempotentRepository ( arg ) ;
IllegalArgumentException iae = ( IllegalArgumentException ) e . getCause ( arg ) ;
IllegalArgumentException iae = ( IllegalArgumentException ) e . getCause ( arg ) ;
SortedIndex < Buffer , Buffer > created = INDEX_FACTORY . create ( arg ) ;
Index < Buffer , Buffer > created = INDEX_FACTORY . create ( arg ) ;
Index < Buffer , Buffer > index = hawtDBFile . getRepositoryIndex ( arg ) ;
Index < Buffer , Buffer > index = hawtDBFile . getRepositoryIndex ( arg ) ;
Index < Buffer , Buffer > index = hawtDBFile . getRepositoryIndex ( arg ) ;
SortedIndex < Buffer , Buffer > index = hawtDBFile . getRepositoryIndex ( arg ) ;
SortedIndex < Buffer , Buffer > index = hawtDBFile . getRepositoryIndex ( arg ) ;
SortedIndex < Buffer , Buffer > index = hawtDBFile . getRepositoryIndex ( arg ) ;
SortedIndex < Buffer , Buffer > index = hawtDBFile . getRepositoryIndex ( arg ) ;
SortedIndex < Buffer , Buffer > index = hawtDBFile . getRepositoryIndex ( arg ) ;
SortedIndex < Buffer , Buffer > indexCompleted = hawtDBFile . getRepositoryIndex ( arg ) ;
SortedIndex < Buffer , Buffer > indexCompleted = hawtDBFile . getRepositoryIndex ( arg ) ;
SortedIndex < Buffer , Buffer > indexCompleted = hawtDBFile . getRepositoryIndex ( arg ) ;
SortedIndex < Buffer , Buffer > indexCompleted = hawtDBFile . getRepositoryIndex ( arg ) ;
SortedIndex < String , Integer > indexes = ROOT_INDEXES_FACTORY . open ( arg ) ;
Index < String , Integer > indexes = <unk> . open ( arg ) ;
Index < String , Integer > indexes = ROOT_INDEXES_FACTORY . open ( arg ) ;
InetAddress address = InetAddress . getByName ( arg ) ;
InputStream answer = ( InputStream ) template . requestBody ( arg ) ;
InputStream answer = ( InputStream ) template . requestBody ( arg ) ;
InputStream cache = ( InputStream ) StreamCacheConverter . convertToStreamCache ( arg ) ;
String copy = null ;
InputStream in = exchange . getIn ( arg ) . getMandatoryBody ( arg ) ;
InputStream in = classResolver . <unk> ( arg ) ;
in = new BufferedInputStream ( arg ) ;
InputStream input = ResourceHelper . resolveMandatoryResourceAsInputStream ( arg ) ;
InputStream inputStream = GZIPHelper . compressGzip ( arg ) ;
InputStream inputStream = GZIPHelper . compressGzip ( arg ) ;
InputStream inputStream = this . getClass ( arg ) . getResourceAsStream ( arg ) ;
InputStream inputStream = this . getClass ( arg ) . getResourceAsStream ( arg ) ;
InputStream inputStream = this . getClass ( arg ) . getResourceAsStream ( arg ) ;
InputStream inputStream = this . getClass ( arg ) . getResourceAsStream ( arg ) ;
InputStream is = null ;
InputStream is = null ;
assertIsInstanceOf ( arg ) ;
InputStream is = exchange . getIn ( arg ) . getMandatoryBody ( arg ) ;
InputStream is = exchange . getIn ( arg ) . getMandatoryBody ( arg ) ;
InputStream is = exchange . getIn ( arg ) . getMandatoryBody ( arg ) ;
InputStream is = conv . toInputStream ( arg ) ;
InputStream is = exchange . getContext ( arg ) . getTypeConverter ( arg ) . mandatoryConvertTo ( arg ) ;
InputStream is = null ;
InputStream is = ResourceHelper . resolveMandatoryResourceAsInputStream ( arg ) ;
is = getClass ( arg ) . getResourceAsStream ( arg ) ;
in . getMandatoryBody ( arg ) ;
InputStream is = <unk> . getContent ( arg ) ;
InputStream is = IOHelper . buffered ( arg ) ;
InputStream is = IOHelper . buffered ( arg ) ;
InputStream is = IOHelper . buffered ( arg ) ;
InputStream is = IOHelper . buffered ( arg ) ;
InputStream is = IOHelper . buffered ( arg ) ;
InputStream is = IOHelper . buffered ( arg ) ;
InputStream is = IOHelper . buffered ( arg ) ;
InputStream is = IOHelper . buffered ( arg ) ;
InputStream is ;
InputStream is ;
is = typeConverter . convertTo ( arg ) ;
InputStream out = conv . toInputStream ( arg ) ;
InputStream result ;
InputStream <unk> = msg . getBody ( arg ) ;
InputStream stream = exchange . getIn ( arg ) . getMandatoryBody ( arg ) ;
MarkableInputStreamCache cache = new MarkableInputStreamCache ( arg ) ;
Reader reader = null ;
<unk> agent = getMandatoryBean ( arg ) ;
Integer code = message . getHeader ( arg ) ;
Integer code = resource . getIn ( arg ) . getHeader ( arg ) ;
Integer code = resource . getIn ( arg ) . getHeader ( arg ) ;
Integer counter = exchange . getIn ( arg ) . getHeader ( arg ) ;
Integer <unk> = ( Integer ) request . get ( arg ) ;
Integer num = exchange . getContext ( arg ) . getTypeConverter ( arg ) . tryConvertTo ( arg ) ;
Integer number = new DomConverter ( arg ) . toInteger ( arg ) ;
Integer number = DomConverter . toInteger ( arg ) ;
Integer old = oldExchange . getProperty ( arg ) ;
Integer <unk> = exchange . getContext ( arg ) . getTypeConverter ( arg ) . tryConvertTo ( arg ) ;
Integer <unk> = exchange . getProperty ( arg ) ;
Integer value = getAndRemoveParameter ( arg ) ;
<unk> proxy = intercept . createProxy ( arg ) ;
InterceptSendToEndpoint proxy = new InterceptSendToEndpoint ( arg ) ;
InterceptSendToEndpoint proxy = routeContext . getCamelContext ( arg ) . getTypeConverter ( arg ) . mandatoryConvertTo ( arg ) ;
<unk> proxy = intercept . createProxy ( arg ) ;
InterceptorBuilder answer = new InterceptorBuilder ( arg ) ;
DelegateProcess < Exchange > p1 = assertIsInstanceOf ( arg ) ;
DelegateProcess < Exchange > p2 = assertIsInstanceOf ( arg ) ;
<unk> interceptor = assertIsInstanceOf ( arg ) ;
InterceptorDefinition interceptor = new InterceptorDefinition ( arg ) ;
setProperties ( arg ) ;
setProperties ( arg ) ;
setProperties ( arg ) ;
setProperties ( arg ) ;
setProperties ( arg ) ;
setProperties ( arg ) ;
setProperties ( arg ) ;
setProperties ( arg ) ;
setProperties ( arg ) ;
setProperties ( arg ) ;
setProperties ( arg ) ;
setProperties ( arg ) ;
setProperties ( arg ) ;
setProperties ( arg ) ;
setProperties ( arg ) ;
setProperties ( arg ) ;
setProperties ( arg ) ;
setProperties ( arg ) ;
setProperties ( arg ) ;
<unk> <unk> = applicationContext . getBean ( arg ) ;
<unk> . <unk> ( arg ) ;
connector = endpoint . <unk> ( arg ) ;
<unk> binding = ExchangeHelper . getBinding ( arg ) ;
IrcConfiguration config = new IrcConfiguration ( arg ) ;
Exchange exchange = endpoint . <unk> ( arg ) ;
Exchange exchange = endpoint . <unk> ( arg ) ;
Exchange exchange = endpoint . <unk> ( arg ) ;
Exchange exchange = endpoint . <unk> ( arg ) ;
Exchange exchange = endpoint . <unk> ( arg ) ;
Exchange exchange = endpoint . <unk> ( arg ) ;
Exchange exchange = endpoint . <unk> ( arg ) ;
Exchange exchange = endpoint . <unk> ( arg ) ;
this . isDeleted = isDeleted ;
Item item = null ;
Item item = null ;
Item < ? > item = in . getBody ( arg ) ;
Item < ? > item = null ;
Item < ? > item = null ;
Iterator < ? > iterator = endpoint . getPrepareStatementStrategy ( arg ) . createPopulateIterator ( arg ) ;
Iterator < ? > iterator = sqlPrepareStatementStrategy . createPopulateIterator ( arg ) ;
Iterator < ? > it = ObjectHelper . createIterator ( arg ) ;
Iterator < ? > it = ObjectHelper . createIterator ( arg ) ;
Iterator < ? > it = ObjectHelper . createIterator ( arg ) ;
Iterator < Object > iter = ObjectHelper . createIterator ( arg ) ;
Iterator iter = ObjectHelper . createIterator ( arg ) ;
Iterator < PGPPublicKey > keyIter = keyRing . <unk> ( arg ) ;
Iterator < PGPPublicKeyRing > keyRingIter = pgpSec . getKeyRings ( arg ) ;
Iterator < PGPSecretKey > keyIter = keyRing . getSecretKeys ( arg ) ;
Iterator < PGPSecretKeyRing > keyRingIter = pgpSec . getKeyRings ( arg ) ;
Iterator < ProcessorDefinition < ? >> it = AdviceWithTasks . createMatchByIterator ( arg ) ;
Iterator < ProcessorDefinition < ? >> it = AdviceWithTasks . createMatchByIterator ( arg ) ;
Iterator < ProcessorDefinition < ? >> it = AdviceWithTasks . createMatchByIterator ( arg ) ;
Iterator < QueueReference > it = <unk> . getQueues ( arg ) . values ( arg ) . iterator ( arg ) ;
Iterator < QueueReference > it = <unk> . getQueues ( arg ) . values ( arg ) . iterator ( arg ) ;
Iterator < ? extends <unk> > i = <unk> . <unk> ( arg ) . iterator ( arg ) ;
Iterator < ? > it = ObjectHelper . createIterator ( arg ) ;
Iterator < ? > it = ObjectHelper . createIterator ( arg ) ;
Iterator < ? > it = ObjectHelper . createIterator ( arg ) ;
Iterator < ? > it = ObjectHelper . createIterator ( arg ) ;
Iterator < ? > it = ObjectHelper . createIterator ( arg ) ;
Iterator < ? > it = ObjectHelper . createIterator ( arg ) ;
Iterator < ? > it = ObjectHelper . createIterator ( arg ) ;
Iterator < ? > it = ObjectHelper . createIterator ( arg ) ;
Iterator < String > it = CastUtils . cast ( arg ) ;
Iterator < String > it = CastUtils . cast ( arg ) ;
Iterator < String > it = CastUtils . cast ( arg ) ;
Iterator < Throwable > it = createExceptionIterator ( arg ) ;
Iterator < ? > <unk> = enc . <unk> ( arg ) ;
Iterator < ? > it = ObjectConverter . iterator ( arg ) ;
Iterator < Object > it = ObjectHelper . createIterator ( arg ) ;
Iterator < Object > it = ObjectHelper . createIterator ( arg ) ;
Iterator < Object > it = ObjectHelper . createIterator ( arg ) ;
Iterator < Object > it = ObjectHelper . createIterator ( arg ) ;
Iterator < Object > it = ObjectHelper . createIterator ( arg ) ;
Iterator < Object > it = ObjectHelper . createIterator ( arg ) ;
Iterator < Object > it = col . iterator ( arg ) ;
Iterator < String > it = context . getPrefixes ( arg ) ;
Iterator < String > it = context . getPrefixes ( arg ) ;
Iterator < ? > it = exchange . getIn ( arg ) . getBody ( arg ) ;
Iterator < ? > it = expression . evaluate ( arg ) ;
Iterator < ? > it = getAndRemoveParameter ( arg ) ;
Iterator < ? > it = getCamelContext ( arg ) . getTypeConverter ( arg ) . convertTo ( arg ) ;
Iterator < List < String >> it = l . iterator ( arg ) ;
Iterator < ? > it = line . getProcessors ( arg ) . iterator ( arg ) ;
Iterator < ? > it = line . getProcessors ( arg ) . iterator ( arg ) ;
Iterator < Object > it = map . values ( arg ) . iterator ( arg ) ;
Iterator < ? > it = null ;
Iterator < Map . Entry > it = parameters . entrySet ( arg ) . iterator ( arg ) ;
Iterator iter = ObjectHelper . createIterator ( arg ) ;
Iterator iter = ObjectHelper . createIterator ( arg ) ;
Iterator iter = ObjectHelper . createIterator ( arg ) ;
Iterator iter = ObjectHelper . createIterator ( arg ) ;
Iterator iter = ObjectHelper . createIterator ( arg ) ;
Iterator < ? > iter = ObjectHelper . createIterator ( arg ) ;
Iterator < ? > iter = ObjectHelper . createIterator ( arg ) ;
Iterator < ? > iter = ObjectHelper . createIterator ( arg ) ;
Iterator < ? > iter = ObjectHelper . createIterator ( arg ) ;
Iterator < ? > iter = ObjectHelper . createIterator ( arg ) ;
Iterator < ? > iter = ObjectHelper . createIterator ( arg ) ;
Iterator < ? > iter = ObjectHelper . createIterator ( arg ) ;
Iterator < ? > iter = ObjectHelper . createIterator ( arg ) ;
Iterator < ? > iter = ObjectHelper . createIterator ( arg ) ;
Iterator iter = ObjectConverter . iterator ( arg ) ;
Iterator < Object > iter = createIterator ( arg ) ;
Iterator < Artifact > iter = dependencies . iterator ( arg ) ;
Iterator < Artifact > iter = dependencies . iterator ( arg ) ;
Iterator iter = ObjectConverter . iterator ( arg ) ;
Iterator iter = ObjectConverter . iterator ( arg ) ;
Iterator < String > iter = CastUtils . cast ( arg ) ;
Iterator < ObjectName > iter = s . iterator ( arg ) ;
Iterator < Artifact > iter = this . determineRelevantPluginDependencies ( arg ) . iterator ( arg ) ;
Iterator < Artifact > iter = this . determineRelevantPluginDependencies ( arg ) . iterator ( arg ) ;
Iterator < Object > keyIterator = dataStore . keyIterator ( arg ) ;
JAXBContext context = createContext ( arg ) ;
JAXBContext context = getJaxbContext ( arg ) ;
JAXBContext context = getJaxbContext ( arg ) ;
JAXBContext jaxbContext = createJaxbContext ( arg ) ;
JAXBContext jaxbContext = createJaxbContext ( arg ) ;
@ SuppressWarnings ( arg ) JAXBElement < ? > <unk> = new JAXBElement ( arg ) ;
JAXBElement < Envelope > envelopeEl = objectFactory . createEnvelope ( arg ) ;
JAXBElement < Envelope > envelopeEl = objectFactory . createEnvelope ( arg ) ;
JAXBElement < ? > job = ( JAXBElement < ? > ) JAXBContext . newInstance ( arg ) . createUnmarshaller ( arg ) . unmarshal ( arg ) ;
JAXBElement < ? > job = ( JAXBElement < ? > ) JAXBContext . newInstance ( arg ) . createUnmarshaller ( arg ) . unmarshal ( arg ) ;
JAXBElement < ? > job = ( JAXBElement < ? > ) JAXBContext . newInstance ( arg ) . createUnmarshaller ( arg ) . unmarshal ( arg ) ;
JAXRSClientFactoryBean answer = <unk> ( arg ) ;
JAXRSClientFactoryBean retVal = null ;
<unk> answer = <unk> ( arg ) ;
JMXEndpoint ep = context . getEndpoint ( arg ) ;
JMXEndpoint ep = context . getEndpoint ( arg ) ;
JMXEndpoint ep = context . getEndpoint ( arg ) ;
JMXEndpoint ep = context . getEndpoint ( arg ) ;
JMXEndpoint ep = context . getEndpoint ( arg ) ;
JMXEndpoint ep = context . getEndpoint ( arg ) ;
JMXEndpoint ep = context . getEndpoint ( arg ) ;
JMXEndpoint ep = context . getEndpoint ( arg ) ;
JMXEndpoint ep = context . getEndpoint ( arg ) ;
JMXEndpoint ep = context . getEndpoint ( arg ) ;
JMXEndpoint ep = context . getEndpoint ( arg ) ;
JMXEndpoint ep = context . getEndpoint ( arg ) ;
JMXEndpoint ep = context . getEndpoint ( arg ) ;
JMXEndpoint ep = context . getEndpoint ( arg ) ;
JMXEndpoint ep = context . getEndpoint ( arg ) ;
JMXEndpoint ep = context . getEndpoint ( arg ) ;
final <unk> url ;
jobs . <unk> ( arg ) ;
jobs . incrementAndGet ( arg ) ;
<unk> = new <unk> ( arg ) ;
AnnotationConfigApplicationContext acApplicationContext = new AnnotationConfigApplicationContext ( arg ) ;
JavaMailSender sender = configuration . createJavaMailSender ( arg ) ;
JavaMailSender answer = new DefaultJavaMailSender ( arg ) ;
JavaMailSender sender = configuration . createJavaMailSender ( arg ) ;
JavaMailSender sender = new DefaultJavaMailSender ( arg ) ;
JavaMailSender sender = new DefaultJavaMailSender ( arg ) ;
JavaMailSender sender = new DefaultJavaMailSender ( arg ) ;
JavaMailSender sender = new DefaultJavaMailSender ( arg ) ;
JavaMailSender sender = new DefaultJavaMailSender ( arg ) ;
JavaMailSender sender = new DefaultJavaMailSender ( arg ) ;
JavaMailSender sender = new DefaultJavaMailSender ( arg ) ;
JavaMailSender sender = new DefaultJavaMailSender ( arg ) ;
JavaMailSender sender = new DefaultJavaMailSender ( arg ) ;
JavaMailSender sender = new DefaultJavaMailSender ( arg ) ;
JavaMailSender sender = new DefaultJavaMailSender ( arg ) ;
JavaMailSender sender = new DefaultJavaMailSender ( arg ) ;
jdbcTemplate = new JdbcTemplate ( arg ) ;
HttpOperationFailedException cause = assertIsInstanceOf ( arg ) ;
HttpOperationFailedException exception ;
context . stop ( arg ) ;
context . stop ( arg ) ;
JmsComponent comp = jmsComponentAutoAcknowledge ( arg ) ;
JmsComponent component = camelContext . getComponent ( arg ) ;
JmsComponent jmsComponent = jmsComponentAutoAcknowledge ( arg ) ;
JmsComponent jmsComponent = jmsComponentAutoAcknowledge ( arg ) ;
JmsComponent jmsComponent = jmsComponentAutoAcknowledge ( arg ) ;
JmsComponent jmsComponent = jmsComponentAutoAcknowledge ( arg ) ;
JmsComponent jmsComponent = jmsComponentAutoAcknowledge ( arg ) ;
JmsComponent jmsComponent = jmsComponentAutoAcknowledge ( arg ) ;
JmsComponent jmsComponent = jmsComponentAutoAcknowledge ( arg ) ;
JmsComponent <unk> = jmsComponentAutoAcknowledge ( arg ) ;
JmsEndpoint endpoint = ( JmsEndpoint ) container . getEndpoint ( arg ) ;
JmsEndpoint endpoint = resolveMandatoryEndpoint ( arg ) ;
JmsEndpoint endpoint = resolveMandatoryEndpoint ( arg ) ;
JmsEndpoint endpoint = resolveMandatoryEndpoint ( arg ) ;
JmsEndpoint endpoint = resolveMandatoryEndpoint ( arg ) ;
JmsEndpoint endpoint = resolveMandatoryEndpoint ( arg ) ;
JmsEndpoint endpoint = resolveMandatoryEndpoint ( arg ) ;
JmsEndpoint endpoint = resolveMandatoryEndpoint ( arg ) ;
JmsEndpoint endpoint = resolveMandatoryEndpoint ( arg ) ;
JmsEndpoint endpoint = resolveMandatoryEndpoint ( arg ) ;
JmsEndpoint endpoint = resolveMandatoryEndpoint ( arg ) ;
JmsEndpoint endpoint = resolveMandatoryEndpoint ( arg ) ;
JmsEndpoint endpoint = resolveMandatoryEndpoint ( arg ) ;
JmsEndpoint endpoint = resolveMandatoryEndpoint ( arg ) ;
JmsEndpoint endpoint = resolveMandatoryEndpoint ( arg ) ;
JmsEndpoint endpoint = resolveMandatoryEndpoint ( arg ) ;
JmsEndpoint endpoint = resolveMandatoryEndpoint ( arg ) ;
JmsEndpoint endpoint = resolveMandatoryEndpoint ( arg ) ;
JmsEndpoint endpoint = resolveMandatoryEndpoint ( arg ) ;
JmsEndpoint endpoint = resolveMandatoryEndpoint ( arg ) ;
JmsEndpoint endpoint = resolveMandatoryEndpoint ( arg ) ;
JmsEndpoint endpoint = resolveMandatoryEndpoint ( arg ) ;
JmsEndpoint endpoint = getJmsEndpoint ( arg ) ;
JmsEndpoint endpoint = getJmsEndpoint ( arg ) ;
JmsEndpoint endpoint = context . getEndpoint ( arg ) ;
JmsEndpoint endpoint = context . getEndpoint ( arg ) ;
Exchange exchange = endpoint . createExchange ( arg ) ;
org . apache . camel . Message body = null ;
JmsMessage message = exchange . getIn ( arg ) ;
JmsMessage out = exchange . getOut ( arg ) ;
SjmsExchangeMessageHelper . populateExchange ( arg ) ;
SjmsExchangeMessageHelper . setCorrelationId ( arg ) ;
SjmsExchangeMessageHelper . setJMSReplyTo ( arg ) ;
JmsMessageExchangeHelper . populateExchange ( arg ) ;
JmsMessageExchangeHelper . setCorrelationId ( arg ) ;
JmsMessageExchangeHelper . setJMSReplyTo ( arg ) ;
<unk> messageType = JmsMessageHelper . <unk> ( arg ) ;
JmsOperations template = <unk> ( arg ) ;
JmsOperations template = <unk> ( arg ) ;
Producer producer = endpoint . createProducer ( arg ) ;
JmsTemplate template = <unk> ? new <unk> ( arg ) : new CamelJmsTemplate ( arg ) ;
JmsTemplate template = new CamelJmsTemplate ( arg ) ;
SimpleRegistry registry = new SimpleRegistry ( arg ) ;
SimpleRegistry registry = new SimpleRegistry ( arg ) ;
<unk> <unk> ;
<unk> <unk> = getCamelContext ( arg ) . getRegistry ( arg ) . lookupByNameAndType ( arg ) ;
JournalEndpoint endpoint = getJournalEndpoint ( arg ) ;
JournalEndpoint endpoint = getJournalEndpoint ( arg ) ;
KeyStore <unk> = context . getRegistry ( arg ) . lookupByNameAndType ( arg ) ;
KeyStore <unk> ;
KeyValueHolder < ProcessorDefinition < ? > , InstrumentationProcessor > holder = wrappedProcessors . get ( arg ) ;
KeyValueHolder < ProcessorDefinition < ? > , InstrumentationProcessor > holder = wrappedProcessors . get ( arg ) ;
KeyValueHolder < ProcessorDefinition , InstrumentationProcessor > holder = wrappedProcessors . get ( arg ) ;
KeyValueHolder < String , Integer > <unk> = new KeyValueHolder < String , Integer > ( arg ) ;
KeyValueHolder < String , Integer > foo = new KeyValueHolder < String , Integer > ( arg ) ;
KeyValueHolder < K , V > that = ( KeyValueHolder < K , V > ) o ;
<unk> keyValuePairField = <unk> . get ( arg ) ;
log . debug ( arg ) ;
log . debug ( arg ) ;
log . debug ( arg ) ;
log . debug ( arg ) ;
log . debug ( arg ) ;
log . debug ( arg ) ;
log . debug ( arg ) ;
log . debug ( arg ) ;
log . debug ( arg ) ;
log . debug ( arg ) ;
log . debug ( arg ) ;
log . debug ( arg ) ;
log . debug ( arg ) ;
log . debug ( arg ) ;
log . debug ( arg ) ;
log . debug ( arg ) ;
log . debug ( arg ) ;
log . debug ( arg ) ;
log . debug ( arg ) ;
log . debug ( arg ) ;
log . debug ( arg ) ;
log . debug ( arg ) ;
log . debug ( arg ) ;
log . debug ( arg ) ;
log . debug ( arg ) ;
log . debug ( arg ) ;
log . debug ( arg ) ;
log . debug ( arg ) ;
log . debug ( arg ) ;
log . debug ( arg ) ;
log . debug ( arg ) ;
log . debug ( arg ) ;
log . debug ( arg ) ;
log . debug ( arg ) ;
log . debug ( arg ) ;
log . debug ( arg ) ;
log . debug ( arg ) ;
log . debug ( arg ) ;
log . debug ( arg ) ;
log . debug ( arg ) ;
log . debug ( arg ) ;
log . debug ( arg ) ;
log . debug ( arg ) ;
log . debug ( arg ) ;
log . debug ( arg ) ;
log . debug ( arg ) ;
log . debug ( arg ) ;
log . debug ( arg ) ;
log . debug ( arg ) ;
log . debug ( arg ) ;
log . debug ( arg ) ;
log . debug ( arg ) ;
log . debug ( arg ) ;
log . debug ( arg ) ;
LOG . warn ( arg ) ;
LOG . warn ( arg ) ;
LOG . warn ( arg ) ;
LOG . warn ( arg ) ;
LOG . warn ( arg ) ;
LOG . warn ( arg ) ;
LOG . warn ( arg ) ;
LOG . warn ( arg ) ;
LOG . warn ( arg ) ;
LOG . error ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
log . trace ( arg ) ;
log . trace ( arg ) ;
log . trace ( arg ) ;
log . trace ( arg ) ;
log . trace ( arg ) ;
log . trace ( arg ) ;
log . trace ( arg ) ;
log . trace ( arg ) ;
log . trace ( arg ) ;
log . trace ( arg ) ;
log . trace ( arg ) ;
log . warn ( arg ) ;
log . warn ( arg ) ;
log . warn ( arg ) ;
log . warn ( arg ) ;
log . warn ( arg ) ;
log . warn ( arg ) ;
log . warn ( arg ) ;
log . warn ( arg ) ;
log . warn ( arg ) ;
log . warn ( arg ) ;
log . warn ( arg ) ;
log . warn ( arg ) ;
log . warn ( arg ) ;
log . warn ( arg ) ;
log . warn ( arg ) ;
log . warn ( arg ) ;
log . warn ( arg ) ;
log . warn ( arg ) ;
log . warn ( arg ) ;
log . warn ( arg ) ;
log . warn ( arg ) ;
log . warn ( arg ) ;
log . warn ( arg ) ;
log . warn ( arg ) ;
log . warn ( arg ) ;
log . warn ( arg ) ;
log . warn ( arg ) ;
log . warn ( arg ) ;
log . warn ( arg ) ;
log . warn ( arg ) ;
log . warn ( arg ) ;
log . warn ( arg ) ;
log . warn ( arg ) ;
log . warn ( arg ) ;
log . warn ( arg ) ;
log . warn ( arg ) ;
log . warn ( arg ) ;
log . warn ( arg ) ;
logger . trace ( arg ) ;
LOG . warn ( arg ) ;
LRUCache < String , PollingConsumer > cache = ( LRUCache < String , PollingConsumer > ) consumers ;
LRUCache < String , PollingConsumer > cache = ( LRUCache < String , PollingConsumer > ) consumers ;
LRUCache < String , PollingConsumer > cache = ( LRUCache < String , PollingConsumer > ) consumers ;
LRUCache < String , PollingConsumer > cache = ( LRUCache < String , PollingConsumer > ) consumers ;
LRUCache < String , Producer > cache = ( LRUCache < String , Producer > ) producers ;
LRUCache < String , Producer > cache = ( LRUCache < String , Producer > ) producers ;
LRUCache < String , Producer > cache = ( LRUCache < String , Producer > ) producers ;
LRUCache < String , Producer > cache = ( LRUCache < String , Producer > ) producers ;
<unk> language = resolver . <unk> ( arg ) ;
this . lastActivityDate = lastActivityDate ;
this . lastModifiedById = lastModifiedById ;
this . lastModifiedDate = lastModifiedDate ;
<unk> <unk> = <unk> . <unk> ( arg ) ;
<unk> <unk> = <unk> ( arg ) ;
assertIsInstanceOf ( arg ) ;
LinkedBlockingQueue < Exchange > blockingQueue = assertIsInstanceOf ( arg ) ;
LinkedList < Exchange > exchanges = new LinkedList < Exchange > ( arg ) ;
List < ? > list = ctx . getDelegate ( arg ) . parseListElement ( arg ) ;
List < ? > list = entityManager . createQuery ( arg ) . getResultList ( arg ) ;
List < ? > list = registry . lookupByNameAndType ( arg ) ;
List < ? > results = entityManager . createQuery ( arg ) . getResultList ( arg ) ;
List < ? > results = entityManager . createQuery ( arg ) . getResultList ( arg ) ;
List < ? > results = entityManager . createQuery ( arg ) . getResultList ( arg ) ;
List < ? > results = entityManager . createQuery ( arg ) . getResultList ( arg ) ;
List < ? > results = entityManager . createQuery ( arg ) . getResultList ( arg ) ;
List < ? > results = entityManager . createQuery ( arg ) . getResultList ( arg ) ;
List < ? > rows = responses . get ( arg ) . get ( arg ) ;
List < Object > <unk> = new ArrayList < Object > ( arg ) ;
List < <unk> > list = CastUtils . cast ( arg ) ;
List < <unk> > list = CastUtils . cast ( arg ) ;
@ SuppressWarnings ( arg ) List < Annotation > [ ] <unk> = new List [ m . getParameterTypes ( arg ) . length ] ;
Collection < Endpoint > list = context . getEndpoints ( arg ) ;
List < BundleDescriptor > bundles = <unk> ( arg ) ;
List < ChannelHandler > encoders = consumer . getConfiguration ( arg ) . <unk> ( arg ) ;
List < ChannelHandler > encoders = new ArrayList < ChannelHandler > ( arg ) ;
List encodersCopy = new ArrayList ( arg ) ;
List < <unk> > <unk> = component . resolveAndRemoveReferenceListParameter ( arg ) ;
List < ChannelHandler > decoders = new ArrayList < ChannelHandler > ( arg ) ;
List < ChannelHandler > decoders = producer . getConfiguration ( arg ) . <unk> ( arg ) ;
List decodersCopy = new ArrayList ( arg ) ;
List < <unk> > <unk> = component . resolveAndRemoveReferenceListParameter ( arg ) ;
List < Class < ? >> excluded = Arrays . asList ( arg ) ;
List < Class < ? >> excluded = Arrays . asList ( arg ) ;
List < Class < ? >> excluded = Arrays . asList ( arg ) ;
List < Class < ? >> excluded = Arrays . asList ( arg ) ;
List < Class < ? >> excluded = Arrays . asList ( arg ) ;
List < Class < ? >> interfaces = classes ;
List < Class < ? >> res = getResourceClasses ( arg ) ;
List < Class < ? extends Throwable >> exceptions = new ArrayList < Class < ? extends Throwable >> ( arg ) ;
List < Class < ? extends Throwable >> exceptions = new ArrayList < Class < ? extends Throwable >> ( arg ) ;
List < Class > answer = new ArrayList < Class > ( arg ) ;
List < Class > answer = new ArrayList < Class > ( arg ) ;
List < Class > exceptions = new ArrayList < Class > ( arg ) ;
List < Class > exceptions = new ArrayList < Class > ( arg ) ;
List < Class < ? extends Throwable >> answer = new ArrayList < Class < ? extends Throwable >> ( arg ) ;
List < Class < ? extends Throwable >> answer = new ArrayList < Class < ? extends Throwable >> ( arg ) ;
List < Class < ? extends Throwable >> answer = new ArrayList < Class < ? extends Throwable >> ( arg ) ;
List < Class < ? extends Throwable >> answer = new ArrayList < Class < ? extends Throwable >> ( arg ) ;
List < Class < ? >> <unk> = <unk> . <unk> ( arg ) ;
List < Class < ? >> classes = new ArrayList < Class < ? >> ( arg ) ;
List < Class < ? extends Throwable >> exceptions = getExceptionClasses ( arg ) ;
List < Class < ? extends Throwable >> exceptions = new ArrayList < Class < ? extends Throwable >> ( arg ) ;
List < Class < ? extends Throwable >> exceptions = new ArrayList < Class < ? extends Throwable >> ( arg ) ;
List < Class < T >> list = CastUtils . cast ( arg ) ;
List < Class < ? >> <unk> = sfb1 . getResourceClasses ( arg ) ;
List < Class < ? >> <unk> = sfb2 . getResourceClasses ( arg ) ;
List < Class < ? >> types = new ArrayList < Class < ? >> ( arg ) ;
List < RouteStartupOrder > order = dcc . getRouteStartupOrder ( arg ) ;
List < RouteStartupOrder > order = dcc . getRouteStartupOrder ( arg ) ;
List < RouteStartupOrder > order = dcc . getRouteStartupOrder ( arg ) ;
List < Customer > response = CastUtils . cast ( arg ) ;
List < Customer > <unk> = cl . <unk> ( arg ) ;
List < <unk> > list = CastUtils . cast ( arg ) ;
@ SuppressWarnings ( arg ) List < DBObject > resultList = ( List < DBObject > ) result ;
@ SuppressWarnings ( arg ) List < DBObject > resultList = ( List < DBObject > ) result ;
@ SuppressWarnings ( arg ) List < DBObject > resultList = ( List < DBObject > ) result ;
Queue < DataHolder > answer = new LinkedList < DataHolder > ( arg ) ;
Queue < DataHolder > answer = new LinkedList < DataHolder > ( arg ) ;
List < <unk> > list = te . getProperties ( arg ) . getTwitter ( arg ) . getDirectMessages ( arg ) ;
List < Source > answer = new ArrayList < Source > ( arg ) ;
List < Source > body = new ArrayList < Source > ( arg ) ;
List < Source > elements = payload . getBody ( arg ) ;
List < Source > elements = payload . getBody ( arg ) ;
List < Source > elements = payload . getBody ( arg ) ;
List < Source > elements = payload . getBody ( arg ) ;
List < Source > elements = payload . getBody ( arg ) ;
List < Element > payloadBodyElements = payload . getBody ( arg ) ;
List < Element > payloadBodyElements = <unk> ( arg ) ;
List < Endpoint > endpoints = new ArrayList < Endpoint > ( arg ) ;
List < Processor > endpoints = new ArrayList < Processor > ( arg ) ;
Queue < Exchange > answer = new LinkedList < Exchange > ( arg ) ;
Queue < Exchange > exchanges = <unk> ( arg ) ;
List < Exchange > exchanges = getEndpoint ( arg ) . getExchanges ( arg ) ;
List < Exchange > exchanges = getEndpoint ( arg ) . getExchanges ( arg ) ;
List < Exchange > exchanges = getEndpoint ( arg ) . getExchanges ( arg ) ;
List < Exchange > exchanges = getEndpoint ( arg ) . getExchanges ( arg ) ;
List < Exchange > grouped = out . getIn ( arg ) . getBody ( arg ) ;
List < Exchange > grouped = out . getIn ( arg ) . getBody ( arg ) ;
List < Exchange > grouped = out . getIn ( arg ) . getBody ( arg ) ;
List < Exchange > grouped = out . getIn ( arg ) . getBody ( arg ) ;
List < Exchange > grouped = out . getIn ( arg ) . getBody ( arg ) ;
@ SuppressWarnings ( arg ) List < Exchange > list = endpoint . getExchanges ( arg ) ;
@ SuppressWarnings ( arg ) List < Exchange > list = endpoint . getExchanges ( arg ) ;
@ SuppressWarnings ( arg ) List < Exchange > list = endpoint . getExchanges ( arg ) ;
List < Exchange > list = getReceivedExchanges ( arg ) ;
List < Exchange > list = new ArrayList < Exchange > ( arg ) ;
List < ? > polledExchanges = mock . getExchanges ( arg ) . get ( arg ) . getIn ( arg ) . getBody ( arg ) ;
List < ? > polledExchanges = mock . getExchanges ( arg ) . get ( arg ) . getIn ( arg ) . getBody ( arg ) ;
List < Processor > filters = <unk> . <unk> ( arg ) ;
List < Processor > filters = new ArrayList < Processor > ( arg ) ;
List < Future < Object >> <unk> = new ArrayList < Future < Object >> ( arg ) ;
List < Future < Integer >> response = new ArrayList < Future < Integer >> ( arg ) ;
List < Future < Integer >> response = new ArrayList < Future < Integer >> ( arg ) ;
List < GenericFile < T >> files = new ArrayList < GenericFile < T >> ( arg ) ;
LinkedList < GenericFileExchange > exchanges = new LinkedList < GenericFileExchange > ( arg ) ;
@ SuppressWarnings ( arg ) List < Handler > chain = new ArrayList < Handler > ( arg ) ;
List < Map < String , Object >> data = new ArrayList < Map < String , Object >> ( arg ) ;
List < Map < String , Object >> data = out . getOut ( arg ) . getBody ( arg ) ;
List < Map < String , Object >> data = out . getOut ( arg ) . getBody ( arg ) ;
List < ? > resultList = converter . convertTo ( arg ) ;
List < Interceptor < ? extends Message >> outInterceptors = new ArrayList < Interceptor < ? extends Message >> ( arg ) ;
List < AbstractInterceptorDefinition > interceptors = <unk> . getInterceptors ( arg ) ;
List < AbstractInterceptorDefinition > list = routeContext . getRoute ( arg ) . getInterceptors ( arg ) ;
List < InterceptorType > interceptors = route . getInterceptors ( arg ) ;
List < InterceptorType > list = output . getInterceptors ( arg ) ;
List < InterceptorDefinition > interceptors = new LinkedList < InterceptorDefinition > ( arg ) ;
List < List < String >> l = new ArrayList < List < String >> ( arg ) ;
List < List < String >> parameters = new ArrayList < List < String >> ( arg ) ;
List < <unk> > list = CamelContextHelper . <unk> ( arg ) ;
List < MBeanServer > servers = MBeanServerFactory . findMBeanServer ( arg ) ;
List < MBeanServer > servers = MBeanServerFactory . findMBeanServer ( arg ) ;
List < MBeanServer > servers = MBeanServerFactory . findMBeanServer ( arg ) ;
List < MBeanServer > servers = MBeanServerFactory . findMBeanServer ( arg ) ;
List < Map < String , Object >> lines = new ArrayList < Map < String , Object >> ( arg ) ;
List < Map < String , Object >> lines = new ArrayList < Map < String , Object >> ( arg ) ;
List < Map < ? , ? >> maps = new ArrayList < Map < ? , ? >> ( arg ) ;
List < Map > rows = CastUtils . cast ( arg ) ;
List < MethodBasedRouter > routesToRemove = new ArrayList < MethodBasedRouter > ( arg ) ;
List < ? > data = endpoint . <unk> ( arg ) . poll ( arg ) ;
@ SuppressWarnings ( arg ) List < T > list = expression . evaluate ( arg ) ;
List < Object > params = new ArrayList < Object > ( arg ) ;
List < ? > results = query . getResultList ( arg ) ;
List < ObjectName > <unk> = new LinkedList < ObjectName > ( arg ) ;
List < OnExceptionDefinition > list = <unk> ( arg ) ;
List < OptionalParameter > optParams = createOptionalParametersByName ( arg ) ;
List < OptionalParameter > optParams = createOptionalParametersByName ( arg ) ;
List < OptionalParameter > optParams = createOptionalParametersByName ( arg ) ;
List < Person > list = value ;
List < Person > list = value ;
List < ProcessDefinition > list = CastUtils . cast ( arg ) ;
List < ProcessDefinition > list = CastUtils . cast ( arg ) ;
List < ProcessorDefinition > list = assertListSize ( arg ) ;
List < ProcessorDefinition > list = route . getOutputs ( arg ) ;
List < ProcessorDefinition > list = route . getOutputs ( arg ) ;
List < ProcessorDefinition > outputs = new ArrayList < ProcessorDefinition > ( arg ) ;
List < ProcessorDefinition > outputs = route . getOutputs ( arg ) ;
List < ProcessorDefinition > outputs = route . getOutputs ( arg ) ;
List < ProcessorDefinition > outputs = route . getOutputs ( arg ) ;
List < ProcessorDefinition > outputs = toData . outputs ;
List < ProcessorDefinition > outputs = toData . outputs ;
List < ProcessorDefinition > types = route . getOutputs ( arg ) ;
List < ProcessorDefinition < ? >> <unk> = <unk> . getOutputs ( arg ) ;
List < ProcessorDefinition > children = defn . getOutputs ( arg ) ;
@ SuppressWarnings ( arg ) List < ProcessorDefinition > children = defn . getOutputs ( arg ) ;
List < ProcessorDefinition < ? >> children = parent . getOutputs ( arg ) ;
List < ProcessorDefinition < ? >> children = parent . getOutputs ( arg ) ;
List < ProcessorDefinition < ? >> children = processor . getOutputs ( arg ) ;
List < ProcessorDefinition < ? >> list = assertListSize ( arg ) ;
List < ProcessorDefinition < ? >> list = assertListSize ( arg ) ;
List < ProcessorDefinition < ? >> list = route . getOutputs ( arg ) ;
List < ProcessorDefinition < ? >> list = route . getOutputs ( arg ) ;
List < ProcessorDefinition < ? >> list = route . getOutputs ( arg ) ;
List < ProcessorDefinition < ? >> outputs = getOutputs ( arg ) ;
List < ProcessorDefinition < ? >> outputs = route . getOutputs ( arg ) ;
List < ProcessorDefinition < ? >> outputs = route . getOutputs ( arg ) ;
List < ProcessorDefinition < ? >> outputs = route . getOutputs ( arg ) ;
List < ProcessorDefinition < ? >> outputs = route . getOutputs ( arg ) ;
List < ProcessorDefinition < ? >> outputs = toData . outputs ;
List < ProcessorDefinition < ? >> outputs = toData . outputs ;
List < ProcessorDefinition < ? >> types = route . getOutputs ( arg ) ;
Iterable < ProcessorExchangePair > pairs = <unk> ( arg ) ;
List < ProcessorType > list = assertListSize ( arg ) ;
List < ProcessorType > list = new ArrayList < ProcessorType > ( arg ) ;
List < ProcessorType > list = route . getOutputs ( arg ) ;
List < ProcessorType > list = route . getOutputs ( arg ) ;
List < ProcessorType > outputs = new ArrayList < ProcessorType > ( arg ) ;
List < ProcessorType > outputs = route . getOutputs ( arg ) ;
List < ProcessorType > <unk> = processor . getOutputs ( arg ) ;
List < ProcessorType < ? >> list = assertListSize ( arg ) ;
List < ProcessorDefinition > list = route . getOutputs ( arg ) ;
List < ProcessorType > list = route . getOutputs ( arg ) ;
List < ProcessorDefinition > outputs = new ArrayList < ProcessorDefinition > ( arg ) ;
List < ProcessorType > outputs = toData . outputs ;
List < ProcessorDefinition > outputs = route . getOutputs ( arg ) ;
List < Route > routes = builder . getRouteList ( arg ) ;
List < Route > routes = builder . getRouteList ( arg ) ;
List < Route > list = getRouteListWithCurrentContext ( arg ) ;
List < Route > list = getRouteListWithCurrentContext ( arg ) ;
List < Route > routes = getRouteList ( arg ) ;
List < Route > routes = getRouteList ( arg ) ;
List < Route > routes = new ArrayList < Route > ( arg ) ;
List < RouteDefinition > list = getRouteDefinitions ( arg ) . getRoutes ( arg ) ;
List < RouteDefinition > routes = ( ( ModelCamelContext ) context ) . getRouteDefinitions ( arg ) ;
List < RouteDefinition > routes = ( ( ModelCamelContext ) context ) . getRouteDefinitions ( arg ) ;
List < RouteNode > list = routeNodes . isEmpty ( arg ) ? null : routeNodes . peek ( arg ) ;
List < RouteNode > list = routeNodes . isEmpty ( arg ) ? null : routeNodes . peek ( arg ) ;
List < RouteNode > list = routeNodes . isEmpty ( arg ) ? null : routeNodes . peek ( arg ) ;
List < RouteDefinition > answer = new ArrayList < RouteDefinition > ( arg ) ;
List < RouteDefinition > list = camelContext . getRouteDefinitions ( arg ) ;
List < RouteDefinition > list = context . getRouteDefinitions ( arg ) ;
List < RouteDefinition > <unk> = routes . getRoutes ( arg ) ;
List < RouteDefinition > routes = context . getRouteDefinitions ( arg ) ;
List < RouteDefinition > routes = context . getRouteDefinitions ( arg ) ;
List < RouteDefinition > routes = context . getRouteDefinitions ( arg ) ;
List < RouteDefinition > routes = context . getRouteDefinitions ( arg ) ;
List < RouteDefinition > routes = main . getRouteDefinitions ( arg ) ;
answer = executorService . shutdownNow ( arg ) ;
Set < Service > list = new LinkedHashSet < Service > ( arg ) ;
Set < Service > list = new LinkedHashSet < Service > ( arg ) ;
List < SoapHeader > soapHeaders = CastUtils . cast ( arg ) ;
List < SoapHeader > soapHeaders = CastUtils . cast ( arg ) ;
List < Element > body = new ArrayList < Element > ( arg ) ;
List < Source > elements = payload . getBodySources ( arg ) ;
List < Source > elements = payload . getBodySources ( arg ) ;
List < Source > elements = payload . getBodySources ( arg ) ;
List < Source > elements = payload . getBodySources ( arg ) ;
List < Source > elements = payload . getBodySources ( arg ) ;
List < Source > <unk> = <unk> . getBodySources ( arg ) ;
List < CamelContext > contextList = main . <unk> ( arg ) ;
List < Status > list = te . getProperties ( arg ) . getTwitter ( arg ) . getMentionsTimeline ( arg ) ;
List < Status > list = te . getProperties ( arg ) . getTwitter ( arg ) . getHomeTimeline ( arg ) ;
List < Status > list = te . getProperties ( arg ) . getTwitter ( arg ) . getMentions ( arg ) ;
List < Status > list = te . getProperties ( arg ) . getTwitter ( arg ) . getRetweetsOfMe ( arg ) ;
List < Status > list = te . getProperties ( arg ) . getTwitter ( arg ) . getUserTimeline ( arg ) ;
List < String > tokens = new ArrayList < String > ( arg ) ;
List < IrcChannel > channels = conf . getChannels ( arg ) ;
List < IrcChannel > channels = conf . getChannels ( arg ) ;
List < IrcChannel > channels = conf . getChannels ( arg ) ;
List < IrcChannel > channels = conf . getChannels ( arg ) ;
List < IrcChannel > channels = conf . getChannels ( arg ) ;
List < IrcChannel > channels = conf . getChannels ( arg ) ;
List < ? > children = exchange . getOut ( arg ) . getMandatoryBody ( arg ) ;
List < ? > children = exchange . getOut ( arg ) . getMandatoryBody ( arg ) ;
Dictionary < String , String > keys = conf . getKeys ( arg ) ;
Dictionary < String , String > keys = conf . getKeys ( arg ) ;
Dictionary < String , String > keys = conf . getKeys ( arg ) ;
List < ? > list = converter . convertTo ( arg ) ;
List < String > <unk> = new ArrayList < String > ( arg ) ;
List < String > users = future . get ( arg ) ;
List < String > users = future . get ( arg ) ;
List < String > val = entry . getValue ( arg ) ;
List < String > val = ( List < String > ) entry . getValue ( arg ) ;
List < Status > tweets = qr . <unk> ( arg ) ;
Set < URL > classpathURLs = new LinkedHashSet < URL > ( arg ) ;
List < Artifact > answer = new ArrayList < Artifact > ( arg ) ;
List < Artifact > answer = new ArrayList < Artifact > ( arg ) ;
List < Artifact > artifacts = new ArrayList < Artifact > ( arg ) ;
List < Artifact > artifacts = new ArrayList < Artifact > ( arg ) ;
List < ? > authors = exp . evaluate ( arg ) ;
List < ? > authors = getMockEndpoint ( arg ) . getReceivedExchanges ( arg ) . get ( arg ) . getIn ( arg ) . getBody ( arg ) ;
List < ? > authors = getMockEndpoint ( arg ) . getReceivedExchanges ( arg ) . get ( arg ) . getIn ( arg ) . getBody ( arg ) ;
List < ? > bodies = Arrays . asList ( arg ) ;
List < ? > body = template . requestBody ( arg ) ;
List < ? > body = template . requestBody ( arg ) ;
List < ? > body = template . requestBody ( arg ) ;
List < Object > bodyList = new ArrayList < Object > ( arg ) ;
List < Object > bodyList = new ArrayList < Object > ( arg ) ;
List < URL > classpathURLs = new ArrayList < URL > ( arg ) ;
List < URL > classpathURLs = new ArrayList < URL > ( arg ) ;
List < Object > data = CastUtils . cast ( arg ) ;
List < Object > data = new ArrayList < Object > ( arg ) ;
List < Object > data = new ArrayList < Object > ( arg ) ;
List < ChannelHandler > decodersCopy = new ArrayList < ChannelHandler > ( arg ) ;
List < ChannelHandler > encodersCopy = new ArrayList < ChannelHandler > ( arg ) ;
List < ? > entries = in . getBody ( arg ) ;
List < String > exclusions = new ArrayList < String > ( arg ) ;
List < String > exclusions = new ArrayList < String > ( arg ) ;
List < ? > foo = Arrays . asList ( arg ) ;
List < ? > foo = out . getOut ( arg ) . getHeader ( arg ) ;
List < ? > foo = out . getOut ( arg ) . getHeader ( arg ) ;
List < ? > foo = out . getOut ( arg ) . getHeader ( arg ) ;
List < ? > foo = out . getOut ( arg ) . getHeader ( arg ) ;
List < ? > foo = out . getOut ( arg ) . getHeader ( arg ) ;
List < ? > foo = out . getOut ( arg ) . getHeader ( arg ) ;
List < ? > foo = out . getOut ( arg ) . getHeader ( arg ) ;
List < ? > foo = out . getOut ( arg ) . getHeader ( arg ) ;
List < ? > <unk> = ( List < ? > ) exchange . getIn ( arg ) . getHeader ( arg ) ;
List < ? > list ;
List < String > list = results . get ( arg ) ;
List < String > list = results . get ( arg ) ;
java . util . List list = ( java . util . List ) ctx . getDelegate ( arg ) . parseListElement ( arg ) ;
List < ? > list = ( List < ? > ) headers . get ( arg ) ;
List < ? > list = ( List < ? > ) headers . get ( arg ) ;
List list = value ;
List list = value ;
List < Object > list = Arrays . asList ( arg ) ;
List < ? > list = DomConverter . toList ( arg ) ;
List < ? > list = ExchangeHelper . convertToType ( arg ) ;
List < ? > list = assertIsInstanceOf ( arg ) ;
List < String > list = CastUtils . cast ( arg ) ;
List < ? > list = ctx . getDelegate ( arg ) . parseListElement ( arg ) ;
List < ? > list = ctx . getDelegate ( arg ) . parseListElement ( arg ) ;
List < ? > list = ctx . getDelegate ( arg ) . parseListElement ( arg ) ;
List < ? > list = ctx . getDelegate ( arg ) . parseListElement ( arg ) ;
List < ? > list = <unk> ( arg ) ;
List < ? > list = evaluateQuery ( arg ) ;
List < ? > list = evaluateQuery ( arg ) ;
List < ? > list = exchange . getContext ( arg ) . getTypeConverter ( arg ) . convertTo ( arg ) ;
List < ? > list = expression . evaluate ( arg ) ;
List < ? > list = in . getBody ( arg ) ;
@ SuppressWarnings ( arg ) List list = jpaTemplate . find ( arg ) ;
List < ? > list = mock . getExchanges ( arg ) . get ( arg ) . getIn ( arg ) . getBody ( arg ) ;
List < ? > list = mock . getExchanges ( arg ) . get ( arg ) . getIn ( arg ) . getBody ( arg ) ;
List < ? > list = mock . getExchanges ( arg ) . get ( arg ) . getIn ( arg ) . getBody ( arg ) ;
List < ? > list = mock . getExchanges ( arg ) . get ( arg ) . getIn ( arg ) . getBody ( arg ) ;
List < ? > list = mock . getReceivedExchanges ( arg ) . get ( arg ) . getIn ( arg ) . getBody ( arg ) ;
List < ? > list = mock . getReceivedExchanges ( arg ) . get ( arg ) . getIn ( arg ) . getBody ( arg ) ;
List < Person > list = new ArrayList < Person > ( arg ) ;
List < String > list = new ArrayList < String > ( arg ) ;
List < String > list = new ArrayList < String > ( arg ) ;
List < String > list = new LinkedList < String > ( arg ) ;
List < String > list = new LinkedList < String > ( arg ) ;
List < String > list = new LinkedList < String > ( arg ) ;
List < ? > list = project . getTestClasspathElements ( arg ) ;
List < ? > list = project . getTestClasspathElements ( arg ) ;
List < ? > list = registry . lookup ( arg ) ;
List < String > list = results . get ( arg ) ;
List < ? > <unk> = mock . getExchanges ( arg ) . get ( arg ) . getIn ( arg ) . getBody ( arg ) ;
List < ? > models = exchange . getIn ( arg ) . getBody ( arg ) ;
List < ? > names = exp . evaluate ( arg ) ;
List < ? > names = exp . evaluate ( arg ) ;
List < ? > names = exp . evaluate ( arg ) ;
List < ? > names = exp . evaluate ( arg ) ;
List < ? > names = exp . evaluate ( arg ) ;
List < ? > names = exp . evaluate ( arg ) ;
List < ? > names = exp . evaluate ( arg ) ;
List < ? > names = exp . evaluate ( arg ) ;
List < ? > names = exp . evaluate ( arg ) ;
List < ? > names = exp . evaluate ( arg ) ;
List < ? > names = exp . evaluate ( arg ) ;
List < ? > names = exp . evaluate ( arg ) ;
List < ? > names = exp . evaluate ( arg ) ;
List < ? > names = exp . evaluate ( arg ) ;
List < ? > names = exp . evaluate ( arg ) ;
List < ? > names = exp . evaluate ( arg ) ;
List < ? > names = exp . evaluate ( arg ) ;
List < ? > names = exp . evaluate ( arg ) ;
List < ? > names = exp . evaluate ( arg ) ;
List < ? > names = exp . evaluate ( arg ) ;
List < ? > names = exp . evaluate ( arg ) ;
List < ? > names = exp . evaluate ( arg ) ;
List < ? > names = exp . evaluate ( arg ) ;
List < Header > oobHdr = CastUtils . cast ( arg ) ;
List < Header > oobHdr = CastUtils . cast ( arg ) ;
List < Header > oobHdr = CastUtils . cast ( arg ) ;
List < String > out = CollectionConverter . toList ( arg ) ;
List < Interceptor > outInterceptors = new ArrayList < Interceptor > ( arg ) ;
List < ? > parameter = in . getBody ( arg ) ;
List < ? > parameter = in . getBody ( arg ) ;
List < ? > parameter = in . getBody ( arg ) ;
List < Object > parameters = in . getBody ( arg ) ;
List < Object > parameters = in . getBody ( arg ) ;
List < ? > received = assertIsInstanceOf ( arg ) ;
List < ? > received = assertIsInstanceOf ( arg ) ;
List < ? > result = ( List < ? > ) mapper . <unk> ( arg ) ;
List < Object > result = out . getBody ( arg ) ;
List < Integer > resultList = CastUtils . cast ( arg ) ;
List < ? > results = jpaTemplate . find ( arg ) ;
List < ? > results = jpaTemplate . find ( arg ) ;
List < ? > results = jpaTemplate . find ( arg ) ;
List < ? > results = jpaTemplate . find ( arg ) ;
List < ? > results = jpaTemplate . find ( arg ) ;
List < Object > results = CastUtils . cast ( arg ) ;
List results = jpaTemplate . find ( arg ) ;
List results = jpaTemplate . find ( arg ) ;
List < ? > returnedCustomers = <unk> . getIn ( arg ) . getBody ( arg ) ;
List < ? > returnedCustomers = template . requestBody ( arg ) ;
List < ? > rows = responses . get ( arg ) . get ( arg ) ;
List < ? > <unk> = DomConverter . toList ( arg ) ;
List < ? > to = exchange . getIn ( arg ) . getHeader ( arg ) ;
List < ? > to = exchange . getIn ( arg ) . getHeader ( arg ) ;
List < String > tokens = new ArrayList < String > ( arg ) ;
List < ? > value = ExchangeHelper . getMandatoryHeader ( arg ) ;
List < ? > value = ExchangeHelper . getMandatoryProperty ( arg ) ;
List < ? > values = ( List < ? > ) map . get ( arg ) ;
List < ? > values = exchange . getIn ( arg ) . getHeader ( arg ) ;
<unk> < Interceptor < ? extends Message >> it = chain . <unk> ( arg ) ;
LoadBalanceDefinition <unk> = ( LoadBalanceDefinition ) defn ;
LoadBalanceType loadBalance = assertOneProcessorInstanceOf ( arg ) ;
LoadBalanceType loadBalance = assertOneProcessorInstanceOf ( arg ) ;
LoadBalanceDefinition loadBalance = assertOneProcessorInstanceOf ( arg ) ;
LoadBalanceDefinition loadBalance = assertOneProcessorInstanceOf ( arg ) ;
<unk> loadBalancer = routeContext . mandatoryLookup ( arg ) ;
<unk> type = <unk> ( arg ) ;
<unk> parallelLoanBroker = client . getProxy ( arg ) ;
registry = <unk> . <unk> ( arg ) ;
LOG . info ( arg ) ;
CamelLogger logger ;
CamelLogger logger = new CamelLogger ( arg ) ;
CamelLogger logger = new CamelLogger ( arg ) ;
LoggingErrorHandlerBuilder answer = new LoggingErrorHandlerBuilder ( arg ) ;
LoggingErrorHandlerBuilder errorHandler = ctx . getBean ( arg ) ;
Long longValue = <unk> . evaluate ( arg ) ;
Long number = new DomConverter ( arg ) . toLong ( arg ) ;
Long number = DomConverter . toLong ( arg ) ;
<unk> lookup ;
LoopDefinition loop = new LoopDefinition ( arg ) ;
LoopDefinition loop = new LoopDefinition ( arg ) ;
MBeanServer mbeanServer = getMBeanServer ( arg ) ;
MBeanServer mbeanServer = getMBeanServer ( arg ) ;
MBeanServer mbeanServer = getMBeanServer ( arg ) ;
MBeanServer mbeanServer = getMBeanServer ( arg ) ;
MBeanServer mbeanServer = getMBeanServer ( arg ) ;
MBeanServer mbeanServer = getMBeanServer ( arg ) ;
MBeanServer mbeanServer = getMBeanServer ( arg ) ;
MBeanServer mbeanServer = getMBeanServer ( arg ) ;
MBeanServer mbeanServer = getMBeanServer ( arg ) ;
MBeanServer mbeanServer = getMBeanServer ( arg ) ;
MBeanServer mbeanServer = getMBeanServer ( arg ) ;
MBeanServer mbeanServer = getMBeanServer ( arg ) ;
MBeanServer mbeanServer = getMBeanServer ( arg ) ;
MBeanServer mbeanServer = getMBeanServer ( arg ) ;
MBeanServer mbeanServer = getMBeanServer ( arg ) ;
MBeanServer mbeanServer = getMBeanServer ( arg ) ;
MBeanServer mbeanServer = getMBeanServer ( arg ) ;
MBeanServer mbeanServer = getMBeanServer ( arg ) ;
MBeanServer mbeanServer = getMBeanServer ( arg ) ;
MBeanServer mbeanServer = getMBeanServer ( arg ) ;
MBeanServer mbeanServer = getMBeanServer ( arg ) ;
MBeanServer mbeanServer = getMBeanServer ( arg ) ;
MBeanServer mbeanServer = getMBeanServer ( arg ) ;
MBeanServer mbeanServer = getMBeanServer ( arg ) ;
MBeanServer mbeanServer = getMBeanServer ( arg ) ;
MBeanServer mbeanServer = getMBeanServer ( arg ) ;
MBeanServer mbeanServer = getMBeanServer ( arg ) ;
MBeanServer mbeanServer = getMBeanServer ( arg ) ;
MBeanServer mbeanServer = getMBeanServer ( arg ) ;
MBeanServer mbeanServer = getMBeanServer ( arg ) ;
MBeanServer mbeanServer = getMBeanServer ( arg ) ;
MBeanServer mbeanServer = getMBeanServer ( arg ) ;
MBeanServer mbeanServer = getMBeanServer ( arg ) ;
MBeanServer mbeanServer = getMBeanServer ( arg ) ;
MBeanServer mbeanServer = getMBeanServer ( arg ) ;
MBeanServer mbeanServer = getMBeanServer ( arg ) ;
MBeanServer mbeanServer = getMBeanServer ( arg ) ;
MBeanServer mbeanServer = getMBeanServer ( arg ) ;
MBeanServer mbeanServer = getMBeanServer ( arg ) ;
MBeanServer mbeanServer = getMBeanServer ( arg ) ;
MBeanServer mbeanServer = getMBeanServer ( arg ) ;
MBeanServer mbeanServer = getMBeanServer ( arg ) ;
MBeanServer mbeanServer = getMBeanServer ( arg ) ;
MBeanServer mbeanServer = getMBeanServer ( arg ) ;
MBeanServer mbeanServer = getMBeanServer ( arg ) ;
MBeanServer mbeanServer = getMBeanServer ( arg ) ;
MBeanServer mbeanServer = getMBeanServer ( arg ) ;
MBeanServer mbeanServer = getMBeanServer ( arg ) ;
MBeanServer mbeanServer = getMBeanServer ( arg ) ;
MBeanServer mbeanServer = getMBeanServer ( arg ) ;
MBeanServer mbeanServer = getMBeanServer ( arg ) ;
MBeanServer mbeanServer = getMBeanServer ( arg ) ;
MBeanServer mbeanServer = getMBeanServer ( arg ) ;
MBeanServer mbeanServer = getMBeanServer ( arg ) ;
MBeanServer mbeanServer = getMBeanServer ( arg ) ;
MailBinding binding = ExchangeHelper . getBinding ( arg ) ;
MailBinding binding = ExchangeHelper . getBinding ( arg ) ;
MailConfiguration config = getEndpoint ( arg ) . getConfiguration ( arg ) ;
MailConfiguration config = new MailConfiguration ( arg ) ;
Exchange exchange = ( Exchange ) exchanges . poll ( arg ) ;
Exchange exchange = endpoint . createExchange ( arg ) ;
<unk> . start ( arg ) ;
Object mc = getManagedObjectForComponent ( arg ) ;
Object mc = getManagedObjectForComponent ( arg ) ;
PerformanceCounter counter = registeredCounters . get ( arg ) ;
Object answer = null ;
ManagementStrategy answer ;
ManagementStrategy answer ;
Entry entry = ( Entry ) iter . next ( arg ) ;
Map . Entry < String , Object > entry = getNext ( arg ) ;
Map . Entry < String , Object > entry = getNext ( arg ) ;
Map < ? , ? > map = registry . findByTypeWithName ( arg ) ;
Map < ? , ? > map = registry . findByTypeWithName ( arg ) ;
Map < Integer , Future < List < ? >>> responses = new HashMap < Integer , Future < List < ? >>> ( arg ) ;
Map < Integer , Future < String >> responses = new HashMap < Integer , Future < String >> ( arg ) ;
Map < Integer , Future < String >> responses = new HashMap < Integer , Future < String >> ( arg ) ;
Map < Integer , Future < String >> responses = new HashMap < Integer , Future < String >> ( arg ) ;
Map < Integer , Future < String >> responses = new HashMap < Integer , Future < String >> ( arg ) ;
Map < Integer , Future < String >> responses = new HashMap < Integer , Future < String >> ( arg ) ;
Map < Integer , Future < String >> responses = new HashMap < Integer , Future < String >> ( arg ) ;
Map < Integer , Future < String >> responses = new HashMap < Integer , Future < String >> ( arg ) ;
Map < Integer , Future < String >> responses = new HashMap < Integer , Future < String >> ( arg ) ;
Map < Integer , Future < String >> responses = new HashMap < Integer , Future < String >> ( arg ) ;
Map < Integer , Future < String >> responses = new HashMap < Integer , Future < String >> ( arg ) ;
Map < Integer , Future < String >> responses = new HashMap < Integer , Future < String >> ( arg ) ;
Map < Integer , Future > responses = new ConcurrentHashMap < Integer , Future > ( arg ) ;
Map < Integer , Future > responses = new ConcurrentHashMap < Integer , Future > ( arg ) ;
Map < Integer , Future > responses = new ConcurrentHashMap < Integer , Future > ( arg ) ;
Map < Integer , Future > responses = new ConcurrentHashMap < Integer , Future > ( arg ) ;
Map < Integer , Future > responses = new ConcurrentHashMap < Integer , Future > ( arg ) ;
Map < Integer , Future > responses = new ConcurrentHashMap < Integer , Future > ( arg ) ;
Map < Integer , Future > responses = new ConcurrentHashMap < Integer , Future > ( arg ) ;
Map < Integer , Future > responses = new ConcurrentHashMap < Integer , Future > ( arg ) ;
Map < Integer , Future > responses = new ConcurrentHashMap < Integer , Future > ( arg ) ;
Map < Integer , Future > responses = new ConcurrentHashMap < Integer , Future > ( arg ) ;
Map < Integer , Future < String >> responses = new ConcurrentHashMap < Integer , Future < String >> ( arg ) ;
Map < Integer , Future < String >> responses = new ConcurrentHashMap < Integer , Future < String >> ( arg ) ;
Map < Integer , Future < String >> responses = new ConcurrentHashMap < Integer , Future < String >> ( arg ) ;
Map < Integer , Future < String >> responses = new ConcurrentHashMap < Integer , Future < String >> ( arg ) ;
Map < Integer , Future < String >> responses = new ConcurrentHashMap < Integer , Future < String >> ( arg ) ;
Map < Integer , StartupRouteHolder > inputs = new TreeMap < Integer , StartupRouteHolder > ( arg ) ;
Map < Integer , List < String >> results = new HashMap < Integer , List < String >> ( arg ) ;
Map < Integer , SslSelectChannelConnector > <unk> = new HashMap < Integer , SslSelectChannelConnector > ( arg ) ;
Map < Integer , DefaultRouteStartupOrder > inputs = new TreeMap < Integer , DefaultRouteStartupOrder > ( arg ) ;
Map < String , Object > map = new LinkedHashMap < String , Object > ( arg ) ;
Map < String , Object > options = new LinkedHashMap < String , Object > ( arg ) ;
Map < String , Object > param = new HashMap < String , Object > ( arg ) ;
Map < String , Object > properties = new HashMap < String , Object > ( arg ) ;
Map < String , Object > properties = new HashMap < String , Object > ( arg ) ;
Map < String , Object > sorted = new LinkedHashMap < String , Object > ( arg ) ;
Map < ProcessorDefinition , PerformanceCounter > registeredCounters = new HashMap < ProcessorDefinition , PerformanceCounter > ( arg ) ;
Map < ProcessorDefinition , PerformanceCounter > registeredCounters = new HashMap < ProcessorDefinition , PerformanceCounter > ( arg ) ;
Map < ProcessorDefinition < ? > , PerformanceCounter > registeredCounters = new HashMap < ProcessorDefinition < ? > , PerformanceCounter > ( arg ) ;
Map < ProcessorDefinition < ? > , PerformanceCounter > registeredCounters = new HashMap < ProcessorDefinition < ? > , PerformanceCounter > ( arg ) ;
Map < ProcessorDefinition , PerformanceCounter > registeredCounters = new HashMap < ProcessorDefinition , PerformanceCounter > ( arg ) ;
Map < Integer , KeyValueHolder < Route , Consumer >> inputs = new TreeMap < Integer , KeyValueHolder < Route , Consumer >> ( arg ) ;
Map < ? , ? > items = ( Map < ? , ? > ) exchange . getIn ( arg ) . getHeader ( arg ) . get ( arg ) ;
Map < ? , ? > items = ( Map < ? , ? > ) exchange . getIn ( arg ) . getHeader ( arg ) . get ( arg ) ;
Map < String , CamelContext > beansOfType = applicationContext . getBeansOfType ( arg ) ;
Map < String , CamelContext > beansOfType = applicationContext . getBeansOfType ( arg ) ;
Map < String , Class < ? >> answer = new TreeMap < String , Class < ? >> ( arg ) ;
List < ClassMap > all = <unk> ( arg ) ;
Map < String , Component > <unk> = camelContext . getRegistry ( arg ) . findByTypeWithName ( arg ) ;
Map < String , <unk> > <unk> = getCamelContext ( arg ) . <unk> ( arg ) ;
Map < String , DataHandler > map = CastUtils . cast ( arg ) ;
Map < String , <unk> > <unk> = <unk> ( arg ) ;
Map < String , Endpoint > map = endpoint . getCamelContext ( arg ) . getRegistry ( arg ) . findByTypeWithName ( arg ) ;
Map < String , <unk> > <unk> = getContext ( arg ) . getRegistry ( arg ) . findByTypeWithName ( arg ) ;
Map < String , EntityManagerFactory > map = getCamelContext ( arg ) . getRegistry ( arg ) . findByTypeWithName ( arg ) ;
Map < String , <unk> > <unk> = getContext ( arg ) . getRegistry ( arg ) . findByTypeWithName ( arg ) ;
Map < String , <unk> > <unk> = getContext ( arg ) . getRegistry ( arg ) . findByTypeWithName ( arg ) ;
Map < String , <unk> > <unk> = getContext ( arg ) . getRegistry ( arg ) . findByTypeWithName ( arg ) ;
Map < String , List < String >> cxfHeaders = CastUtils . cast ( arg ) ;
Map < String , List < String >> cxfHeaders = ( Map ) <unk> . get ( arg ) ;
Map < String , List < String >> <unk> = CastUtils . cast ( arg ) ;
Map < String , List < String >> headers = CastUtils . cast ( arg ) ;
Map < String , List < String >> <unk> = new TreeMap < String , List < String >> ( arg ) ;
Map < String , List < String >> <unk> = new HashMap < String , List < String >> ( arg ) ;
Map < String , List < ? >> brothers = new HashMap < String , List < ? >> ( arg ) ;
Map < String , List < ? >> brothers = oldExchange . getIn ( arg ) . getBody ( arg ) ;
Map < String , ManagedAttributeInfo > attributes = new LinkedHashMap < String , ManagedAttributeInfo > ( arg ) ;
Map < String , Map < ? , ? >> map = new HashMap < String , Map < ? , ? >> ( arg ) ;
Map < String , MyService > collection = context . getRegistry ( arg ) . findByTypeWithName ( arg ) ;
Map < String , Object > <unk> = Collections . emptyMap ( arg ) ;
Map < ? , ? > map = assertIsInstanceOf ( arg ) ;
Map < String , Object > map = new CaseInsensitiveMap ( arg ) ;
Map < String , ? > maps = routeContext . lookupByType ( arg ) ;
Map < String , Object > model ;
Map < String , Object > model ;
Map < String , Object > model = factory . factory ( arg ) ;
Map < String , Object > model = factory . factory ( arg ) ;
Map < String , Object > model = new LinkedHashMap < String , Object > ( arg ) ;
Map < String , Object > <unk> = Collections . emptyMap ( arg ) ;
Map < String , Object > other = new CaseInsensitiveMap ( arg ) ;
Map < String , Object > requestContext = CastUtils . cast ( arg ) ;
WrappedMessageContext requestContext = new WrappedMessageContext ( arg ) ;
Map < String , Object > row = new LinkedHashMap < String , Object > ( arg ) ;
Map < Object , Object > sorted = new LinkedHashMap < Object , Object > ( arg ) ;
Map < String , <unk> > map = getCamelContext ( arg ) . getRegistry ( arg ) . findByTypeWithName ( arg ) ;
@ SuppressWarnings ( arg ) Map < String , Properties > info = ( Map < String , Properties > ) mbeanServer . invoke ( arg ) ;
Map < ? , ? > body = in . getBody ( arg ) ;
Map < ? , ? > body = in . getBody ( arg ) ;
Map < ? , ? > body = in . getBody ( arg ) ;
Map < ? , ? > body = in . getBody ( arg ) ;
Map < ? , ? > body = in . getBody ( arg ) ;
Map < ? , ? > body = in . getBody ( arg ) ;
Map < ? , ? > body = in . getBody ( arg ) ;
Map < ? , ? > body = in . getBody ( arg ) ;
Map < ? , ? > body = in . getBody ( arg ) ;
Map < ? , ? > body = in . getBody ( arg ) ;
Map < ? , ? > header = list . get ( arg ) . getIn ( arg ) . getBody ( arg ) ;
Map < String , Object > <unk> = <unk> . getHeader ( arg ) ;
Map < ? , ? > properties = ( Map < ? , ? > ) mbeanServer . getAttribute ( arg ) ;
Map < String , String > properties = CastUtils . cast ( arg ) ;
Map < ? , ? > properties = expression . evaluate ( arg ) ;
Map < String , String > <unk> = endpoint . <unk> ( arg ) ;
Map < ? , ? > row = list . get ( arg ) ;
Map < ? , ? > row = list . get ( arg ) ;
Map < ? , ? > row = list . get ( arg ) ;
Map < ? , ? > trailer = list . get ( arg ) . getIn ( arg ) . getBody ( arg ) ;
Map < String , T > answer = Collections . < String , T > emptyMap ( arg ) ;
Map < String , T > map = findByTypeWithName ( arg ) ;
Map < String , ThreadPoolProfile > <unk> = context . getRegistry ( arg ) . findByTypeWithName ( arg ) ;
Map < String , TraceFormatter > <unk> = camelContext . getRegistry ( arg ) . findByTypeWithName ( arg ) ;
Map < String , Tracer > map = camelContext . getRegistry ( arg ) . findByTypeWithName ( arg ) ;
Map < String , TransactionTemplate > map = getCamelContext ( arg ) . getRegistry ( arg ) . findByTypeWithName ( arg ) ;
Map < String , Object > <unk> = message . getAdvice ( arg ) ;
Map < String , Object > answer = new HashMap < String , Object > ( arg ) ;
Map < String , Object > answer = new HashMap < String , Object > ( arg ) ;
Map < String , Object > answer = new HashMap < String , Object > ( arg ) ;
Map < ? , ? > <unk> = bean . getHeaders ( arg ) ;
Map < String , ? > <unk> = applicationContext . getBeansOfType ( arg ) ;
Map < String , Object > beansOfType = CastUtils . cast ( arg ) ;
Map < String , String > body = CastUtils . cast ( arg ) ;
Map < String , String > body = CastUtils . cast ( arg ) ;
Map < String , String > body = CastUtils . cast ( arg ) ;
Map < String , String > body = CastUtils . cast ( arg ) ;
Map < String , String > body = CastUtils . cast ( arg ) ;
Map < String , String > body = CastUtils . cast ( arg ) ;
Map < String , Object > body = new HashMap < String , Object > ( arg ) ;
Map < String , Object > body = new HashMap < String , Object > ( arg ) ;
Map < String , Object > body1 = new HashMap < String , Object > ( arg ) ;
Map < String , Object > body1 = new HashMap < String , Object > ( arg ) ;
Map < String , Object > body2 = new HashMap < String , Object > ( arg ) ;
Map < String , Object > body2 = new HashMap < String , Object > ( arg ) ;
Map < String , Object > cacheSettings = URISupport . parseParameters ( arg ) ;
Map < String , List < BundleDescriptor >> config = new HashMap < String , List < BundleDescriptor >> ( arg ) ;
Map < String , ? > context = ( Map < String , ? > ) <unk> . get ( arg ) ;
Map < String , Object > foo = myBean . headers ;
Map < String , Object > <unk> = URISupport . parseParameters ( arg ) ;
Map < String , String > header = CastUtils . cast ( arg ) ;
Map < String , String > header = CastUtils . cast ( arg ) ;
Map < String , Object > headers = exchange . getIn ( arg ) . getHeaders ( arg ) ;
Map < String , Object > headers = exchange . getIn ( arg ) . getHeaders ( arg ) ;
Map < String , Object > headers = exchange . getIn ( arg ) . getHeaders ( arg ) ;
Map < String , Object > headers = exchange . getIn ( arg ) . getHeaders ( arg ) ;
Map < String , Object > headers = exchange . getIn ( arg ) . getHeaders ( arg ) ;
Map < String , Object > headers = exchange . getIn ( arg ) . getHeaders ( arg ) ;
Map < String , Object > headers = exchange . getIn ( arg ) . getHeaders ( arg ) ;
Map < String , Object > headers = exchange . getIn ( arg ) . getHeaders ( arg ) ;
Map < ? , ? > headers = exchange . getOut ( arg ) . getHeaders ( arg ) ;
Map < ? , ? > headers = exchange . getOut ( arg ) . getHeaders ( arg ) ;
Map < String , Object > headers = new HashMap < String , Object > ( arg ) ;
Map < String , Object > headers = new HashMap < String , Object > ( arg ) ;
Map < String , Object > headers = new HashMap < String , Object > ( arg ) ;
Map < String , Object > headers = new HashMap < String , Object > ( arg ) ;
Map < String , Object > headers = new HashMap < String , Object > ( arg ) ;
Map < String , Object > headers = new HashMap < String , Object > ( arg ) ;
Map < String , Object > headers = new HashMap < String , Object > ( arg ) ;
Map < String , Object > headers = new HashMap < String , Object > ( arg ) ;
Map < String , Object > headers = new HashMap < String , Object > ( arg ) ;
Map < String , Object > headers = new HashMap < String , Object > ( arg ) ;
Map < String , Object > headers = new HashMap < String , Object > ( arg ) ;
Map < String , Object > headers = new HashMap < String , Object > ( arg ) ;
Map < String , Object > headers = new HashMap < String , Object > ( arg ) ;
Map < String , Object > headers = new HashMap < String , Object > ( arg ) ;
Map < String , Object > headers = new HashMap < String , Object > ( arg ) ;
Map < String , Object > headers = new HashMap < String , Object > ( arg ) ;
Map < String , Object > headers = new HashMap < String , Object > ( arg ) ;
Map < String , Object > headers = new HashMap < String , Object > ( arg ) ;
Map < String , Object > headers = new HashMap < String , Object > ( arg ) ;
Map < String , Object > headers = new HashMap < String , Object > ( arg ) ;
Map < String , Object > headers = new HashMap < String , Object > ( arg ) ;
Map < String , Object > headers = new HashMap < String , Object > ( arg ) ;
Map < String , Object > headers = new HashMap < String , Object > ( arg ) ;
Map < String , Object > headers = new HashMap < String , Object > ( arg ) ;
Map < String , Object > headers = new HashMap < String , Object > ( arg ) ;
Map < String , Object > headers = new HashMap < String , Object > ( arg ) ;
Map < String , Object > headers = new HashMap < String , Object > ( arg ) ;
Map < String , Object > headers = new HashMap < String , Object > ( arg ) ;
Map < String , Object > headers = new HashMap < String , Object > ( arg ) ;
Map < String , Object > headers = new HashMap < String , Object > ( arg ) ;
Map < String , Object > headers = new HashMap < String , Object > ( arg ) ;
Map < String , Object > headers = new HashMap < String , Object > ( arg ) ;
Map < String , Object > headers = new HashMap < String , Object > ( arg ) ;
Map < String , Object > headers = new HashMap < String , Object > ( arg ) ;
Map < String , Object > headers = new HashMap < String , Object > ( arg ) ;
Map < String , Object > headers = new HashMap < String , Object > ( arg ) ;
Map < String , Object > headers = new HashMap < String , Object > ( arg ) ;
Map < String , Object > <unk> = new HashMap < String , Object > ( arg ) ;
Map < ? , ? > m = <unk> . objectMapper . <unk> ( arg ) ;
Map < ? , ? > map = ( Map < ? , ? > ) mock . getReceivedExchanges ( arg ) . get ( arg ) . getIn ( arg ) . getBody ( arg ) . get ( arg ) ;
Map < ? , ? > map = ( Map < ? , ? > ) mock . getReceivedExchanges ( arg ) . get ( arg ) . getIn ( arg ) . getBody ( arg ) . get ( arg ) ;
Map < ? , ? > map = ( Map < ? , ? > ) mock . getReceivedExchanges ( arg ) . get ( arg ) . getIn ( arg ) . getBody ( arg ) . get ( arg ) ;
Map < ? , ? > map = ( Map < ? , ? > ) mock . getReceivedExchanges ( arg ) . get ( arg ) . getIn ( arg ) . getBody ( arg ) . get ( arg ) ;
Map < ? , ? > map = ( Map < ? , ? > ) result . getReceivedExchanges ( arg ) . get ( arg ) . getIn ( arg ) . getBody ( arg ) . get ( arg ) ;
Map < ? , ? > map = ( Map < ? , ? > ) result . getReceivedExchanges ( arg ) . get ( arg ) . getIn ( arg ) . getBody ( arg ) . get ( arg ) ;
Map < ? , ? > map = ( Map < ? , ? > ) result . getReceivedExchanges ( arg ) . get ( arg ) . getIn ( arg ) . getBody ( arg ) . get ( arg ) ;
Map < ? , ? > map = ( Map < ? , ? > ) value ;
Map < String , String [ ] > map = Collections . <unk> ( arg ) ;
Map < ? , ? > map = ExchangeHelper . createVariableMap ( arg ) ;
Map < ? , ? > map = ExchangeHelper . createVariableMap ( arg ) ;
Map < String , Object > map = CastUtils . cast ( arg ) ;
Map < ? , ? > map = context . getTypeConverter ( arg ) . convertTo ( arg ) ;
Map < ? , ? > map = ctx . getDelegate ( arg ) . parseMapElement ( arg ) ;
Map < ? , ? > map = ctx . getDelegate ( arg ) . parseMapElement ( arg ) ;
Map < ? , ? > map = ctx . getDelegate ( arg ) . parseMapElement ( arg ) ;
Map < String , Endpoint > map = ctx . <unk> ( arg ) ;
Map < ? , ? > map = exchange . getContext ( arg ) . getTypeConverter ( arg ) . convertTo ( arg ) ;
Map < ? , ? > map = exchange . getIn ( arg ) . getBody ( arg ) ;
Map < ? , ? > map = mapper . readValue ( arg ) ;
Map < String , Object > map = mock . getReceivedExchanges ( arg ) . get ( arg ) . getIn ( arg ) . getHeaders ( arg ) ;
Map < String , Object > map = mock . getReceivedExchanges ( arg ) . get ( arg ) . getIn ( arg ) . getHeaders ( arg ) ;
Map < String , Object > map = mock . getReceivedExchanges ( arg ) . get ( arg ) . getIn ( arg ) . getHeaders ( arg ) ;
Map < String , Object > map = mock . getReceivedExchanges ( arg ) . get ( arg ) . getIn ( arg ) . getHeaders ( arg ) ;
Map < String , Object > map = mock . getReceivedExchanges ( arg ) . get ( arg ) . getIn ( arg ) . getHeaders ( arg ) ;
Map < String , Object > map = new CaseInsensitiveMap ( arg ) ;
Map < String , Object > map = new CaseInsensitiveMap ( arg ) ;
Map < String , Object > map = new HashMap < String , Object > ( arg ) ;
Map < String , Object > map = new HashMap < String , Object > ( arg ) ;
Map < String , Object > map = new HashMap < String , Object > ( arg ) ;
Map < String , Object > map = new HashMap < String , Object > ( arg ) ;
Map < String , Object > map = new HashMap < String , Object > ( arg ) ;
Map < String , Object > map = new HashMap < String , Object > ( arg ) ;
Map < String , Object > map = new HashMap < String , Object > ( arg ) ;
Map < String , Object > map = new HashMap < String , Object > ( arg ) ;
Map < String , Object > map = new HashMap < String , Object > ( arg ) ;
Map < String , Object > map = new HashMap < String , Object > ( arg ) ;
Map < String , Object > map = new HashMap < String , Object > ( arg ) ;
Map < String , Object > map = new HashMap < String , Object > ( arg ) ;
Map < String , Object > map = new HashMap < String , Object > ( arg ) ;
Map < String , Object > map = new HashMap < String , Object > ( arg ) ;
Map < String , Object > map = new HashMap < String , Object > ( arg ) ;
Map < String , Object > map = new HashMap < String , Object > ( arg ) ;
Map < String , Object > map = new HashMap < String , Object > ( arg ) ;
Map < Object , Object > map = new LinkedHashMap < Object , Object > ( arg ) ;
Map < ? , ? > map = registry . lookupByType ( arg ) ;
Map < ? , ? > map = registry . lookupByType ( arg ) ;
Map < ? , ? > <unk> = ( Map < ? , ? > ) mock . getReceivedExchanges ( arg ) . get ( arg ) . getIn ( arg ) . getBody ( arg ) . get ( arg ) ;
Map < String , Object > options = new HashMap < String , Object > ( arg ) ;
Map < Object , Object > param = new HashMap < Object , Object > ( arg ) ;
request . getParameterMap ( arg ) ;
Map < String , Object > parameters = URISupport . parseParameters ( arg ) ;
Map < String , Object > parameters = URISupport . parseParameters ( arg ) ;
Map < String , Object > parameters = URISupport . parseParameters ( arg ) ;
Map < String , Object > parameters = new HashMap < String , Object > ( arg ) ;
Map < String , Object > parameters = new HashMap < String , Object > ( arg ) ;
Map < String , Object > parameters = new HashMap < String , Object > ( arg ) ;
Map < String , Object > parameters = new HashMap < String , Object > ( arg ) ;
Map < String , Object > parameters = new HashMap < String , Object > ( arg ) ;
Map < String , Object > parameters = new HashMap < String , Object > ( arg ) ;
Map < String , Object > parameters = new HashMap < String , Object > ( arg ) ;
Map < String , Object > parameters = new HashMap < String , Object > ( arg ) ;
Map < String , Object > parameters = new HashMap < String , Object > ( arg ) ;
Map < String , Object > parameters = new HashMap < String , Object > ( arg ) ;
Map < String , Object > parameters = new HashMap < String , Object > ( arg ) ;
Map < ? , ? > payload = context . getTypeConverter ( arg ) . convertTo ( arg ) ;
Map < String , ? > <unk> = CastUtils . cast ( arg ) ;
Map < String , Object > printSettings = URISupport . parseParameters ( arg ) ;
Map < ? , ? > <unk> = jdbcTemplate . <unk> ( arg ) ;
Map < ? , ? > property = exchange . getProperty ( arg ) ;
Map < ? , ? > property = exchange . getProperty ( arg ) ;
Map < ? , ? > property = exchange . getProperty ( arg ) ;
Map rc = new LinkedHashMap ( arg ) ;
Map < String , Object > rc = new LinkedHashMap < String , Object > ( arg ) ;
Map < String , String > row = CastUtils . cast ( arg ) ;
Map < String , String > row = CastUtils . cast ( arg ) ;
Map < String , String > row = CastUtils . cast ( arg ) ;
Map < ? , ? > row = ExchangeHelper . convertToMandatoryType ( arg ) ;
Map < ? , ? > row = ExchangeHelper . convertToMandatoryType ( arg ) ;
Map < ? , ? > row1 = assertIsInstanceOf ( arg ) ;
Map < ? , ? > row1 = assertIsInstanceOf ( arg ) ;
Map < ? , ? > <unk> = assertIsInstanceOf ( arg ) ;
Map < QName , ? > services = CastUtils . cast ( arg ) ;
Map < String , Object > <unk> = <unk> . <unk> ( arg ) ;
Map < String , String > trailer = CastUtils . cast ( arg ) ;
Map < String , String > trailer = data . get ( arg ) ;
Map < String , String > trailer = CastUtils . cast ( arg ) ;
Map < String , ? > types = routeContext . lookupByType ( arg ) ;
Map < ? , ? > <unk> = ( Map < ? , ? > ) converted ;
Map < String , Object > variableMap = ExchangeHelper . createVariableMap ( arg ) ;
Map < String , Object > variableMap = ExchangeHelper . createVariableMap ( arg ) ;
Map < String , Object > variableMap = ExchangeHelper . createVariableMap ( arg ) ;
InputStreamCache cache = new InputStreamCache ( arg ) ;
Marshaller marshaller = <unk> ( arg ) ;
Message in = exchange . get ( arg ) . getIn ( arg ) ;
Message message = exchange . getIn ( arg ) . getMandatoryBody ( arg ) ;
Message message = exchange . getIn ( arg ) . getMandatoryBody ( arg ) ;
Message message = HL7Converter . parse ( arg ) ;
Message answer = endpoint . getBinding ( arg ) . makeJmsMessage ( arg ) ;
Message message = getBinding ( arg ) . <unk> ( arg ) ;
Message message = in ;
Message message = getBinding ( arg ) . makeJmsMessage ( arg ) ;
Message message = msg . <unk> ( arg ) ;
Message message = new GenericMessage < Object > ( arg ) ;
Message < ? > message = new GenericMessage < Object > ( arg ) ;
Message message = new GenericMessage ( arg ) ;
Message message ;
if ( oldExchange != null ) {
Message out ;
Message request = SjmsExchangeMessageHelper . createMessage ( arg ) ;
Message request = JmsMessageExchangeHelper . createMessage ( arg ) ;
Message request = getInMessage ( arg ) ;
Message < ? > response ;
Message response = SjmsExchangeMessageHelper . createMessage ( arg ) ;
Message response ;
PollableChannel channelA = ( PollableChannel ) applicationContext . getBean ( arg ) ;
MessageChannel outputChannel = applicationContext . getBean ( arg ) ;
MessageChannel outputChannel = applicationContext . getBean ( arg ) ;
MessageChannel outputChannel = getMandatoryBean ( arg ) ;
MessageChannel outputChannel = getMandatoryBean ( arg ) ;
MessageChannel requestChannel = applicationContext . getBean ( arg ) ;
MessageChannel requestChannel = applicationContext . getBean ( arg ) ;
AbstractPollableChannel responseChannel = ( AbstractPollableChannel ) applicationContext . getBean ( arg ) ;
RAWDataFormatFeature feature = new RAWDataFormatFeature ( arg ) ;
RAWDataFormatFeature feature = new RAWDataFormatFeature ( arg ) ;
@ SuppressWarnings ( arg ) MessageDefinition messageType = JaxbConverter . toMessageType ( arg ) ;
DefaultMessageHeader <unk> = new DefaultMessageHeader ( arg ) ;
IdempotentRepository repository = mandatoryLookup ( arg ) ;
Message answer = exchange . getInMessage ( arg ) ;
MessageImpl answer = ( MessageImpl ) exchange . getInMessage ( arg ) ;
MessageDefinition answer = new MessageDefinition ( arg ) ;
MessageDefinition message = converter . convertTo ( arg ) ;
MessageDefinition messageType = JaxbConverter . toMessageType ( arg ) ;
Method method = <unk> ( arg ) ;
Method method ;
@ SuppressWarnings ( arg ) org . apache . cxf . frontend . MethodDispatcher <unk> = ( org . apache . cxf . frontend . MethodDispatcher ) service . get ( arg ) ;
<unk> <unk> = <unk> ( arg ) ;
beanInfo . createInvocation ( arg ) ;
beanInfo . createInvocation ( arg ) ;
info . createInvocation ( arg ) ;
info . createInvocation ( arg ) ;
endpoint = new <unk> ( arg ) ;
Exchange exchange = endpoint . createExchange ( arg ) ;
Exchange exchange = new DefaultExchange ( arg ) ;
assertMockEndpointsSatisfied ( arg ) ;
assertMockEndpointsSatisfied ( arg ) ;
assertMockEndpointsSatisfied ( arg ) ;
assertMockEndpointsSatisfied ( arg ) ;
endpoint . setExpectedMessageCount ( arg ) ;
MockEndpoint endpoint = camelContext . getEndpoint ( arg ) ;
MockEndpoint endpoint = camelContext . getEndpoint ( arg ) ;
MockEndpoint endpoint = context . getEndpoint ( arg ) ;
MockEndpoint endpoint = context . getEndpoint ( arg ) ;
MockEndpoint endpoint = context . getEndpoint ( arg ) ;
MockEndpoint endpoint = context . getEndpoint ( arg ) ;
MockEndpoint endpoint = context . getEndpoint ( arg ) ;
MockEndpoint ep = context . getEndpoint ( arg ) ;
MockEndpoint ep = context . getEndpoint ( arg ) ;
MockEndpoint ep = context . getEndpoint ( arg ) ;
MockEndpoint ep = context . getEndpoint ( arg ) ;
MockEndpoint ep = context . getEndpoint ( arg ) ;
MockEndpoint error = context . getEndpoint ( arg ) ;
MockEndpoint error = context . getEndpoint ( arg ) ;
MockEndpoint mock = context . getEndpoint ( arg ) ;
MockEndpoint mock = context . getEndpoint ( arg ) ;
MockEndpoint mock = ctx . getEndpoint ( arg ) ;
MockEndpoint mock = ctx . getEndpoint ( arg ) ;
MockEndpoint mock = ctx . getEndpoint ( arg ) ;
MockEndpoint mock = ctx . getEndpoint ( arg ) ;
MockEndpoint mock = ctx . getEndpoint ( arg ) ;
MockEndpoint mock = ctx . getEndpoint ( arg ) ;
MockEndpoint mock = ctx . getEndpoint ( arg ) ;
setupMock ( arg ) ;
setupMock ( arg ) ;
setupMock ( arg ) ;
setupMock ( arg ) ;
setupMock ( arg ) ;
setupMock ( arg ) ;
setupMock ( arg ) ;
setupMock ( arg ) ;
setupMock ( arg ) ;
setupMock ( arg ) ;
setupMock ( arg ) ;
MockEndpoint mockEndpoint = getMockEndpoint ( arg ) ;
mockEndpoint . reset ( arg ) ;
mockEndpoint . reset ( arg ) ;
MockEndpoint mockSearchEndpoint = getMockEndpoint ( arg ) ;
MockEndpoint mockSearchEndpoint = getMockEndpoint ( arg ) ;
MockEndpoint mockSearchEndpoint = getMockEndpoint ( arg ) ;
MockEndpoint mockSearchEndpoint = getMockEndpoint ( arg ) ;
MockEndpoint out = getMockEndpoint ( arg ) ;
MockEndpoint <unk> = context . getEndpoint ( arg ) ;
MockEndpoint <unk> = context . getEndpoint ( arg ) ;
MockEndpoint <unk> = context . getEndpoint ( arg ) ;
MockEndpoint <unk> = context . getEndpoint ( arg ) ;
MockEndpoint result = context . getEndpoint ( arg ) ;
MockEndpoint result = context . getEndpoint ( arg ) ;
MockEndpoint result = context . getEndpoint ( arg ) ;
MockEndpoint result = resolveMandatoryEndpoint ( arg ) ;
MockEndpoint result = getMockEndpoint ( arg ) ;
MockEndpoint resultEndpoint = context . getEndpoint ( arg ) ;
MockEndpoint resultEndpoint = context . getEndpoint ( arg ) ;
MockEndpoint resultEndpoint = context . getEndpoint ( arg ) ;
MockEndpoint resultEndpoint = context . getEndpoint ( arg ) ;
MockEndpoint resultEndpoint = context . getEndpoint ( arg ) ;
MockEndpoint resultEndpoint = context . getEndpoint ( arg ) ;
MockEndpoint resultEndpoint = context . getEndpoint ( arg ) ;
MockEndpoint resultEndpoint = context . getEndpoint ( arg ) ;
MockEndpoint resultEndpoint = context . getEndpoint ( arg ) ;
MockEndpoint resultEndpoint = context . getEndpoint ( arg ) ;
MockEndpoint resultEndpoint = context . getEndpoint ( arg ) ;
MockEndpoint resultEndpoint = context . getEndpoint ( arg ) ;
MockEndpoint resultEndpoint = context . getEndpoint ( arg ) ;
MockEndpoint resultEndpoint = context . getEndpoint ( arg ) ;
MockEndpoint resultEndpoint = ctx . getEndpoint ( arg ) ;
MockEndpoint resultEndpoint = getMockEndpoint ( arg ) ;
MockEndpoint resultEndpoint = getMockEndpoint ( arg ) ;
MockEndpoint resultEndpoint = getMockEndpoint ( arg ) ;
MockEndpoint resultEndpoint = getMockEndpoint ( arg ) ;
MockEndpoint resultEndpoint = getMockEndpoint ( arg ) ;
MockEndpoint resultEndpoint = getMockEndpoint ( arg ) ;
MockEndpoint resultEndpoint = getMockEndpoint ( arg ) ;
MockEndpoint resultEndpoint = getMockEndpoint ( arg ) ;
MockEndpoint resultEndpoint = getMockEndpoint ( arg ) ;
MockEndpoint resultEndpoint = getMockEndpoint ( arg ) ;
MockEndpoint resultEndpoint = getMockEndpoint ( arg ) ;
MockEndpoint resultEndpoint = getMockEndpoint ( arg ) ;
MockEndpoint resultEndpoint = getMockEndpoint ( arg ) ;
MockEndpoint resultEndpoint = getMockEndpoint ( arg ) ;
MockEndpoint success = context . getEndpoint ( arg ) ;
MockEndpoint success = context . getEndpoint ( arg ) ;
MockEndpoint success = context . getEndpoint ( arg ) ;
MockEndpoint success = context . getEndpoint ( arg ) ;
MockEndpoint success = context . getEndpoint ( arg ) ;
MockEndpoint success = context . getEndpoint ( arg ) ;
<unk> <unk> ;
MulticastProcessor mp = endpoint . <unk> ( arg ) ;
MulticastProcessor mp = endpoint . <unk> ( arg ) ;
Multiplier multiplier = context . getBean ( arg ) ;
Multiplier multiplier = context . getBean ( arg ) ;
MyBean myBean = context . getRegistry ( arg ) . lookupByNameAndType ( arg ) ;
MyBean myBean = context . getRegistry ( arg ) . lookupByNameAndType ( arg ) ;
context . getTypeConverter ( arg ) . convertTo ( arg ) ;
MyCompletionProcessor myCompletionProcessor = context . getRegistry ( arg ) . lookupByNameAndType ( arg ) ;
MyCompletionProcessor myCompletionProcessor = context . getRegistry ( arg ) . lookupByNameAndType ( arg ) ;
MyCompletionProcessor myCompletionProcessor = context . getRegistry ( arg ) . lookupByNameAndType ( arg ) ;
MyCompletionProcessor myCompletionProcessor = context . getRegistry ( arg ) . lookupByNameAndType ( arg ) ;
<unk> cool = applicationContext . getBean ( arg ) ;
MyErrorBean bean = context . getRegistry ( arg ) . lookupByNameAndType ( arg ) ;
MyErrorBean bean = context . getRegistry ( arg ) . lookupByNameAndType ( arg ) ;
MyExchange actual = ( MyExchange ) endpoint . createExchange ( arg ) ;
MyExchange actual = endpoint . createExchange ( arg ) ;
MyPolicy foo = context . getRegistry ( arg ) . lookupByNameAndType ( arg ) ;
MyPolicy foo = context . getRegistry ( arg ) . lookupByNameAndType ( arg ) ;
MyPolicy foo = context . getRegistry ( arg ) . lookupByNameAndType ( arg ) ;
MyPolicy foo = context . getRegistry ( arg ) . lookupByNameAndType ( arg ) ;
<unk> myProcessor = applicationContext . getBean ( arg ) ;
MyProduceBean bean = context . getRegistry ( arg ) . lookupByNameAndType ( arg ) ;
MyProduceBean bean = context . getRegistry ( arg ) . lookupByNameAndType ( arg ) ;
MyProduceBean bean = context . getRegistry ( arg ) . lookupByNameAndType ( arg ) ;
MyProduceBean bean = context . getRegistry ( arg ) . lookupByNameAndType ( arg ) ;
MyProduceBean bean2 = context . getRegistry ( arg ) . lookupByNameAndType ( arg ) ;
MyProduceBean bean2 = context . getRegistry ( arg ) . lookupByNameAndType ( arg ) ;
<unk> producer = context . getRegistry ( arg ) . lookupByNameAndType ( arg ) ;
MyProxySender <unk> = ac . getBean ( arg ) ;
MyProxySender sender = ac . getBean ( arg ) ;
MyProxySender sender = ac . getBean ( arg ) ;
MyProxySender sender = ac . getBean ( arg ) ;
MyService myService = context . getRegistry ( arg ) . lookupByNameAndType ( arg ) ;
<unk> <unk> = assertIsInstanceOf ( arg ) ;
this . name = name ;
this . name = name ;
<unk> < Processor > <unk> = getRoute ( direct:
NettyHelper . writeBodySync ( arg ) ;
NettyHelper . writeBodySync ( arg ) ;
NettyHelper . writeBodyAsync ( arg ) ;
NettyHelper . writeBodyAsync ( arg ) ;
exchange . setIn ( arg ) ;
exchange . setOut ( arg ) ;
NettySharedHttpServerBootstrapConfiguration configuration = new NettySharedHttpServerBootstrapConfiguration ( arg ) ;
<unk> = <unk> . getByName ( arg ) ;
FileComponent comp = new FileComponent ( arg ) ;
FileComponent comp = new FileComponent ( arg ) ;
FileEndpoint endpoint = new FileEndpoint ( arg ) ;
FileEndpoint endpoint = resolveMandatoryEndpoint ( arg ) ;
FileEndpoint endpoint = resolveMandatoryEndpoint ( arg ) ;
FileEndpoint fileEndpoint = Assertions . assertInstanceOf ( arg ) ;
FileEndpoint fileEndpoint = resolveMandatoryEndpoint ( arg ) ;
TypeConversionException cause = assertIsInstanceOf ( arg ) ;
TypeConversionException cause = assertIsInstanceOf ( arg ) ;
Node node = session . getNodeByIdentifier ( arg ) ;
Node node = session . getNodeByIdentifier ( arg ) ;
Node node = session . getNodeByIdentifier ( arg ) ;
NodeMetadata . Status nodeState = null ;
when ( arg ) . <unk> ( arg ) ;
NotifierBuilder notifier = new NotifierBuilder ( arg ) . from ( arg ) . whenReceivedSatisfied ( arg ) . and ( arg ) . from ( arg ) . whenExactlyDone ( arg ) . <unk> ( arg ) . create ( arg ) ;
NotifierBuilder notifier = new NotifierBuilder ( arg ) . from ( arg ) . whenReceivedSatisfied ( arg ) . create ( arg ) ;
NotifyBuilder notify = new NotifyBuilder ( arg ) . whenBodiesReceived ( arg ) . create ( arg ) ;
NotifyBuilder notify = new NotifyBuilder ( arg ) . whenExactlyDone ( arg ) . create ( arg ) ;
NotifyBuilder notify = new NotifyBuilder ( arg ) . wereSentTo ( arg ) . whenDone ( arg ) . create ( arg ) ;
NotifyBuilder notify = new NotifyBuilder ( arg ) . wereSentTo ( arg ) . whenDone ( arg ) . create ( arg ) ;
NotifyBuilder notify = new NotifyBuilder ( arg ) . wereSentTo ( arg ) . wereSentTo ( arg ) . whenDone ( arg ) . create ( arg ) ;
NotifyBuilder event = event ( arg ) . whenBodiesReceived ( arg ) . create ( arg ) ;
NotifyBuilder event = event ( arg ) . whenDone ( arg ) . create ( arg ) ;
NotifyBuilder event = event ( arg ) . whenDone ( arg ) . create ( arg ) ;
NotifyBuilder event = event ( arg ) . whenDone ( arg ) . create ( arg ) ;
NotifyBuilder event = event ( arg ) . whenDone ( arg ) . create ( arg ) ;
NotifyBuilder event = event ( arg ) . whenDone ( arg ) . create ( arg ) ;
NotifyBuilder event = event ( arg ) . whenExactlyDone ( arg ) . create ( arg ) ;
NotifyBuilder event = event ( arg ) . <unk> ( arg ) . create ( arg ) ;
onExceptionRetry . incrementAndGet ( arg ) ;
onExceptionRetry . incrementAndGet ( arg ) ;
onExceptionRetry . incrementAndGet ( arg ) ;
onExceptionRetry . incrementAndGet ( arg ) ;
onExceptionRetry . incrementAndGet ( arg ) ;
onExceptionRetry . incrementAndGet ( arg ) ;
ObjectName [ ] mBeans = mbeansRegistered . toArray ( arg ) ;
Object result ;
Object [ ] result = exchange . getIn ( arg ) . getBody ( arg ) ;
Object answer = getContext ( arg ) . createUnmarshaller ( arg ) . unmarshal ( arg ) ;
String [ ] answer = null ;
Object bean = context . getRegistry ( arg ) . lookupByName ( arg ) ;
Object bean = context . getRegistry ( arg ) . lookupByName ( arg ) ;
Object bean = context . getRegistry ( arg ) . lookupByName ( arg ) ;
Object bean = context . getRegistry ( arg ) . lookupByName ( arg ) ;
String body ;
String body ;
String body = exchange . getIn ( arg ) . getBody ( arg ) ;
Object body = <unk> . getOut ( arg ) ;
Object body = <unk> . <unk> ( arg ) ;
Object body = template . sendBody ( http:
Object body = template . sendBody ( http:
<unk> bufferedImage = null ;
Object decoded = shouldUrlDecodeHeader ( arg ) ;
Object decoded = shouldUrlDecodeHeader ( arg ) ;
Object destination = getReplyToDestination ( arg ) ;
Object <unk> ;
Object resetTimestampObj = mBeanServer . getAttribute ( arg ) ;
Object resetTimestampObj = mBeanServer . getAttribute ( arg ) ;
Object <unk> ;
Object header = exchange . getIn ( arg ) . getHeader ( arg ) ;
Object instance ;
Object jmsReplyTo = JmsMessageHelper . <unk> ( arg ) ;
String key = <unk> . evaluate ( arg ) ;
Object <unk> = <unk> . get ( arg ) ;
Object lookedUpBean = context . getRegistry ( arg ) . lookupByName ( arg ) ;
Object lookedUpBean = context . getRegistry ( arg ) . lookupByName ( arg ) ;
Object lookedUpBean = context . getRegistry ( arg ) . lookupByName ( arg ) ;
Object lookedUpBean = context . getRegistry ( arg ) . lookupByName ( arg ) ;
Object lookedUpBean = context . getRegistry ( arg ) . lookupByName ( arg ) ;
Object lookup = context . getRegistry ( arg ) . lookupByName ( arg ) ;
Object lookup = context . getRegistry ( arg ) . lookupByName ( arg ) ;
Object <unk> = getManagementObjectStrategy ( arg ) . <unk> ( arg ) ;
Object me = getManagementObjectStrategy ( arg ) . <unk> ( arg ) ;
Object <unk> = this . value ;
String out = responses . get ( arg ) . get ( arg ) ;
String out = responses . get ( arg ) . get ( arg ) ;
Object out = template . requestBody ( mina:tcp:
Object out = template . requestBody ( mina:tcp:
Object out = template . requestBody ( mina:tcp:
Object <unk> = camelContext . getRegistry ( arg ) . lookupByName ( arg ) ;
pool = context . getExecutorServiceManager ( arg ) . lookup ( arg ) ;
Object ref = <unk> ( arg ) ;
<unk> . <unk> ( arg ) ;
Object response ;
Object response = template . requestBody ( arg ) ;
Object response = template . requestBody ( arg ) ;
Object result = null ;
Object result = template . requestBody ( arg ) ;
Object result = ( Object ) template . requestBody ( arg ) ;
Object result = cache . remove ( arg ) ;
Object result = evaluateQuery ( arg ) ;
Object result = getDefaultValueForPrimitive ( arg ) ;
Object result = getDefaultValueForPrimitive ( arg ) ;
Object result = getDefaultValueForPrimitive ( arg ) ;
E result = null ;
sendHeaders ( arg ) ;
sendHeaders ( arg ) ;
sendHeaders ( arg ) ;
sendHeaders ( arg ) ;
sendHeaders ( arg ) ;
sendHeaders ( arg ) ;
sendHeaders ( arg ) ;
sendHeaders ( arg ) ;
sendHeaders ( arg ) ;
sendHeaders ( arg ) ;
sendHeaders ( arg ) ;
sendHeaders ( arg ) ;
sendHeaders ( arg ) ;
sendHeaders ( arg ) ;
sendHeaders ( arg ) ;
sendHeaders ( arg ) ;
sendHeaders ( arg ) ;
sendHeaders ( arg ) ;
sendHeaders ( arg ) ;
sendHeaders ( arg ) ;
sendHeaders ( arg ) ;
sendHeaders ( arg ) ;
sendHeaders ( arg ) ;
Object result = template . requestBody ( mina:tcp:
Object result = template . requestBody ( arg ) ;
Object result = template . requestBody ( arg ) ;
Object result = template . requestBody ( arg ) ;
Object result = template . requestBody ( arg ) ;
Object result = template . requestBody ( arg ) ;
Object result = template . requestBodyAndHeader ( arg ) ;
Object result = template . requestBodyAndHeader ( arg ) ;
Object <unk> = <unk> . getHeaders ( arg ) . <unk> ( arg ) ;
Object service = context . getRegistry ( arg ) . lookupByName ( arg ) ;
Object <unk> = <unk> . <unk> ( arg ) ;
Object state = null ;
Object unmarshalled = unmarshal ( arg ) ;
Object unmarshalled = unmarshal ( arg ) ;
Object unmarshalled = unmarshal ( arg ) ;
Object val = entry . getValue ( arg ) ;
Object value = originalValues . get ( arg ) ;
Object value = originalValues . get ( arg ) ;
T value = applicationContext . getBean ( arg ) ;
Object value = context . getTypeConverter ( arg ) . convertTo ( arg ) ;
Object value = exchange . getContext ( arg ) . getTypeConverter ( arg ) . tryConvertTo ( arg ) ;
Object value = converter . tryConvertTo ( arg ) ;
Object value = converter . tryConvertTo ( arg ) ;
Object value = converter . tryConvertTo ( arg ) ;
Object value ;
String value = entry . getValue ( arg ) ;
Object value ;
Object value ;
Object value ;
Object value = getPostProcessor ( arg ) . getInjectionValue ( arg ) ;
Object value = getRegistry ( arg ) . lookupByName ( arg ) ;
helper . getInjectionValue ( arg ) ;
helper . getInjectionValue ( arg ) ;
helper . getInjectionValue ( arg ) ;
Object value = <unk> . newInstance ( arg ) ;
Object value = JmsMessageHelper . getProperty ( arg ) ;
Object value = <unk> ( arg ) ;
Object value ;
Object value = org . mvel2 . MVEL . executeExpression ( arg ) ;
Integer <unk> = getAndRemoveParameter ( arg ) ;
Object value = properties . get ( arg ) ;
Object value = properties . get ( arg ) ;
Object value = registry . lookupByName ( arg ) ;
Object value = registry . lookupByName ( arg ) ;
Object value = template . requestBody ( arg ) ;
Object value = template . requestBody ( arg ) ;
Object value = template . requestBody ( arg ) ;
Object value = template . requestBody ( arg ) ;
Object value = template . requestBody ( arg ) ;
Object value = template . requestBody ( arg ) ;
final Object values = expression . evaluate ( arg ) ;
IOHelper . close ( arg ) ;
IOHelper . close ( arg ) ;
IOHelper . close ( arg ) ;
IOHelper . close ( arg ) ;
IOHelper . close ( arg ) ;
IOHelper . close ( arg ) ;
IOHelper . close ( arg ) ;
IOHelper . close ( arg ) ;
IOHelper . close ( arg ) ;
IOHelper . close ( arg ) ;
IOHelper . close ( arg ) ;
IOHelper . close ( arg ) ;
IOHelper . close ( arg ) ;
IOHelper . close ( arg ) ;
IOHelper . close ( arg ) ;
IOHelper . close ( arg ) ;
IOHelper . close ( arg ) ;
IOHelper . close ( arg ) ;
IOHelper . close ( arg ) ;
IOHelper . close ( arg ) ;
IOHelper . close ( arg ) ;
IOHelper . close ( arg ) ;
IOHelper . close ( arg ) ;
IOHelper . close ( arg ) ;
IOHelper . close ( arg ) ;
IOHelper . close ( arg ) ;
IOHelper . close ( arg ) ;
IOHelper . close ( arg ) ;
IOHelper . close ( arg ) ;
IOHelper . close ( arg ) ;
IOHelper . close ( arg ) ;
IOHelper . close ( arg ) ;
IOHelper . close ( arg ) ;
ObjectHelper . notNull ( arg ) ;
ObjectHelper . notNull ( arg ) ;
ObjectHelper . notNull ( arg ) ;
ObjectHelper . notNull ( arg ) ;
ObjectHelper . notNull ( arg ) ;
ObjectHelper . notNull ( arg ) ;
if ( <unk> ( arg ) != null ) {
throw ObjectHelper . wrapRuntimeCamelException ( arg ) ;
throw ObjectHelper . wrapRuntimeCamelException ( arg ) ;
throw ObjectHelper . wrapRuntimeCamelException ( arg ) ;
throw ObjectHelper . wrapRuntimeCamelException ( arg ) ;
ObjectInput in = ExchangeHelper . convertToMandatoryType ( arg ) ;
ObjectInput in = ExchangeHelper . convertToType ( arg ) ;
ObjectName [ ] mBeans = mbeansRegistered . keySet ( arg ) . toArray ( arg ) ;
ObjectName <unk> = s . iterator ( arg ) . next ( arg ) ;
ObjectName <unk> = iter . next ( arg ) ;
ObjectOutput out = ExchangeHelper . convertToMandatoryType ( arg ) ;
ObjectOutput out = ExchangeHelper . convertToType ( arg ) ;
ObjectHelper . notNull ( arg ) ;
Observable < Order > <unk> = Observable . from ( arg ) ;
ObserverSender < T > observer = new ObserverSender < T > ( arg ) ;
<unk> counter = context . getRegistry ( arg ) . lookupByNameAndType ( arg ) ;
Pattern answer = getPatternAnnotation ( arg ) ;
Pattern answer = getPatternAnnotation ( arg ) ;
Pattern answer = getPatternAnnotation ( arg ) ;
<unk> <unk> = <unk> . <unk> ( arg ) ;
Option [ ] options = new Option [ ] { val } ;
Option [ ] options = combine ( arg ) ;
Option [ ] options = combine ( arg ) ;
Option [ ] options = combine ( arg ) ;
Option [ ] options = combine ( arg ) ;
Option [ ] options = combine ( arg ) ;
Option [ ] options = combine ( arg ) ;
Option [ ] options = combine ( arg ) ;
Option [ ] options = combine ( arg ) ;
Option [ ] options = combine ( arg ) ;
Option [ ] options = combine ( arg ) ;
Option [ ] options = combine ( arg ) ;
Option [ ] options = combine ( arg ) ;
Option [ ] options = combine ( arg ) ;
Option [ ] options = combine ( arg ) ;
Option [ ] options = combine ( arg ) ;
Option [ ] options = combine ( arg ) ;
Option [ ] options = combine ( arg ) ;
Option [ ] options = combine ( arg ) ;
Option [ ] options = combine ( arg ) ;
Option [ ] options = combine ( arg ) ;
Option [ ] options = combine ( arg ) ;
Option [ ] options = combine ( arg ) ;
Option [ ] options = combine ( arg ) ;
Option [ ] options = combine ( arg ) ;
Option [ ] options = combine ( arg ) ;
Option [ ] options = combine ( arg ) ;
Option [ ] options = combine ( arg ) ;
Option [ ] options = combine ( arg ) ;
Option [ ] options = combine ( arg ) ;
Option [ ] options = combine ( arg ) ;
Option [ ] options = combine ( arg ) ;
Option [ ] options = combine ( arg ) ;
Option [ ] options = combine ( arg ) ;
Option [ ] options = combine ( arg ) ;
Option [ ] options = combine ( arg ) ;
Option [ ] options = combine ( arg ) ;
Option [ ] options = combine ( arg ) ;
Option [ ] options = combine ( arg ) ;
Option [ ] options = combine ( arg ) ;
Option [ ] options = combine ( arg ) ;
Option [ ] options = combine ( arg ) ;
OsgiPackageScanClassResolver resolver = new OsgiPackageScanClassResolver ( arg ) ;
OsgiPackageScanClassResolver resolver = new OsgiPackageScanClassResolver ( arg ) ;
<unk> otherwise = choice . <unk> ( arg ) ;
OutboundBinding < <unk> , Message , <unk> > binding = resolveAndRemoveReferenceParameter ( arg ) ;
OutboundBinding < <unk> , GLoginData , GLoginData > <unk> = resolveAndRemoveReferenceParameter ( arg ) ;
OutputDefinition out = ( OutputDefinition ) processor ;
OutputStream os = ( OutputStream ) file . getBody ( arg ) ;
this . ownerId = ownerId ;
PEMParser r = null ;
PGPDataFormat <unk> = new PGPDataFormat ( arg ) ;
<unk> key = PGPDataFormatUtil . <unk> ( arg ) ;
PGPPublicKey key = PGPDataFormatUtil . <unk> ( arg ) ;
<unk> <unk> = null ;
<unk> = port ;
<unk> <unk> = getClass ( arg ) . <unk> ( arg ) ;
PackageScanFilter test = new <unk> ( arg ) ;
PackageScanFilter test = new <unk> ( arg ) ;
PackageScanFilter test = getCompositeFilter ( arg ) ;
PackageScanFilter test = getCompositeFilter ( arg ) ;
PackageScanFilter test = getCompositeFilter ( arg ) ;
PackageScanFilter test = new <unk> ( arg ) ;
<unk> answer = registry . lookupByNameAndType ( arg ) ;
ManagedPerformanceCounter counter = registeredCounters . get ( arg ) ;
ManagedPerformanceCounter pc = new ManagedPerformanceCounter ( arg ) ;
<unk> . Person output = mock . getReceivedExchanges ( arg ) . get ( arg ) . getIn ( arg ) . getBody ( arg ) ;
PhaseInterceptor < ? extends Message > p = ( PhaseInterceptor < ? extends Message > ) i ;
PhaseInterceptor < ? extends Message > p = ( PhaseInterceptor < ? extends Message > ) i ;
PhaseInterceptor < ? > <unk> = ( PhaseInterceptor < ? > ) it . next ( arg ) ;
<unk> component = resolvePojoComponent ( arg ) ;
PojoEndpoint endpoint = ( PojoEndpoint ) container . resolveEndpoint ( arg ) ;
<unk> <unk> = exchange . <unk> ( arg ) ;
Policy required = lookup ( arg ) ;
Policy required = lookup ( arg ) ;
Policy required = lookup ( arg ) ;
PolicyBuilder answer = new PolicyBuilder ( arg ) ;
PolicyDefinition answer = new PolicyDefinition ( arg ) ;
PolicyDefinition answer = new PolicyDefinition ( arg ) ;
DirectChannel responseChannel = ( DirectChannel ) applicationContext . getBean ( arg ) ;
Predicate predicate = contains ( arg ) ;
Predicate predicate = contains ( arg ) ;
Predicate predicate = filterProcessor . <unk> ( arg ) ;
Predicate predicate = language . createPredicate ( arg ) ;
@ SuppressWarnings ( arg ) Predicate answer = SimpleBackwardsCompatibleParser . <unk> ( arg ) ;
Predicate predicate = ExpressionToPredicateAdapter . toPredicate ( arg ) ;
PredicateAssertHelper . assertMatches ( arg ) ;
PredicateAssertHelper . assertMatches ( arg ) ;
PredicateAssertHelper . assertMatches ( arg ) ;
PredicateAssertHelper . assertMatches ( arg ) ;
PredicateAssertHelper . assertMatches ( arg ) ;
PrivateKey pk = context . getRegistry ( arg ) . lookupByNameAndType ( arg ) ;
PrivateKey <unk> = <unk> . <unk> ( arg ) ;
ProceedDefinition proceed = ProcessorDefinitionHelper . findFirstTypeInOutputs ( arg ) ;
ProceedDefinition proceed = <unk> . findFirstTypeInOutputs ( arg ) ;
Processor last = target . createProcessor ( arg ) ;
Processor otherwiseProcessor = null ;
Processor p = target . createProcessor ( arg ) ;
Processor processor = null ;
Processor < E > processor = <unk> ( arg ) ;
Processor processor = null ;
Processor processor = processors . get ( arg ) ;
Processor processor = route . getProcessor ( arg ) ;
Processor processor = route . getProcessor ( arg ) ;
Processor <unk> = createOutputsProcessor ( arg ) ;
Processor childProcessor = this . createChildProcessor ( arg ) ;
Processor childProcessor = this . createChildProcessor ( arg ) ;
Processor childProcessor = this . createChildProcessor ( arg ) ;
Processor childProcessor = this . createChildProcessor ( arg ) ;
Processor childProcessor = this . createChildProcessor ( arg ) ;
Processor childProcessor = this . createChildProcessor ( arg ) ;
Processor childProcessor = this . createChildProcessor ( arg ) ;
Processor childProcessor = this . createChildProcessor ( arg ) ;
Processor childProcessor = this . createChildProcessor ( arg ) ;
Processor childProcessor = this . createChildProcessor ( arg ) ;
Processor childProcessor = this . createChildProcessor ( arg ) ;
Processor childProcessor = this . createChildProcessor ( arg ) ;
Processor childProcessor = this . createChildProcessor ( arg ) ;
Processor childProcessor = createOutputsProcessor ( arg ) ;
Processor childProcessor = createOutputsProcessor ( arg ) ;
errorHandler = routeContext . createProcessor ( arg ) ;
RouteNode last = tuow . getLastNode ( arg ) ;
RouteNode last = tuow . <unk> ( arg ) ;
Processor processor = unwrap ( arg ) ;
Processor processor = unwrap ( arg ) ;
Processor processor = unwrap ( arg ) ;
Processor processor = unwrap ( arg ) ;
Processor processor = Pipeline . newInstance ( arg ) ;
Processor processor = <unk> . <unk> ( arg ) ;
Processor processor = createProcessor ( arg ) ;
Processor processor = createProcessor ( arg ) ;
Processor processor = createProcessor ( arg ) ;
Processor processor = processors . get ( arg ) != null ? processors . get ( arg ) : <unk> ;
Processor processor = getProcessorWithoutErrorHandler ( arg ) ;
Processor processor = getProcessorWithoutErrorHandler ( arg ) ;
Processor processor = getProcessorWithoutErrorHandler ( arg ) ;
Processor processor = getProcessorWithoutErrorHandler ( arg ) ;
Processor processor = getProcessorWithoutErrorHandler ( arg ) ;
Processor processor = getProcessorWithoutErrorHandler ( arg ) ;
Processor processor = getProcessorWithoutErrorHandler ( arg ) ;
Processor processor = getProcessorWithoutErrorHandler ( arg ) ;
Processor processor = getProcessorWithoutErrorHandler ( arg ) ;
Processor processor = this . createChildProcessor ( arg ) ;
Processor processor = this . createChildProcessor ( arg ) ;
Processor processor = this . createChildProcessor ( arg ) ;
Processor tryProcessor = createOutputsProcessor ( arg ) ;
UnitOfWorkProcessor <unk> = new UnitOfWorkProcessor ( arg ) ;
ProcessorDefinition first = getOutputs ( arg ) . get ( arg ) ;
ProcessorDefinition first = getOutputs ( arg ) . get ( arg ) ;
ProcessorDefinition keep = outputs . get ( arg ) ;
ProcessorDefinition keep = outputs . get ( arg ) ;
ProcessorDefinition out = outputs . get ( arg ) ;
ProcessorDefinition out = outputs . get ( arg ) ;
ProcessorDefinition < ? > block = ( ProcessorDefinition < ? > ) <unk> . <unk> ( arg ) ;
ProcessorDefinition < ? > def = channel . <unk> ( arg ) ;
ProcessorDefinition < ? > def = end ( arg ) ;
ProcessorDefinition < ? > def = node ;
ProcessorDefinition < ? > def = this ;
ProcessorDefinition < ? > definition = null ;
ProcessorDefinition < ? > defn = ( ProcessorDefinition < ? > ) def ;
ProcessorDefinition < ? > defn = ( ProcessorDefinition < ? > ) this ;
ProcessorDefinition < ? > defn = ( ProcessorDefinition < ? > ) this ;
ProcessorDefinition < ? > first = getOutputs ( arg ) . get ( arg ) ;
ProcessorDefinition < ? > first = getOutputs ( arg ) . get ( arg ) ;
ProcessorDefinition < ? > first = getOutputs ( arg ) . get ( arg ) ;
ProcessorDefinition < ? > first = getOutputs ( arg ) . get ( arg ) ;
ProcessorDefinition < ? > keep = outputs . get ( arg ) ;
ProcessorDefinition < ? > keep = outputs . get ( arg ) ;
ProcessorDefinition < ? > keep = outputs . get ( arg ) ;
ProcessorDefinition < ? > me = ( ProcessorDefinition < ? > ) this ;
ProcessorDefinition < ? > next = <unk> . next ( arg ) ;
ProcessorDefinition < ? > old = otherwise ;
ProcessorDefinition < ? > old = otherwise ;
ProcessorDefinition < ? > out = outputs . get ( arg ) ;
ProcessorDefinition < ? > out = outputs . get ( arg ) ;
ProcessorDefinition < ? > out = outputs . get ( arg ) ;
ProcessorDefinition < ? > out = outputs . get ( arg ) ;
ProcessorDefinition < ? > output = getOutputs ( arg ) . get ( arg ) ;
ProcessorDefinition < ? > parent = definition . getParent ( arg ) ;
ProcessorDefinition < ? > processorDefinition = null ;
ProcessorDefinition < ? > <unk> = childDefinition != null ? childDefinition : <unk> ;
ProcessorDefinitionHelper . gatherAllNodeIds ( arg ) ;
ProcessorDefinitionHelper . gatherAllNodeIds ( arg ) ;
ProcessDefinition answer = new ProcessDefinition ( arg ) ;
ProcessDefinition answer = new ProcessDefinition ( arg ) ;
ProcessDefinition to = assertOneProcessorInstanceOf ( arg ) ;
ProcessorType node ;
ProcessorType processorType = proxy . getOutputs ( arg ) . get ( arg ) ;
ProcessorDefinition last = tuow . <unk> ( arg ) ;
ProcessorDefinition route = from ( arg ) ;
Producer answer = producers . get ( arg ) ;
Producer producer = getProducer ( arg ) ;
Producer producer = getProducer ( arg ) ;
Producer producer = getProducer ( arg ) ;
Producer producer = getProducer ( arg ) ;
Producer producer = endpoint . createProducer ( arg ) ;
Producer producer = endpoint . createProducer ( arg ) ;
Producer producer = endpoint . createProducer ( arg ) ;
Producer producer = endpoint . createProducer ( arg ) ;
Producer producer = producerCache . getProducer ( arg ) ;
Producer producer = producerCache . getProducer ( arg ) ;
Producer producer = producerCache . acquireProducer ( arg ) ;
final Producer producer = doGetProducer ( arg ) ;
Producer producer = doGetProducer ( arg ) ;
Producer producer = cache . acquireProducer ( arg ) ;
final Producer producer = pair . getProducer ( arg ) ;
Producer producer = getProducerCache ( arg ) . getProducer ( arg ) ;
ObserverSender observer = new ObserverSender ( arg ) ;
ProducerTemplate template = camelContext . createProducerTemplate ( arg ) ;
ProducerTemplate template = camelContext . createProducerTemplate ( arg ) ;
ProducerTemplate template = camelContext . createProducerTemplate ( arg ) ;
ProducerTemplate template = context . createProducerTemplate ( arg ) ;
ProducerTemplate template = context . createProducerTemplate ( arg ) ;
ProducerTemplate camelTemplate = context . getBean ( arg ) ;
ProducerTemplate camelTemplate = context . getBean ( arg ) ;
ProducerTemplate lookup = context . getRegistry ( arg ) . lookupByNameAndType ( arg ) ;
ProducerTemplate lookup = context . getRegistry ( arg ) . lookupByNameAndType ( arg ) ;
ProducerTemplate lookup = context . getRegistry ( arg ) . lookupByNameAndType ( arg ) ;
ProducerTemplate lookup = context . getRegistry ( arg ) . lookupByNameAndType ( arg ) ;
ProducerTemplate lookup = context . getRegistry ( arg ) . lookupByNameAndType ( arg ) ;
ProducerTemplate lookup = context1 . getRegistry ( arg ) . lookupByNameAndType ( arg ) ;
ProducerTemplate lookup = context2 . getRegistry ( arg ) . lookupByNameAndType ( arg ) ;
ProducerTemplate lookup2 = context . getRegistry ( arg ) . lookupByNameAndType ( arg ) ;
ProducerTemplate lookup2 = context . getRegistry ( arg ) . lookupByNameAndType ( arg ) ;
ProducerTemplate lookup2 = context . getRegistry ( arg ) . lookupByNameAndType ( arg ) ;
Properties answer = context . getRegistry ( arg ) . lookupByNameAndType ( arg ) ;
Properties answer ;
<unk> = cache ? <unk> . get ( arg ) : null ;
Dictionary < String , String > props = new Hashtable < String , String > ( arg ) ;
Dictionary < String , String > props = new Hashtable < String , String > ( arg ) ;
Dictionary < String , String > props = new Hashtable < String , String > ( arg ) ;
Dictionary < String , String > props = new Hashtable < String , String > ( arg ) ;
Dictionary < String , String > props = new Hashtable < String , String > ( arg ) ;
Dictionary < String , String > props = new Hashtable < String , String > ( arg ) ;
Dictionary < String , String > props = new Hashtable < String , String > ( arg ) ;
Dictionary < String , String > props = new Hashtable < String , String > ( arg ) ;
<unk> if ( pc != null && text . contains ( arg ) ) {
PropertiesComponent pc = getComponent ( arg ) ;
PropertiesComponent pc = context . getComponent ( arg ) ;
PropertiesComponent pc = context . getComponent ( arg ) ;
<unk> <unk> = bean . <unk> ( arg ) . <unk> ( arg ) . <unk> ( arg ) ;
ProtocolCodecFactory codecFactory = configuration . getCodec ( arg ) ;
ProtocolCodecFactory codecFactory = configuration . getCodec ( arg ) ;
configurer = new ProxyHttpClientConfigurer ( arg ) ;
configurer = new ProxyHttpClientConfigurer ( arg ) ;
<unk> pk = context . getRegistry ( arg ) . lookupByNameAndType ( arg ) ;
QName <unk> = strategy . <unk> ( http:
QName service = endpoint . <unk> ( arg ) ;
this . scheduler = scheduler ;
<unk> endpoint = <unk> ( arg ) ;
Exchange exchange = createExchange ( arg ) ;
<unk> <unk> = OBJECT_MAPPER . readValue ( arg ) ;
<unk> qr = te . getProperties ( arg ) . getTwitter ( arg ) . <unk> ( arg ) ;
BlockingQueue < E > queue = component . getOrCreateQueue ( arg ) ;
BlockingQueue < E > queue = registry . get ( arg ) ;
SedaEndpoint receiverEndpoint = ( SedaEndpoint ) camelContext . getEndpoint ( arg ) ;
QueueEndpoint receiverEndpoint = ( QueueEndpoint ) camelContext . getEndpoint ( arg ) ;
<unk> configuration = context . getRegistry ( arg ) . lookupByNameAndType ( arg ) ;
retry . incrementAndGet ( arg ) ;
retry . incrementAndGet ( arg ) ;
retry . incrementAndGet ( arg ) ;
retry . incrementAndGet ( arg ) ;
retry . incrementAndGet ( arg ) ;
retry . incrementAndGet ( arg ) ;
RabbitMQEndpoint endpoint = context . getEndpoint ( arg ) ;
RabbitMQEndpoint endpoint = context . getEndpoint ( arg ) ;
Reader bodyReader = exchange . getIn ( arg ) . getMandatoryBody ( arg ) ;
Reader bodyReader = exchange . getIn ( arg ) . getMandatoryBody ( arg ) ;
Reader br = IOHelper . buffered ( arg ) ;
<unk> reader = IOConverter . toReader ( arg ) ;
Reader reader = encoding != null ? new InputStreamReader ( arg ) : new InputStreamReader ( arg ) ;
RecipientList p1 = assertIsInstanceOf ( arg ) ;
RecipientListDefinition < Type > answer = new RecipientListDefinition < Type > ( arg ) ;
RecipientListDefinition < Type > answer = new RecipientListDefinition < Type > ( arg ) ;
RecipientListDefinition < Type > answer = new RecipientListDefinition < Type > ( arg ) ;
RecipientListDefinition < ? > node = assertOneProcessorInstanceOf ( arg ) ;
RecipientListDefinition node = assertOneProcessorInstanceOf ( arg ) ;
<unk> node = assertOneProcessorInstanceOf ( arg ) ;
RecoverableAggregationRepository recoverable = ( RecoverableAggregationRepository ) aggregationRepository ;
AsyncRedeliveryTask task = new AsyncRedeliveryTask ( arg ) ;
<unk> ( arg ) ;
beanHolder = new <unk> ( arg ) ;
RemoteFile < ? > file = ( RemoteFile < ? > ) exchange . getProperty ( arg ) ;
RemoteFile < ? > file = ( RemoteFile < ? > ) exchange . getProperty ( arg ) ;
RemoteFile < ChannelSftp . LsEntry > <unk> = <unk> ( arg ) ;
RemoteFileConfiguration config = ftpEndpoint . getConfiguration ( arg ) ;
RemoteFileConfiguration config = ftpEndpoint . getConfiguration ( arg ) ;
RemoteFileConfiguration config = ftpEndpoint . getConfiguration ( arg ) ;
RemoteFileConfiguration config = getConfiguration ( arg ) ;
RemoteFileConfiguration config = getEndpoint ( arg ) . getConfiguration ( arg ) ;
RemoteFileConfiguration config = sftpEndpoint . getConfiguration ( arg ) ;
RemoteFileConfiguration config = sftpEndpoint . getConfiguration ( arg ) ;
RemoteFileConsumer < T > consumer = <unk> ( arg ) ;
RemoteFileConsumer consumer ;
RemoteFileEndpoint < ? > endpoint = resolveMandatoryEndpoint ( arg ) ;
GenericFileExchange < T > answer = new GenericFileExchange < T > ( arg ) ;
GenericFileExchange exchange = ( GenericFileExchange ) mock . getExchanges ( arg ) . get ( arg ) ;
GenericFileExchange exchange = ( GenericFileExchange ) mock . getExchanges ( arg ) . get ( arg ) ;
GenericFileExchange <unk> = ( GenericFileExchange ) getEndpoint ( arg ) . createExchange ( arg ) ;
<unk> replyManager = new <unk> ( arg ) ;
<unk> answer = in . getBody ( arg ) ;
final <unk> <unk> ;
ResequenceDefinition answer = new ResequenceDefinition ( arg ) ;
ResequenceDefinition answer = new ResequenceDefinition ( arg ) ;
ResequenceDefinition resequencer = assertOneProcessorInstanceOf ( arg ) ;
ResequenceDefinition resequencer = assertOneProcessorInstanceOf ( arg ) ;
ResequencerType resequencer = assertOneProcessorInstanceOf ( arg ) ;
ResequencerType resequencer = assertOneProcessorInstanceOf ( arg ) ;
log . error ( arg ) ;
log . debug ( arg ) ;
log . trace ( arg ) ;
log . warn ( arg ) ;
log . warn ( arg ) ;
log . warn ( arg ) ;
Resource resource ;
final Resource resource = <unk> ( arg ) ;
Response response = responseReceivedEvent . getResponse ( arg ) ;
Response response = responseReceivedEvent . getResponse ( arg ) ;
<unk> <unk> ;
RestletEndpoint endpoint = consumer . getEndpoint ( arg ) ;
RestletEndpoint endpoint = consumer . getEndpoint ( arg ) ;
<unk> = <unk> . <unk> ( arg ) ;
Route route = mbean . getRoute ( arg ) ;
route = ctx . getRoute ( arg ) ;
RouteBuilder builder = ( RouteBuilder ) ctx . getBean ( arg ) ;
RouteBuilder builder = ( RouteBuilder ) ctx . getBean ( arg ) ;
RouteBuilder builder = ( RouteBuilder ) ctx . getBean ( arg ) ;
RouteBuilder builder = ( RouteBuilder ) ctx . getBean ( arg ) ;
RouteBuilder builder = ( RouteBuilder ) ctx . getBean ( arg ) ;
RouteBuilder builder = ( RouteBuilder ) ctx . getBean ( arg ) ;
RouteBuilder builder = ( RouteBuilder ) ctx . getBean ( arg ) ;
RouteBuilder builder = ( RouteBuilder ) ctx . getBean ( arg ) ;
RouteBuilder builder = ( RouteBuilder ) ctx . getBean ( arg ) ;
RouteBuilder builder = ( RouteBuilder ) ctx . getBean ( arg ) ;
RouteBuilder builder = ( RouteBuilder ) ctx . getBean ( arg ) ;
RouteBuilder < Exchange > builder = <unk> ( arg ) ;
BuilderStatement rc = new BuilderStatement ( arg ) ;
RouteContext routeContext = new DefaultRouteContext ( arg ) ;
RouteContext routeContext = new DefaultRouteContext ( arg ) ;
RouteContext routeContext = new DefaultRouteContext ( arg ) ;
RouteContext routeContext = new DefaultRouteContext ( arg ) ;
@ SuppressWarnings ( arg ) RouteDefinition definition = context . getRouteDefinition ( arg ) ;
@ SuppressWarnings ( arg ) RouteDefinition definition = context . getRouteDefinition ( arg ) ;
RouteDefinition route = getRoute ( arg ) ;
initParent ( arg ) ;
initParent ( arg ) ;
initParent ( arg ) ;
initParent ( arg ) ;
RouteNode <unk> = traced . getLastNode ( arg ) ;
<unk> policy = applicationContext . getBean ( arg ) ;
CamelInternalProcessor internal = new CamelInternalProcessor ( arg ) ;
RouteService routeService = routeServices . get ( arg ) ;
RouteService routeService = routeServices . get ( arg ) ;
RouteDefinition answer = routeCollection . from ( arg ) ;
RouteDefinition answer = routeCollection . from ( arg ) ;
RouteDefinition answer = routeCollection . from ( arg ) ;
RouteDefinition answer = routeCollection . from ( arg ) ;
RouteDefinition route = assertOneElement ( arg ) ;
RouteDefinition route = assertOneRoute ( arg ) ;
RouteDefinition route = assertOneRoute ( arg ) ;
RouteDefinition route = assertOneRoute ( arg ) ;
RouteDefinition route = assertOneRoute ( arg ) ;
RouteDefinition route = assertOneRoute ( arg ) ;
RouteDefinition route = assertOneRoute ( arg ) ;
RouteDefinition route = assertOneRoute ( arg ) ;
RouteDefinition route = assertOneRoute ( arg ) ;
RouteDefinition route = assertOneRoute ( arg ) ;
RouteDefinition route = assertOneRoute ( arg ) ;
RouteDefinition route = assertOneRoute ( arg ) ;
RouteDefinition route = assertOneRoute ( arg ) ;
RouteDefinition route = assertOneRoute ( arg ) ;
RouteDefinition route = assertOneRoute ( arg ) ;
RouteDefinition route = assertOneRoute ( arg ) ;
RouteDefinition route = assertOneRoute ( arg ) ;
RouteDefinition route = assertOneRoute ( arg ) ;
RouteDefinition route = assertOneRoute ( arg ) ;
RouteDefinition route = assertOneRoute ( arg ) ;
RouteDefinition route = assertOneRoute ( arg ) ;
RouteDefinition route = assertOneRoute ( arg ) ;
RouteDefinition route = assertOneRoute ( arg ) ;
RouteDefinition route = assertOneRoute ( arg ) ;
RouteDefinition route = new RouteDefinition ( arg ) ;
RouteDefinition route = routes . get ( arg ) ;
RouteDefinition routeType = list . get ( arg ) ;
RouteDefinition routeType = routeContext . getRoute ( arg ) ;
RouteDefinition routeType = routeContext . getRoute ( arg ) ;
RoutesBuilder routes = <unk> . <unk> ( arg ) ;
@ SuppressWarnings ( arg ) RoutesBuilder builder = <unk> ( arg ) ;
RoutesDefinition answer = new RoutesDefinition ( arg ) ;
RoutesType routes = resource . <unk> ( arg ) . getRouteDefinitions ( arg ) ;
RoutesDefinition routes = resource . path ( arg ) . <unk> ( arg ) . get ( arg ) ;
RoutingSlipDefinition < Type > answer = new RoutingSlipDefinition < Type > ( arg ) ;
RoutingSlipDefinition < Type > answer = new RoutingSlipDefinition < Type > ( arg ) ;
RoutingSlipDefinition < Type > answer = new RoutingSlipDefinition < Type > ( arg ) ;
RoutingSlipDefinition < Type > answer = new RoutingSlipDefinition < Type > ( arg ) ;
RoutingSlipDefinition < ? > node = assertOneProcessorInstanceOf ( arg ) ;
RoutingSlipDefinition < ? > node = assertOneProcessorInstanceOf ( arg ) ;
RoutingSlipDefinition < ? > node = assertOneProcessorInstanceOf ( arg ) ;
RoutingSlipDefinition node = assertOneProcessorInstanceOf ( arg ) ;
RoutingSlipDefinition node = assertOneProcessorInstanceOf ( arg ) ;
RoutingSlipDefinition node = assertOneProcessorInstanceOf ( arg ) ;
RoutingSlipType node = assertOneProcessorInstanceOf ( arg ) ;
RoutingSlipType node = assertOneProcessorInstanceOf ( arg ) ;
RoutingSlipType node = assertOneProcessorInstanceOf ( arg ) ;
TransactedRuntimeCamelException rce ;
RuntimeCamelException rce ;
RuntimeException rce ;
SQLException se = ( SQLException ) throwable ;
<unk> context ;
<unk> <unk> ;
Scanner scanner = ObjectHelper . getScanner ( arg ) ;
Scanner scanner = ObjectHelper . getScanner ( arg ) ;
ScheduledExecutorService answer = camelContext . getRegistry ( arg ) . lookupByNameAndType ( arg ) ;
ScheduledExecutorService answer = routeContext . getCamelContext ( arg ) . getRegistry ( arg ) . lookupByNameAndType ( arg ) ;
ScheduledExecutorService scheduler = camelContext . getExecutorServiceStrategy ( arg ) . newScheduledThreadPool ( arg ) ;
ScheduledExecutorService scheduler = camelContext . getExecutorServiceManager ( arg ) . newScheduledThreadPool ( arg ) ;
ScheduledExecutorService scheduler = camelContext . getExecutorServiceManager ( arg ) . newScheduledThreadPool ( arg ) ;
ScheduledExecutorService scheduler = camelContext . getExecutorServiceManager ( arg ) . getScheduledExecutorService ( arg ) ;
ScheduledExecutorService scheduler = camelContext . getExecutorServiceManager ( arg ) . getScheduledExecutorService ( arg ) ;
<unk> answer = new <unk> ( arg ) ;
SizedScheduledExecutorService tp = assertIsInstanceOf ( arg ) ;
SizedScheduledExecutorService tp = assertIsInstanceOf ( arg ) ;
SizedScheduledExecutorService tp = assertIsInstanceOf ( arg ) ;
<unk> <unk> = <unk> . <unk> ( arg ) ;
<unk> <unk> = context . getRegistry ( arg ) . lookupByNameAndType ( arg ) ;
QueueReference ref = getComponent ( arg ) . getOrCreateQueue ( arg ) ;
QueueReference ref = getComponent ( arg ) . <unk> ( arg ) ;
SendDefinition send = ( SendDefinition ) out ;
SendDefinition < ? > send = ( SendDefinition < ? > ) defn ;
SendDefinition < ? > send = assertIsInstanceOf ( arg ) ;
SendDefinition < ? > <unk> = assertIsInstanceOf ( arg ) ;
SendDefinition < ? > <unk> = assertIsInstanceOf ( arg ) ;
Processor processor = processorType . createProcessor ( arg ) ;
SendProcessor <unk> = ( SendProcessor ) <unk> ( arg ) ;
assertIsInstanceOf ( arg ) ;
<unk> server ;
server = svrBean . create ( arg ) ;
Service service = cxfExchange . get ( arg ) ;
ServiceHelper . startServices ( arg ) ;
ServiceHelper . startServices ( arg ) ;
ServiceHelper . startServices ( arg ) ;
ServiceHelper . startServices ( arg ) ;
ServiceHelper . stopServices ( arg ) ;
ServiceHelper . stopAndShutdownServices ( arg ) ;
ServiceHelper . stopAndShutdownServices ( arg ) ;
ServiceHelper . stopAndShutdownServices ( arg ) ;
ServiceHelper . stopServices ( arg ) ;
ServiceHelper . stopServices ( arg ) ;
ServiceHelper . stopServices ( arg ) ;
ServiceHelper . stopServices ( arg ) ;
ServiceHelper . stopServices ( arg ) ;
ServiceHelper . stopServices ( arg ) ;
ServiceHelper . stopServices ( arg ) ;
ServiceHelper . stopAndShutdownServices ( arg ) ;
ServiceHelper . stopAndShutdownServices ( arg ) ;
ServiceReference < ? > [ ] <unk> = bundleContext . getServiceReferences ( arg ) ;
ServiceReference < ? > [ ] refs = bundleContext . getServiceReferences ( arg ) ;
ServiceReference < ? > [ ] refs = bundleContext . getServiceReferences ( arg ) ;
ServiceReference < ? > [ ] refs = bundleContext . getServiceReferences ( arg ) ;
ServiceReference < ? > [ ] refs = bundleContext . getServiceReferences ( arg ) ;
ServiceReference < ? > [ ] refs = context . getServiceReferences ( arg ) ;
ServiceReference < ? > ref = bundleContext . getServiceReference ( arg ) ;
ServiceReference < ? > sr = bundleContext . getServiceReference ( arg ) ;
ServiceReference < ? > sr = <unk> . poll ( arg ) ;
ServiceRegistration reg = bundleContext . registerService ( arg ) ;
ServiceRegistration reg = bundleContext . registerService ( arg ) ;
ServiceRegistration reg = registrations . get ( arg ) ;
ServiceRegistration reg = registrations . get ( arg ) ;
ServiceRegistration < ? > reg = bundleContext . registerService ( arg ) ;
ServiceRegistration < ? > reg = bundleContext . registerService ( arg ) ;
ServiceRegistration reg = registrations . remove ( arg ) ;
ServiceStatus status = ( context ) . getStatus ( arg ) ;
ServiceStatus status = context . getStatus ( arg ) ;
<unk> event = assertIsInstanceOf ( arg ) ;
ServletContextHandler context = server . getChildHandlerByClass ( arg ) ;
ServletContextHandler context = server . getChildHandlerByClass ( arg ) ;
ServletContextHandler context = server . getChildHandlerByClass ( arg ) ;
<unk> result = <unk> ( arg ) ;
<unk> os = response . <unk> ( arg ) ;
Session session = Session . getInstance ( arg ) ;
Session session = openSession ( arg ) ;
Session session = openSession ( arg ) ;
SessionID messageSessionID = exchange . getIn ( arg ) . getHeader ( arg ) ;
SessionID messageSessionID = getEndpoint ( arg ) . <unk> ( arg ) ;
SessionID <unk> = exchange . getIn ( arg ) . getHeader ( arg ) ;
<unk> . connect ( arg ) ;
Set < Attachment > attachments = CastUtils . cast ( arg ) ;
Set < Attachment > attachments = ( Set < Attachment > ) requestContext . get ( arg ) ;
Set < Class < ? >> classes = <unk> ( arg ) ;
Set < Class > classes = resolver . findImplementations ( arg ) ;
Map < Class , TypeConverter > answer = new HashMap < Class , TypeConverter > ( arg ) ;
Set < Class < ? >> classes = loader . loadModels ( arg ) ;
Set < Class < ? >> classes = new HashSet < Class < ? >> ( arg ) ;
Set < Class < ? >> classes = new HashSet < Class < ? >> ( arg ) ;
Set < Class < ? >> classes = new HashSet < Class < ? >> ( arg ) ;
Set < Class < ? >> classes = new LinkedHashSet < Class < ? >> ( arg ) ;
Set < Class < ? >> classes = new LinkedHashSet < Class < ? >> ( arg ) ;
Set < Class < ? >> classes = new LinkedHashSet < Class < ? >> ( arg ) ;
Set < Class < ? >> classes = new LinkedHashSet < Class < ? >> ( arg ) ;
Set < Class < ? >> classes = new LinkedHashSet < Class < ? >> ( arg ) ;
Set < Class < ? >> classes = resolver . findAnnotated ( arg ) ;
Set < Class < ? >> classes = resolver . findAnnotated ( arg ) ;
Set < Class < ? >> classes = resolver . findImplementations ( arg ) ;
Set < Class < ? >> classes = resolver . findImplementations ( arg ) ;
Set < Class < ? >> classes = resolver . findImplementations ( arg ) ;
Set < Class < ? >> <unk> = new HashSet < Class < ? >> ( arg ) ;
Set < Class < ? >> scanned = resolver . findAnnotated ( arg ) ;
Set < Class < ? >> scanned = resolver . findAnnotated ( arg ) ;
Set < Class < ? >> scanned = resolver . findAnnotated ( arg ) ;
Set < Class < ? >> scanned = resolver . findAnnotated ( arg ) ;
Set < Class < ? >> scanned = resolver . findAnnotated ( arg ) ;
Set < Class < ? >> scanned = resolver . findAnnotated ( arg ) ;
Set < Class < ? >> scanned = resolver . findByFilter ( arg ) ;
Set < Class < ? >> scanned = resolver . findByFilter ( arg ) ;
Set < Class < ? >> scanned = resolver . findByFilter ( arg ) ;
Set < Class < ? >> scanned = resolver . findImplementations ( arg ) ;
Set < Class < ? >> scanned = resolver . findImplementations ( arg ) ;
Set < Class < ? >> scanned = resolver . findImplementations ( arg ) ;
Set < Map . Entry < <unk> < ? > , <unk> >> entries = eagerBeans . entrySet ( arg ) ;
Set < Method > methods = new LinkedHashSet < Method > ( arg ) ;
Set < ? > nodeMetadatas = exchange . getIn ( arg ) . getBody ( arg ) ;
List < Object > <unk> = new ArrayList < Object > ( arg ) ;
Set < K > keySet = map . keySet ( arg ) ;
Set < String > unique = new HashSet < String > ( arg ) ;
Set < String > unique = new HashSet < String > ( arg ) ;
Set < String > unique = new HashSet < String > ( arg ) ;
Set < String > unique = new HashSet < String > ( arg ) ;
Set < String > unique = new HashSet < String > ( arg ) ;
Set < String > unique = new HashSet < String > ( arg ) ;
Set < String > unique = new HashSet < String > ( arg ) ;
Set < ObjectName > names = mbeanServer . queryNames ( arg ) ;
Set < ObjectName > names = mbeanServer . queryNames ( arg ) ;
Set < ObjectName > s = mbsc . queryNames ( arg ) ;
Set < ObjectName > s = mbsc . queryNames ( arg ) ;
Set < String > ids = new LinkedHashSet < String > ( arg ) ;
Set < String > <unk> = new LinkedHashSet < String > ( arg ) ;
Set < ? > set = converter . convertTo ( arg ) ;
Set < String > urls = new LinkedHashSet < String > ( arg ) ;
Set < Object > answer = new HashSet < Object > ( arg ) ;
Set < Object > bodies = new HashSet < Object > ( arg ) ;
Set < Artifact > executableDependencies ;
Set < Artifact > executableDependencies ;
Set < ? > <unk> = exchange . getIn ( arg ) . getBody ( arg ) ;
Set < ? > <unk> = exchange . getIn ( arg ) . getBody ( arg ) ;
Set < Object > keySet = map . keySet ( arg ) ;
Set < String > keys = map . keySet ( arg ) ;
Set < ? > nodeMetadatas = exchange . getIn ( arg ) . getBody ( arg ) ;
Set < ? > nodeMetadatas = exchange . getIn ( arg ) . getBody ( arg ) ;
Set < ? > nodeMetadatas = exchange . getIn ( arg ) . getBody ( arg ) ;
Set < Map . Entry < String , String >> out = CollectionConverter . <unk> ( arg ) ;
Set < Artifact > relevantDependencies ;
Set < Artifact > relevantDependencies ;
Set < ObjectName > s = beanServer . queryNames ( arg ) ;
Set < ObjectName > s = beanServer . queryNames ( arg ) ;
Set < ObjectName > s = beanServer . queryNames ( arg ) ;
Set s = mbsc . queryNames ( arg ) ;
Set < ObjectName > s = mbsc . queryNames ( arg ) ;
Set < ObjectName > s = mbsc . queryNames ( arg ) ;
Set < ObjectName > s = mbsc . queryNames ( arg ) ;
Set < ObjectName > s = mbsc . queryNames ( arg ) ;
Set < ObjectName > s = server . queryNames ( arg ) ;
Set < String > set = CastUtils . cast ( arg ) ;
Set < Object > unique = new HashSet < Object > ( arg ) ;
Set < Object > unique = new HashSet < Object > ( arg ) ;
Set < Object > unique = new HashSet < Object > ( arg ) ;
Set < Object > unique = new HashSet < Object > ( arg ) ;
Set < Object > unique = new HashSet < Object > ( arg ) ;
Set < Object > unique = new HashSet < Object > ( arg ) ;
<unk> node = assertNthProcessorInstanceOf ( arg ) ;
<unk> node = assertNthProcessorInstanceOf ( arg ) ;
SetHeaderDefinition node = assertNthProcessorInstanceOf ( arg ) ;
SetHeaderDefinition node = assertNthProcessorInstanceOf ( arg ) ;
SetHeaderType node = assertNthProcessorInstanceOf ( arg ) ;
SetHeaderType node = assertNthProcessorInstanceOf ( arg ) ;
SetOutHeaderDefinition node = assertNthProcessorInstanceOf ( arg ) ;
SetOutHeaderDefinition node = assertNthProcessorInstanceOf ( arg ) ;
SetOutHeaderType node = assertNthProcessorInstanceOf ( arg ) ;
SetOutHeaderType node = assertNthProcessorInstanceOf ( arg ) ;
DefaultMessageListenerContainer answer = new DefaultMessageListenerContainer ( arg ) ;
SizedScheduledExecutorService pool = context . getRegistry ( arg ) . lookupByNameAndType ( arg ) ;
<unk> component = context . getComponent ( arg ) ;
SmppSplitter . resetCurrentReferenceNumber ( arg ) ;
SmppSplitter . resetCurrentReferenceNumber ( arg ) ;
SmppSplitter splitter = new SmppDefaultSplitter ( arg ) ;
SmppSplitter splitter = new SmppDefaultSplitter ( arg ) ;
SmppSplitter . resetCurrentReferenceNumber ( arg ) ;
SmppSplitter . resetCurrentReferenceNumber ( arg ) ;
CwComponent component = new CwComponent ( arg ) ;
<unk> <unk> = context . getEndpoint ( arg ) ;
SortDefinition < T > answer = new SortDefinition < T > ( arg ) ;
Source source = exchange . getIn ( arg ) . getMandatoryBody ( arg ) ;
Source source = conv . toBytesSource ( arg ) ;
Source source = conv . toBytesSource ( arg ) ;
Source source = conv . toBytesSource ( arg ) ;
<unk> p1 = assertIsInstanceOf ( arg ) ;
SplitDefinition answer = new SplitDefinition ( arg ) ;
SplitDefinition answer = new SplitDefinition ( arg ) ;
SplitDefinition answer = new SplitDefinition ( arg ) ;
SplitDefinition result = null ;
SplitDefinition result = null ;
SplitDefinition splitter = assertOneProcessorInstanceOf ( arg ) ;
<unk> splitter = assertOneProcessorInstanceOf ( arg ) ;
<unk> splitter = assertOneProcessorInstanceOf ( arg ) ;
SpringCamelContext camel = ac . getBeansOfType ( arg ) . values ( arg ) . iterator ( arg ) . next ( arg ) ;
SpringCamelContext camel = ac . getBeansOfType ( arg ) . values ( arg ) . iterator ( arg ) . next ( arg ) ;
SpringCamelContext camel = ac . getBeansOfType ( arg ) . values ( arg ) . iterator ( arg ) . next ( arg ) ;
SpringCamelContext camel = ac . getBeansOfType ( arg ) . values ( arg ) . iterator ( arg ) . next ( arg ) ;
SpringCamelContext camel = ( SpringCamelContext ) ac . getBeansOfType ( arg ) . values ( arg ) . iterator ( arg ) . next ( arg ) ;
SpringCamelContext camel = ( SpringCamelContext ) ac . getBeansOfType ( arg ) . values ( arg ) . iterator ( arg ) . next ( arg ) ;
CamelContext camelContext = contextList . get ( arg ) ;
CamelContext camelContext = createCamelContext ( arg ) ;
SpringCamelContext context = applicationContext . getBean ( arg ) ;
SpringCamelContext context = applicationContext . getBean ( arg ) ;
SpringCamelContext context = applicationContext . getBeansOfType ( arg ) . values ( arg ) . iterator ( arg ) . next ( arg ) ;
SpringCamelContext context = applicationContext . getBeansOfType ( arg ) . values ( arg ) . iterator ( arg ) . next ( arg ) ;
SpringCamelContext context = applicationContext . getBeansOfType ( arg ) . values ( arg ) . iterator ( arg ) . next ( arg ) ;
SpringCamelContext context = applicationContext . getBeansOfType ( arg ) . values ( arg ) . iterator ( arg ) . next ( arg ) ;
SpringCamelContext context = ( SpringCamelContext ) ac . getBeansOfType ( arg ) . values ( arg ) . iterator ( arg ) . next ( arg ) ;
SpringCamelContext context = ( SpringCamelContext ) applicationContext . getBeansOfType ( arg ) . values ( arg ) . iterator ( arg ) . next ( arg ) ;
SpringCamelContext context = ( SpringCamelContext ) applicationContext . getBeansOfType ( arg ) . values ( arg ) . iterator ( arg ) . next ( arg ) ;
SpringCamelContext context = ( SpringCamelContext ) applicationContext . getBeansOfType ( arg ) . values ( arg ) . iterator ( arg ) . next ( arg ) ;
SpringCamelContext context = ( SpringCamelContext ) applicationContext . getBeansOfType ( arg ) . values ( arg ) . iterator ( arg ) . next ( arg ) ;
SpringCamelContext context = ( SpringCamelContext ) getCamelContext ( arg ) ;
SpringCamelContext ctx = <unk> ( arg ) ;
SpringDataRelationship < Relationship > <unk> = new SpringDataRelationship < Relationship > ( arg ) ;
Exchange exchange = getEndpoint ( arg ) . createExchange ( arg ) ;
SpringIntegrationExchange exchange = ( SpringIntegrationExchange ) getEndpoint ( arg ) . createExchange ( arg ) ;
<unk> cfb = ctx . getBean ( arg ) ;
SpringJAXRSServerFactoryBean sfb1 = ctx . getBean ( arg ) ;
SpringJAXRSServerFactoryBean sfb2 = ctx . getBean ( arg ) ;
SpringSecurityAuthorizationPolicy <unk> = context . getBean ( arg ) ;
SpringSecurityAuthorizationPolicy <unk> = context . getBean ( arg ) ;
SpringTransactionPolicy required = lookup ( arg ) ;
SpringTransactionPolicy required = lookup ( arg ) ;
SpringTransactionPolicy required = lookup ( arg ) ;
SpringTransactionPolicy required = lookup ( arg ) ;
SpringTransactionPolicy required = bean ( arg ) ;
SpringTransactionPolicy required = bean ( arg ) ;
SpringTransactionPolicy required = bean ( arg ) ;
Policy required = new SpringTransactionPolicy ( arg ) ;
SslSelectChannelConnector answer = new SslSelectChannelConnector ( arg ) ;
SslSelectChannelConnector answer = null ;
SslSelectChannelConnector sslSocketConnector = new SslSelectChannelConnector ( arg ) ;
DefaultRouteStartupOrder holder = null ;
DefaultRouteStartupOrder other = inputs . get ( arg ) ;
StopWatch watch = null ;
StreamCache cache = StreamCacheConverter . convertToStreamCache ( arg ) ;
StreamCache cache = cos . newStreamCache ( arg ) ;
StreamCache cache = cos . newStreamCache ( arg ) ;
StreamCache cache = cos . newStreamCache ( arg ) ;
StreamCache cache = cos . newStreamCache ( arg ) ;
StreamCache cache = cos . newStreamCache ( arg ) ;
StreamCache cache = cos . newStreamCache ( arg ) ;
StreamCache newBody = tc . convertTo ( arg ) ;
StreamCache newBody = exchange . getIn ( arg ) . getBody ( arg ) ;
StreamCache streamCache = assertIsInstanceOf ( arg ) ;
StreamCache streamCache = StreamCacheConverter . convertToStreamCache ( arg ) ;
StreamCache cache = converter . convertToStreamCache ( arg ) ;
String dsl = errorHandler ( arg );from ( "direct:start" ) .to ( "mock:result" ) ;
String dsl = errorHandler ( arg );from ( "direct:start" ) .to ( "mock:result" ) ;
String dsl = errorHandler ( arg );from ( "direct:start" ) .to ( "mock:result" ) ;
String dsl = from ( arg ) .aggregate ( header ( arg ) <unk> ( <unk> ) <unk> ( 0 ) .to ( "mock:result" ) ;
String dsl = from ( arg ) .aggregate ( header ( arg ) ).to ( "mock:result" ) ;
String dsl = from ( arg ) <unk> ( <unk> ) .to ( "mock:result" ) ;
String dsl = from ( arg ) <unk> ( header ( arg ) ).to ( "mock:result" ) ;
String dsl = intercept ( arg ) <unk> ( body ( arg ) <unk> ( <unk> ) ).to ( <unk> ) ;from ( "direct:start" ) .to ( <unk> ) .to ( <unk> ) .to ( "mock:result" ) ;
String dsl = interceptFrom ( arg ) .to ( "mock:intercept" ) ; + from ( arg ) .to ( "mock:result" ) ;from ( "seda:bar" ) .to ( "mock:result" ) ; + from ( arg ) .to ( "mock:result" ) ;
String dsl = interceptFrom ( arg ) .to ( "mock:intercept" ) ; + from ( arg ) .to ( "mock:result" ) ;from ( "seda:bar" ) .to ( "mock:result" ) ; + from ( arg ) .to ( "mock:result" ) ;from ( <unk> ) .to ( "mock:result" ) ;
Object [ ] <unk> = new Object [ results . size ( arg ) ] ;
String [ ] files = new File ( arg ) . list ( arg ) ;
String [ ] files = new File ( arg ) . list ( arg ) ;
String [ ] files = new File ( arg ) . list ( arg ) ;
String [ ] names = getApplicationContext ( arg ) . <unk> ( arg ) ;
String [ ] <unk> ;
String [ ] <unk> = <unk> . split ( arg ) ;
String value = header . getValue ( arg ) ;
String address = remaining ;
String after = context . getExecutorServiceManager ( arg ) . resolveThreadName ( arg ) ;
String <unk> = configuration . <unk> ( arg ) ;
String answer = map . get ( arg ) ;
String answer = ObjectHelper . classCanonicalName ( arg ) ;
String answer = ObjectHelper . classCanonicalName ( arg ) ;
String answer = ObjectHelper . classCanoicalName ( arg ) ;
String answer = ObjectHelper . classCanoicalName ( arg ) ;
List < String > <unk> = <unk> ( arg ) ;
String basePath = baseURI . getRawPath ( arg ) ;
String basePath = baseURI . getRawPath ( arg ) ;
String basePath = baseURI . getPath ( arg ) ;
String basePath = baseURI . getPath ( arg ) ;
String basePath = baseURI . getPath ( arg ) ;
String before = context . getExecutorServiceManager ( arg ) . resolveThreadName ( arg ) ;
String body = null ;
String body = MessageHelper . extractBodyForLogging ( arg ) ;
String body = <unk> + LS + line2 + LS + <unk> ;
String <unk> = null ;
String charset = exchange . getProperty ( arg ) ;
String charset = IOHelper . getCharsetName ( arg ) ;
String charset = IOHelper . getCharsetName ( arg ) ;
String charset = IOHelper . getCharsetName ( arg ) ;
String charset = IOConverter . normalizeCharset ( arg ) ;
String charsetName = exchange . getProperty ( arg ) ;
String charsetName = exchange . getProperty ( arg ) ;
String charsetName = exchange . getIn ( arg ) . getHeader ( arg ) ;
String ssn = ( String ) exchange . getIn ( arg ) . getHeader ( arg ) ;
String ssn = ( String ) exchange . getIn ( arg ) . getHeader ( arg ) ;
contentType = header . getValue ( arg ) ;
contentType = header . getValue ( arg ) ;
String contentType = ExchangeHelper . getContentType ( arg ) ;
String contentType = in . getHeader ( arg ) ;
String contextName = CamelExtension . getCamelContextName ( arg ) ;
String contextName = CamelExtension . getCamelContextName ( arg ) ;
String contextName = CamelExtension . getCamelContextName ( arg ) ;
String contextName = CamelExtension . getCamelContextName ( arg ) ;
String contextName = annotation . value ( arg ) ;
String <unk> = getAndRemoveParameter ( arg ) ;
Object data = in . getBody ( arg ) ;
Object data = in . getBody ( arg ) ;
String <unk> = endpoint . <unk> ( arg ) ;
String <unk> = HL7Converter . encode ( arg ) ;
String endpointFile = endpoint . getConfiguration ( arg ) . getDirectory ( arg ) ;
String endpointPath = getConfiguration ( arg ) . getDirectory ( arg ) + getFileSeparator ( arg ) ;
String endpointRef = inject . ref ( arg ) ;
String endpointRef = inject . ref ( arg ) ;
String <unk> = <unk> <unk> ;
String expected = from ( arg ) <unk> ( <unk> ) .to ( "mock:result" ) ;
String file = endpoint . getConfiguration ( arg ) . getDirectory ( arg ) ;
String fileName = ( name != null ) ? name : endpoint . getGeneratedFileName ( arg ) ;
String fileName = endpoint . getFile ( arg ) != null ? endpoint . getFile ( arg ) . trim ( arg ) : _file ;
String fileName = endpoint . getFile ( arg ) != null ? endpoint . getFile ( arg ) . trim ( arg ) : _file ;
String group = getEndpoint ( arg ) . <unk> ( arg ) ;
String <unk> = getEndpoint ( arg ) . <unk> ( arg ) ;
String headerValue = in . getHeader ( arg ) ;
String <unk> ;
String id = inMessage . getBody ( arg ) ;
String id = route . getId ( arg ) ;
String id = context != null ? context . getName ( arg ) : <unk> ;
String id = fileEndpoint . getGeneratedFileName ( arg ) ;
String id ;
String id = processorDefinition . idOrCreate ( arg ) ;
String routeId = routeContext . getRoute ( arg ) . idOrCreate ( arg ) ;
String <unk> = getEndpoint ( arg ) . <unk> ( arg ) ;
String indexId = template . requestBody ( arg ) ;
String indexId = template . requestBody ( arg ) ;
String indexId = template . requestBody ( arg ) ;
String indexId = template . requestBodyAndHeaders ( arg ) ;
String indexId = template . requestBodyAndHeaders ( arg ) ;
String indexId = template . requestBodyAndHeaders ( arg ) ;
exchange . getIn ( arg ) . getBody ( arg ) ;
String <unk> = System . <unk> ( arg ) ;
String jsonBody = endpoint . getConfig ( arg ) . getRequestor ( arg ) . get ( arg ) ;
String jsonBody = endpoint . getConfig ( arg ) . getRequestor ( arg ) . get ( arg ) ;
String jsonBody = endpoint . getConfig ( arg ) . getRequestor ( arg ) . get ( arg ) ;
Object key = ( ( <unk> ) getEndpoint ( arg ) ) . getKey ( arg ) ;
String key = ( String ) o ;
String key = ( headers . <unk> ( arg ) ) ? exchange . getIn ( arg ) . getHeader ( arg ) : getEndpoint ( arg ) . getKey ( arg ) ;
String key = Message . CONTENT_TYPE ;
String key = endpoint . <unk> ( arg ) . decodeKey ( arg ) ;
String key = Client . <unk> ;
String key = consumer . getEndpoint ( arg ) . getKey ( arg ) ;
String key = consumer . getEndpoint ( arg ) . getKey ( arg ) ;
String key = consumer . getEndpoint ( arg ) . getKey ( arg ) ;
String key = jmsKeyFormatStrategy . decodeKey ( arg ) ;
String key = jmsKeyFormatStrategy . <unk> ( arg ) ;
key = file . getAbsoluteFilePath ( arg ) ;
String key = file . getAbsoluteFilePath ( arg ) ;
String key = file . getAbsoluteFilePath ( arg ) ;
String key = getKey ( arg ) ;
Object key = getKey ( arg ) ;
String <unk> ;
String <unk> = this . parsePropertyValue ( arg ) ;
String <unk> = this . parsePropertyValue ( arg ) ;
String line = <unk> i + LS ;
String line ;
String localResponse = context . getTypeConverter ( arg ) . convertTo ( arg ) ;
String localResponse = context . getTypeConverter ( arg ) . convertTo ( arg ) ;
String <unk> = getEndpoint ( arg ) . <unk> ( arg ) ;
String lockFileName = file . getAbsoluteFilePath ( arg ) + FileComponent . DEFAULT_LOCK_FILE_POSTFIX ;
lockFileName = file . getAbsoluteFilePath ( arg ) + FileComponent . DEFAULT_LOCK_FILE_POSTFIX ;
String lockFileName = exchange . getProperty ( arg ) ;
String message = in . getMandatoryBody ( arg ) ;
String messageId = messageIdExpression . evaluate ( arg ) ;
final String messageId = messageIdExpression . evaluate ( arg ) ;
<unk> ( arg ) ;
String method = methodToUse . createMethod ( arg ) . getName ( arg ) ;
String method = methodToUse . createMethod ( arg ) . <unk> ( arg ) ;
String msg = CamelExchangeException . <unk> ( arg ) ;
String msg = consumer . receiveBodyNoWait ( arg ) ;
String name = entry . getKey ( arg ) ;
String name = endpoint . getCamelContext ( arg ) . getExecutorServiceManager ( arg ) . resolveThreadName ( <unk>
String name = getEndpoint ( arg ) . getConfiguration ( arg ) . getDirectory ( arg ) ;
String name = endpoint . getConfiguration ( arg ) . getDirectory ( arg ) ;
String name = file . <unk> ( arg ) ;
String name = file . isAbsolute ( arg ) ? file . <unk> ( arg ) : file . <unk> ( arg ) ;
String name = file . isAbsolute ( arg ) ? file . getAbsoluteFilePath ( arg ) : file . getRelativeFilePath ( arg ) ;
String name = getAbsoluteFilePath ( arg ) ;
String name = endpoint . getConfiguration ( arg ) . getDirectory ( arg ) ;
String name = getRelativeFilePath ( arg ) ;
String name = throwable . getClass ( arg ) . getName ( arg ) ;
String <unk> = normalizePath ( arg ) ;
String nodeId = getEndpoint ( arg ) . <unk> ( arg ) ;
Object oid = null ;
Object oid = null ;
String operation = getEndpoint ( arg ) . getOperation ( arg ) ;
String operation = exchange . getIn ( arg ) . getHeader ( arg ) ;
<unk> operation = exchange . getIn ( arg ) . getHeader ( arg ) ;
String out = exchange . getIn ( arg ) . getBody ( arg ) ;
String out = ( String ) exchange . getIn ( arg ) . getBody ( arg ) ;
String out = ( String ) template . requestBody ( arg ) ;
Object out = consumer . receiveBodyNoWait ( arg ) ;
String out = template2 . requestBody ( arg ) ;
String out = template2 . requestBody ( arg ) ;
String out = template2 . requestBody ( arg ) ;
String out = template2 . requestBody ( arg ) ;
template . requestBodyAndHeaders ( arg ) ;
String <unk> = parent == null ? file . getName ( arg ) : builder . toString ( arg ) ;
String path = file . getRelativeFilePath ( arg ) ;
String path = <unk> ( arg ) ? u . <unk> ( arg ) : u . <unk> ( arg ) ;
String projectName = jdbcTemplate . queryForObject ( arg ) ;
String projectName = jdbcTemplate . queryForObject ( arg ) ;
String projectName = jdbcTemplate . queryForObject ( arg ) ;
String property = message . getExchange ( arg ) . getContext ( arg ) . getProperty ( arg ) ;
String property = message . getExchange ( arg ) . getContext ( arg ) . getProperty ( arg ) ;
String queue = getDestinationName ( arg ) ;
String <unk> = value . toString ( arg ) ;
String <unk> = exception . <unk> ( arg ) ;
String resourceURI = null ;
String relativeName = exchange . getGenericFile ( arg ) . getRelativeFilePath ( arg ) ;
String relativeName = exchange . getGenericFile ( arg ) . getRelativeFilePath ( arg ) ;
String remoteResponse = context . getTypeConverter ( arg ) . convertTo ( arg ) ;
String remoteResponse = context . getTypeConverter ( arg ) . convertTo ( arg ) ;
String <unk> = <unk> ( arg ) ;
String reply = future . get ( arg ) ;
String reply = getEndpoint ( arg ) . <unk> ( arg ) ;
String reply = template2 . requestBody ( arg ) ;
String res = <unk> . next ( arg ) ;
String response = template . extractFutureBody ( arg ) ;
String response = template . extractFutureBody ( arg ) ;
String response = template . requestBody ( http:
String response = template . requestBody ( http:
String response = template . requestBody ( http:
String response = template . requestBody ( http:
context . getTypeConverter ( arg ) . convertTo ( arg ) ;
String response = template . extractFutureBody ( arg ) ;
String response = ( String ) template . extractFutureBody ( arg ) ;
String response = ( String ) template . extractFutureBody ( arg ) ;
template . requestBody ( arg ) ;
template . requestBody ( arg ) ;
String result = ( String ) template . requestBody ( mina:tcp:
String result = template . requestBody ( arg ) ;
String result = template . requestBody ( arg ) ;
String result = factory . unbind ( arg ) ;
String result = factory . unbind ( arg ) ;
String result = template . extractFutureBody ( arg ) ;
String result = template . extractFutureBody ( arg ) ;
String result = template . extractFutureBody ( arg ) ;
String result = template . extractFutureBody ( arg ) ;
String result = template . extractFutureBody ( arg ) ;
template . extractFutureBody ( arg ) ;
String routeStackTrace = MessageHelper . dumpMessageHistoryStacktrace ( arg ) ;
String routeStackTrace = MessageHelper . dumpMessageHistoryStacktrace ( arg ) ;
String s = camelContext . getProperty ( arg ) ;
String s = camelContext . getProperty ( arg ) ;
String s = assembleKey ( arg ) ;
String s = assembleKey ( arg ) ;
String s = assembleKey ( arg ) ;
String s = assembleKey ( arg ) ;
String s = simple . <unk> ( arg ) ;
String s = toString ( arg ) ;
String s = toString ( arg ) ;
String <unk> = UnsafeUriCharactersEncoder . encodeHttpURI ( arg ) ;
scheme = splitURI [ 0 ] ;
String <unk> = getAndRemoveParameter ( arg ) ;
long <unk> = ps . <unk> ( arg ) ;
String separator = factory . <unk> ( arg ) ;
String soapAction = <unk> ( arg ) ;
String soapAction = soapActionHeader != null ? soapActionHeader : configuration . <unk> ( arg ) ;
String ssn = exchange . getIn ( arg ) . getHeader ( arg ) ;
<unk> = route . <unk> ( arg ) ;
String state = getEndpoint ( arg ) . getNodeState ( arg ) ;
String <unk> =  ;
<unk> ( String channel : endpoint . getConfiguration ( arg ) . getChannels ( arg ) ) {
String text = expression . evaluate ( arg ) ;
String text = response . getOut ( arg ) . getMandatoryBody ( arg ) ;
String text = response . getOut ( arg ) . getMandatoryBody ( arg ) ;
String text = exchange . getContext ( arg ) . getTypeConverter ( arg ) . mandatoryConvertTo ( arg ) ;
String text = expression . evaluate ( arg ) ;
String text = expression . evaluate ( arg ) ;
String text = out . getBody ( arg ) ;
String <unk> = this . parsePropertyValue ( arg ) ;
String toNode = nodeId ;
String toNode = definition . getId ( arg ) ;
String toNode = definition . getId ( arg ) ;
String type = ascending ? ascending : <unk> ;
ErrorHandlerType type = ErrorHandlerType . valueOf ( arg ) ;
String u = url ;
String u = url ;
String u = endpoint . getUrl ( arg ) ;
String u = endpoint . getUrl ( arg ) ;
String uri = response . <unk> ( arg ) . <unk> ( arg ) . toString ( arg ) ;
getEndpoint ( arg ) . getEndpointUri ( arg ) ;
String uri = httpExchange . <unk> ( arg ) ;
String uri = value . toString ( arg ) . trim ( arg ) ;
String url = HttpHelper . createURL ( arg ) ;
String url = HttpHelper . createURL ( arg ) ;
String url = getFtpUrl ( arg ) <unk> filename ;
String url = getFtpUrl ( arg ) + filename ;
String user = getEndpoint ( arg ) . getUser ( arg ) ;
String value = cfg . get ( arg ) ;
String value = exchange . getContext ( arg ) . getTypeConverter ( arg ) . convertTo ( arg ) ;
String value = val . get ( arg ) ;
String value = val . get ( arg ) ;
String value = <unk> . <unk> ( arg ) ;
String value = ( String ) cfg . get ( arg ) ;
String value = exchange . getContext ( arg ) . getTypeConverter ( arg ) . mandatoryConvertTo ( arg ) ;
String <unk> = <unk> [ 1 ] ;
String value = keyValuePairField . tag ( arg ) + this . getKeyValuePairSeparator ( arg ) + valueFormatted + separator ;
String value = keyValuePairField . tag ( arg ) + this . getKeyValuePairSeparator ( arg ) + valueFormatted ;
Object <unk> = params [ i - 1 ] ;
String valueFormatted ;
String valueFormatted ;
converter . convertTo ( arg ) ;
String <unk> = extractBodyForLogging ( arg ) ;
StringBuilder answer = new StringBuilder ( arg ) ;
StringBuilder b = new StringBuilder ( arg ) . append ( arg ) ;
StringBuilder body = new StringBuilder ( arg ) ;
StringBuilder body = new StringBuilder ( arg ) ;
StringBuilder buf = new StringBuilder ( arg ) ;
StringBuilder buf = new StringBuilder ( arg ) ;
StringBuffer buffer = new StringBuffer ( arg ) . append ( arg ) . append ( arg ) . append ( arg ) . append ( arg ) . append ( arg ) . append ( arg ) . append ( arg ) . append ( arg ) . append ( arg ) . append ( arg ) ;
StringBuilder buffer = new StringBuilder ( arg ) . append ( arg ) . append ( arg ) . append ( arg ) . append ( arg ) . append ( arg ) . append ( arg ) . append ( arg ) . append ( arg ) . append ( arg ) . append ( arg ) ;
StringBuffer buffer = new StringBuffer ( arg ) . append ( arg ) . append ( arg ) . append ( arg ) . append ( arg ) . append ( arg ) . append ( arg ) . append ( arg ) . append ( arg ) . append ( arg ) . append ( arg ) . append ( arg ) . append ( arg ) ;
StringBuilder buffer = new StringBuilder ( arg ) . append ( arg ) . append ( arg ) . append ( arg ) . append ( arg ) . append ( arg ) . append ( arg ) ;
StringBuilder buffer = new StringBuilder ( arg ) . append ( arg ) . append ( arg ) . append ( arg ) . append ( arg ) . append ( arg ) . append ( arg ) ;
StringBuilder buffer = new StringBuilder ( arg ) . append ( arg ) . append ( arg ) . append ( arg ) . append ( arg ) ;
StringBuilder buffer = new StringBuilder ( arg ) ;
StringBuilder buffer = new StringBuilder ( arg ) ;
StringBuilder buffer = new StringBuilder ( arg ) ;
StringBuilder buffer = new StringBuilder ( arg ) ;
StringBuilder buffer = new StringBuilder ( arg ) ;
StringBuilder buffer = new StringBuilder ( arg ) ;
StringBuilder buffer = new StringBuilder ( arg ) ;
StringBuilder buffer = new StringBuilder ( arg ) ;
StringBuilder buffer = new StringBuilder ( arg ) ;
StringBuilder buffer = new StringBuilder ( arg ) ;
StringBuilder buffer = new StringBuilder ( arg ) ;
StringBuilder buffer = new StringBuilder ( arg ) ;
StringBuilder buffer = new StringBuilder ( arg ) ;
StringBuilder buffer = new StringBuilder ( arg ) ;
StringBuilder buffer = new StringBuilder ( arg ) ;
StringBuilder buffer = new StringBuilder ( arg ) ;
StringBuilder buffer = new StringBuilder ( arg ) ;
StringBuilder buffer = new StringBuilder ( arg ) ;
StringBuilder buffer = new StringBuilder ( arg ) ;
StringBuilder buffer = new StringBuilder ( arg ) ;
StringBuilder buffer = new StringBuilder ( arg ) ;
StringBuilder buffer = new StringBuilder ( arg ) ;
StringBuilder buffer = new StringBuilder ( arg ) ;
StringBuilder buffer = new StringBuilder ( arg ) ;
StringBuilder buffer = new StringBuilder ( arg ) ;
StringBuilder buffer = new StringBuilder ( arg ) ;
StringBuilder buffer = new StringBuilder ( arg ) ;
StringBuilder in = new StringBuilder ( arg ) ;
StringBuilder in = new StringBuilder ( arg ) ;
StringBuilder in = new StringBuilder ( arg ) ;
StringBuilder in = new StringBuilder ( arg ) ;
StringBuilder in = new StringBuilder ( arg ) ;
StringBuilder methods = new StringBuilder ( arg ) ;
StringBuilder msg = new StringBuilder ( arg ) ;
StringBuilder msg = new StringBuilder ( arg ) ;
StringBuilder out = new StringBuilder ( arg ) ;
StringBuilder rc = new StringBuilder ( arg ) ;
StringBuilder result = new StringBuilder ( arg ) ;
StringBuilder result = new StringBuilder ( arg ) ;
StringBuilder sb = new StringBuilder ( arg ) ;
StringBuilder sb = new StringBuilder ( arg ) ;
StringBuilder sb = new StringBuilder ( arg ) ;
StringBuilder sb = new StringBuilder ( arg ) ;
StringBuilder sb = new StringBuilder ( arg ) ;
StringBuilder sb = new StringBuilder ( arg ) ;
StringBuilder sb = new StringBuilder ( arg ) ;
StringBuilder sb = new StringBuilder ( arg ) ;
StringBuilder sb = new StringBuilder ( arg ) ;
StringBuilder sb = new StringBuilder ( arg ) ;
StringBuilder sb = new StringBuilder ( arg ) ;
StringBuilder <unk> = new StringBuilder ( arg ) ;
StringBuilder <unk> = new StringBuilder ( arg ) ;
StringBuilder u = new StringBuilder ( arg ) ;
StringBuilder builder ;
CollectionStringBuffer methods = new CollectionStringBuffer ( arg ) ;
StringBuilder url = new StringBuilder ( arg ) ;
<unk> <unk> ;
SpringCamelContext . setNoStart ( arg ) ;
SpringCamelContext . setNoStart ( arg ) ;
LOG . warn ( arg ) ;
LOG . warn ( arg ) ;
LOG . warn ( arg ) ;
LOG . warn ( arg ) ;
LOG . warn ( arg ) ;
LOG . warn ( arg ) ;
LOG . warn ( arg ) ;
LOG . warn ( arg ) ;
IOHelper . close ( arg ) ;
IOHelper . close ( arg ) ;
IOHelper . close ( arg ) ;
IOHelper . close ( arg ) ;
IOHelper . close ( arg ) ;
sb . append ( arg ) . append ( arg ) ;
sb . append ( arg ) . append ( arg ) ;
sb . append ( arg ) . append ( arg ) ;
LOG . info ( arg ) ;
LOG . info ( arg ) ;
LOG . info ( arg ) ;
LOG . info ( arg ) ;
LOG . info ( arg ) ;
LOG . info ( arg ) ;
LOG . info ( arg ) ;
LOG . info ( arg ) ;
LOG . info ( arg ) ;
LOG . info ( arg ) ;
LOG . info ( arg ) ;
LOG . info ( arg ) ;
LOG . info ( arg ) ;
LOG . info ( arg ) ;
LOG . info ( arg ) ;
LOG . info ( arg ) ;
LOG . info ( arg ) ;
LOG . info ( arg ) ;
LOG . info ( arg ) ;
LOG . info ( arg ) ;
LOG . info ( arg ) ;
LOG . info ( arg ) ;
LOG . info ( arg ) ;
LOG . info ( arg ) ;
LOG . info ( arg ) ;
LOG . info ( arg ) ;
LOG . info ( arg ) ;
LOG . info ( arg ) ;
LOG . info ( arg ) ;
LOG . info ( arg ) ;
LOG . info ( arg ) ;
LOG . info ( arg ) ;
LOG . info ( arg ) ;
LOG . info ( arg ) ;
LOG . info ( arg ) ;
LOG . info ( arg ) ;
LOG . info ( arg ) ;
LOG . info ( arg ) ;
LOG . info ( arg ) ;
LOG . info ( arg ) ;
LOG . info ( arg ) ;
LOG . info ( arg ) ;
LOG . info ( arg ) ;
LOG . info ( arg ) ;
LOG . info ( arg ) ;
LOG . info ( arg ) ;
LOG . info ( arg ) ;
LOG . info ( arg ) ;
LOG . info ( arg ) ;
LOG . info ( arg ) ;
LOG . info ( arg ) ;
SpringCamelContext . setNoStart ( arg ) ;
SpringCamelContext . setNoStart ( arg ) ;
this . systemModstamp = systemModstamp ;
answer = <unk> . <unk> ( arg ) ;
exchange . setProperty ( arg ) ;
TaskOptions answer = TaskOptions . Builder . <unk> ( arg ) ;
TestBean bean = context . getRegistry ( arg ) . lookupByNameAndType ( arg ) ;
TestBean bean = context . getRegistry ( arg ) . lookupByNameAndType ( arg ) ;
TestPojo pojo = context . getBean ( arg ) ;
TestPojo pojo = ( TestPojo ) context . getRegistry ( arg ) . lookupByName ( arg ) ;
ObjectPool < MyPooledObject > testPool = new TestPool ( arg ) ;
ObjectPool < MyPooledObject > testPool = new TestPool ( arg ) ;
ObjectPool < MyPooledObject > testPool = new TestPool ( arg ) ;
ObjectPool < MyPooledObject > testPool = new TestPool ( arg ) ;
ObjectPool < MyPooledObject > testPool = new TestPool ( arg ) ;
Assert . assertNotNull ( arg ) ;
deleteDirectory ( arg ) ;
deleteDirectory ( arg ) ;
deleteDirectory ( arg ) ;
Thread . sleep ( arg ) ;
Thread . sleep ( arg ) ;
Thread . sleep ( arg ) ;
Thread . sleep ( arg ) ;
Thread . sleep ( arg ) ;
Thread . sleep ( arg ) ;
Thread . sleep ( arg ) ;
Thread . sleep ( arg ) ;
Thread . sleep ( arg ) ;
Thread . sleep ( arg ) ;
Thread . sleep ( arg ) ;
Thread . sleep ( arg ) ;
oneExchangeDone . matchesMockWaitTime ( arg ) ;
oneExchangeDone . matchesMockWaitTime ( arg ) ;
oneExchangeDone . matchesMockWaitTime ( arg ) ;
oneExchangeDone . matchesMockWaitTime ( arg ) ;
oneExchangeDone . matchesMockWaitTime ( arg ) ;
oneExchangeDone . matchesMockWaitTime ( arg ) ;
oneExchangeDone . matchesMockWaitTime ( arg ) ;
oneExchangeDone . matchesMockWaitTime ( arg ) ;
oneExchangeDone . matchesMockWaitTime ( arg ) ;
oneExchangeDone . matchesMockWaitTime ( arg ) ;
oneExchangeDone . matchesMockWaitTime ( arg ) ;
oneExchangeDone . matchesMockWaitTime ( arg ) ;
oneExchangeDone . matchesMockWaitTime ( arg ) ;
oneExchangeDone . matchesMockWaitTime ( arg ) ;
oneExchangeDone . matchesMockWaitTime ( arg ) ;
oneExchangeDone . matchesMockWaitTime ( arg ) ;
oneExchangeDone . matchesMockWaitTime ( arg ) ;
oneExchangeDone . matchesMockWaitTime ( arg ) ;
oneExchangeDone . matchesMockWaitTime ( arg ) ;
oneExchangeDone . matchesMockWaitTime ( arg ) ;
oneExchangeDone . matchesMockWaitTime ( arg ) ;
oneExchangeDone . matchesMockWaitTime ( arg ) ;
oneExchangeDone . matchesMockWaitTime ( arg ) ;
oneExchangeDone . matchesMockWaitTime ( arg ) ;
oneExchangeDone . matchesMockWaitTime ( arg ) ;
oneExchangeDone . matchesMockWaitTime ( arg ) ;
oneExchangeDone . matchesMockWaitTime ( arg ) ;
oneExchangeDone . matchesMockWaitTime ( arg ) ;
oneExchangeDone . matchesMockWaitTime ( arg ) ;
oneExchangeDone . matchesMockWaitTime ( arg ) ;
oneExchangeDone . matchesMockWaitTime ( arg ) ;
ThreadPoolExecutor answer = new <unk> ( arg ) ;
ThreadPoolExecutor executor = assertIsInstanceOf ( arg ) ;
ThreadPoolExecutor threadPoolExecutor = ( ThreadPoolExecutor ) getSplitter ( arg ) . getExecutorService ( arg ) ;
ThreadPoolExecutor threadPoolExecutor = ( ThreadPoolExecutor ) getSplitter ( arg ) . <unk> ( arg ) ;
ThreadPoolProfile profile = context . getExecutorServiceManager ( arg ) . getDefaultThreadPoolProfile ( arg ) ;
ThreadPoolProfile profile = context . getExecutorServiceManager ( arg ) . getDefaultThreadPoolProfile ( arg ) ;
ThreadPoolProfile profile = context . getExecutorServiceManager ( arg ) . getDefaultThreadPoolProfile ( arg ) ;
ThreadPoolProfile profile = context . getExecutorServiceManager ( arg ) . getThreadPoolProfile ( arg ) ;
ThreadPoolProfile profile = context . getExecutorServiceManager ( arg ) . getThreadPoolProfile ( arg ) ;
ThreadPoolProfile profile = new ThreadPoolProfile ( arg ) ;
ThreadPoolProfile profile = new ThreadPoolProfile ( arg ) ;
PoolingClientConnectionManager answer = new PoolingClientConnectionManager ( arg ) ;
ThreadsDefinition answer = new ThreadsDefinition ( arg ) ;
ThreadsDefinition answer = new ThreadsDefinition ( arg ) ;
ThreadsDefinition answer = new ThreadsDefinition ( arg ) ;
ThrottleDefinition answer = new ThrottleDefinition ( arg ) ;
Throwable cause = e . getCause ( arg ) ;
Exception e ;
Exception e = exchange . getException ( arg ) ;
Throwable e ;
Exception exception = exchange . getException ( arg ) ;
Exception exception = exchange . getException ( arg ) ;
Throwable fault = exchange . getException ( arg ) ;
Exception <unk> = exchange . getException ( arg ) ;
Throwable <unk> = ( t == null ) ? new IllegalArgumentException ( arg ) : t ;
Throwable throwable = e . getCause ( arg ) ;
timedTaskManager . addTask ( arg ) ;
timedTaskManager . <unk> ( arg ) ;
TraceEventExchange event = ( TraceEventExchange ) exchange ;
TraceFormatter <unk> = context . getRegistry ( arg ) . lookupByNameAndType ( arg ) ;
TraceHandlerTestHandler handler = ( TraceHandlerTestHandler ) tracer . getTraceHandlers ( arg ) . get ( arg ) ;
Tracer tracer = this . applicationContext . getBean ( arg ) ;
TransactedRuntimeCamelException rce = null ;
<unk> <unk> = null ;
@ SuppressWarnings ( arg ) TransactionErrorHandler answer = new TransactionErrorHandler ( arg ) ;
TransactionErrorHandlerBuilder errorHandler = ctx . getBean ( arg ) ;
TransactionErrorHandlerBuilder errorHandler = ctx . getBean ( arg ) ;
<unk> node = assertNthProcessorInstanceOf ( arg ) ;
<unk> node = assertNthProcessorInstanceOf ( arg ) ;
Transformer transformer = <unk> ( arg ) ;
Transformer transformer = <unk> ( arg ) ;
Map < Integer , List < String >> sortValues = new TreeMap < Integer , List < String >> ( arg ) ;
TreeMap < Integer , List < String >> sortValues = new TreeMap < Integer , List < String >> ( arg ) ;
Map < String , Endpoint > answer = new TreeMap < String , Endpoint > ( arg ) ;
Map < String , Object > answer = new TreeMap < String , Object > ( arg ) ;
TreeMap < String , Object > answer = new TreeMap < String , Object > ( arg ) ;
<unk> result ;
TryDefinition tryType = from ( arg ) . tryBlock ( arg ) . process ( arg ) . to ( arg ) ;
TryDefinition tryType = from ( arg ) . tryBlock ( arg ) . process ( arg ) . to ( arg ) ;
<unk> <unk> = te . getProperties ( arg ) . getTwitter ( arg ) ;
Consumer tc = new <unk> ( arg ) ;
<unk> endpoint ;
TwitterConfiguration properties = new TwitterConfiguration ( arg ) ;
TypeConverter converter = <unk> ( arg ) ;
<unk> loader = bundleContext . <unk> ( arg ) ;
List < <unk> > <unk> = <unk> ( arg ) ;
URI <unk> ;
URI <unk> = wsAddressingActionHeader != null ? wsAddressingActionHeader : configuration . <unk> ( arg ) ;
URL mainClasses = new File ( arg ) . toURI ( arg ) . toURL ( arg ) ;
URL mainClasses = new File ( arg ) . toURI ( arg ) . toURL ( arg ) ;
url = urls . nextElement ( arg ) ;
HttpURLConnection urlConnection = ( HttpURLConnection ) url . openConnection ( arg ) ;
HttpURLConnection urlConnection = ( HttpURLConnection ) url . openConnection ( arg ) ;
<unk> handler = camelContext . getInjector ( arg ) . newInstance ( arg ) ;
UnitOfWork uow = endpoint . getCamelContext ( arg ) . getUnitOfWorkFactory ( arg ) . createUnitOfWork ( arg ) ;
Processor processor = new UnmarshalProcessor ( arg ) ;
Processor processor = new UnmarshalProcessor ( arg ) ;
Processor processor = new UnmarshalProcessor ( arg ) ;
Processor processor = new UnmarshalProcessor ( arg ) ;
<unk> <unk> = getUnmarshaller ( arg ) ;
V answer = map . get ( arg ) ;
<unk> <unk> = factory . <unk> ( arg ) ;
ValueHolder < ? > that = ( ValueHolder < ? > ) o ;
@ SuppressWarnings ( arg ) Vector files = channel . ls ( arg ) ;
@ SuppressWarnings ( arg ) Vector files = channel . ls ( arg ) ;
@ SuppressWarnings ( arg ) Vector files = channel . ls ( arg ) ;
WaitForTaskToComplete wait = waitForTaskToComplete ;
WaitForTaskToComplete wait = waitForTaskToComplete ;
servlet = <unk> . get ( arg ) ;
<unk> loadBalancer ;
WireTapDefinition < Type > answer = new WireTapDefinition < Type > ( arg ) ;
WireTapDefinition < Type > answer = new WireTapDefinition < Type > ( arg ) ;
WireTapDefinition < Type > answer = new WireTapDefinition < Type > ( arg ) ;
WireTapDefinition < Type > answer = new WireTapDefinition < Type > ( arg ) ;
WireTapDefinition < Type > answer = new WireTapDefinition < Type > ( arg ) ;
<unk> <unk> = this . getCamelContext ( arg ) . getRegistry ( arg ) . lookupByNameAndType ( arg ) ;
<unk> out = IOHelper . buffered ( arg ) ;
BufferedWriter writer = IOHelper . buffered ( arg ) ;
<unk> xmlReader ;
XMLStreamWriter writer = <unk> ( arg ) . <unk> ( arg ) ;
XMLStreamWriter writer = parentTypeConverter . convertTo ( arg ) ;
XMLStreamWriter writer = exchange . getContext ( arg ) . getTypeConverter ( arg ) . convertTo ( arg ) ;
<unk> ( arg ) ;
if ( connection != null ) return connection ;
<unk> annotation = ( RoutesDefinition . class ) . getAnnotation ( arg ) ;
<unk> config = <unk> . <unk> ( arg ) ;
XmppBinding binding = ExchangeHelper . getBinding ( arg ) ;
XmppBinding binding = ExchangeHelper . getBinding ( arg ) ;
Exchange exchange = endpoint . createExchange ( arg ) ;
XmppMessage <unk> = ( XmppMessage ) receivedExchange . getIn ( arg ) ;
XmppRouteTest . LOG . debug ( arg ) ;
XmppRouteTest . LOG . debug ( arg ) ;
XsltBuilder answer = new XsltBuilder ( arg ) ;
final XsltBuilder <unk> = getCamelContext ( arg ) . getInjector ( arg ) . newInstance ( arg ) ;
<unk> config = getConfiguration ( arg ) . copy ( arg ) ;
<unk> <unk> = camelContext . getEndpoint ( arg ) ;
activityRules . <unk> ( arg ) ;
<unk> . <unk> ( arg ) ;
actual = exchange . getIn ( arg ) . getMandatoryBody ( arg ) ;
actual = exchange . getIn ( arg ) . getMandatoryBody ( arg ) ;
actual = exchange . getIn ( arg ) . getMandatoryBody ( arg ) ;
actual = exchange . getIn ( arg ) . getMandatoryBody ( arg ) ;
actual = exchange . getIn ( arg ) . getMandatoryBody ( arg ) ;
actual = exchange . getIn ( arg ) . getMandatoryBody ( arg ) ;
actual = exchange . getOut ( arg ) . getMandatoryBody ( arg ) ;
actual = exchange . getOut ( arg ) . getMandatoryBody ( arg ) ;
actual = exchange . getOut ( arg ) . getMandatoryBody ( arg ) ;
actual = exchange . getOut ( arg ) . getMandatoryBody ( arg ) ;
actual = exchange . getOut ( arg ) . getMandatoryBody ( arg ) ;
actual = exchange . getOut ( arg ) . getMandatoryBody ( arg ) ;
actual = ( MyExchange ) endpoint . createExchange ( arg ) ;
actual = endpoint . createExchange ( arg ) ;
<unk> = actual . getIn ( arg ) . getMandatoryBody ( arg ) ;
<unk> = new ArrayList < Object > ( arg ) ;
route = <unk> ( arg ) ;
<unk> ( arg ) ;
breakpoints . add ( arg ) ;
<unk> ( arg ) ;
<unk> ( arg ) ;
intercept ( arg ) ;
intercept ( arg ) ;
includeRoutes ( arg ) ;
includeRoutes ( arg ) ;
<unk> ( arg ) ;
<unk> ( arg ) ;
breakpoints . add ( arg ) ;
addAdvice ( arg ) ;
addAdvice ( arg ) ;
this . <unk> . add ( arg ) ;
addressUri = UnsafeUriCharactersEncoder . encodeHttpURI ( arg ) ;
addressUri = UnsafeUriCharactersEncoder . encodeHttpURI ( arg ) ;
weaveById ( arg ) . after ( arg ) . to ( arg ) . transform ( arg ) ;
weaveById ( arg ) . before ( arg ) . to ( arg ) . transform ( arg ) ;
weaveById ( arg ) . remove ( arg ) ;
weaveById ( arg ) . replace ( arg ) . multicast ( arg ) . to ( arg ) . to ( arg ) ;
weaveById ( arg ) . replace ( arg ) . multicast ( arg ) . to ( arg ) . to ( arg ) ;
weaveById ( arg ) . replace ( arg ) . to ( arg ) ;
weaveByToString ( arg ) . after ( arg ) . to ( arg ) . transform ( arg ) ;
weaveByToString ( arg ) . before ( arg ) . to ( arg ) . transform ( arg ) ;
weaveByToString ( arg ) . remove ( arg ) ;
weaveByToString ( arg ) . replace ( arg ) . multicast ( arg ) . to ( arg ) . to ( arg ) ;
weaveByToString ( arg ) . replace ( arg ) . to ( arg ) ;
<unk> = Thread . currentThread ( arg ) . getId ( arg ) ;
agent . setMask ( arg ) ;
agg . <unk> ( arg ) ;
aggregateExecutorService = <unk> ( arg ) ;
aggregated . expectedMessageCount ( arg ) ;
aggregationCount . incrementAndGet ( arg ) ;
aggregationCount . set ( arg ) ;
executorService . submit ( arg ) ;
aggregationStrategy = routeContext . mandatoryLookup ( arg ) ;
aggregationStrategy = routeContext . mandatoryLookup ( arg ) ;
aggregationStrategy = routeContext . mandatoryLookup ( arg ) ;
aggregationStrategy = routeContext . mandatoryLookup ( arg ) ;
<unk> = new HashSet < Class < ? >> ( arg ) ;
<unk> = context . getRegistry ( arg ) . lookupByNameAndType ( arg ) ;
annotatedFields . put ( arg ) ;
annotatedFields . put ( arg ) ;
answer . put ( arg ) ;
list . add ( arg ) ;
setKeyManagerPassword ( arg ) ;
setKeyManagerPassword ( arg ) ;
answer . getSslContextFactory ( arg ) . setKeyStorePath ( arg ) ;
answer . getSslContextFactory ( arg ) . setKeyStorePath ( arg ) ;
setKeyStorePassword ( arg ) ;
setKeyStorePassword ( arg ) ;
setKeyStorePath ( arg ) ;
setKeyStorePath ( arg ) ;
answer . setAbsoluteFilePath ( arg ) ;
answer . setAbsoluteFilePath ( arg ) ;
answer . setAbsoluteFilePath ( arg ) ;
<unk> . <unk> ( arg ) ;
answer . <unk> ( arg ) ;
( ( ErrorHandlerBuilder ) answer ) . <unk> ( arg ) ;
original . setException ( arg ) ;
answer . <unk> ( arg ) ;
answer . <unk> ( arg ) ;
HttpHelper . appendHeader ( arg ) ;
answer . getHeaders ( arg ) . putAll ( arg ) ;
answer . <unk> ( arg ) ;
answer . setDelay ( arg ) ;
JmsMessageHelper . setJMSReplyTo ( arg ) ;
JmsMessageHelper . setJMSReplyTo ( arg ) ;
JmsMessageHelper . setJMSReplyTo ( arg ) ;
answer . getSslContextFactory ( arg ) . setKeyManagerPassword ( arg ) ;
answer . getSslContextFactory ( arg ) . setKeyManagerPassword ( arg ) ;
answer . getSslContextFactory ( arg ) . setKeyStore ( arg ) ;
answer . getSslContextFactory ( arg ) . setKeyStore ( arg ) ;
answer . <unk> ( arg ) ;
template . setMaximumCacheSize ( arg ) ;
template . setMaximumCacheSize ( arg ) ;
answer . <unk> ( arg ) ;
answer . setMethod ( arg ) ;
answer . <unk> ( arg ) ;
answer . getSslContextFactory ( arg ) . setKeyStorePassword ( arg ) ;
answer . getSslContextFactory ( arg ) . setKeyStorePassword ( arg ) ;
answer . setRedeliveryDelay ( arg ) ;
answer . setRelativeFilePath ( arg ) ;
answer . setRelativeFilePath ( arg ) ;
answer . setRelativeFilePath ( arg ) ;
answer . setRelativeFilePath ( arg ) ;
answer . setRelativeFilePath ( arg ) ;
startServices ( arg ) ;
startServices ( arg ) ;
answer = ( ( JAXBElement < ? > ) answer ) . getValue ( arg ) ;
answer = createQueue ( arg ) ;
list = oldExchange . getProperty ( arg ) ;
answer = UuidGenerator . get ( arg ) . generateUuid ( arg ) ;
answer = camelContext . getExecutorServiceStrategy ( arg ) . newCachedThreadPool ( arg ) ;
answer = camelContext . getExecutorServiceStrategy ( arg ) . newThreadPool ( arg ) ;
answer = normalizePath ( arg ) ;
answer = sanitize ( arg ) ;
answer = context . getUuidGenerator ( arg ) . generateUuid ( arg ) ;
answer = <unk> + endpoint . getGeneratedFileName ( arg ) ;
answer = camelContext . getExecutorServiceStrategy ( arg ) . newDefaultThreadPool ( arg ) ;
answer = camelContext . getRegistry ( arg ) . lookupByNameAndType ( arg ) ;
answer = component . resolveEndpoint ( arg ) ;
answer = component . resolveEndpoint ( arg ) ;
answer = camelContext . getTypeConverter ( arg ) . convertTo ( arg ) ;
answer = camelContext . getTypeConverter ( arg ) . convertTo ( arg ) ;
answer = camelContext . getTypeConverter ( arg ) . convertTo ( arg ) ;
answer = converter . tryConvertTo ( arg ) ;
answer = endpointFile ;
answer = exchange . getProperty ( arg ) ;
answer = exchange . getHeader ( arg ) ;
answer = exchange . get ( arg ) . getProperty ( arg ) ;
answer = exchange . get ( arg ) . getProperty ( arg ) ;
return false ;
answer = <unk> ( arg ) . <unk> ( arg ) ;
answer = HttpMethods . <unk> ;
answer = getBinding ( arg ) . <unk> ( arg ) ;
answer = codec . unmarshallExchange ( arg ) ;
answer = codec . unmarshallExchange ( arg ) ;
answer = message . getHeader ( arg ) ;
holder = new ConstantBeanHolder ( arg ) ;
holder = new ConstantBeanHolder ( arg ) ;
new ClassPathXmlApplicationContext ( arg ) ;
answer = <unk> . resolveFactoryFinder ( arg ) ;
template = new DefaultProducerTemplate ( arg ) ;
template = new DefaultProducerTemplate ( arg ) ;
answer = new HttpServerBootstrapFactory ( arg ) ;
answer = getManagementObjectStrategy ( arg ) . <unk> ( arg ) ;
answer = getManagementObjectStrategy ( arg ) . <unk> ( arg ) ;
answer = addEndpointToRegistry ( arg ) ;
answer = pool . addAndAcquire ( arg ) ;
return routeContext . lookup ( arg ) ;
return super . getHeader ( arg ) ;
answer = marshaller . unmarshallExchange ( arg ) ;
answer = getUnmarshaller ( arg ) . unmarshal ( arg ) ;
answer = getUnmarshaller ( arg ) . unmarshal ( arg ) ;
answer = getUnmarshaller ( arg ) . unmarshal ( arg ) ;
ap . <unk> ( arg ) ;
ap . setEagerCheckCompletion ( arg ) ;
ap . setEagerCheckCompletion ( arg ) ;
ap . setEagerCheckCompletion ( arg ) ;
ap . setEagerCheckCompletion ( arg ) ;
<unk> ( arg ) ;
getApplicationContext ( arg ) . getBean ( arg ) ;
applicationContext = doCreateApplicationContext ( arg ) ;
applicationContext = doCreateApplicationContext ( arg ) ;
applicationContext = createApplicationContext ( arg ) ;
archive = ArchiveUtil . createWarArchive ( arg ) ;
archive = ArchiveUtil . createWarArchive ( arg ) ;
archive = ArchiveUtil . createJarArchive ( arg ) ;
archive = ArchiveUtil . createJarArchive ( arg ) ;
tokens . add ( arg ) ;
tokens . add ( arg ) ;
ps . <unk> ( arg ) ;
assertFiles ( arg ) ;
assertFiles ( arg ) ;
assertFiles ( arg ) ;
assertFiles ( arg ) ;
<unk> ( key , seda:
assertTrue ( arg ) ;
assertTrue ( arg ) ;
assertTrue ( arg ) ;
assertTrue ( arg ) ;
assertTrue ( arg ) ;
assertTrue ( arg ) ;
assertTrue ( arg ) ;
assertTrue ( arg ) ;
assertTrue ( arg ) ;
assertTrue ( arg ) ;
assertTrue ( arg ) ;
assertTrue ( arg ) ;
assertTrue ( arg ) ;
assertTrue ( arg ) ;
assertTrue ( arg ) ;
assertTrue ( arg ) ;
assertTrue ( arg ) ;
assertTrue ( arg ) ;
assertTrue ( arg ) ;
assertTrue ( arg ) ;
assertTrue ( arg ) ;
assertTrue ( arg ) ;
assertTrue ( arg ) ;
assertTrue ( arg ) ;
assertTrue ( arg ) ;
assertTrue ( arg ) ;
assertTrue ( arg ) ;
assertTrue ( arg ) ;
assertTrue ( arg ) ;
assertTrue ( arg ) ;
assertTrue ( arg ) ;
assertTrue ( arg ) ;
assertTrue ( arg ) ;
assertTrue ( arg ) ;
assertTrue ( arg ) ;
assertTrue ( arg ) ;
assertTrue ( arg ) ;
assertTrue ( arg ) ;
assertTrue ( arg ) ;
assertTrue ( arg ) ;
assertTrue ( arg ) ;
assertTrue ( arg ) ;
assertTrue ( arg ) ;
assertTrue ( arg ) ;
assertTrue ( arg ) ;
assertTrue ( arg ) ;
assertTrue ( arg ) ;
assertTrue ( arg ) ;
assertTrue ( arg ) ;
assertTrue ( arg ) ;
assertTrue ( arg ) ;
assertTrue ( arg ) ;
assertTrue ( arg ) ;
assertTrue ( arg ) ;
assertPredicate ( arg ) ;
assertPredicate ( arg ) ;
assertPredicate ( arg ) ;
assertPredicate ( arg ) ;
assertPredicate ( arg ) ;
assertPredicate ( arg ) ;
assertPredicate ( arg ) ;
assertPredicate ( arg ) ;
assertPredicate ( arg ) ;
assertTrue ( arg ) ;
assertTrue ( arg ) ;
assertTrue ( arg ) ;
assertTrue ( arg ) ;
assertTrue ( arg ) ;
assertTrue ( arg ) ;
assertTrue ( arg ) ;
assertDirectoryEquals ( arg ) ;
assertDirectoryEquals ( arg ) ;
assertDirectoryEquals ( arg ) ;
assertEquals ( arg ) ;
assertEquals ( arg ) ;
assertEquals ( arg ) ;
assertEquals ( arg ) ;
assertEquals ( arg ) ;
assertEquals ( arg ) ;
assertEquals ( arg ) ;
assertEquals ( arg ) ;
assertMockEndpointsSatisifed ( arg ) ;
assertMockEndpointsSatisifed ( arg ) ;
assertMockEndpointsSatisifed ( arg ) ;
assertMockEndpointsSatisifed ( arg ) ;
assertMockEndpointsSatisifed ( arg ) ;
assertMockEndpointsSatisifed ( arg ) ;
assertMockEndpointsSatisifed ( arg ) ;
assertMockEndpointsSatisifed ( arg ) ;
assertMockEndpointsSatisifed ( arg ) ;
assertMockEndpointsSatisifed ( arg ) ;
assertMockEndpointsSatisifed ( arg ) ;
assertMockEndpointsSatisifed ( arg ) ;
assertMockEndpointsSatisifed ( arg ) ;
assertMockEndpointsSatisifed ( arg ) ;
assertProperty ( arg ) ;
assertProperty ( arg ) ;
notify . matches ( arg ) ;
assertMockEndpointsSatisfied ( arg ) ;
assertMockEndpointsSatisfied ( arg ) ;
assertMockEndpointsSatisfied ( arg ) ;
assertMockEndpointsSatisfied ( arg ) ;
assertMockEndpointsSatisfied ( arg ) ;
assertMockEndpointsSatisfied ( arg ) ;
assertMockEndpointsSatisfied ( arg ) ;
assertMockEndpointsSatisfied ( arg ) ;
assertMockEndpointsSatisfied ( arg ) ;
assertMockEndpointsSatisfied ( arg ) ;
assertMockEndpointsSatisfied ( arg ) ;
assertMockEndpointsSatisfied ( arg ) ;
assertMockEndpointsSatisfied ( arg ) ;
assertMockEndpointsSatisfied ( arg ) ;
assertMockEndpointsSatisfied ( arg ) ;
assertMockEndpointsSatisfied ( arg ) ;
assertMockEndpointsSatisfied ( arg ) ;
assertMockEndpointsSatisfied ( arg ) ;
assertMockEndpointsSatisfied ( arg ) ;
assertMockEndpointsSatisfied ( arg ) ;
assertMockEndpointsSatisfied ( arg ) ;
assertMockEndpointsSatisfied ( arg ) ;
assertMockEndpointsSatisfied ( arg ) ;
assertMockEndpointsSatisfied ( arg ) ;
assertMockEndpointsSatisfied ( arg ) ;
assertMockEndpointsSatisfied ( arg ) ;
assertMockEndpointsSatisfied ( arg ) ;
assertMockEndpointsSatisfied ( arg ) ;
assertMockEndpointsSatisfied ( arg ) ;
assertMockEndpointsSatisfied ( arg ) ;
assertMockEndpointsSatisfied ( arg ) ;
assertMockEndpointsSatisfied ( arg ) ;
assertMockEndpointsSatisfied ( arg ) ;
assertMockEndpointsSatisfied ( arg ) ;
assertMockEndpointsSatisfied ( arg ) ;
assertMockEndpointsSatisfied ( arg ) ;
assertMockEndpointsSatisfied ( arg ) ;
assertMockEndpointsSatisfied ( arg ) ;
assertMockEndpointsSatisfied ( arg ) ;
assertMockEndpointsSatisfied ( arg ) ;
assertMockEndpointsSatisfied ( arg ) ;
assertMockEndpointsSatisfied ( arg ) ;
assertMockEndpointsSatisfied ( arg ) ;
assertMockEndpointsSatisfied ( arg ) ;
assertMockEndpointsSatisfied ( arg ) ;
assertMockEndpointsSatisfied ( arg ) ;
assertMockEndpointsSatisfied ( arg ) ;
assertMockEndpointsSatisfied ( arg ) ;
assertMockEndpointsSatisfied ( arg ) ;
assertMockEndpointsSatisfied ( arg ) ;
assertMockEndpointsSatisfied ( arg ) ;
assertMockEndpointsSatisfied ( arg ) ;
assertMockEndpointsSatisfied ( arg ) ;
assertMockEndpointsSatisfied ( arg ) ;
assertMockEndpointsSatisfied ( arg ) ;
assertMockEndpointsSatisfied ( arg ) ;
assertMockEndpointsSatisfied ( arg ) ;
assertMockEndpointsSatisfied ( arg ) ;
assertMockEndpointsSatisfied ( arg ) ;
assertMockEndpointsSatisfied ( arg ) ;
assertMockEndpointsSatisfied ( arg ) ;
assertMockEndpointsSatisfied ( arg ) ;
assertMockEndpointsSatisfied ( arg ) ;
assertMockEndpointsSatisfied ( arg ) ;
assertMockEndpointsSatisfied ( arg ) ;
assertMockEndpointsSatisfied ( arg ) ;
assertMockEndpointsSatisfied ( arg ) ;
assertMockEndpointsSatisfied ( arg ) ;
assertMockEndpointsSatisfied ( arg ) ;
assertMockEndpointsSatisfied ( arg ) ;
assertMockEndpointsSatisfied ( arg ) ;
assertMockEndpointsSatisfied ( arg ) ;
assertMockEndpointsSatisfied ( arg ) ;
assertMockEndpointsSatisfied ( arg ) ;
assertMockEndpointsSatisfied ( arg ) ;
assertMockEndpointsSatisfied ( arg ) ;
assertMockEndpointsSatisfied ( arg ) ;
assertMockEndpointsSatisfied ( arg ) ;
assertMockEndpointsSatisfied ( arg ) ;
assertMockEndpointsSatisfied ( arg ) ;
assertMockEndpointsSatisfied ( arg ) ;
assertMockEndpointsSatisfied ( arg ) ;
assertMockEndpointsSatisfied ( arg ) ;
assertMockEndpointsSatisfied ( arg ) ;
assertMockEndpointsSatisfied ( arg ) ;
assertMockEndpointsSatisfied ( arg ) ;
assertMockEndpointsSatisfied ( arg ) ;
assertMockEndpointsSatisfied ( arg ) ;
assertMockEndpointsSatisfied ( arg ) ;
assertMockEndpointsSatisfied ( arg ) ;
assertMockEndpointsSatisfied ( arg ) ;
assertMockEndpointsSatisfied ( arg ) ;
assertMockEndpointsSatisfied ( arg ) ;
assertMockEndpointsSatisfied ( arg ) ;
assertMockEndpointsSatisfied ( arg ) ;
assertMockEndpointsSatisfied ( arg ) ;
assertMockEndpointsSatisfied ( arg ) ;
assertMockEndpointsSatisfied ( arg ) ;
assertMockEndpointsSatisfied ( arg ) ;
assertMockEndpointsSatisfied ( arg ) ;
assertMockEndpointsSatisfied ( arg ) ;
assertMockEndpointsSatisfied ( arg ) ;
assertMockEndpointsSatisfied ( arg ) ;
assertMockEndpointsSatisfied ( arg ) ;
assertMockEndpointsSatisfied ( arg ) ;
assertMockEndpointsSatisfied ( arg ) ;
assertMockEndpointsSatisfied ( arg ) ;
assertMockEndpointsSatisfied ( arg ) ;
assertMockEndpointsSatisfied ( arg ) ;
assertMockEndpointsSatisfied ( arg ) ;
assertMockEndpointsSatisfied ( arg ) ;
assertMockEndpointsSatisfied ( arg ) ;
assertMockEndpointsSatisfied ( arg ) ;
assertMockEndpointsSatisfied ( arg ) ;
assertMockEndpointsSatisfied ( arg ) ;
assertMockEndpointsSatisfied ( arg ) ;
assertMockEndpointsSatisfied ( arg ) ;
assertMockEndpointsSatisfied ( arg ) ;
assertMockEndpointsSatisfied ( arg ) ;
assertMockEndpointsSatisfied ( arg ) ;
assertMockEndpointsSatisfied ( arg ) ;
assertMockEndpointsSatisfied ( arg ) ;
assertMockEndpointsSatisfied ( arg ) ;
assertMockEndpointsSatisfied ( arg ) ;
assertMockEndpointsSatisfied ( arg ) ;
assertMockEndpointsSatisfied ( arg ) ;
assertMockEndpointsSatisfied ( arg ) ;
assertMockEndpointsSatisfied ( arg ) ;
assertMockEndpointsSatisfied ( arg ) ;
assertMockEndpointsSatisfied ( arg ) ;
assertMockEndpointsSatisfied ( arg ) ;
assertMockEndpointsSatisfied ( arg ) ;
assertMockEndpointsSatisfied ( arg ) ;
assertMockEndpointsSatisfied ( arg ) ;
assertMockEndpointsSatisfied ( arg ) ;
assertMockEndpointsSatisfied ( arg ) ;
assertMockEndpointsSatisfied ( arg ) ;
assertMockEndpointsSatisfied ( arg ) ;
assertMockEndpointsSatisfied ( arg ) ;
assertMockEndpointsSatisfied ( arg ) ;
assertMockEndpointsSatisfied ( arg ) ;
assertMockEndpointsSatisfied ( arg ) ;
assertMockEndpointsSatisfied ( arg ) ;
assertMockEndpointsSatisfied ( arg ) ;
assertMockEndpointsSatisfied ( arg ) ;
assertMockEndpointsSatisfied ( arg ) ;
assertMockEndpointsSatisfied ( arg ) ;
assertMockEndpointsSatisfied ( arg ) ;
assertIsInstanceOf ( arg ) ;
assertIsInstanceOf ( arg ) ;
assertIsInstanceOf ( arg ) ;
assertEquals ( arg ) ;
assertEquals ( arg ) ;
assertNotNull ( arg ) ;
assertNotNull ( arg ) ;
assertNotNull ( arg ) ;
assertNotNull ( arg ) ;
assertNotNull ( arg ) ;
assertNotNull ( arg ) ;
assertNotNull ( arg ) ;
assertNotNull ( arg ) ;
assertEquals ( arg ) ;
assertEquals ( arg ) ;
assertEquals ( arg ) ;
<unk> ( <unk> , seda:
assertEquals ( arg ) ;
assertEquals ( arg ) ;
assertChildTo ( arg ) ;
assertChildTo ( arg ) ;
assertChildTo ( arg ) ;
assertChildTo ( arg ) ;
assertChildTo ( arg ) ;
assertEquals ( arg ) ;
assertEquals ( arg ) ;
assertEquals ( arg ) ;
assertEquals ( arg ) ;
assertEquals ( arg ) ;
assertEquals ( arg ) ;
assertEquals ( arg ) ;
assertEquals ( arg ) ;
assertEquals ( arg ) ;
assertEquals ( arg ) ;
assertNotNull ( arg ) ;
assertNotNull ( arg ) ;
assertNotNull ( arg ) ;
asyncProcessor = AsyncProcessorConverterHelper . convert ( arg ) ;
asyncProcessor = AsyncProcessorConverterHelper . convert ( arg ) ;
authorities . add ( arg ) ;
<unk> = converter . convertTo ( arg ) ;
assertMockEndpointsSatisfied ( arg ) ;
b . <unk> ( arg ) . after ( arg ) . <unk> ( arg ) . <unk> ( arg ) . to ( arg ) ;
<unk> = new File ( arg ) . <unk> ( arg ) <unk> ;
this . batchConfig = batchConfig ;
<unk> . incrementAndGet ( arg ) ;
wireCamelContext ( arg ) ;
wireCamelContext ( arg ) ;
bean = getApplicationContext ( arg ) . getBean ( arg ) ;
bean = <unk> . getBean ( arg ) ;
bean = context . getRegistry ( arg ) . lookupByName ( arg ) ;
bean = context . getRegistry ( arg ) . lookupByName ( arg ) ;
bean = context . getRegistry ( arg ) . lookupByName ( arg ) ;
bean = context . getRegistry ( arg ) . lookupByName ( arg ) ;
bean = context . getRegistry ( arg ) . lookupByName ( arg ) ;
<unk> = getMandatoryBean ( arg ) ;
beanMock = EasyMock . <unk> ( arg ) ;
beanMock = EasyMock . <unk> ( arg ) ;
beanType = getContext ( arg ) . getClassResolver ( arg ) . resolveClass ( arg ) ;
beansOfType = CastUtils . cast ( arg ) ;
timeout = <unk> ( arg ) ;
<unk> = Thread . currentThread ( arg ) . getId ( arg ) ;
<unk> ( arg ) ;
return binding . <unk> ( arg ) ;
endpoint . <unk> ( arg ) . populateExchangeFromCxfResponse ( arg ) ;
getBinding ( arg ) . setBody ( arg ) ;
binding = new <unk> < T > ( arg ) ;
binding = new <unk> ( arg ) ;
<unk> . <unk> ( arg ) ;
body = ( ( WrappedFile < ? > ) body ) . getFile ( arg ) ;
body = ( ( WrappedFile < ? > ) body ) . getFile ( arg ) ;
body = ( ( WrappedFile < ? > ) body ) . getFile ( arg ) ;
body = StringHelper . replaceAll ( arg ) ;
body = StringHelper . replaceAll ( arg ) ;
body = NettyHelper . getTextlineBody ( arg ) ;
body = NettyHelper . getTextlineBody ( arg ) ;
body = endpoint . getCamelContext ( arg ) . getTypeConverter ( arg ) . mandatoryConvertTo ( arg ) ;
body = getEndpoint ( arg ) . getConfiguration ( arg ) . getWebServiceTemplate ( arg ) . sendSourceAndReceive ( arg ) ;
body = getEndpoint ( arg ) . getConfiguration ( arg ) . getWebServiceTemplate ( arg ) . sendSourceAndReceive ( arg ) ;
body = exchange . getOut ( arg ) . getBody ( arg ) ;
body = ( JmsMessage ) exchange . getFault ( arg ) ;
body = NettyPayloadHelper . getIn ( arg ) ;
body = NettyPayloadHelper . getOut ( arg ) ;
body = ( JmsMessage ) exchange . getOut ( arg ) ;
message = <unk> ( arg ) ;
book = sendFindBookRequest ( arg ) ;
book = sendFindBookRequest ( arg ) ;
book = sendFindBookRequest ( arg ) ;
book = sendFindBookRequest ( arg ) ;
book = sendFindBookRequest ( arg ) ;
boolean absolute = FileUtil . isAbsolute ( arg ) ;
boolean absolute = FileUtil . isAbsolute ( arg ) ;
boolean alwaysCopy = endpoint != null && endpoint . getConfiguration ( arg ) . isAlwaysCopyMessage ( arg ) ;
boolean alwaysCopy = ( endpoint != null ) && endpoint . getConfiguration ( arg ) . isAlwaysCopyMessage ( arg ) ;
boolean answer ;
boolean answer = lastModifiedCheck && sizeCheck &&! <unk> ;
boolean answer =! isStoppingOrStopped ( arg ) ;
boolean <unk> = <unk> ( arg ) ;
String <unk> = null ;
boolean deleted = FileUtil . deleteFile ( arg ) ;
boolean deleted = FileUtil . deleteFile ( arg ) ;
boolean disabled =! camelContext . getManagementStrategy ( arg ) . <unk> ( arg ) || camelContext . getManagementStrategy ( arg ) . getStatisticsLevel ( arg ) == ManagementStatisticsLevel . <unk> ;
boolean disconnect = getEndpoint ( arg ) . getConfiguration ( arg ) . isDisconnect ( arg ) ;
boolean disconnect = getEndpoint ( arg ) . getConfiguration ( arg ) . isDisconnect ( arg ) ;
boolean done = <unk> ( arg ) ;
boolean <unk> = true ;
Throwable e = null ;
boolean dynamicSelector = getConfiguration ( arg ) . getReplyToDestinationSelectorName ( arg ) == null ;
boolean dynamicSelector = getConfiguration ( arg ) . getReplyToDestinationSelectorName ( arg ) == null ;
boolean <unk> = <unk> . <unk> ( arg ) ;
boolean enabled = camelContext . getManagementStrategy ( arg ) . getStatisticsLevel ( arg ) == ManagementStatisticsLevel . <unk> ;
boolean <unk> = <unk> ( arg ) ;
boolean existFile = existsFile ( arg ) ;
boolean existFile = existsFile ( arg ) ;
boolean <unk> = isRegistered ( arg ) ;
boolean <unk> = exchange . getFromEndpoint ( arg ) != null && ( exchange . getFromEndpoint ( arg ) . getEndpointUri ( arg ) . startsWith ( arg ) || exchange . getFromEndpoint ( arg ) . getEndpointUri ( arg ) . startsWith ( arg ) ) ;
boolean headerExist = false ;
boolean hasOut = result . hasOut ( arg ) ;
boolean <unk> = header . equals ( arg ) ;
boolean hit = se . getLatch ( arg ) . await ( arg ) ;
boolean hit = se . getLatch ( arg ) . await ( arg ) ;
boolean <unk> = <unk> . contains ( arg ) || <unk> . contains ( arg ) ;
boolean isDirectory = endpoint . isDirectory ( arg ) ;
String <unk> = exchange . getIn ( arg ) . getHeader ( arg ) ;
boolean <unk> = ObjectHelper . isNotEmpty ( arg ) ;
boolean matches = event . matches ( arg ) ;
boolean matches = event . matches ( arg ) ;
boolean matches = event . matches ( arg ) ;
boolean matches = event . matches ( arg ) ;
boolean matches = event . matches ( arg ) ;
boolean <unk> = jdbcTemplate . queryForObject ( arg ) != 0 ;
boolean renamed = operations . renameFile ( arg ) ;
boolean renamed = operations . renameFile ( arg ) ;
boolean renamed = getOperations ( arg ) . renameFile ( arg ) ;
boolean <unk> = security . getConstraintMapping ( arg ) == null || security . getConstraintMapping ( arg ) . matches ( arg ) ;
String name = file . getName ( arg ) ;
boolean sanitize = camelContext . getManagementStrategy ( arg ) . getManagementAgent ( arg ) . getMask ( arg ) != null && camelContext . getManagementStrategy ( arg ) . getManagementAgent ( arg ) . getMask ( arg ) ;
boolean mask = <unk> . mask ( arg ) ;
boolean sanitize = strategy . getManagementAgent ( arg ) . getMask ( arg ) != null ? strategy . getManagementAgent ( arg ) . getMask ( arg ) : false ;
boolean secure = HttpHelper . isSecureConnection ( arg ) ;
final boolean <unk> = <unk> ( arg ) && <unk> ( arg ) ;
boolean skip = <unk> ( arg ) ;
boolean skip = getSkipSendToOriginalEndpoint ( arg ) != null ? getSkipSendToOriginalEndpoint ( arg ) : false ;
boolean skip = skipSendToOriginalEndpoint != null ? skipSendToOriginalEndpoint : false ;
boolean <unk> = false ;
boolean success = <unk> . <unk> ( arg ) ;
boolean success ;
boolean success = operations . storeFile ( arg ) ;
boolean success = operations . storeFile ( arg ) ;
boolean sync = processor . process ( arg ) ;
boolean sync = doProcessSequential ( arg ) ;
boolean sync ;
boolean sync ;
WaitForTaskToComplete wait = <unk> ;
boolean writeAsTempAndRename = ObjectHelper . isNotEmpty ( arg ) ;
boolean writeAsTempAndRename = ObjectHelper . isNotEmpty ( arg ) ;
boolean writeAsTempAndRename = ObjectHelper . isNotEmpty ( arg ) ;
<unk> = new NettyServerBossPoolBuilder ( arg ) . withBossCount ( arg ) . <unk> ( arg ) . build ( arg ) ;
<unk> ( arg ) ;
buffer . append ( arg ) . append ( arg ) ;
String name = id ;
name = name + ( + sourceId + ) ;
success = <unk> ( arg ) ;
builder . <unk> ( arg ) ;
parent . addProcessBuilder ( arg ) ;
buffer . append ( arg ) ;
builder . setContext ( arg ) ;
builder . <unk> ( arg ) ;
builder . <unk> ( arg ) ;
builder . <unk> ( arg ) ;
builder = ( ErrorHandlerBuilder ) ErrorHandlerBuilderRef . lookupErrorHandlerBuilder ( arg ) ;
builder = ErrorHandlerBuilderRef . lookupErrorHandlerBuilder ( arg ) ;
builder = ErrorHandlerBuilderRef . lookupErrorHandlerBuilder ( arg ) ;
builder = ErrorHandlerBuilderRef . lookupErrorHandlerBuilder ( arg ) ;
this . bundleContext = CamelBlueprintHelper . <unk> ( arg ) ;
bundles = new Bundle [ ] { val } ;
bundles = new Bundle [ ] { val } ;
bus = ctx . getBean ( arg ) ;
bus = BusFactory . getThreadDefaultBus ( arg ) ;
super . setBus ( arg ) ;
bus = CxfEndpointUtils . createBus ( arg ) ;
byte [ ] body = exchange . getIn ( arg ) . getBody ( arg ) ;
byte [ ] body = { val } ;
byte [ ] body = { val } ;
byte [ ] body = u02C7ABu0000u02C7u007Fu02C7 . getBytes ( arg ) ;
byte [ ] body = u02C7ABu0000u02C7u007Fu02C7 . getBytes ( arg ) ;
byte [ ] buf = new byte [ <unk> * 1024 * 1024 ] ;
byte [ ] bytes = ExchangeHelper . convertToType ( arg ) ;
byte [ ] bytes = context . getTypeConverter ( arg ) . mandatoryConvertTo ( arg ) ;
byte [ ] bytesCRLF = ConverterUtils . getByteReturn ( arg ) ;
byte [ ] bytesCRLF = ConverterUtils . getByteReturn ( arg ) ;
byte [ ] ciphertext = e . getIn ( arg ) . getMandatoryBody ( arg ) ;
byte [ ] ciphertext = e . getIn ( arg ) . getMandatoryBody ( arg ) ;
byte [ ] data = ( input +  <unk> ) . getBytes ( arg ) ;
byte [ ] out = ( byte [ ] ) template . requestBody ( arg ) ;
SshResult result = endpoint . <unk> ( arg ) ;
SshResult result = null ;
byte <unk> = config . <unk> ( arg ) ;
c . expectedMessageCount ( arg ) ;
producerCache . releaseProducer ( arg ) ;
producerCache . releaseProducer ( arg ) ;
cache . clear ( arg ) ;
cache = cacheManager . <unk> ( arg ) ;
cacheManager = <unk> ( arg ) ;
<unk> cacheManager = <unk> . <unk> ( arg ) ;
cacheManager = new DefaultCacheManagerFactory ( arg ) . instantiateCacheManager ( arg ) ;
cacheManager = new DefaultCacheManagerFactory ( arg ) . instantiateCacheManager ( arg ) ;
cacheManager = new DefaultCacheManagerFactory ( arg ) . instantiateCacheManager ( arg ) ;
cacheManager = new DefaultCacheManagerFactory ( arg ) . getInstance ( arg ) ;
cacheManager = new DefaultCacheManagerFactory ( arg ) . getInstance ( arg ) ;
cacheManager = new DefaultCacheManagerFactory ( arg ) . getInstance ( arg ) ;
ServiceHelper . stopService ( arg ) ;
<unk> = configuration . <unk> ( arg ) ;
Map cacheSettings = URISupport . parseParameters ( arg ) ;
<unk> . <unk> ( arg ) ;
producerCallback . done ( arg ) ;
producerCallback . done ( arg ) ;
callback . onTaskCompleted ( arg ) ;
callback . onTaskCompleted ( arg ) ;
callback . done ( arg ) ;
callback . done ( arg ) ;
CALLLED . set ( arg ) ;
CALLLED . set ( arg ) ;
CALLLED . set ( arg ) ;
camel . getExecutorServiceManager ( arg ) . setDefaultThreadPoolProfile ( arg ) ;
camelContext . start ( arg ) ;
camelContext . start ( arg ) ;
camelContext . stop ( arg ) ;
camelContext . stop ( arg ) ;
camelContext . stop ( arg ) ;
camelContext . stop ( arg ) ;
camelContext . stop ( arg ) ;
camelContext . getExecutorServiceManager ( arg ) . shutdownNow ( arg ) ;
camelContext . getExecutorServiceManager ( arg ) . shutdownNow ( arg ) ;
camelContext . getExecutorServiceManager ( arg ) . shutdownNow ( arg ) ;
camelContext . getExecutorServiceManager ( arg ) . shutdownNow ( arg ) ;
camelContext . getExecutorServiceManager ( arg ) . shutdownNow ( arg ) ;
camelContext . getExecutorServiceManager ( arg ) . shutdownNow ( arg ) ;
camelContext . getExecutorServiceManager ( arg ) . shutdown ( arg ) ;
camelContext . getExecutorServiceManager ( arg ) . shutdown ( arg ) ;
camelContext . getExecutorServiceManager ( arg ) . shutdown ( arg ) ;
camelContext . getExecutorServiceManager ( arg ) . shutdown ( arg ) ;
camelContext . getExecutorServiceManager ( arg ) . shutdown ( arg ) ;
camelContext . getExecutorServiceManager ( arg ) . shutdown ( arg ) ;
camelContext . getExecutorServiceManager ( arg ) . shutdown ( arg ) ;
camelContext . getExecutorServiceManager ( arg ) . shutdown ( arg ) ;
camelContext . getExecutorServiceManager ( arg ) . shutdown ( arg ) ;
camelContext . getExecutorServiceManager ( arg ) . shutdownNow ( arg ) ;
camelContext . getExecutorServiceManager ( arg ) . shutdownNow ( arg ) ;
camelContext . getExecutorServiceManager ( arg ) . shutdownNow ( arg ) ;
camelContext . getExecutorServiceManager ( arg ) . shutdownNow ( arg ) ;
camelContext . addRoutes ( arg ) ;
super . <unk> ( arg ) ;
camelContext = applicationContext . getBean ( arg ) ;
camelContext = applicationContext . getBean ( arg ) ;
camelContext = applicationContext . getBean ( arg ) ;
camelContext = ( CamelContext ) applicationContext . getBean ( arg ) ;
this . camelContext = camelContext ;
camelContextLifecycle . <unk> ( arg ) ;
camelContextLifecycle . <unk> ( arg ) ;
camelContextLifecycle . <unk> ( arg ) ;
camelContextLifecycle . <unk> ( arg ) ;
processor . onExchange ( arg ) ;
this . camelJMXAgent = camelJMXAgent ;
<unk> . <unk> ( arg ) ;
camelServlet = new CamelContinuationServlet ( arg ) ;
Object body = <unk> . getMessage ( arg ) ;
( ( org . apache . <unk> . <unk> . <unk> . <unk> ) <unk> ) . shutdown ( arg ) ;
cfb . setEndpointName ( arg ) ;
cfb . setEndpointName ( arg ) ;
cfb . setServiceName ( arg ) ;
cfb . setServiceName ( arg ) ;
channel . close ( arg ) ;
channel . <unk> ( arg ) ;
NettyHelper . <unk> ( arg ) ;
addToPipeline ( arg ) ;
addToPipeline ( arg ) ;
char separator = Converter . <unk> ( arg ) ;
char separator = ConverterUtils . getCharDelimiter ( arg ) ;
char separator = ConverterUtils . getCharDelimiter ( arg ) ;
charset = IOHelper . normalizeCharset ( arg ) ;
charsetName = exchange . getProperty ( arg ) ;
<unk> . <unk> ( arg ) ;
this . checkSum = checkSum ;
childServices = new LinkedHashSet ( arg ) ;
childServices = new LinkedHashSet < Object > ( arg ) ;
children = createOutputsProcessor ( arg ) ;
when . addOutput ( arg ) ;
cinterfaces [ i ] = camelContext . getClassResolver ( arg ) . resolveClass ( arg ) ;
ObjectHelper . close ( arg ) ;
cl . <unk> ( arg ) . <unk> ( arg ) ;
clazz = loader . loadClass ( arg ) ;
clazz = entry . bundle . loadClass ( arg ) ;
clazz = bundle . loadClass ( arg ) ;
clazz = ObjectHelper . loadClass ( arg ) ;
deleteDirectory ( arg ) ;
deleteDirectory ( arg ) ;
deleteDirectory ( arg ) ;
map . clear ( arg ) ;
client . <unk> ( arg ) ;
<unk> ( arg ) ;
resetPartTypes ( arg ) ;
client . <unk> ( arg ) . <unk> ( arg ) ;
( ( DefaultHttpClient ) client ) . getCredentialsProvider ( arg ) . setCredentials ( arg ) ;
( ( DefaultHttpClient ) client ) . getCredentialsProvider ( arg ) . setCredentials ( arg ) ;
client . invoke ( arg ) ;
client . invoke ( arg ) ;
login = client . login ( arg ) ;
template . send ( arg ) ;
template . sendBody ( arg ) ;
template . sendBody ( arg ) ;
template . sendBody ( arg ) ;
template . sendBody ( arg ) ;
template . sendBody ( arg ) ;
template . stop ( arg ) ;
template . stop ( arg ) ;
client = <unk> ( arg ) ;
template = new CamelTemplate < Exchange > ( arg ) ;
template = new CamelTemplate < Exchange > ( arg ) ;
client = <unk> ( arg ) ;
<unk> . setBus ( arg ) ;
<unk> . setPipelineFactory ( arg ) ;
clientFactory = <unk> ? new <unk> ( arg ) : new ClientProxyFactoryBean ( arg ) ;
clientFactory = new ClientProxyFactoryBean ( arg ) ;
closedCorrelationKeys = new ConcurrentHashMap < String , String > ( arg ) ;
closedCorrelationKeys = new LRUCache < String , String > ( arg ) ;
cls = getServiceClass ( arg ) ;
cls = getServiceClass ( arg ) ;
comparator = routeContext . getCamelContext ( arg ) . getRegistry ( arg ) . lookupByNameAndType ( arg ) ;
callback . <unk> ( arg ) ;
<unk> . <unk> ( arg ) ;
setCompletedPredicate ( arg ) ;
setCompletedPredicate ( arg ) ;
channelFactory . addConsumer ( arg ) ;
channelFactory . removeConsumer ( arg ) ;
endpoint . <unk> ( arg ) ;
component . setContext ( arg ) ;
component . setCamelContext ( arg ) ;
component . setCamelContext ( arg ) ;
component . setConnectionCount ( arg ) ;
component . setConnectionCount ( arg ) ;
component . setConnectionCount ( arg ) ;
component . setConnectionCount ( arg ) ;
component . setConnectionCount ( arg ) ;
component . setConnectionCount ( arg ) ;
camelContext . start ( arg ) ;
camelContext . start ( arg ) ;
camelContext . start ( arg ) ;
camelContext . start ( arg ) ;
camelContext . start ( arg ) ;
conduit . prepare ( arg ) ;
conduit . prepare ( arg ) ;
conduit . prepare ( arg ) ;
ElasticsearchConfiguration conf = new ElasticsearchConfiguration ( arg ) ;
ElasticsearchConfiguration conf = new ElasticsearchConfiguration ( arg ) ;
ElasticsearchConfiguration conf = new ElasticsearchConfiguration ( arg ) ;
ElasticsearchConfiguration conf = new ElasticsearchConfiguration ( arg ) ;
RemoteFileConfiguration config = new RemoteFileConfiguration ( arg ) ;
config = <unk> ( arg ) ;
config . setDirectory ( arg ) ;
config = getConfiguration ( arg ) ;
SipConfiguration config = new SipConfiguration ( arg ) ;
configuration . <unk> ( arg ) ;
getConfiguration ( arg ) . <unk> ( arg ) ;
getConfiguration ( arg ) . <unk> ( arg ) ;
<unk> ( arg ) ;
configurePollingConsumer ( arg ) ;
configurePollingConsumer ( arg ) ;
configurePollingConsumer ( arg ) ;
configurePollingConsumer ( arg ) ;
exchange = configureExchange ( arg ) ;
exchange = configureExchange ( arg ) ;
<unk> ( arg ) ;
<unk> configurer = <unk> ( arg ) ;
configureCodecFactory ( arg ) ;
configureCodecFactory ( arg ) ;
<unk> ( arg ) ;
if ( conn != null ) conn . rollback ( arg ) ;
conn = dataSource . getConnection ( arg ) ;
recoverableConnectIfNecessary ( arg ) ;
recoverableConnectIfNecessary ( arg ) ;
connectionResource . <unk> ( arg ) ;
<unk> . setPipelineFactory ( arg ) ;
connectionlessBootstrap . setOption ( arg ) ;
connectionlessBootstrap . setOption ( arg ) ;
connectionlessBootstrap . setOption ( arg ) ;
connectorRef . server . start ( arg ) ;
connector = <unk> ( arg ) ;
<unk> = jmxExporter . register ( arg ) ;
connectorPort = value ;
connectorPort = port ;
CONNECTORS . put ( arg ) ;
consumer . getNettyServerBootstrapFactory ( arg ) . <unk> ( arg ) ;
consumer . getNettyServerBootstrapFactory ( arg ) . <unk> ( arg ) ;
consumer . getProcessor ( arg ) . process ( arg ) ;
consumer . onExchange ( arg ) ;
ServiceHelper . startService ( arg ) ;
ServiceHelper . startService ( arg ) ;
ServiceHelper . startService ( arg ) ;
ServiceHelper . stopServices ( arg ) ;
<unk> = context . getEndpoint ( arg ) ;
getPostProcessor ( arg ) . <unk> ( arg ) ;
CONSUMER_SUSPENDED . set ( arg ) ;
CONSUMER_SUSPENDED . set ( arg ) ;
CONSUMERS . clear ( arg ) ;
CONSUMERS . put ( arg ) ;
CONSUMERS . remove ( arg ) ;
container . start ( arg ) ;
container . start ( arg ) ;
container . start ( arg ) ;
container . start ( arg ) ;
container . start ( arg ) ;
container . start ( arg ) ;
container . stop ( arg ) ;
container . stop ( arg ) ;
container . stop ( arg ) ;
container . stop ( arg ) ;
container . stop ( arg ) ;
container . stop ( arg ) ;
container . addRoutes ( arg ) ;
camelContext . start ( arg ) ;
camelContext . start ( arg ) ;
context . stop ( arg ) ;
context . stop ( arg ) ;
context . stop ( arg ) ;
context . stop ( arg ) ;
context . stop ( arg ) ;
context . stop ( arg ) ;
bufferedImage = <unk> . read ( arg ) ;
<unk> = new ArrayList < Object > ( arg ) ;
contentType = <unk> . create ( arg ) ;
addFilter ( arg ) ;
addFilter ( arg ) ;
context . setTracing ( arg ) ;
context . setTracing ( arg ) ;
context . setTracing ( arg ) ;
( ( ModelCamelContext ) context ) . addRouteDefinitions ( arg ) ;
ServiceHelper . startService ( arg ) ;
producer . sendBody ( arg ) ;
context . getEndpoint ( <unk>
camelContext . getExecutorServiceManager ( arg ) . shutdownNow ( arg ) ;
context . getExecutorServiceManager ( arg ) . registerThreadPoolProfile ( arg ) ;
context . getExecutorServiceManager ( arg ) . registerThreadPoolProfile ( arg ) ;
context . getExecutorServiceManager ( arg ) . registerThreadPoolProfile ( arg ) ;
context . getExecutorServiceManager ( arg ) . setDefaultThreadPoolProfile ( arg ) ;
context . getExecutorServiceManager ( arg ) . setDefaultThreadPoolProfile ( arg ) ;
context . getExecutorServiceManager ( arg ) . <unk> ( arg ) ;
context . getExecutorServiceManager ( arg ) . shutdownNow ( arg ) ;
context . getExecutorServiceManager ( arg ) . shutdownNow ( arg ) ;
context . getManagementStrategy ( arg ) . getManagementAgent ( arg ) . setMask ( arg ) ;
context . getManagementStrategy ( arg ) . addEventNotifier ( arg ) ;
context . getManagementStrategy ( arg ) . addEventNotifier ( arg ) ;
context . getManagementStrategy ( arg ) . setStatisticsLevel ( arg ) ;
context . getManagementStrategy ( arg ) . setStatisticsLevel ( arg ) ;
context . getRegistry ( arg ) . lookupByNameAndType ( arg ) ;
context . getRegistry ( arg ) . lookupByNameAndType ( arg ) ;
context . getStreamCachingStrategy ( arg ) . setSpoolDirectory ( arg ) ;
context . getStreamCachingStrategy ( arg ) . setSpoolDirectory ( arg ) ;
assertTrue ( arg ) ;
context . setFactoryFinderResolver ( arg ) ;
context . setFactoryFinderResolver ( arg ) ;
context . stopRoute ( arg ) ;
context . <unk> ( arg ) ;
context . start ( arg ) ;
context . <unk> ( arg ) ;
context = ( ModelCamelContext ) c . getBean ( arg ) ;
context = ( ModelCamelContext ) c . getBean ( arg ) ;
context = ( Map < String , ? > ) <unk> . getProperty ( arg ) ;
context = SpringCamelContext . springCamelContext ( arg ) ;
context = SpringCamelContext . springCamelContext ( arg ) ;
context = SpringCamelContext . springCamelContext ( arg ) ;
context = c . getBean ( arg ) ;
context = c . getBean ( arg ) ;
context = applicationContext . getBean ( arg ) ;
context = new SpringCamelContext ( arg ) ;
context = ( ModelCamelContext ) createCamelContext ( arg ) ;
context = ( ModelCamelContext ) createCamelContext ( arg ) ;
ServletContextHandler context = createContext ( arg ) ;
context = SpringCamelContext . springCamelContext ( arg ) ;
context = <unk> ( arg ) ;
context = createContext ( arg ) ;
<unk> . set ( arg ) ;
contextId = DefaultCamelContextNameStrategy . getNextName ( arg ) ;
contextId = DefaultCamelContextNameStrategy . getNextName ( arg ) ;
converter . mandatoryConvertTo ( arg ) ;
converter = con . newInstance ( arg ) ;
converter = lookup ( arg ) ;
IOHelper . copy ( arg ) ;
copy = exchange . getContext ( arg ) . getTypeConverter ( arg ) . convertTo ( arg ) ;
<unk> = new <unk> ( arg ) ;
CachedOutputStream cos = new CachedOutputStream ( arg ) ;
count = jdbc . queryForObject ( arg ) ;
count = jdbc . queryForObject ( arg ) ;
counter . <unk> ( ( System . nanoTime ( arg ) - startTime )
<unk> . incrementAndGet ( arg ) ;
registeredCounters . put ( arg ) ;
createConnector = value ;
createConnector = value != null ? value : Boolean . FALSE ;
pageToFileStream ( arg ) ;
pageToFileStream ( arg ) ;
pageToFileStream ( arg ) ;
credentials = LoginCredentials . builder ( arg ) . user ( arg ) . build ( arg ) ;
<unk> = ConverterUtils . getByteReturn ( arg ) ;
ctx . setTracing ( arg ) ;
current . incrementAndGet ( arg ) ;
current . incrementAndGet ( arg ) ;
current . incrementAndGet ( arg ) ;
current . incrementAndGet ( arg ) ;
current . incrementAndGet ( arg ) ;
current . incrementAndGet ( arg ) ;
current . incrementAndGet ( arg ) ;
current . incrementAndGet ( arg ) ;
current . incrementAndGet ( arg ) ;
current . incrementAndGet ( arg ) ;
current . set ( arg ) ;
current . set ( arg ) ;
current . set ( arg ) ;
current . set ( arg ) ;
current . set ( arg ) ;
current . set ( arg ) ;
current . set ( arg ) ;
current . set ( arg ) ;
current . set ( arg ) ;
currentStream = <unk> ( arg ) ;
currentStream = IOHelper . buffered ( arg ) ;
started = <unk> ( arg ) ;
cxfEndpoint = context . getEndpoint ( arg ) ;
cxfHeaders = new TreeMap < String , List < String >> ( arg ) ;
data . <unk> =  ;
data . <unk> = processor ;
data . original = <unk> ( arg ) ;
data . redeliveryDelay = <unk> ( arg ) ;
data . redeliveryDelay = data . currentRedeliveryPolicy . <unk> ( arg ) ;
data . currentRedeliveryPolicy . sleep ( arg ) ;
data . <unk> = exceptionPolicy . <unk> ( arg ) ;
data . useOriginalInBody = exceptionPolicy . <unk> ( arg ) ;
data . useOriginalInMessage = exceptionPolicy . <unk> ( arg ) ;
data . useOriginalInBody = exceptionPolicy . <unk> ( arg ) ;
data . useOriginalInMessage = exceptionPolicy . <unk> ( arg ) ;
dataField = <unk> . next ( arg ) ;
dataFormat = type . getDataFormat ( arg ) ;
dataSource = context . getRegistry ( arg ) . lookupByNameAndType ( arg ) ;
dataSource = context . getRegistry ( arg ) . lookupByNameAndType ( arg ) ;
dataSource = context . getRegistry ( arg ) . lookupByNameAndType ( arg ) ;
dataSource = context . getRegistry ( arg ) . lookupByNameAndType ( arg ) ;
dataStore = <unk> . < Object , Object > <unk> ( arg ) ;
IOHelper . close ( arg ) ;
ServiceHelper . stopServices ( arg ) ;
<unk> . message ( arg ) . body ( arg ) . isEqualTo ( arg ) ;
<unk> . send ( arg ) ;
ServiceHelper . stopService ( arg ) ;
container . <unk> ( arg ) ;
container . setRecoveryInterval ( arg ) ;
container . <unk> ( arg ) ;
container . <unk> ( arg ) ;
container . <unk> ( arg ) ;
resultWaitTime = <unk> ;
<unk> . <unk> ( arg ) ;
<unk> = new RecipientList ( arg ) ;
DefaultServlet <unk> = new DefaultServlet ( arg ) ;
client . <unk> ( arg ) . setCredentials ( arg ) ;
RouteDefinitionHelper . <unk> ( arg ) ;
ServiceHelper . startServices ( arg ) ;
ServiceHelper . stopServices ( arg ) ;
return deleteDirectory ( arg ) ;
return deleteDirectory ( arg ) ;
return deleteDirectory ( arg ) ;
operations . deleteFile ( arg ) ;
<unk> ( arg ) ;
<unk> = message . <unk> ( arg ) ;
description = new DescriptionDefinition ( arg ) ;
description = new DescriptionDefinition ( arg ) ;
destination . getCamelContext ( arg ) . getExecutorServiceManager ( arg ) . shutdownNow ( arg ) ;
destination . getCamelContext ( arg ) . getExecutorServiceManager ( arg ) . shutdown ( arg ) ;
processor . onExchange ( arg ) ;
destination . onExchange ( arg ) ;
destination = <unk> . <unk> ( arg ) ;
<unk> ( arg ) ;
jmsReplyTo = endpoint . <unk> ( arg ) . <unk> ( arg ) ;
jmsReplyTo = session . createQueue ( arg ) ;
jmsReplyTo = session . <unk> ( arg ) ;
disabled = value != null ? value : Boolean . FALSE ;
<unk> = component . resolveAndRemoveReferenceParameter ( arg ) ;
<unk> = getCamelContext ( arg ) . getEndpoint ( arg ) ;
aggregated = doAggregation ( arg ) ;
aggregated = doAggregation ( arg ) ;
list . addAll ( arg ) ;
list . addAll ( arg ) ;
list . addAll ( arg ) ;
doGetChildServices ( arg ) ;
doGetChildServices ( arg ) ;
<unk> ( arg ) ;
<unk> ( arg ) ;
<unk> ( arg ) ;
doProcessSequential ( arg ) ;
<unk> ( arg ) ;
doReturn ( arg ) . when ( arg ) . createUnmarshaller ( arg ) ;
doReturn ( arg ) . when ( arg ) . createUnmarshaller ( arg ) ;
LOG . trace ( arg ) ;
doStartOrResumeRoutes ( arg ) ;
doStartOrResumeRoutes ( arg ) ;
<unk> ( arg ) ;
document = <unk> . <unk> ( arg ) ;
done . set ( arg ) ;
done . set ( arg ) ;
done . set ( arg ) ;
done = findTokenPosition ( arg ) == null ;
<unk> . <unk> ( arg ) ;
Double <unk> = <unk> ;
ds = applicationContext . getBean ( arg ) ;
httpExchange . getIn ( arg ) . setHeader ( arg ) ;
if ( exchange . getPattern ( arg ) . <unk> ( arg ) ) {
log . error ( arg ) ;
log . error ( arg ) ;
e = new JAXBElement < Object > ( arg ) ;
eagerBeans . add ( arg ) ;
<unk> . <unk> ( arg ) ;
element . setAttributeNS ( arg ) ;
element . setAttributeNS ( arg ) ;
<unk> = exchange . getContext ( arg ) . getRegistry ( arg ) . lookupByNameAndType ( arg ) ;
elementString = <unk> . toString ( arg ) ;
elementString = src . toString ( arg ) ;
enc = ( <unk> ) <unk> . <unk> ( arg ) ;
<unk> = <unk> . <unk> ( arg ) . <unk> ( arg ) ;
assertTrue ( arg ) ;
assertTrue ( arg ) ;
getEndpoint ( arg ) . connect ( arg ) ;
getEndpoint ( arg ) . disconnect ( arg ) ;
getEndpoint ( arg ) . disconnect ( arg ) ;
endpoint . expectedMinimumMessageCount ( arg ) ;
endpoint . expectedMinimumMessageCount ( arg ) ;
MockEndpoint . <unk> ( arg ) ;
getEndpoint ( arg ) . <unk> ( arg ) . <unk> ( arg ) ;
getEndpoint ( arg ) . getBinding ( arg ) . <unk> ( arg ) ;
( ( <unk> ) endpoint . getHeaderFilterStrategy ( arg ) ) . <unk> ( arg ) ;
endpoint . getCamelContext ( arg ) . getExecutorServiceManager ( arg ) . shutdownNow ( arg ) ;
endpoint . getCamelContext ( arg ) . getExecutorServiceManager ( arg ) . shutdownNow ( arg ) ;
endpoint . getCamelContext ( arg ) . getExecutorServiceManager ( arg ) . shutdownNow ( arg ) ;
endpoint . getCamelContext ( arg ) . getExecutorServiceManager ( arg ) . shutdown ( arg ) ;
endpoint . getCamelContext ( arg ) . getExecutorServiceManager ( arg ) . shutdown ( arg ) ;
endpoint . getCamelContext ( arg ) . getExecutorServiceManager ( arg ) . shutdown ( arg ) ;
endpoint . getCamelContext ( arg ) . getExecutorServiceManager ( arg ) . shutdown ( arg ) ;
endpoint . getCamelContext ( arg ) . getExecutorServiceStrategy ( arg ) . shutdownNow ( arg ) ;
endpoint . getCamelContext ( arg ) . getExecutorServiceManager ( arg ) . shutdownNow ( arg ) ;
endpoint . getCamelContext ( arg ) . getExecutorServiceManager ( arg ) . shutdownNow ( arg ) ;
endpoint . getCamelContext ( arg ) . getExecutorServiceManager ( arg ) . shutdownNow ( arg ) ;
endpoint . getCamelContext ( arg ) . getExecutorServiceManager ( arg ) . shutdownNow ( arg ) ;
endpoint . getConfiguration ( arg ) . <unk> ( arg ) ;
binding . populateExchangeFromCxfResponse ( arg ) ;
binding . populateExchangeFromCxfResponse ( arg ) ;
getEndpoint ( arg ) . getGenericFileProcessStrategy ( arg ) . prepareOnStartup ( arg ) ;
getEndpoint ( arg ) . getInProgressRepository ( arg ) . remove ( arg ) ;
<unk> ( arg ) . onExchange ( arg ) ;
sqlPrepareStatementStrategy . populateStatement ( arg ) ;
queue . put ( arg ) ;
client . <unk> ( arg ) ;
producer . onExchange ( arg ) ;
endpoint . onListenerContainerStopped ( arg ) ;
endpoint . onExchange ( arg ) ;
endpoint . onExchange ( arg ) ;
endpoint . addConsumer ( arg ) ;
endpoint . setCamelContext ( arg ) ;
endpoint . <unk> ( arg ) ;
endpoint . <unk> ( arg ) ;
endpoint = camelContext . getEndpoint ( arg ) ;
endpoint = ( Endpoint < E > ) exchange . getContext ( arg ) . resolveEndpoint ( arg ) ;
endpoint = ( Endpoint < E > ) exchange . getContext ( arg ) . getEndpoint ( arg ) ;
endpoint = ( PojoEndpoint ) container . resolveEndpoint ( arg ) ;
endpoint = getCamelContext ( arg ) . getEndpoint ( arg ) ;
endpoint = camelContext . getRegistry ( arg ) . lookupByNameAndType ( arg ) ;
endpoint = camelContext . getEndpoint ( arg ) ;
endpoint = camelContext . getEndpoint ( arg ) ;
endpoint = container . getEndpoint ( arg ) ;
endpoint = container . getEndpoint ( arg ) ;
endpoint = getCamelContext ( arg ) . getEndpoint ( arg ) ;
return context . resolveEndpoint ( arg ) ;
return context . resolveEndpoint ( arg ) ;
return context . resolveEndpoint ( arg ) ;
return <unk> ( arg ) ;
return <unk> ( arg ) ;
return <unk> ( arg ) ;
endpoint = ( Endpoint < E > ) exchange . getContext ( arg ) . endpoint ( arg ) ;
endpoint = getCamelContext ( arg ) . getRegistry ( arg ) . lookupByNameAndType ( arg ) ;
<unk> . expectedBodiesReceivedInAnyOrder ( arg ) ;
<unk> ( arg ) ;
<unk> . set ( arg ) ;
CONNECTORS . clear ( arg ) ;
Endpoint <unk> = addEndpointToRegistry ( arg ) ;
engine = new JsonPathEngine ( arg ) ;
engine = new JsonPathEngine ( arg ) ;
entityManager . <unk> ( arg ) ;
entityManager = endpoint . getEntityManager ( arg ) ;
entityManager = endpoint . getEntityManager ( arg ) ;
entityManager = endpoint . getEntityManager ( arg ) ;
entityManager = endpoint . createEntityManager ( arg ) ;
entityManager = endpoint . createEntityManager ( arg ) ;
entityManager = endpoint . createEntityManager ( arg ) ;
entityManager = endpoint . createEntityManager ( arg ) ;
<unk> = CastUtils . cast ( arg ) ;
exchange = endpoint . getQueue ( arg ) . poll ( arg ) ;
endpoints [ i ] = endpoint ;
error . expectedMinimumMessageCount ( arg ) ;
error . expectedMinimumMessageCount ( arg ) ;
onException ( arg ) . to ( arg ) ;
onException ( arg ) . to ( arg ) ;
handler . <unk> ( arg ) ;
errorHandler = ctx . getBean ( arg ) ;
errorHandlerBuilder = <unk> ( arg ) ;
<unk> . shutdownNow ( arg ) ;
fileExpressionResult = evaluateFileExpression ( arg ) ;
evaluateFileExpression ( arg ) ;
ex . getIn ( arg ) . setHeader ( arg ) ;
exception ( arg ) . <unk> ( arg ) . maximumRedeliveries ( arg ) . maximumRedeliveryDelay ( arg ) . backOffMultiplier ( arg ) . useExponentialBackOff ( arg ) . setHeader ( arg ) . to ( arg ) ;
onException ( arg ) . maximumRedeliveries ( arg ) . to ( arg ) ;
onException ( arg ) . maximumRedeliveries ( arg ) . to ( arg ) ;
onException ( arg ) . setBody ( arg ) . to ( arg ) ;
onException ( arg ) . to ( arg ) ;
onException ( arg ) . to ( arg ) ;
onException ( arg ) . to ( arg ) ;
onException ( arg ) . to ( arg ) ;
onException ( arg ) . to ( arg ) ;
onException ( arg ) . to ( arg ) ;
onException ( arg ) . to ( arg ) ;
exception = exception . getCause ( arg ) ;
answer = new HttpOperationFailedException ( arg ) ;
answer = new HttpOperationFailedException ( arg ) ;
answer = new HttpOperationFailedException ( arg ) ;
answer = new HttpOperationFailedException ( arg ) ;
answer = new HttpOperationFailedException ( arg ) ;
answer = new HttpOperationFailedException ( arg ) ;
answer = new HttpOperationFailedException ( arg ) ;
answer = new HttpOperationFailedException ( arg ) ;
exception = new HttpOperationFailedException ( arg ) ;
exception = new HttpOperationFailedException ( arg ) ;
exception = new HttpOperationFailedException ( arg ) ;
cacheExceptionEndpoint . assertIsSatisfied ( arg ) ;
cacheExceptionEndpoint . assertIsSatisfied ( arg ) ;
cacheExceptionEndpoint . assertIsSatisfied ( arg ) ;
exceptionEndpoint . expectedBodiesReceived ( arg ) ;
exceptionEndpoint . expectedBodiesReceived ( arg ) ;
<unk> . put ( arg ) ;
exception . <unk> ( arg ) ;
exchange . getOut ( arg ) . setHeader ( arg ) ;
exchange . getIn ( arg ) . setHeader ( arg ) ;
exchange . getIn ( arg ) . setHeader ( arg ) ;
exchange . getIn ( arg ) . setHeader ( arg ) ;
throw new <unk> ( arg ) ;
exchange . setProperty ( arg ) ;
exchange . setProperty ( arg ) ;
exchange . setProperty ( arg ) ;
exchange . getIn ( arg ) . setBody ( arg ) ;
exchange . getIn ( arg ) . setBody ( arg ) ;
exchange . getIn ( arg ) . setBody ( arg ) ;
exchange . getIn ( arg ) . setBody ( arg ) ;
exchange . getIn ( arg ) . setBody ( arg ) ;
exchange . getIn ( arg ) . setBody ( arg ) ;
exchange . getIn ( arg ) . setBody ( arg ) ;
exchange . getIn ( arg ) . setBody ( arg ) ;
exchange . getIn ( arg ) . setHeader ( arg ) ;
exchange . getOut ( arg ) . getHeaders ( arg ) . putAll ( arg ) ;
exchange . getOut ( arg ) . getHeaders ( arg ) . putAll ( arg ) ;
exchange . getOut ( arg ) . getHeaders ( arg ) . putAll ( arg ) ;
exchange . getOut ( arg ) . getHeaders ( arg ) . putAll ( arg ) ;
exchange . getUnitOfWork ( arg ) . <unk> ( arg ) ;
<unk> ( arg ) ;
exchange . <unk> ( arg ) ;
AsyncProcessorHelper . process ( arg ) ;
exchange . setOut ( arg ) ;
AsyncProcessorHelper . process ( arg ) ;
AsyncProcessorHelper . process ( arg ) ;
exchange . <unk> ( arg ) ;
exchange . getOut ( arg ) . setBody ( arg ) ;
exchange = ( GenericFileExchange ) mock . getExchanges ( arg ) . get ( arg ) ;
exchange = ( GenericFileExchange ) mock . getExchanges ( arg ) . get ( arg ) ;
exchange = queue . poll ( arg ) ;
exchange2 . getIn ( arg ) . getHeaders ( arg ) . setHeader ( arg ) ;
exchangeId = <unk> ( arg ) ;
exchangeId = marshaller . unmarshallKey ( arg ) ;
exchangeId = codec . unmarshallKey ( arg ) ;
<unk> = exchange . getPattern ( arg ) ;
getExchanges ( arg ) . add ( arg ) ;
exchanges = <unk> ( arg ) ;
receivedExchanges . add ( arg ) ;
<unk> = Collections . emptySet ( arg ) ;
executableDependencies = CastUtils . cast ( arg ) ;
executableDependencies = CastUtils . cast ( arg ) ;
executor . scheduleWithFixedDelay ( arg ) ;
future = executor . scheduleWithFixedDelay ( arg ) ;
context . getExecutorServiceStrategy ( arg ) . shutdownNow ( arg ) ;
endpoint . getCamelContext ( arg ) . getExecutorServiceManager ( arg ) . shutdownNow ( arg ) ;
executor = context . getExecutorServiceStrategy ( arg ) . newCachedThreadPool ( arg ) ;
executor = endpoint . getCamelContext ( arg ) . getExecutorServiceStrategy ( arg ) . newFixedThreadPool ( arg ) ;
executor = ExecutorServiceHelper . newCachedThreadPool ( arg ) ;
executor = camelContext . getExecutorServiceStrategy ( arg ) . newSingleThreadExecutor ( arg ) ;
executor = endpoint . getCamelContext ( arg ) . getExecutorServiceManager ( arg ) . newSingleThreadExecutor ( arg ) ;
executor = camelContext . getExecutorServiceManager ( arg ) . newSingleThreadExecutor ( arg ) ;
executor = camelContext . getExecutorServiceManager ( arg ) . getExecutorService ( arg ) ;
executor = context . getExecutorServiceManager ( arg ) . newDefaultThreadPool ( arg ) ;
executor = camelContext . getExecutorServiceManager ( arg ) . newDefaultThreadPool ( arg ) ;
executor = context . getExecutorServiceStrategy ( arg ) . newDefaultThreadPool ( arg ) ;
executor = context . getExecutorServiceManager ( arg ) . getDefaultExecutorService ( arg ) ;
executor = endpoint . getCamelContext ( arg ) . getExecutorServiceManager ( arg ) . newFixedThreadPool ( arg ) ;
executor = endpoint . getCamelContext ( arg ) . getExecutorServiceManager ( arg ) . getExecutorService ( arg ) ;
executor = endpoint . getCamelContext ( arg ) . getExecutorServiceManager ( arg ) . getExecutorService ( arg ) ;
camelContext . getExecutorServiceStrategy ( arg ) . shutdownNow ( arg ) ;
camelContext . getExecutorServiceStrategy ( arg ) . shutdownNow ( arg ) ;
camelContext . getExecutorServiceStrategy ( arg ) . shutdownNow ( arg ) ;
camelContext . getExecutorServiceStrategy ( arg ) . shutdownNow ( arg ) ;
camelContext . getExecutorServiceStrategy ( arg ) . shutdownNow ( arg ) ;
camelContext . getExecutorServiceStrategy ( arg ) . shutdownNow ( arg ) ;
camelContext . getExecutorServiceStrategy ( arg ) . shutdownNow ( arg ) ;
aggregateExecutorService . submit ( arg ) ;
ExecutorServiceManager executorServiceManager = routeContext . getCamelContext ( arg ) . getExecutorServiceManager ( arg ) ;
executorService = routeContext . getCamelContext ( arg ) . getExecutorServiceStrategy ( arg ) . newCachedThreadPool ( arg ) ;
executorService = routeContext . getCamelContext ( arg ) . getExecutorServiceStrategy ( arg ) . newCachedThreadPool ( arg ) ;
executorService = routeContext . getCamelContext ( arg ) . getExecutorServiceStrategy ( arg ) . newCachedThreadPool ( arg ) ;
executorService = ExecutorServiceHelper . newCachedThreadPool ( arg ) ;
executorService = ExecutorServiceHelper . newCachedThreadPool ( arg ) ;
executorService = ExecutorServiceHelper . newCachedThreadPool ( arg ) ;
executorService = camelContext . getExecutorServiceStrategy ( arg ) . newSingleThreadExecutor ( arg ) ;
executorService = camelContext . getExecutorServiceStrategy ( arg ) . newSingleThreadExecutor ( arg ) ;
executorService = routeContext . getCamelContext ( arg ) . getExecutorServiceStrategy ( arg ) . newThreadPool ( arg ) ;
executorService = routeContext . getCamelContext ( arg ) . getExecutorServiceStrategy ( arg ) . newThreadPool ( arg ) ;
executorService = ExecutorServiceHelper . newScheduledThreadPool ( arg ) ;
executorService = null ;
executorService = camelContext . getExecutorServiceManager ( arg ) . newSingleThreadExecutor ( arg ) ;
executorService = camelContext . getExecutorServiceManager ( arg ) . getExecutorService ( arg ) ;
executorService = camelContext . getRegistry ( arg ) . lookupByNameAndType ( arg ) ;
executorService = context . getExecutorServiceManager ( arg ) . newDefaultThreadPool ( arg ) ;
executorService = ExecutorServiceHelper . newThreadPool ( arg ) ;
executorService = camelContext . getExecutorServiceStrategy ( arg ) . newSingleThreadExecutor ( arg ) ;
executorService = executorServiceManager . newDefaultThreadPool ( arg ) ;
executorService = executorServiceManager . newDefaultThreadPool ( arg ) ;
executorService = new <unk> ( arg ) ;
executorService = manager . newDefaultThreadPool ( arg ) ;
executorService = manager . newDefaultThreadPool ( arg ) ;
executorService = manager . newDefaultThreadPool ( arg ) ;
executorService = manager . newDefaultThreadPool ( arg ) ;
executorService = routeContext . getCamelContext ( arg ) . getExecutorServiceStrategy ( arg ) . newDefaultThreadPool ( arg ) ;
executorService = routeContext . getCamelContext ( arg ) . getExecutorServiceStrategy ( arg ) . newDefaultThreadPool ( arg ) ;
executorService = routeContext . getCamelContext ( arg ) . getExecutorServiceStrategy ( arg ) . newDefaultThreadPool ( arg ) ;
executorService = routeContext . getCamelContext ( arg ) . getExecutorServiceStrategy ( arg ) . newDefaultThreadPool ( arg ) ;
executorService = routeContext . getCamelContext ( arg ) . getExecutorServiceStrategy ( arg ) . newDefaultThreadPool ( arg ) ;
executorService = routeContext . getCamelContext ( arg ) . getExecutorServiceStrategy ( arg ) . newDefaultThreadPool ( arg ) ;
executorService = routeContext . getCamelContext ( arg ) . getExecutorServiceStrategy ( arg ) . newDefaultThreadPool ( arg ) ;
executorService = executorServiceManager . getDefaultExecutorService ( arg ) ;
executorService = executorServiceManager . getDefaultExecutorService ( arg ) ;
executorService = routeContext . getCamelContext ( arg ) . getExecutorServiceStrategy ( arg ) . <unk> ( arg ) ;
executorService = executorServiceManager . <unk> ( arg ) ;
<unk> =! <unk> ( arg ) ;
expect ( arg ) . andReturn ( arg ) . times ( arg ) ;
expect ( arg ) . andReturn ( arg ) . times ( arg ) ;
expected . addAll ( arg ) ;
expected . addAll ( arg ) ;
expected . add ( arg ) ;
expected . add ( arg ) ;
expectedType = ( Class < ? > ) expectedType . <unk> ( arg ) . get ( arg ) ;
expression = ExpressionBuilder . <unk> ( arg ) ;
return new RecipientList ( arg ) ;
<unk> = <unk> . <unk> ( arg ) ;
expressionFactory = new ExpressionFactoryImpl ( arg ) ;
factory = this . getCamelContext ( arg ) . getClassResolver ( arg ) . resolveClass ( arg ) ;
<unk> factory = bus . getExtension ( arg ) ;
failed = true ;
failed = true ;
hasOut = false ;
hasOut = false ;
hasOut = newExchange . hasOut ( arg ) ;
hasOut = newExchange . hasOut ( arg ) ;
<unk> . message ( arg ) . property ( arg ) . isEqualTo ( arg ) ;
failed = true ;
fault = ( in != null && in instanceof MessageSupport ) ? ( ( MessageSupport ) in ) . newInstance ( arg ) : new DefaultMessage ( arg ) ;
fault = ( in != null && in instanceof MessageSupport ) ? ( ( MessageSupport ) in ) . newInstance ( arg ) : <unk> ( arg ) ;
cfb . getFeatures ( arg ) . add ( arg ) ;
cfb . getFeatures ( arg ) . add ( arg ) ;
field = annotatedFields . get ( arg ) ;
file = ( RemoteFile < ? > ) exchange . getProperty ( arg ) ;
file = ( RemoteFile < ? > ) exchange . getProperty ( arg ) ;
file = new File ( arg ) ;
file = new File ( arg ) ;
file = new File ( arg ) ;
file = new File ( arg ) ;
file = new File ( arg ) ;
File file = new File ( arg ) ;
fileExpressionResult = ( String ) endpoint . getFileName ( arg ) . evaluate ( arg ) ;
fileExpressionResult = endpoint . getFileName ( arg ) . evaluate ( arg ) ;
String answer = fileName ;
FileUtil . createNewFile ( arg ) ;
filename += report.txt + <unk> . DEFAULT_LOCK_FILE_POSTFIX ;
filename += report.txt + FileEndpoint . DEFAULT_LOCK_FILE_POSTFIX ;
filename += report.txt + FileComponent . DEFAULT_LOCK_FILE_POSTFIX ;
filename += report.txt + <unk> . DEFAULT_LOCK_FILE_POSTFIX ;
files = new File ( arg ) . list ( arg ) ;
files = new File ( arg ) . list ( arg ) ;
filterProcessor . processNext ( arg ) ;
<unk> = new <unk> ( arg ) ;
<unk> . set ( arg ) ;
final BlockingQueue < ? > queue = endpoint . getQueue ( arg ) ;
final Boolean value = <unk> ( arg ) ;
final Buffer confirmKeyBuffer = marshaller . marshallKey ( arg ) ;
final Buffer confirmKeyBuffer = marshaller . marshallKey ( arg ) ;
final Buffer confirmKeyBuffer = marshaller . marshallKey ( arg ) ;
final Buffer confirmKeyBuffer = codec . marshallKey ( arg ) ;
final Buffer confirmKeyBuffer = codec . marshallKey ( arg ) ;
final Buffer keyBuffer = marshaller . marshallKey ( arg ) ;
final Buffer keyBuffer = codec . marshallKey ( arg ) ;
final Class < ? > type = <unk> . get ( arg ) ;
final AbstractXmlApplicationContext applicationContext = new ClassPathXmlApplicationContext ( arg ) ;
final ClientAuthentication clientAuthValue = ClientAuthentication . valueOf ( arg ) ;
final ClientAuthentication clientAuthValue = ClientAuthentication . valueOf ( arg ) ;
final <unk> < ? > context = getDelegate ( arg ) . <unk> ( arg ) ;
@ SuppressWarnings ( arg ) final DataSetEndpoint endpoint = new DataSetEndpoint ( arg ) ;
final <unk> callback = <unk> ? <unk> . <unk> ( arg ) : null ;
final Dictionary < String , String > <unk> = new Hashtable < String , String > ( arg ) ;
final Exchange copy = ExchangeHelper . createCorrelatedCopy ( arg ) ;
final Exchange copy = ExchangeHelper . createCorrelatedCopy ( arg ) ;
final Exchange copy = exchange . copy ( arg ) ;
final Exchange copy = exchange . copy ( arg ) ;
Exchange exchange = null ;
final Exchange exchange = event . <unk> ( arg ) . <unk> ( arg ) ;
final Exchange exchange = endpoint . createExchange ( arg ) ;
final ExpressionClause < ? > clause = new ExpressionClause < MockEndpoint > ( arg ) ;
final ExpressionClause < ? > clause = new ExpressionClause < MockEndpoint > ( arg ) ;
final ExpressionClause < ? > clause = new ExpressionClause < MockEndpoint > ( arg ) ;
final ExpressionClause < ? > clause = new ExpressionClause < MockEndpoint > ( arg ) ;
final File target = exchange . getFile ( arg ) ;
final File file = new File ( arg ) ;
final GenericFile < T > file = exchange . getGenericFile ( arg ) ;
final GenericFile < T > file = ( GenericFile < T > ) exchange . getProperty ( arg ) ;
final GenericFile < T > target = getExchangeFileProperty ( arg ) ;
final <unk> < T > processStrategy = endpoint . getGenericFileProcessStrategy ( arg ) ;
<unk> . createEndpoint ( arg ) ;
final IdempotentRepository < String > repo = MemoryIdempotentRepository . memoryIdempotentRepository ( arg ) ;
final IdempotentRepository < String > repo = MemoryIdempotentRepository . memoryIdempotentRepository ( arg ) ;
IrcEndpoint endpoint = new IrcEndpoint ( arg ) ;
Iterable < ProcessorExchangePair > pairs = null ;
final Iterator < ? > it = ObjectHelper . createIterator ( arg ) ;
final Iterator < ? > it = ObjectHelper . createIterator ( arg ) ;
final Iterator < ? > it = ObjectHelper . createIterator ( arg ) ;
final Iterator < ? > it = ObjectHelper . createIterator ( arg ) ;
final Iterator < ? > it = ObjectHelper . createIterator ( arg ) ;
final JsonPathEngine engine ;
final JsonPathEngine engine ;
final Exchange exchange = createExchange ( arg ) ;
final LinkedHashMap < String , String > <unk> = new LinkedHashMap < String , String > ( arg ) ;
final List < Future < String >> <unk> = new ArrayList < Future < String >> ( arg ) ;
final List < String > enabledCipherSuites = this . getCipherSuites ( arg ) == null ? null : this . parsePropertyValues ( arg ) ;
final List < String > enabledCipherSuites = this . getCipherSuites ( arg ) == null ? null : this . parsePropertyValues ( arg ) ;
final List < String > enabledCipherSuites = this . getCipherSuites ( arg ) == null ? null : this . parsePropertyValues ( arg ) ;
final List < String > enabledSecureSocketProtocols = this . getSecureSocketProtocols ( arg ) == null ? null : this . parsePropertyValues ( arg ) ;
final List < String > enabledSecureSocketProtocols = this . getSecureSocketProtocols ( arg ) == null ? null : this . parsePropertyValues ( arg ) ;
final List < String > enabledSecureSocketProtocols = this . getSecureSocketProtocols ( arg ) == null ? null : this . parsePropertyValues ( arg ) ;
final List < ChannelSftp . LsEntry > list = new ArrayList < ChannelSftp . LsEntry > ( arg ) ;
final List < Envelope > received = new ArrayList < Envelope > ( arg ) ;
final Map < String , Integer > retval = new Hashtable < String , Integer > ( arg ) ;
final MockEndpoint mock = <unk> . getEndpoint ( arg ) ;
final NodeMetadata . Status <unk> = getNodeState ( arg ) ;
final NotifyBuilder notify = new NotifyBuilder ( arg ) . whenDone ( arg ) . create ( arg ) ;
final Object [ ] <unk> = <unk> . evaluate ( arg ) ;
final Processor <unk> = this . createChildProcessor ( arg ) ;
final ProducerTemplate template = context . createProducerTemplate ( arg ) ;
final ProducerTemplate producer = context . getBean ( arg ) ;
final ProducerTemplate producer = context . getBean ( arg ) ;
final Promise < Object > <unk> = new Promise < Object > ( arg ) ;
final SedaEndpoint . Entry entry ;
final Exchange exchange ;
final Set < AuthMethod > <unk> = new LinkedHashSet < AuthMethod > ( arg ) ;
final List < Document > result = new ArrayList < Document > ( arg ) ;
final WhitespaceAnalyzer <unk> = new WhitespaceAnalyzer ( arg ) ;
final SimpleLanguageOperator operator = asOperator ( arg ) ;
final SimpleLanguageOperator operator = asOperator ( arg ) ;
final StopWatch watch = <unk> && exchange != null ? new StopWatch ( arg ) : null ;
final String [ ] names = { val } ;
final List < String > args = <unk> ( arg ) ;
final String contentType = <unk> . <unk> . equals ( arg ) ? <unk> : <unk> ;
final String <unk> = endpoint . <unk> ( arg ) ;
final String name = target . getAbsoluteFilePath ( arg ) ;
final String path = <unk> ;
final String preparedQuery = sqlPrepareStatementStrategy . prepareQuery ( arg ) ;
final String preparedQuery = sqlPrepareStatementStrategy . prepareQuery ( arg ) ;
final String preparedQuery = sqlPrepareStatementStrategy . prepareQuery ( arg ) ;
final String preparedQuery = sqlPrepareStatementStrategy . prepareQuery ( arg ) ;
String <unk> = remaining ;
final String <unk> = OBJECT_MAPPER . <unk> ( arg ) ;
String target = endpoint . getConfiguration ( arg ) . <unk> ( arg ) ;
final String type = <unk> . get ( arg ) ;
final TransactionTemplate <unk> = <unk> ( arg ) ;
UnitOfWork uow = createUnitOfWork ( arg ) ;
boolean success = client . storeFile ( arg ) ;
final long sleep = num * delay ;
finallyProcessor = createProcessor ( arg ) ;
finallyProcessor = new <unk> ( arg ) . createProcessor ( arg ) ;
finallyProcessor = createProcessor ( arg ) ;
<unk> ( arg ) ;
IOHelper . close ( arg ) ;
IOHelper . close ( arg ) ;
latch . await ( arg ) ;
IOHelper . close ( arg ) ;
<unk> = converter . convertTo ( arg ) ;
from ( arg ) . aggregate ( arg ) . completionSize ( arg ) . completionTimeout ( arg ) . to ( arg ) . end ( arg ) ;
from ( arg ) . aggregate ( arg ) . completionTimeout ( arg ) . completionSize ( arg ) . to ( arg ) ;
from ( arg ) . aggregate ( arg ) . completionTimeout ( arg ) . bean ( arg ) . to ( arg ) ;
from ( arg ) . aggregate ( arg ) . completionPredicate ( arg ) . process ( arg ) . to ( arg ) ;
from ( arg ) . aggregate ( arg ) . completionPredicate ( arg ) . to ( arg ) ;
from ( arg ) . aggregate ( arg ) . aggregationRepository ( arg ) . <unk> ( arg ) . <unk> ( arg ) . to ( arg ) ;
from ( arg ) . aggregate ( arg ) . completionPredicate ( arg ) . completionTimeout ( arg ) . to ( arg ) ;
from ( arg ) . aggregate ( arg ) . eagerCheckCompletion ( arg ) . completionPredicate ( arg ) . to ( arg ) ;
from ( arg ) . aggregate ( arg ) . completionTimeout ( arg ) . to ( arg ) ;
from ( arg ) . aggregate ( arg ) . constant ( arg ) . completionSize ( arg ) . completionTimeout ( arg ) . groupExchanges ( arg ) . to ( arg ) ;
from ( arg ) . aggregate ( arg ) . completionSize ( arg ) . completionTimeout ( arg ) . to ( arg ) . end ( arg ) ;
from ( arg ) . aggregate ( arg ) . constant ( arg ) . completionTimeout ( arg ) . groupExchanges ( arg ) . to ( arg ) ;
from ( arg ) . log ( arg ) . aggregate ( arg ) . completionSize ( arg ) . completionTimeout ( arg ) . groupExchanges ( arg ) . to ( arg ) ;
from ( arg ) . aggregate ( arg ) . completionTimeout ( arg ) . groupExchanges ( arg ) . to ( arg ) ;
from ( arg ) . aggregate ( arg ) . groupExchanges ( arg ) . completionSize ( arg ) . to ( arg ) . end ( arg ) ;
from ( arg ) . aggregate ( arg ) . groupExchanges ( arg ) . eagerCheckCompletion ( arg ) . completionSize ( arg ) . to ( arg ) . end ( arg ) ;
from ( arg ) . aggregate ( arg ) . eagerCheckCompletion ( arg ) . completionPredicate ( arg ) . to ( arg ) ;
from ( arg ) . aggregate ( arg ) . completionTimeout ( arg ) . completionPredicate ( arg ) . to ( arg ) ;
from ( arg ) . aggregate ( arg ) . aggregationStrategy ( arg ) . completionTimeout ( arg ) . to ( arg ) ;
from ( arg ) . aggregate ( arg ) . header ( arg ) . groupExchanges ( arg ) . completionTimeout ( arg ) . to ( arg ) ;
from ( arg ) . aggregate ( arg ) . header ( arg ) . aggregationStrategy ( arg ) . completionTimeout ( arg ) . to ( arg ) ;
from ( arg ) . aggregate ( arg ) . groupExchanges ( arg ) . completionTimeout ( arg ) . to ( arg ) ;
from ( arg ) . aggregate ( arg ) . header ( arg ) . completionTimeout ( arg ) . to ( arg ) ;
from ( arg ) . aggregate ( arg ) . method ( arg ) . completionTimeout ( arg ) . to ( arg ) . to ( arg ) ;
from ( arg ) . aggregate ( arg ) . completionTimeout ( arg ) . setHeader ( arg ) . to ( arg ) ;
from ( arg ) . aggregate ( arg ) . constant ( arg ) . batchTimeout ( arg ) . groupExchanges ( arg ) . to ( arg ) ;
from ( arg ) . aggregate ( arg ) . completionTimeout ( arg ) . to ( arg ) . to ( arg ) ;
from ( arg ) . aggregate ( arg ) . completionTimeout ( arg ) . to ( arg ) ;
from ( arg ) . aggregate ( arg ) . batchTimeout ( arg ) . to ( arg ) ;
from ( arg ) . aggregate ( arg ) . batchTimeout ( arg ) . to ( arg ) ;
from ( arg ) . aggregate ( arg ) . completedPredicate ( arg ) . process ( arg ) . to ( arg ) ;
from ( arg ) . aggregate ( arg ) . completedPredicate ( arg ) . to ( arg ) ;
from ( arg ) . aggregate ( arg ) . header ( arg ) . batchTimeout ( arg ) . batchSize ( arg ) . <unk> ( arg ) . to ( arg ) ;
from ( arg ) . aggregate ( arg ) . header ( arg ) . batchTimeout ( arg ) . batchSize ( arg ) . to ( arg ) ;
from ( arg ) . aggregate ( arg ) . header ( arg ) . batchTimeout ( arg ) . to ( arg ) ;
from ( arg ) . aggregate ( arg ) . header ( arg ) . batchTimeout ( arg ) . to ( arg ) ;
from ( arg ) . aggregate ( arg ) . header ( arg ) . batchTimeout ( arg ) . to ( arg ) ;
from ( arg ) . aggregate ( arg ) . to ( arg ) ;
from ( arg ) . bean ( arg ) . aggregate ( arg ) . aggregationRepository ( arg ) . completionSize ( arg ) . to ( arg ) ;
from ( arg ) . bean ( arg ) . id ( arg ) . log ( arg ) . to ( arg ) . to ( arg ) ;
from ( arg ) . to ( arg ) ;
from ( arg ) . <unk> ( arg ) ;
from ( arg ) . to ( arg ) ;
from ( arg ) . to ( arg ) ;
from ( arg ) . choice ( arg ) . when ( arg ) . to ( arg ) . otherwise ( arg ) . to ( arg ) . end ( arg ) ;
from ( arg ) . choice ( arg ) . when ( arg ) . <unk> ( arg ) . to ( arg ) . to ( arg ) . otherwise ( arg ) . to ( arg ) ;
from ( arg ) . choice ( arg ) . when ( arg ) . jsonpath ( arg ) . to ( arg ) . when ( arg ) . jsonpath ( arg ) . to ( arg ) . otherwise ( arg ) . to ( arg ) ;
from ( arg ) . choice ( arg ) . when ( arg ) . jsonPath ( arg ) . to ( arg ) . when ( arg ) . jsonPath ( arg ) . to ( arg ) . otherwise ( arg ) . to ( arg ) ;
from ( arg ) . choice ( arg ) . when ( arg ) . recipientList ( arg ) . end ( arg ) . when ( arg ) . recipientList ( arg ) . <unk> ( arg ) . otherwise ( arg ) . to ( arg ) ;
from ( arg ) . choice ( arg ) . when ( arg ) . xpath ( arg ) . to ( arg ) . when ( arg ) . xpath ( arg ) . to ( arg ) . otherwise ( arg ) . to ( arg ) ;
from ( arg ) . choice ( arg ) . when ( arg ) . to ( arg ) . otherwise ( arg ) . log ( arg ) . to ( arg ) . end ( arg ) ;
from ( arg ) . choice ( arg ) . when ( arg ) . log ( arg ) . to ( arg ) . otherwise ( arg ) . log ( arg ) . to ( arg ) ;
from ( arg ) . choice ( arg ) . when ( arg ) . setHeader ( arg ) . to ( arg ) . when ( arg ) . to ( arg ) . otherwise ( arg ) . to ( arg ) ;
from ( arg ) . choice ( arg ) . when ( arg ) . xpath ( arg ) . to ( arg ) . when ( arg ) . xpath ( arg ) . to ( arg ) . end ( arg ) . to ( arg ) ;
from ( arg ) . choice ( arg ) . when ( arg ) . xpath ( arg ) . to ( arg ) . when ( arg ) . xpath ( arg ) . to ( arg ) . otherwise ( arg ) . to ( arg ) . end ( arg ) . to ( arg ) ;
from ( arg ) . streamCaching ( arg ) . choice ( arg ) . when ( arg ) . xpath ( arg ) . to ( arg ) . when ( arg ) . xpath ( arg ) . to ( arg ) . end ( arg ) ;
from ( arg ) . choice ( arg ) . when ( arg ) . xquery ( arg ) . convertBodyTo ( arg ) . to ( arg ) . otherwise ( arg ) . convertBodyTo ( arg ) . to ( arg ) ;
from ( arg ) . choice ( arg ) . when ( arg ) . xpath ( arg ) . to ( arg ) . when ( arg ) . xpath ( arg ) . to ( arg ) ;
from ( arg ) . routeId ( arg ) . noAutoStartup ( arg ) . convertBodyTo ( arg ) . to ( arg ) ;
from ( arg ) . routeId ( arg ) . noAutoStartup ( arg ) . convertBodyTo ( arg ) . to ( arg ) ;
from ( arg ) . routeId ( arg ) . noAutoStartup ( arg ) . convertBodyTo ( arg ) . to ( arg ) ;
from ( arg ) . to ( arg ) . setBody ( arg ) ;
from ( arg ) . to ( arg ) ;
from ( arg ) . delay ( arg ) . transform ( arg ) ;
from ( arg ) . doTry ( arg ) . process ( arg ) . to ( arg ) . doCatch ( arg ) . process ( arg ) . doFinally ( arg ) . to ( arg ) . end ( arg ) . to ( arg ) ;
from ( arg ) . doTry ( arg ) . throwException ( arg ) . doCatch ( arg ) . to ( arg ) . to ( arg ) . end ( arg ) ;
from ( arg ) . errorHandler ( arg ) . filter ( arg ) . to ( arg ) ;
from ( arg ) . errorHandler ( arg ) . onException ( arg ) . handled ( arg ) . end ( arg ) . onException ( arg ) . maximumRedeliveries ( arg ) . end ( arg ) . to ( arg ) . to ( arg ) ;
from ( arg ) . errorHandler ( arg ) . process ( arg ) . to ( arg ) ;
from ( arg ) . errorHandler ( arg ) . doTry ( arg ) . process ( arg ) . doCatch ( arg ) . process ( arg ) . doFinally ( arg ) . choice ( arg ) . when ( arg ) . to ( arg ) . otherwise ( arg ) . to ( arg ) ;
from ( arg ) . filter ( arg ) . to ( <unk>
from ( arg ) . filter ( arg ) . bean ( arg ) . bean ( arg ) ;
from ( arg ) . filter ( arg ) . method ( arg ) . to ( arg ) ;
from ( arg ) . filter ( arg ) . method ( arg ) . to ( arg ) ;
from ( arg ) . filter ( arg ) . recipientList ( arg ) . split ( arg ) . throttle ( arg ) . to ( arg ) ;
from ( arg ) . filter ( arg ) . recipientList ( arg ) . splitter ( arg ) . <unk> ( arg ) . to ( arg ) ;
from ( arg ) . filter ( arg ) . xpath ( arg ) . to ( arg ) ;
from ( arg ) . to ( arg ) ;
from ( arg ) . id ( arg ) . onException ( arg ) . handled ( arg ) . to ( arg ) . end ( arg ) . choice ( arg ) . when ( arg ) . throwException ( arg ) . otherwise ( arg ) . to ( arg ) . end ( arg ) ;
from ( arg ) . routeId ( arg ) . to ( arg ) ;
from ( arg ) . idempotentConsumer ( arg ) . threads ( arg ) . to ( arg ) ;
from ( arg ) . setExchangePattern ( arg ) . process ( arg ) ;
from ( arg ) . setExchangePattern ( arg ) . routingSlip ( arg ) . to ( arg ) . to ( arg ) ;
from ( arg ) . setExchangePattern ( arg ) . to ( arg ) . log ( arg ) . threads ( arg ) . log ( arg ) . delay ( arg ) . log ( arg ) . to ( arg ) ;
from ( arg ) . <unk> ( arg ) . to ( arg ) . log ( arg ) . threads ( arg ) . log ( arg ) . delay ( arg ) . log ( arg ) . to ( arg ) ;
from ( arg ) . intercept ( arg ) . intercept ( arg ) . to ( arg ) ;
from ( arg ) . intercept ( arg ) . intercept ( arg ) . to ( arg ) ;
from ( arg ) . process ( arg ) . process ( arg ) . to ( arg ) ;
from ( arg ) . intercept ( arg ) . to ( arg ) ;
from ( arg ) . to ( arg ) ;
from ( arg ) . loadBalance ( arg ) . failover ( arg ) . to ( arg ) ;
from ( arg ) . loadBalance ( arg ) . failover ( arg ) . to ( arg ) ;
from ( arg ) . loadBalance ( arg ) . failover ( arg ) . to ( arg ) ;
from ( arg ) . loadBalance ( arg ) . failover ( arg ) . to ( arg ) ;
from ( direct:
from ( arg ) . log ( arg ) . split ( arg ) . streaming ( arg ) . to ( arg ) . convertBodyTo ( arg ) . to ( arg ) . end ( arg ) . log ( arg ) ;
from ( arg ) . log ( arg ) . to ( arg ) . log ( arg ) ;
from ( arg ) . marshal ( arg ) . secureXML ( arg ) . to ( arg ) ;
from ( arg ) . marshal ( arg ) . secureXML (
from ( arg ) . marshal ( arg ) . removeHeader ( arg ) . to ( arg ) ;
from ( arg ) . marshal ( arg ) . process ( arg ) . unmarshal ( arg ) ;
from ( arg ) . streamCaching ( arg ) . marshal ( arg ) . to ( arg ) . unmarshal ( arg ) . to ( arg ) ;
from ( arg ) . marshal ( arg ) . to ( arg ) . to ( arg ) ;
from ( arg ) . multicast ( arg ) . executorService ( arg ) . to ( arg ) ;
from ( arg ) . multicast ( arg ) . executor ( arg ) . to ( arg ) ;
from ( arg ) . to ( arg ) . multicast ( arg ) . stopOnException ( arg ) . to ( arg ) . throwException ( arg ) . to ( arg ) ;
from ( arg ) . to ( arg ) . multicast ( arg ) . stopOnException ( arg ) . to ( arg ) ;
from ( arg ) . to ( arg ) ;
from ( arg ) . to ( arg ) ;
from ( arg ) . onException ( arg ) . handled ( arg ) . end ( arg ) . to ( arg ) . to ( arg ) ;
from ( arg ) . bean ( arg ) . to ( arg ) ;
from ( arg ) . onException ( arg ) . maximumRedeliveries ( arg ) . handled ( arg ) . to ( arg ) . end ( arg ) . resequence ( arg ) . stream ( arg ) . <unk> ( arg ) . <unk> ( arg ) . to ( arg ) ;
from ( arg ) . marshal ( arg ) . to ( arg ) . unmarshal ( arg ) ;
from ( arg ) . marshal ( arg ) . to ( arg ) ;
from ( arg ) . onException ( arg ) . retryWhile ( arg ) . end ( arg ) . recipientList ( arg ) . parallelProcessing ( arg ) . to ( arg ) ;
from ( arg ) . onException ( arg ) . retryWhile ( arg ) . end ( arg ) . recipientList ( arg ) . to ( arg ) ;
from ( arg ) . onException ( arg ) . to ( arg ) . end ( arg ) . to ( arg ) . to ( arg ) ;
from ( arg ) . process ( arg ) . to ( arg ) ;
from ( arg ) . onException ( arg ) . to ( arg ) . end ( arg ) . convertBodyTo ( arg ) . to ( arg ) . to ( arg ) ;
from ( arg ) . process ( arg ) . multicast ( arg ) . setParallelProcessing ( arg ) . to ( arg ) ;
from ( arg ) . process ( arg ) . multicast ( arg ) . setParallelProcessing ( arg ) . to ( arg ) ;
from ( arg ) . process ( arg ) . multicast ( arg ) . parallelProcessing ( arg ) . to ( arg ) ;
from ( arg ) . process ( arg ) . multicast ( arg ) . parallelProcessing ( arg ) . to ( arg ) ;
from ( arg ) . process ( arg ) . multicast ( arg ) . parallelProcessing ( arg ) . to ( arg ) ;
from ( arg ) . process ( arg ) . multicast ( arg ) . parallelProcessing ( arg ) . to ( arg ) ;
from ( arg ) . process ( arg ) . multicast ( arg ) . setParallelProcessing ( arg ) . to ( arg ) ;
from ( arg ) . <unk> ( arg ) . to ( arg ) ;
from ( arg ) . recipientList ( arg ) . parallelProcessing ( arg ) ;
from ( arg ) . recipientList ( arg ) . header ( arg ) . <unk> ( arg ) ;
from ( arg ) . recipientList ( arg ) . method ( arg ) ;
from ( arg ) . resequence ( arg ) . stream ( arg ) . timeout ( arg ) . to ( arg ) ;
from ( arg ) . resequence ( arg ) . body ( arg ) . to ( arg ) ;
from ( arg ) . resequence ( arg ) . stream ( arg ) . to ( arg ) ;
from ( arg ) . resequence ( arg ) . to ( arg ) ;
from ( arg ) . routeId ( arg ) . noAutoStartup ( arg ) . shutdownRunningTask ( arg ) . process ( arg ) . to ( arg ) ;
from ( arg ) . shutdownRunningTask ( arg ) . delay ( arg ) . to ( arg ) ;
from ( arg ) . shutdownRunningTask ( arg ) . delay ( arg ) . to ( arg ) ;
from ( arg ) . routeId ( arg ) . noAutoStartup ( arg ) . convertBodyTo ( arg ) . to ( arg ) ;
from ( arg ) . routeId ( arg ) . noAutoStartup ( arg ) . convertBodyTo ( arg ) . to ( arg ) ;
from ( arg ) . noAutoStartup ( arg ) . routeId ( arg ) . shutdownRunningTask ( arg ) . delay ( arg ) . to ( arg ) ;
from ( arg ) . split ( arg ) . to ( arg ) ;
from ( arg ) . routeId ( arg ) . to ( arg ) . throwException ( arg ) ;
from ( arg ) . routeId ( arg ) . to ( arg ) . id ( arg ) . delay ( arg ) . to ( arg ) . id ( arg ) ;
from ( arg ) . routeId ( arg ) . to ( arg ) . id ( arg ) . choice ( arg ) . id ( arg ) . when ( arg ) . id ( arg ) . to ( arg ) . id ( arg ) . to ( arg ) . id ( arg ) . when ( arg ) . id ( arg ) . to ( arg ) . id ( arg ) . otherwise ( arg ) . id ( arg ) . to ( arg ) . id ( arg ) . end ( arg ) . to ( arg ) ;
from ( arg ) . routeId ( arg ) . to ( arg ) . to ( arg ) ;
from ( arg ) . routeId ( arg ) . transform ( arg ) . simple ( arg ) . to ( arg ) . id ( arg ) ;
from ( arg ) . routePolicy ( arg ) . to ( arg ) . to ( arg ) ;
from ( arg ) . routeId ( arg ) . routePolicy ( arg ) . to ( arg ) ;
from ( arg ) . routingSlip ( arg ) . to ( arg ) ;
from ( arg ) . streamCaching ( arg ) . setHeader ( arg ) . constant ( arg ) . marshal ( arg ) . removeHeader ( arg ) . to ( arg ) . setHeader ( arg ) . constant ( arg ) . unmarshal ( arg ) . removeHeader ( arg ) . to ( arg ) ;
from ( arg ) . setHeader ( arg ) . groovy ( arg ) . setHeader ( arg ) . groovy ( arg ) . to ( arg ) ;
from ( arg ) . to ( arg ) ;
from ( arg ) . routeId ( arg ) . noAutoStartup ( arg ) . shutdownRunningTask ( arg ) . delay ( arg ) . to ( arg ) ;
from ( arg ) . routeId ( arg ) . noAutoStartup ( arg ) . shutdownRunningTask ( arg ) . delay ( arg ) . to ( arg ) ;
from ( arg ) . <unk> ( arg ) . body ( arg ) . to ( arg ) ;
from ( arg ) . split ( arg ) . body ( arg ) . choice ( arg ) . when ( arg ) . method ( arg ) . to ( arg ) . otherwise ( arg ) . to ( arg ) . end ( arg ) . to ( arg ) ;
from ( arg ) . split ( arg ) . parallelProcessing ( arg ) . executorService ( arg ) . to ( arg ) ;
from ( arg ) . split ( arg ) . streaming ( arg ) . parallelProcessing ( arg ) . to ( arg ) ;
from ( arg ) . split ( arg ) . streaming ( arg ) . parallelProcessing ( arg ) . to ( arg ) . end ( arg ) . log ( arg ) ;
from ( arg ) . split ( arg ) . parallelProcessing ( arg ) . streaming ( arg ) . to ( arg ) ;
from ( arg ) . split ( arg ) . streaming ( arg ) . to ( arg ) ;
from ( arg ) . split ( arg ) . to ( arg ) ;
from ( arg ) . split ( arg ) . to ( arg ) ;
from ( arg ) . multicast ( arg ) . to ( arg ) ;
from ( arg ) . streamCaching ( arg ) . toF ( arg ) . to ( arg ) . to ( arg ) ;
from ( arg ) . toF ( arg ) . to ( arg ) . to ( arg ) . to ( arg ) . to ( arg ) ;
from ( arg ) . toF ( arg ) . to ( arg ) . to ( arg ) ;
from ( arg ) . marshal ( arg ) . to ( arg ) ;
from ( arg ) . pipeline ( arg ) ;
from ( arg ) . to ( arg ) ;
from ( arg ) . transform ( arg ) . xquery ( arg ) . to ( arg ) ;
from ( arg ) . threads ( arg ) . keepAliveTime ( arg ) . timeUnit ( arg ) . to ( arg ) ;
from ( arg ) . threads ( arg ) . poolSize ( arg ) . maxPoolSize ( arg ) . <unk> ( arg ) . to ( arg ) ;
from ( arg ) . threads ( arg ) . maxQueueSize ( arg ) . to ( arg ) ;
from ( arg ) . threads ( arg ) . to ( arg ) . throwException ( arg ) ;
from ( arg ) . throttle ( arg ) . timePeriodMillis ( arg ) . to ( arg ) ;
from ( arg ) . <unk> ( arg ) ;
from ( arg ) . routeId ( arg ) . to ( arg ) . to ( arg ) ;
from ( arg ) . routeId ( arg ) . to ( arg ) . delay ( arg ) . transform ( arg ) . to ( arg ) ;
from ( arg ) . to ( arg ) . delay ( arg ) . to ( arg ) ;
from ( arg ) . to ( arg ) . process ( arg ) . to ( arg ) ;
from ( arg ) . to ( arg ) . id ( arg ) . to ( arg ) . id ( arg ) . transform ( arg ) . constant ( arg ) . id ( arg ) . to ( arg ) . id ( arg ) . to ( arg ) . id ( arg ) ;
from ( arg ) . policy ( arg ) . to ( arg ) . to ( arg ) ;
from ( arg ) . to ( arg ) . throwException ( arg ) . to ( arg ) ;
from ( arg ) . to ( arg ) . throwException ( arg ) . throwException ( arg ) . to ( arg ) ;
from ( arg ) . to ( arg ) . to ( arg ) . threads ( arg ) . unmarshal ( arg ) . delay ( arg ) . to ( arg ) . to ( arg ) ;
from ( arg ) . to ( arg ) . setHeader ( arg ) . to ( arg ) . setHeader ( arg ) . to ( arg ) . to ( arg ) ;
from ( mina:vm:
from ( arg ) . to ( arg ) ;
from ( arg ) . to ( arg ) ;
from ( arg ) . convertBodyTo ( arg ) . to ( arg ) ;
from ( arg ) . convertBodyTo ( arg ) . to ( arg ) ;
from ( arg ) . convertBodyTo ( arg ) . to ( arg ) ;
from ( arg ) . convertBodyTo ( arg ) . to ( arg ) ;
from ( arg ) . convertBodyTo ( arg ) . to ( arg ) ;
from ( arg ) . convertBodyTo ( arg ) . to ( arg ) ;
from ( arg ) . convertBodyTo ( arg ) . to ( arg ) ;
from ( arg ) . convertBodyTo ( arg ) . to ( arg ) ;
from ( arg ) . convertBodyTo ( arg ) . to ( arg ) ;
from ( arg ) . convertBodyTo ( arg ) . to ( arg ) ;
from ( arg ) . convertBodyTo ( arg ) . to ( arg ) ;
from ( arg ) . convertBodyTo ( arg ) . to ( arg ) ;
from ( arg ) . convertBodyTo ( arg ) . to ( arg ) ;
from ( arg ) . convertBodyTo ( arg ) . to ( arg ) ;
from ( arg ) . convertBodyTo ( arg ) . to ( arg ) ;
from ( arg ) . convertBodyTo ( arg ) . to ( arg ) ;
from ( arg ) . convertBodyTo ( arg ) . to ( arg ) ;
from ( arg ) . convertBodyTo ( arg ) . to ( arg ) ;
from ( arg ) . convertBodyTo ( arg ) . to ( arg ) ;
from ( arg ) . convertBodyTo ( arg ) . to ( arg ) ;
from ( arg ) . to ( arg ) . to ( arg ) ;
from ( arg ) . to ( arg ) . to ( arg ) ;
from ( arg ) . process ( arg ) . to ( arg ) ;
from ( arg ) . transform ( arg ) . threads ( arg ) . to ( arg ) . delay ( arg ) . process ( arg ) . to ( arg ) ;
from ( arg ) . transform ( arg ) . threads ( arg ) . to ( arg ) . delay ( arg ) . process ( arg ) . to ( arg ) ;
from ( arg ) . transform ( arg ) . threads ( arg ) . waitForTaskToComplete ( arg ) . to ( arg ) . delay ( arg ) . process ( arg ) . to ( arg ) ;
from ( arg ) . transform ( arg ) . threads ( arg ) . waitForTaskToComplete ( arg ) . to ( arg ) . delay ( arg ) . process ( arg ) . to ( arg ) ;
from ( arg ) . transform ( arg ) . threads ( arg ) . waitForTaskToComplete ( arg ) . to ( arg ) . delay ( arg ) . process ( arg ) . to ( arg ) ;
from ( arg ) . transform ( arg ) . threads ( arg ) . waitForTaskToComplete ( arg ) . to ( arg ) . delay ( arg ) . process ( arg ) . to ( arg ) ;
from ( arg ) . transform ( arg ) . jsonpath ( arg ) . to ( arg ) ;
from ( arg ) . transform ( arg ) . jsonPath ( arg ) . to ( arg ) ;
from ( arg ) . transform ( arg ) . setHeader ( arg ) . log ( arg ) . to ( arg ) ;
from ( mina:tcp:
from ( mina:tcp:
from ( arg ) . routeId ( arg ) . transform ( arg ) ;
from ( arg ) . doTry ( arg ) . process ( arg ) . doCatch ( arg ) . setHeader ( arg ) . end ( arg ) . doTry ( arg ) . process ( arg ) . to ( arg ) . doCatch ( arg ) . pipeline ( arg ) ;
from ( arg ) . doTry ( arg ) . process ( arg ) . process ( arg ) . doCatch ( arg ) . process ( arg ) . end ( arg ) . process ( arg ) ;
from ( arg ) . doTry ( arg ) . process ( arg ) . process ( arg ) . doCatch ( arg ) . process ( arg ) . doFinally ( arg ) . process ( arg ) . end ( arg ) . process ( arg ) ;
from ( arg ) . doTry ( arg ) . process ( arg ) . process ( arg ) . doCatch ( arg ) . process ( arg ) . doFinally ( arg ) . process ( arg ) . process ( arg ) ;
from ( arg ) . tryBlock ( arg ) . process ( arg ) . process ( arg ) . handle ( arg ) . process ( arg ) . finallyBlock ( arg ) . process ( arg ) . end ( arg ) . process ( arg ) ;
from ( arg ) . tryBlock ( arg ) . process ( arg ) . process ( arg ) . handle ( arg ) . process ( arg ) . finallyBlock ( arg ) . process ( arg ) . process ( arg ) ;
from ( arg ) . doTry ( arg ) . process ( arg ) . process ( arg ) . doCatch ( arg ) . process ( arg ) . process ( arg ) ;
from ( arg ) . doTry ( arg ) . process ( arg ) . setHeader ( arg ) . doCatch ( arg ) . setHeader ( arg ) . doFinally ( arg ) . setBody ( arg ) . choice ( arg ) . when ( arg ) . to ( arg ) . otherwise ( arg ) . to ( arg ) ;
from ( arg ) . tryBlock ( arg ) . process ( arg ) . to ( arg ) . handle ( arg ) . tryBlock ( arg ) . process ( arg ) . to ( arg ) . handle ( arg ) . pipeline ( arg ) ;
from ( arg ) . doTry ( arg ) . process ( arg ) . to ( arg ) . doCatch ( arg ) . process ( arg ) . doFinally ( arg ) . to ( arg ) . end ( arg ) ;
from ( arg ) . doTry ( arg ) . process ( arg ) . to ( arg ) . doCatch ( arg ) . process ( arg ) ;
from ( arg ) . doTry ( arg ) . process ( arg ) . to ( arg ) . doCatch ( arg ) . to ( arg ) ;
from ( arg ) . doTry ( arg ) . process ( arg ) . to ( arg ) . doCatch ( arg ) . doTry ( arg ) . process ( arg ) . to ( arg ) . doCatch ( arg ) . pipeline ( arg ) ;
from ( arg ) . doTry ( arg ) . routingSlip ( arg ) . to ( arg ) . doCatch ( arg ) . to ( arg ) ;
from ( arg ) . unmarshal ( arg ) . to ( arg ) ;
from ( arg ) . unmarshal ( arg ) . to ( arg ) ;
from ( arg ) . unmarshal ( arg ) . split ( arg ) . streaming ( arg ) . aggregationStrategy ( arg ) . convertBodyTo ( arg ) . to ( arg ) . end ( arg ) . log ( arg ) . setBody ( arg ) . header ( arg ) . split ( arg ) . body ( arg ) . to ( arg ) ;
from ( arg ) . setHeader ( arg ) . unmarshal ( arg ) . setHeader ( arg ) . to ( arg ) ;
from ( arg ) . validate ( arg ) . to ( arg ) ;
from ( netty:tcp:
from ( netty:tcp:
from ( arg ) . to ( arg ) . choice ( arg ) . when ( arg ) . to ( arg ) . when ( arg ) . to ( arg ) . otherwise ( arg ) . to ( arg ) . end ( arg ) ;
from ( arg ) . wireTap ( arg ) . copy ( arg ) . newExchangeBody ( arg ) . to ( arg ) ;
from ( arg ) . wireTap ( arg ) . newExchangeBody ( arg ) . to ( arg ) ;
from = from ( arg ) ;
<unk> ( arg ) ;
operations . disconnect ( arg ) ;
template . request ( arg ) ;
future = scheduledExecutorService . <unk> ( arg ) ;
future = scheduledExecutorService . scheduleWithFixedDelay ( arg ) ;
<unk> . <unk> ( arg ) ;
httpclient . getConnectionManager ( arg ) . shutdown ( arg ) ;
httpclient . getConnectionManager ( arg ) . shutdown ( arg ) ;
httpclient . getConnectionManager ( arg ) . shutdown ( arg ) ;
applicationContext . <unk> ( arg ) ;
( ( ModelCamelContext ) getCamelContext ( arg ) ) . addRouteDefinitions ( arg ) ;
( ( ModelCamelContext ) getCamelContext ( arg ) ) . addRouteDefinitions ( arg ) ;
getCamelContext ( arg ) . getExecutorServiceManager ( arg ) . shutdownNow ( arg ) ;
getCamelContext ( arg ) . getExecutorServiceManager ( arg ) . shutdownNow ( arg ) ;
getCamelContext ( arg ) . getExecutorServiceManager ( arg ) . shutdownNow ( arg ) ;
getCamelContext ( arg ) . getExecutorServiceManager ( arg ) . shutdownNow ( arg ) ;
getCamelContext ( arg ) . getExecutorServiceManager ( arg ) . shutdownNow ( arg ) ;
getCamelContext ( arg ) . getExecutorServiceManager ( arg ) . shutdown ( arg ) ;
getCamelContext ( arg ) . getExecutorServiceManager ( arg ) . shutdown ( arg ) ;
getCamelContext ( arg ) . getExecutorServiceManager ( arg ) . shutdown ( arg ) ;
getCamelContext ( arg ) . getExecutorServiceManager ( arg ) . shutdown ( arg ) ;
getCamelContext ( arg ) . getExecutorServiceManager ( arg ) . shutdown ( arg ) ;
getCamelContext ( arg ) . getExecutorServiceManager ( arg ) . shutdown ( arg ) ;
( ( ModelCamelContext ) getCamelContext ( arg ) ) . removeRouteDefinition ( arg ) ;
getOutputs ( arg ) . add ( arg ) ;
component . addServlet ( arg ) ;
component . addServlet ( arg ) ;
getConfiguration ( arg ) . <unk> ( arg ) ;
getConfiguration ( arg ) . setDirectory ( arg ) ;
getContext ( arg ) . start ( arg ) ;
getContext ( arg ) . <unk> ( arg ) ;
getContext ( arg ) . stop ( arg ) ;
getContext ( arg ) . getManagementStrategy ( arg ) . setStatisticsLevel ( arg ) ;
getContext ( arg ) . getManagementStrategy ( arg ) . setStatisticsLevel ( arg ) ;
getContext ( arg ) . <unk> ( arg ) ;
getContext ( arg ) . <unk> ( arg ) . clear ( arg ) ;
getContext ( arg ) . <unk> ( arg ) ;
getContext ( arg ) . addRouteDefinitions ( arg ) ;
destination . getCamelContext ( arg ) . getExecutorServiceManager ( arg ) . shutdownNow ( arg ) ;
getEndpoint ( arg ) . getCamelContext ( arg ) . getExecutorServiceManager ( arg ) . shutdownNow ( arg ) ;
getEndpoint ( arg ) . getCamelContext ( arg ) . getExecutorServiceManager ( arg ) . shutdownNow ( arg ) ;
getEndpoint ( arg ) . getCamelContext ( arg ) . getExecutorServiceManager ( arg ) . shutdownNow ( arg ) ;
getEndpoint ( arg ) . getCamelContext ( arg ) . getExecutorServiceManager ( arg ) . shutdown ( arg ) ;
getEndpoint ( arg ) . getCamelContext ( arg ) . getExecutorServiceManager ( arg ) . shutdown ( arg ) ;
getEndpoint ( arg ) . getCamelContext ( arg ) . getExecutorServiceManager ( arg ) . shutdown ( arg ) ;
getEndpoint ( arg ) . getCamelContext ( arg ) . getExecutorServiceManager ( arg ) . shutdown ( arg ) ;
getEndpoint ( arg ) . getCamelContext ( arg ) . getExecutorServiceManager ( arg ) . shutdown ( arg ) ;
endpoint . getGenericFileProcessStrategy ( arg ) . prepareOnStartup ( arg ) ;
endpoint . getInProgressRepository ( arg ) . remove ( arg ) ;
getEndpoint ( arg ) . onListenerContainerStopped ( arg ) ;
cause = t ;
<unk> ( arg ) . add ( arg ) ;
getExecutorServiceManager ( arg ) . shutdownNow ( arg ) ;
<unk> ( arg ) . add ( arg ) ;
getProperties ( arg ) . put ( arg ) ;
<unk> . <unk> ( arg ) ;
addInterceptor ( arg ) ;
<unk> ( arg ) . add ( arg ) ;
getMulticastProcessor ( arg ) . getProcessors ( arg ) . add ( arg ) ;
<unk> . process ( arg ) ;
getMulticastProcessor ( arg ) . getProcessors ( arg ) . remove ( arg ) ;
<unk> ( arg ) . error ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
manageObject ( arg ) ;
manageObject ( arg ) ;
manageObject ( arg ) ;
manageObject ( arg ) ;
manageObject ( arg ) ;
manageObject ( arg ) ;
manageObject ( arg ) ;
unmanageObject ( arg ) ;
unmanageObject ( arg ) ;
unmanageObject ( arg ) ;
unmanageObject ( arg ) ;
unmanageObject ( arg ) ;
Marshaller . marshal ( arg ) ;
getMockEndpoint ( arg ) . <unk> ( arg ) ;
getMockEndpoint ( arg ) . expectedMessageCount ( arg ) ;
getMockEndpoint ( arg ) . expectedMessageCount ( arg ) ;
getMockEndpoint ( arg ) . expectedMessageCount ( arg ) ;
getMockEndpoint ( arg ) . expectedBodiesReceived ( arg ) ;
getMockEndpoint ( arg ) . expectedHeaderReceived ( Exchange . INTERCEPTED_ENDPOINT , seda:
getMockEndpoint ( arg ) . expectedHeaderReceived ( Exchange . INTERCEPTED_ENDPOINT , seda:
getMockEndpoint ( arg ) . expectedHeaderReceived ( Exchange . INTERCEPTED_ENDPOINT , seda:
getMockEndpoint ( arg ) . expectedBodiesReceived ( arg ) ;
getMockEndpoint ( arg ) . expectedBodiesReceived ( arg ) ;
getMockEndpoint ( arg ) . expectedMessageCount ( arg ) ;
getMockEndpoint ( arg ) . expectedMessageCount ( arg ) ;
getMockEndpoint ( arg ) . expectedMessageCount ( arg ) ;
getMockEndpoint ( arg ) . message ( arg ) . property ( arg ) . <unk> ( arg ) ;
getMockEndpoint ( arg ) . message ( arg ) . body ( arg ) . isEqualTo ( arg ) ;
getMockEndpoint ( arg ) . message ( arg ) . body ( arg ) . isEqualTo ( arg ) ;
getMockEndpoint ( arg ) . message ( arg ) . body ( arg ) . isEqualTo ( arg ) ;
getMockFixture ( arg ) . getMockEndpoint ( arg ) . setExpectedMessageCount ( arg ) ;
getMockFixture ( arg ) . getMockEndpoint ( arg ) . setExpectedMessageCount ( arg ) ;
getMockFixture ( arg ) . getMockEndpoint ( arg ) . setExpectedMessageCount ( arg ) ;
getMockFixture ( arg ) . getMockEndpoint ( arg ) . setExpectedMessageCount ( arg ) ;
getLoadBalancer ( arg ) . <unk> ( arg ) ;
getLoadBalancer ( arg ) . <unk> ( arg ) ;
getLoadBalancer ( arg ) . process ( arg ) ;
<unk> . put ( arg ) ;
getOrCreateRedeliveryPolicy ( arg ) . redeliveryDelay ( arg ) ;
getOrCreateRedeliveryPolicy ( arg ) . <unk> ( arg ) ;
getOrCreateRedeliveryPolicy ( arg ) . <unk> ( arg ) ;
getOrCreateRedeliveryPolicy ( arg ) . setLogExhausted ( arg ) ;
getOrCreateRedeliveryPolicy ( arg ) . <unk> ( arg ) ;
getOrCreateRedeliveryPolicy ( arg ) . <unk> ( arg ) ;
getOrCreateRedeliveryPolicy ( arg ) . <unk> ( arg ) ;
getOrCreateRedeliveryPolicy ( arg ) . <unk> ( arg ) ;
getOrCreateRedeliveryPolicy ( arg ) . logStackTrace ( arg ) ;
<unk> ( arg ) ;
addOutput ( arg ) ;
addOutput ( arg ) ;
addOutput ( arg ) ;
addOutput ( arg ) ;
addOutput ( arg ) ;
addOutput ( arg ) ;
getOutputs ( arg ) . add ( arg ) ;
getOutputs ( arg ) . add ( arg ) ;
getProcessor ( arg ) . process ( arg ) ;
getProcessor ( arg ) . process ( arg ) ;
getProcessor ( arg ) . process ( arg ) ;
getProcessor ( arg ) . process ( arg ) ;
getProcessor ( arg ) . process ( arg ) ;
getProcessor ( arg ) . process ( arg ) ;
processBatch ( arg ) ;
<unk> ( arg ) . delay ( arg ) ;
getRedeliveryPolicy ( arg ) . redeliveryDelay ( arg ) ;
getRouteboxEndpoint ( arg ) . getCamelContext ( arg ) . getExecutorServiceManager ( arg ) . shutdown ( arg ) ;
getComponent ( arg ) . <unk> ( arg ) ;
connectorRef . server . removeConnector ( arg ) ;
connectorRef . server . removeConnector ( arg ) ;
getManagementStrategy ( arg ) . manageObject ( arg ) ;
getManagementStrategy ( arg ) . manageObject ( arg ) ;
getManagementStrategy ( arg ) . manageObject ( arg ) ;
getManagementStrategy ( arg ) . manageObject ( arg ) ;
getManagementStrategy ( arg ) . manageObject ( arg ) ;
getManagementStrategy ( arg ) . manageObject ( arg ) ;
getManagementStrategy ( arg ) . unmanageObject ( arg ) ;
getManagementStrategy ( arg ) . unmanageObject ( arg ) ;
getManagementStrategy ( arg ) . unmanageObject ( arg ) ;
getThrottler ( arg ) . <unk> ( arg ) ;
throw new RuntimeCamelException ( arg ) ;
groovy ( arg ) . process ( arg ) ;
group = <unk> ( arg ) ;
grouped = new DefaultExchange ( arg ) ;
grouped = out . getIn ( arg ) . getBody ( arg ) ;
grouped = out . getIn ( arg ) . getBody ( arg ) ;
grouped = out . getIn ( arg ) . getBody ( arg ) ;
grouped = out . getIn ( arg ) . getBody ( arg ) ;
<unk> . <unk> ( arg ) . put ( arg ) ;
<unk> . <unk> ( arg ) . shutdown ( arg ) ;
headerExist = true ;
processFinally ( arg ) ;
processFinally ( arg ) ;
throw ObjectHelper . wrapRuntimeCamelException ( arg ) ;
throw ObjectHelper . wrapRuntimeCamelException ( arg ) ;
handleInterruptedException ( arg ) ;
handleInterruptedException ( arg ) ;
throw new <unk> ( arg ) ;
<unk> ( arg ) ;
return PredicateBuilder . toPredicate ( arg ) ;
ErrorHandlerBuilder handler = ( ErrorHandlerBuilder ) lookupErrorHandlerBuilder ( arg ) ;
handler = ( ErrorHandlerBuilder ) lookupErrorHandlerBuilder ( arg ) ;
handler = <unk> . lookup ( arg ) ;
handlerExecutor = endpoint . getCamelContext ( arg ) . getExecutorServiceManager ( arg ) . newFixedThreadPool ( arg ) ;
handlerExecutor = endpoint . getCamelContext ( arg ) . getExecutorServiceManager ( arg ) . getExecutorService ( arg ) ;
repo . start ( arg ) ;
repo . stop ( arg ) ;
header = exchange . getProperty ( arg ) ;
header = exchange . getHeader ( arg ) ;
headerValue = headerValue ;
HttpHelper . appendHeader ( arg ) ;
HttpHelper . appendHeader ( arg ) ;
headers = new HashMap < String , Object > ( arg ) ;
headers = new HashMap < String , Object > ( arg ) ;
headers = new HashMap < String , Object > ( arg ) ;
headers = <unk> ( arg ) ;
throw new IllegalArgumentException ( arg ) ;
holder = new DefaultRouteStartupOrder ( arg ) ;
httpExchange . <unk> ( arg ) ;
httpRegistry = DefaultHttpRegistry . getSingletonHttpRegistry ( arg ) ;
httpRegistry = DefaultHttpRegistry . getSingletonHttpRegistry ( arg ) ;
httpRequest . <unk> ( arg ) ;
EntityUtils . consume ( arg ) ;
httpclient . close ( arg ) ;
httpclient . close ( arg ) ;
httpclient . close ( arg ) ;
httpclient . close ( arg ) ;
httpclient . close ( arg ) ;
httpclient . close ( arg ) ;
httpclient . close ( arg ) ;
httpclient . close ( arg ) ;
httpclient . close ( arg ) ;
httpclient . close ( arg ) ;
httpclient . close ( arg ) ;
httpclient . close ( arg ) ;
httpclient . close ( arg ) ;
httpclient . close ( arg ) ;
httpclient . close ( arg ) ;
httpclient . close ( arg ) ;
httpclient . close ( arg ) ;
httpclient . close ( arg ) ;
httpclient . close ( arg ) ;
httpclient . close ( arg ) ;
httpclient = HttpClientBuilder . create ( arg ) . build ( arg ) ;
<unk> = ( <unk> ) context . getEndpoint ( arg ) ;
mbsc . <unk> ( arg ) ;
<unk> = new DefaultInstrumentationAgent ( arg ) ;
id = ( ( <unk> < ? > ) source ) . idOrCreate ( arg ) ;
id = UuidGenerator . get ( arg ) . generateUuid ( arg ) ;
id = context . getUuidGenerator ( arg ) . generateUuid ( arg ) ;
this . id = id ;
idempotentRepository = MemoryIdempotentRepository . memoryIdempotentRepository ( arg ) ;
idempotentRepository = routeContext . mandatoryLookup ( arg ) ;
if ( ! <unk> &&! consumers . isEmpty ( arg ) ) throw new IllegalStateException ( arg ) ;
if ( match == null ) throw new IllegalActionException ( arg ) ;
IOHelper . close ( arg ) ;
IOHelper . close ( arg ) ;
in = new DefaultMessage ( arg ) ;
in = getEndpoint ( arg ) . getCamelContext ( arg ) . getTypeConverter ( arg ) . convertTo ( arg ) ;
in = IOHelper . buffered ( arg ) ;
<unk> ( arg ) ;
inMessage = CxfMessageHelper . getCxfInMessage ( arg ) ;
inOrder . verify ( arg ) . getMandatoryBody ( arg ) ;
inOrder . verify ( arg ) . getMandatoryBody ( arg ) ;
inOrder . verify ( arg ) . getMandatoryBody ( arg ) ;
inOrder . verify ( arg ) . getMandatoryBody ( arg ) ;
inOrder . verify ( arg ) . getMandatoryBody ( arg ) ;
inOrder . verify ( arg ) . sendMessage ( arg ) ;
inOrder . verify ( arg ) . sendMessage ( arg ) ;
inOrder . verify ( arg ) . sendMessage ( arg ) ;
<unk> = <unk> ;
index . set ( arg ) ;
indexName = getEndpoint ( arg ) . getConfig ( arg ) . getIndexName ( arg ) ;
indexName = getEndpoint ( arg ) . getConfig ( arg ) . getIndexName ( arg ) ;
indexName = getEndpoint ( arg ) . getConfig ( arg ) . getIndexName ( arg ) ;
indexReader = DirectoryReader . open ( arg ) ;
indexReader = DirectoryReader . open ( arg ) ;
indexReader . close ( arg ) ;
indexReader = IndexReader . open ( arg ) ;
indexReader = IndexReader . open ( arg ) ;
indexType = getEndpoint ( arg ) . getConfig ( arg ) . getIndexType ( arg ) ;
indexType = getEndpoint ( arg ) . getConfig ( arg ) . getIndexType ( arg ) ;
indexType = getEndpoint ( arg ) . getConfig ( arg ) . getIndexType ( arg ) ;
<unk> . info . <unk> ( arg ) . <unk> ( arg ) ;
info . setMask ( arg ) ;
errorHandler ( arg ) ;
initAnnotatedFields ( arg ) ;
initAnnotatedFields ( arg ) ;
initAnnotatedFields ( arg ) ;
<unk> ( arg ) ;
<unk> ( arg ) ;
<unk> ( arg ) ;
RouteDefinitionHelper . initParent ( arg ) ;
RouteDefinitionHelper . initParent ( arg ) ;
RouteDefinitionHelper . initParent ( arg ) ;
RouteDefinitionHelper . initParent ( arg ) ;
RouteDefinitionHelper . initParent ( arg ) ;
RouteDefinitionHelper . initParent ( arg ) ;
<unk> ( arg ) ;
nettyServerBootstrapFactory = new <unk> ( arg ) ;
nettyServerBootstrapFactory = new <unk> ( arg ) ;
<unk> ( arg ) ;
<unk> = ObjectHelper . <unk> ( arg ) ;
Injectors . close ( arg ) ;
Injectors . close ( arg ) ;
inMemory = false ;
inMemory = true ;
inMemory = true ;
innerContext = component . resolveAndRemoveReferenceParameter ( arg ) ;
innerContext = component . resolveAndRemoveReferenceParameter ( arg ) ;
<unk> = component . resolveAndRemoveReferenceParameter ( arg ) ;
invoked . incrementAndGet ( arg ) ;
IOHelper . close ( arg ) ;
return <unk> ( arg ) ;
instance = camelContext . getInjector ( arg ) . newInstance ( arg ) ;
int b = ( text != null ? <unk> : 0x00 ) + ( encoding != null ? 0x02 : 0x00 ) + ( <unk> ( arg ) != null ? <unk> : 0x00 ) + ( <unk> ( arg ) != null ? <unk> : 0x00 ) ;
int consumers = channelFactory . consumers ( arg ) ;
AtomicInteger count = new AtomicInteger ( arg ) ;
int count = configuration . getWorkerCount ( arg ) > 0 ? configuration . getWorkerCount ( arg ) : NettyHelper . <unk> ;
int count = jdbc . queryForObject ( arg ) ;
int count = jdbc . queryForObject ( arg ) ;
int count = jdbc . queryForObject ( arg ) ;
int count = jdbc . queryForObject ( arg ) ;
int count = jdbc . queryForObject ( arg ) ;
int count = jdbc . queryForObject ( arg ) ;
int count = jdbc . queryForObject ( arg ) ;
int count = jdbc . queryForObject ( arg ) ;
int count = jdbc . queryForObject ( arg ) ;
int count = jdbc . queryForObject ( arg ) ;
int count = jdbc . queryForObject ( arg ) ;
int count = jdbc . queryForObject ( arg ) ;
int count = jdbc . queryForObject ( arg ) ;
int count = jdbc . queryForObject ( arg ) ;
int count = jdbc . queryForObject ( arg ) ;
int count = jdbc . queryForObject ( arg ) ;
int count = jdbc . queryForObject ( arg ) ;
int count = jdbc . queryForObject ( arg ) ;
int count = jdbc . queryForObject ( arg ) ;
int count = jdbc . queryForObject ( arg ) ;
int count = jdbc . queryForObject ( arg ) ;
int count = jdbc . queryForObject ( arg ) ;
int count = jdbc . queryForObject ( arg ) ;
int count = jdbc . queryForObject ( arg ) ;
int count = jdbc . queryForObject ( arg ) ;
int count = jdbc . queryForObject ( arg ) ;
int count = jdbc . queryForObject ( arg ) ;
int count = jdbc . queryForObject ( arg ) ;
int endIdx = findTokenPosition ( arg ) ;
CommandLineUtils . executeCommandLine ( arg ) ;
CommandLineUtils . executeCommandLine ( arg ) ;
int expected = parametersCount > 0 ? parametersCount : ps . <unk> ( arg ) . <unk> ( arg ) ;
int <unk> = getEndpoint ( arg ) . getConfiguration ( arg ) . <unk> ( arg ) ;
int idx = expression . indexOf ( arg ) ;
private int idx ;
private int idx ;
private int idx ;
int idx = schemeSpecificPart . indexOf ( arg ) ;
int idx = findTokenPosition ( arg ) ;
int <unk> = 0 ;
int index ;
int index = <unk> . nextInt ( arg ) ;
int count = client . <unk> ( arg ) ;
int <unk> = <unk> ( arg ) ;
int <unk> = getEndpoint ( arg ) . <unk> ( arg ) ;
<unk> = 0 ;
Integer <unk> = null ;
int <unk> = s == null ? 0 : s . length ( arg ) ;
int <unk> = jdbc . queryForObject ( arg ) ;
int numMessages = 100 ;
int numMessages = 200 ;
int number = jobs . get ( arg ) ;
int <unk> = 1 ;
AvailablePortFinder . getNextAvailable ( arg ) ;
AvailablePortFinder . getNextAvailable ( arg ) ;
<unk> = poll ( arg ) ;
Map < Integer , List > results = new HashMap < Integer , List > ( arg ) ;
int read ;
int rows = jdbcTemplate . queryForObject ( arg ) ;
int rows = jdbcTemplate . queryForObject ( arg ) ;
int rows = jdbcTemplate . queryForObject ( arg ) ;
int <unk> = <unk> == null ? null : soapAction . indexOf ( arg ) ;
int size = 100 ;
AtomicInteger total = new AtomicInteger ( arg ) ;
int total = 100 ;
int total = 1000 ;
int total = 1000 ;
int total = <unk> ;
int total = 200 ;
int updateCount = sqlProcessingStrategy . commit ( arg ) ;
int updateCount = sqlProcessingStrategy . <unk> ( arg ) ;
intercept ( arg ) . to ( arg ) . stop ( arg ) ;
intercept ( arg ) . to ( arg ) . stop ( arg ) ;
addInterceptor ( arg ) ;
interceptSendToEndpoint ( arg ) . to ( arg ) . transform ( arg ) ;
interceptSendToEndpoint ( arg ) . to ( arg ) . transform ( arg ) ;
interceptSendToEndpoint ( arg ) . transform ( arg ) . to ( arg ) . stop ( arg ) ;
interceptSendToEndpoint ( arg ) . when ( arg ) . to ( arg ) . transform ( arg ) ;
interceptFrom ( arg ) . choice ( arg ) . when ( arg ) . to ( arg ) . stop ( arg ) . end ( arg ) ;
interceptFrom ( arg ) . filter ( arg ) . to ( arg ) . end ( arg ) . stop ( arg ) ;
interceptFrom ( arg ) . to ( arg ) ;
interceptFrom ( arg ) . to ( arg ) . to ( arg ) ;
interceptFrom ( arg ) . when ( arg ) . choice ( arg ) . when ( arg ) . to ( arg ) . otherwise ( arg ) . to ( arg ) . to ( arg ) . end ( arg ) . stop ( arg ) ;
interceptFrom ( arg ) . when ( arg ) . to ( arg ) ;
interceptFrom ( arg ) . when ( arg ) . to ( arg ) ;
interceptFrom ( arg ) . when ( arg ) . to ( arg ) . stop ( arg ) ;
<unk> . clear ( arg ) ;
interceptSendToEndpoint ( arg ) . skipSendToOriginalEndpoint ( arg ) . transform ( arg ) . to ( arg ) ;
this . <unk> = target ;
tracer . <unk> ( arg ) ;
routeCollection . intercept ( arg ) ;
internal . addAdvice ( arg ) ;
internal . addAdvice ( arg ) ;
internal . addAdvice ( arg ) ;
internal . addAdvice ( arg ) ;
internal . addAdvice ( arg ) ;
internal . addAdvice ( arg ) ;
internal . addAdvice ( arg ) ;
internal . addAdvice ( arg ) ;
internal . addAdvice ( arg ) ;
internalProcessor . addAdvice ( arg ) ;
internalProcessor . addAdvice ( arg ) ;
internalProcessor . addAdvice ( arg ) ;
template . sendBodyAndHeader ( <unk>
invoked . incrementAndGet ( arg ) ;
<unk> . incrementAndGet ( arg ) ;
invoked . set ( arg ) ;
invoked . set ( arg ) ;
invoked . set ( arg ) ;
invoked . set ( arg ) ;
invoked . set ( arg ) ;
invoked . set ( arg ) ;
invoked . set ( arg ) ;
task . setCounter ( arg ) ;
ObjectHelper . close ( arg ) ;
ObjectHelper . close ( arg ) ;
is = exchange . getIn ( arg ) . getMandatoryBody ( arg ) ;
is = <unk> ( arg ) ;
is = GZIPHelper . getInputStream ( arg ) ;
is = IOHelper . buffered ( arg ) ;
return new ByteArrayInputStream ( arg ) ;
enabled = <unk> ;
isStarted . <unk> ( arg ) ;
IOHelper . close ( arg ) ;
IOHelper . close ( arg ) ;
IOHelper . close ( arg ) ;
this . sendExchange ( arg ) ;
this . sendExchange ( arg ) ;
it . remove ( arg ) ;
it . remove ( arg ) ;
List < ? > list = ( List < ? > ) ctx . getDelegate ( arg ) . parseListElement ( arg ) ;
logger . warn ( arg ) ;
logger . warn ( arg ) ;
logger . warn ( arg ) ;
jaxbContext = createJaxbContext ( arg ) ;
jaxbContext = createJaxbContext ( arg ) ;
acApplicationContext . <unk> ( arg ) ;
acApplicationContext . register ( arg ) ;
acApplicationContext . <unk> ( arg ) ;
( ( <unk> ) context . getComponent ( arg ) ) . <unk> ( arg ) ;
jdbc = new JdbcTemplate ( arg ) ;
jdbc = new JdbcTemplate ( arg ) ;
jmsComponent = jmsComponentAutoAcknowledge ( arg ) ;
jmsComponent = jmsComponentAutoAcknowledge ( arg ) ;
JmsMessageHelper . setProperty ( arg ) ;
jmxExporter . register ( arg ) ;
jmxExporter . register ( arg ) ;
<unk> = jmxExporter . register ( arg ) ;
registry = null ;
<unk> ( arg ) ;
<unk> ( arg ) ;
entityManager . flush ( arg ) ;
entityManager . flush ( arg ) ;
entityManager . flush ( arg ) ;
entityManager . remove ( arg ) ;
entityManager . remove ( arg ) ;
entityManager . remove ( arg ) ;
jpaTemplate = applicationContext . getBean ( arg ) ;
jpaTemplate = applicationContext . getBean ( arg ) ;
jpaTemplate = applicationContext . getBean ( arg ) ;
jpaTemplate = applicationContext . getBean ( arg ) ;
jpaTemplate = applicationContext . getBean ( arg ) ;
jpaTemplate = applicationContext . getBean ( arg ) ;
jpaTemplate = applicationContext . getBean ( arg ) ;
jpaTemplate = applicationContext . getBean ( arg ) ;
jpaTemplate = applicationContext . getBean ( arg ) ;
jpaTemplate = applicationContext . getBean ( arg ) ;
jpaTemplate = applicationContext . getBean ( arg ) ;
jpaTemplate = applicationContext . getBean ( arg ) ;
jpaTemplate = applicationContext . getBean ( arg ) ;
jpaTemplate = applicationContext . getBean ( arg ) ;
jpaTemplate = applicationContext . getBean ( arg ) ;
jpaTemplate = applicationContext . getBean ( arg ) ;
jpaTemplate = applicationContext . getBean ( arg ) ;
jpaTemplate = applicationContext . getBean ( arg ) ;
jpaTemplate = ( JpaTemplate ) applicationContext . getBean ( arg ) ;
jpaTemplate = ( JpaTemplate ) applicationContext . getBean ( arg ) ;
<unk> = exchange . getContext ( arg ) . getClassResolver ( arg ) . resolveClass ( arg ) ;
json = ( ( WrappedFile < ? > ) json ) . getFile ( arg ) ;
keepAliveTime = defaultProfile2 . getKeepAliveTime ( arg ) ;
keepAliveTime = defaultProfile . getKeepAliveTime ( arg ) ;
key = exchange . getIn ( arg ) . getHeader ( arg ) ;
key = codec . unmarshallKey ( arg ) ;
<unk> = context . getProperty ( arg ) ;
URI <unk> = file . toURI ( arg ) ;
keys = new Object [ keySet . size ( arg ) ] ;
<unk> = te . getProperties ( arg ) . <unk> ( arg ) ;
<unk> = this . parsePropertyValue ( arg ) . toCharArray ( arg ) ;
<unk> = this . parsePropertyValue ( arg ) . toCharArray ( arg ) ;
last . setProcessor ( arg ) ;
last . setProcessor ( arg ) ;
<unk> . <unk> ( arg ) ;
lastModifiedCheck = <unk> >= <unk> ( arg ) ;
<unk> = updated ;
assertTrue ( arg ) ;
assertTrue ( arg ) ;
assertTrue ( arg ) ;
assertTrue ( arg ) ;
assertTrue ( arg ) ;
assertTrue ( arg ) ;
assertTrue ( arg ) ;
assertTrue ( arg ) ;
assertTrue ( arg ) ;
assertTrue ( arg ) ;
assertTrue ( arg ) ;
assertTrue ( arg ) ;
assertTrue ( arg ) ;
assertTrue ( arg ) ;
assertTrue ( arg ) ;
assertTrue ( arg ) ;
assertTrue ( arg ) ;
assertTrue ( arg ) ;
assertTrue ( arg ) ;
assertTrue ( arg ) ;
assertTrue ( arg ) ;
assertTrue ( arg ) ;
assertTrue ( arg ) ;
assertTrue ( arg ) ;
assertTrue ( arg ) ;
assertTrue ( arg ) ;
assertTrue ( arg ) ;
assertTrue ( arg ) ;
assertTrue ( arg ) ;
assertTrue ( arg ) ;
assertTrue ( arg ) ;
assertTrue ( arg ) ;
assertTrue ( arg ) ;
assertTrue ( arg ) ;
assertTrue ( arg ) ;
assertTrue ( arg ) ;
assertTrue ( arg ) ;
assertTrue ( arg ) ;
assertTrue ( arg ) ;
assertTrue ( arg ) ;
assertTrue ( arg ) ;
countDown ( arg ) ;
dirContext . close ( arg ) ;
strategy . <unk> ( arg ) ;
line2 = <unk> ( arg ) ;
List < ? > list = exchange . getContext ( arg ) . getTypeConverter ( arg ) . convertTo ( arg ) ;
list = new <unk> ( arg ) ;
listener = <unk> ( arg ) ;
( ( JmsEndpoint ) getEndpoint ( arg ) ) . <unk> ( arg ) ;
<unk> = new <unk> ( arg ) ;
loadBalancerType = new LoadBalancerType ( arg ) ;
loadBalancer = new <unk> ( arg ) ;
loadBalancerType = new LoadBalancerType ( arg ) ;
loadBalancerType = new LoadBalancerType ( arg ) ;
setLoadBalancerType ( arg ) ;
setLoadBalancerType ( arg ) ;
setLoadBalancerType ( arg ) ;
setLoadBalancerType ( arg ) ;
setLoadBalancerType ( arg ) ;
setLoadBalancerType ( arg ) ;
setLoadBalancerType ( arg ) ;
localExchange . <unk> ( arg ) ;
localExchange . setProperty ( arg ) ;
<unk> = new <unk> ( arg ) ;
localResponse = context . getTypeConverter ( arg ) . convertTo ( arg ) ;
LOCK . lock ( arg ) ;
LOCK . unlock ( arg ) ;
File lock = new File ( arg ) ;
String lockFileName = <unk> ( arg ) ;
log . log ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
log . warn ( arg ) ;
log . warn ( arg ) ;
log . warn ( arg ) ;
log . warn ( arg ) ;
log . warn ( arg ) ;
getExceptionHandler ( arg ) . handleException ( arg ) ;
getExceptionHandler ( arg ) . handleException ( arg ) ;
answer = new <unk> ( arg ) ;
LOG . trace ( arg ) ;
LOG . trace ( arg ) ;
LOG . trace ( arg ) ;
LOG . trace ( arg ) ;
LOG . trace ( arg ) ;
LOG . trace ( arg ) ;
LOG . trace ( arg ) ;
LOG . trace ( arg ) ;
LOG . trace ( arg ) ;
LOG . trace ( arg ) ;
LOG . trace ( arg ) ;
LOG . warn ( arg ) ;
LOG . warn ( arg ) ;
LOG . warn ( arg ) ;
LOG . warn ( arg ) ;
LOG . warn ( arg ) ;
LOG . warn ( arg ) ;
LOG . warn ( arg ) ;
LOG . warn ( arg ) ;
LOG . warn ( arg ) ;
LOG . warn ( arg ) ;
LOG . warn ( arg ) ;
LOG . warn ( arg ) ;
LOG . warn ( arg ) ;
LOG . warn ( arg ) ;
LOG . warn ( arg ) ;
LOG . warn ( arg ) ;
LOG . warn ( arg ) ;
LOG . warn ( arg ) ;
LOG . warn ( arg ) ;
LOG . warn ( arg ) ;
LOG . warn ( arg ) ;
LOG . warn ( arg ) ;
LOG . warn ( arg ) ;
LOG . warn ( arg ) ;
LOG . warn ( arg ) ;
LOG . warn ( arg ) ;
LOG . warn ( arg ) ;
LOG . warn ( arg ) ;
LOG . warn ( arg ) ;
LOG . warn ( arg ) ;
LOG . warn ( arg ) ;
LOG . warn ( arg ) ;
LOG . warn ( arg ) ;
LOG . warn ( arg ) ;
LOG . warn ( arg ) ;
LOG . warn ( arg ) ;
LOG . warn ( arg ) ;
log = <unk> . getLogger ( arg ) ;
<unk> = new <unk> ( arg ) ;
logSchedulerService = camelContext . getExecutorServiceManager ( arg ) . newScheduledThreadPool ( arg ) ;
logSchedulerService = camelContext . getExecutorServiceManager ( arg ) . getScheduledExecutorService ( arg ) ;
logStackTrace = data . currentRedeliveryPolicy . <unk> ( arg ) ;
logStackTrace = data . currentRedeliveryPolicy . <unk> ( arg ) ;
loggedIn = getOperations ( arg ) . connect ( arg ) ;
loggedIn = operations . connect ( arg ) ;
loggedIn = ( ( RemoteFileOperations ) operations ) . connect ( arg ) ;
loggedIn = getOperations ( arg ) . connect ( arg ) ;
LOG . debug ( arg ) ;
LOG . error ( arg ) ;
LOG . error ( arg ) ;
getLogger ( arg ) . log ( arg ) ;
getLogger ( arg ) . log ( arg ) ;
logger . getLogger ( arg ) . <unk> ( arg ) ;
logger . getLogger ( arg ) . <unk> ( arg ) ;
LOG . trace ( arg ) ;
LOG . trace ( arg ) ;
logger = new CamelLogger ( arg ) ;
logger = new CamelLogger ( arg ) ;
long count = jdbc . queryForObject ( arg ) ;
long count = jdbc . queryForObject ( arg ) ;
long count = jdbc . queryForObject ( arg ) ;
long delta = watch . taken ( arg ) ;
long delta = watch . taken ( arg ) ;
long delta = watch . taken ( arg ) ;
long <unk> = ( long ) ( ( <unk> - <unk> ) * <unk> ) ;
long <unk> = recoverable . <unk> ( arg ) ;
TimePatternConverter . toMilliSeconds ( arg ) ;
TimePatternConverter . toMilliSeconds ( arg ) ;
TimePatternConverter . toMilliSeconds ( arg ) ;
long redeliverDelay = redelivery . getRedeliveryDelay ( arg ) ;
long redeliveryDelayResult ;
StopWatch watch = null ;
StopWatch watch = null ;
StopWatch watch = new StopWatch ( arg ) ;
StopWatch watch = new StopWatch ( arg ) ;
StopWatch watch = new StopWatch ( arg ) ;
StopWatch watch = new StopWatch ( arg ) ;
StopWatch watch = new StopWatch ( arg ) ;
StopWatch watch = new StopWatch ( arg ) ;
StopWatch watch = new StopWatch ( arg ) ;
StopWatch watch = new StopWatch ( arg ) ;
StopWatch watch = new StopWatch ( arg ) ;
StopWatch watch = new StopWatch ( arg ) ;
StopWatch watch = new StopWatch ( arg ) ;
StopWatch watch = new StopWatch ( arg ) ;
StopWatch watch = new StopWatch ( arg ) ;
StopWatch watch = new StopWatch ( arg ) ;
StopWatch watch = new StopWatch ( arg ) ;
StopWatch watch = new StopWatch ( arg ) ;
StopWatch watch = new StopWatch ( arg ) ;
StopWatch watch = new StopWatch ( arg ) ;
StopWatch watch = new StopWatch ( arg ) ;
StopWatch watch = new StopWatch ( arg ) ;
long start = System . currentTimeMillis ( arg ) ;
long startTime = System . nanoTime ( arg ) ;
long startTime = System . currentTimeMillis ( arg ) ;
long t1 = mock . getReceivedExchanges ( arg ) . get ( arg ) . getIn ( arg ) . getHeader ( arg ) ;
long t1 = mock . getReceivedExchanges ( arg ) . get ( arg ) . getIn ( arg ) . getHeader ( arg ) ;
long t1 = mock . getReceivedExchanges ( arg ) . get ( arg ) . getIn ( arg ) . getHeader ( arg ) ;
long t1 = mock . getReceivedExchanges ( arg ) . get ( arg ) . getIn ( arg ) . getHeader ( arg ) ;
long t1 = mock . getReceivedExchanges ( arg ) . get ( arg ) . getIn ( arg ) . getHeader ( arg ) ;
long t1 = mock . getReceivedExchanges ( arg ) . get ( arg ) . getIn ( arg ) . getHeader ( arg ) ;
long timeTaken = watch . stop ( arg ) ;
long timeTaken = watch . stop ( arg ) ;
long timeTaken = watch . stop ( arg ) ;
long timeout = System . currentTimeMillis ( arg ) + <unk> ;
long timeout = System . currentTimeMillis ( arg ) + <unk> ;
long timeout = client . getTimeout ( arg ) + 5000 ;
long <unk> = System . currentTimeMillis ( arg ) + 5000 ;
lookedUpBean = context . getRegistry ( arg ) . lookupByName ( arg ) ;
lookedUpBean = context . getRegistry ( arg ) . lookupByName ( arg ) ;
<unk> = endpoint . <unk> ( arg ) ;
<unk> = <unk> ;
<unk> = <unk> ;
helper . <unk> ( arg ) ;
main . enableDebug ( arg ) ;
<unk> = newName ;
manager . setCamelContext ( arg ) ;
aggregated . clear ( arg ) ;
when ( arg ) . thenReturn ( arg ) ;
when ( arg ) . thenReturn ( arg ) ;
when ( arg ) . thenReturn ( arg ) ;
entry = map . remove ( arg ) ;
map = CastUtils . cast ( arg ) ;
map = new ConcurrentHashMap < Object , AggregationStrategy > ( arg ) ;
map = new ConcurrentHashMap < Object , AggregationStrategy > ( arg ) ;
map = registry . findByTypeWithName ( arg ) ;
mapAnnotatedLinkField . put ( arg ) ;
mapAnnotatedLinkField . put ( arg ) ;
<unk> . writeValue ( arg ) ;
marshal ( arg ) ;
matches . set ( arg ) ;
matches . set ( arg ) ;
maxPoolSize = defaultProfile2 . getMaxPoolSize ( arg ) ;
maxPoolSize = defaultProfile . getMaxPoolSize ( arg ) ;
maxQueueSize = defaultProfile2 . getMaxQueueSize ( arg ) ;
maxQueueSize = defaultProfile . getMaxQueueSize ( arg ) ;
mayBeAddComponentAndLanguageFor ( arg ) ;
mayBeAddComponentAndLanguageFor ( arg ) ;
mayBeRemoveComponentAndLanguageFor ( arg ) ;
mayBeRemoveComponentAndLanguageFor ( arg ) ;
mbean = new <unk> ( arg ) ;
this . mbeanObjectDomainName = mbeanObjectDomainName ;
assertTrue ( arg ) ;
assertTrue ( arg ) ;
assertTrue ( arg ) ;
assertTrue ( arg ) ;
assertTrue ( arg ) ;
assertTrue ( arg ) ;
assertTrue ( arg ) ;
assertTrue ( arg ) ;
this . mbeanServerDefaultDomain = mbeanServerDefaultDomain ;
mbeansRegistered . add ( arg ) ;
mbeansRegistered . put ( arg ) ;
me . <unk> ( arg ) ;
answer = mediaSizeAssigner . <unk> ( arg ) ;
answer = mediaSizeAssigner . <unk> ( arg ) ;
answer = mediaSizeAssigner . <unk> ( arg ) ;
message . setHeader ( arg ) ;
message . setHeader ( arg ) ;
JmsMessageHelper . setJMSReplyTo ( arg ) ;
message = ( Message ) futureHolder . get ( arg ) . get ( arg ) ;
message = ( Message ) futureHolder . get ( arg ) . get ( arg ) ;
messageConsumer = session . createDurableSubscriber ( arg ) ;
messageConsumer = session . createDurableSubscriber ( arg ) ;
messageConsumer = session . createConsumer ( arg ) ;
messageConsumer = session . createConsumer ( arg ) ;
messageReceived = true ;
<unk> = <unk> . iterator ( arg ) . next ( arg ) ;
httpRequest . <unk> ( arg ) ;
<unk> . <unk> ( arg ) ;
<unk> . <unk> ( arg ) ;
<unk> = <unk> ;
ServiceHelper . stopService ( arg ) ;
MockEndpoint . assertIsSatisfied ( arg ) ;
MockEndpoint . assertIsSatisfied ( arg ) ;
MockEndpoint . assertIsSatisfied ( arg ) ;
MockEndpoint . assertIsSatisfied ( arg ) ;
MockEndpoint . assertIsSatisfied ( arg ) ;
MockEndpoint . assertIsSatisfied ( arg ) ;
MockEndpoint . assertIsSatisfied ( arg ) ;
MockEndpoint . assertIsSatisfied ( arg ) ;
assertMockEndpointsSatisfied ( arg ) ;
assertMockEndpointsSatisfied ( arg ) ;
mock . expectedBodiesReceivedInAnyOrder ( arg ) ;
mock . expectedBodiesReceivedInAnyOrder ( arg ) ;
mock . expectedBodiesReceivedInAnyOrder ( arg ) ;
mock . expectedBodiesReceivedInAnyOrder ( arg ) ;
mock . expectedBodiesReceivedInAnyOrder ( arg ) ;
mock . expectedBodiesReceivedInAnyOrder ( arg ) ;
mock . expectedBodiesReceivedInAnyOrder ( arg ) ;
mock . expectedBodiesReceived ( arg ) ;
mock . expectedBodiesReceived ( arg ) ;
mock . expectedBodiesReceived ( arg ) ;
mock . expectedHeaderReceived ( Exchange . INTERCEPTED_ENDPOINT , direct:
mock . expectedHeaderReceived ( Exchange . INTERCEPTED_ENDPOINT , direct:
mock . expectedMinimumMessageCount ( arg ) ;
mock . expectedMinimumMessageCount ( arg ) ;
mock . expectedMinimumMessageCount ( arg ) ;
mock . expectedMinimumMessageCount ( arg ) ;
mock . expectedMinimumMessageCount ( arg ) ;
mock . expectedMinimumMessageCount ( arg ) ;
mock . expectedMinimumMessageCount ( arg ) ;
mock . expectedMinimumMessageCount ( arg ) ;
mock . expectedMinimumMessageCount ( arg ) ;
mock . expectedMinimumMessageCount ( arg ) ;
mock . expectedMinimumMessageCount ( arg ) ;
mock . expectedMinimumMessageCount ( arg ) ;
mock . expectedMinimumMessageCount ( arg ) ;
mock . expectedMinimumMessageCount ( arg ) ;
mock . expectedMinimumMessageCount ( arg ) ;
mock . expectedMinimumMessageCount ( arg ) ;
mock . expectedMinimumMessageCount ( arg ) ;
mock . expectedMinimumMessageCount ( arg ) ;
mock . expectedMinimumMessageCount ( arg ) ;
mock . expectedMinimumMessageCount ( arg ) ;
mock . expectedMinimumMessageCount ( arg ) ;
mock . expectedMessageCount ( arg ) ;
mock . expectedMessageCount ( arg ) ;
mock . expectedMessageCount ( arg ) ;
mock . expectedMessageCount ( arg ) ;
mock . expectedMessageCount ( arg ) ;
mock . message ( arg ) . body ( arg ) . <unk> ( arg ) . isEqualTo ( arg ) ;
mock . message ( arg ) . body ( arg ) . contains ( arg ) ;
mock . message ( arg ) . body ( arg ) . contains ( arg ) ;
mock . message ( arg ) . body ( arg ) . contains ( arg ) ;
mock . message ( arg ) . body ( arg ) . contains ( arg ) ;
mock . message ( arg ) . body ( arg ) . contains ( arg ) ;
mock . message ( arg ) . body ( arg ) . contains ( arg ) ;
mock . message ( arg ) . body ( arg ) . contains ( arg ) ;
mock . message ( arg ) . body ( arg ) . contains ( arg ) ;
mock . message ( arg ) . body ( arg ) . contains ( arg ) ;
mock . message ( arg ) . body ( arg ) . contains ( arg ) ;
mock . message ( arg ) . body ( arg ) . equals ( arg ) ;
mock . message ( arg ) . body ( arg ) . isEqualTo ( arg ) ;
mock . message ( arg ) . body ( arg ) . isEqualTo ( arg ) ;
mock . message ( arg ) . body ( arg ) . isEqualTo ( arg ) ;
mock . message ( arg ) . body ( arg ) . isEqualTo ( arg ) ;
mock . message ( arg ) . body ( arg ) . contains ( arg ) ;
mock . message ( arg ) . body ( arg ) . contains ( arg ) ;
mock . message ( arg ) . body ( arg ) . contains ( arg ) ;
mock . message ( arg ) . body ( arg ) . contains ( arg ) ;
mock . message ( arg ) . body ( arg ) . contains ( arg ) ;
mock . message ( arg ) . body ( arg ) . isEqualTo ( arg ) ;
assertMockEndpointsSatisfied ( arg ) ;
assertMockEndpointsSatisfied ( arg ) ;
mockEndpoint . expectedBodiesReceived ( arg ) ;
mockResultEndpoint . expectedMessageCount ( arg ) ;
mockOutput . assertIsSatisfied ( arg ) ;
mockOutput . assertIsSatisfied ( arg ) ;
mockOutput . expectedMessageCount ( arg ) ;
mockOutput . expectedMessageCount ( arg ) ;
models = <unk> . loadModels ( arg ) ;
mojo . <unk> ( arg ) ;
mojo . <unk> ( arg ) ;
mojo . <unk> = System . getProperty ( arg ) ;
<unk> = new <unk> ( arg ) ;
multicastExecutor = getCamelContext ( arg ) . getExecutorServiceManager ( arg ) . newDefaultThreadPool ( arg ) ;
multicastExecutor = getCamelContext ( arg ) . getExecutorServiceManager ( arg ) . getDefaultExecutorService ( arg ) ;
myPool = context . getExecutorServiceManager ( arg ) . newDefaultThreadPool ( arg ) ;
myPool = context . getExecutorServiceStrategy ( arg ) . newDefaultThreadPool ( arg ) ;
myPool = context . getExecutorServiceManager ( arg ) . getDefaultExecutorService ( arg ) ;
myProcessor = applicationContext . getBean ( arg ) ;
myProcessor = applicationContext . getBean ( arg ) ;
myProcessor = ( Processor ) ctx . getBean ( arg ) ;
myProcessor = ( Processor ) ctx . getBean ( arg ) ;
myService = context . getRegistry ( arg ) . lookupByNameAndType ( arg ) ;
<unk> . setCamelContext ( arg ) ;
name . value = reply ;
name = Exchange . CONTENT_TYPE ;
name = Exchange . CONTENT_TYPE ;
namingStrategy = new <unk> ( arg ) ;
Assert . assertTrue ( arg ) ;
Assert . assertTrue ( arg ) ;
Assert . assertTrue ( arg ) ;
Assert . assertTrue ( arg ) ;
Assert . assertTrue ( arg ) ;
GroovyRenderer . renderRoute ( arg ) ;
GroovyRenderer . renderRoute ( arg ) ;
throw new IllegalArgumentException ( arg ) ;
new JdbcTemplate ( arg ) . <unk> ( arg ) ;
newExchange . setIn ( arg ) ;
if ( oldExchange == null ) {
processor . process ( arg ) ;
<unk> = routeContext . mandatoryLookup ( arg ) ;
<unk> = f . <unk> ( arg ) . <unk> ( arg ) ;
super . process ( arg ) ;
Object next = bodyMap != null ? bodyMap . get ( arg ) : null ;
processor . process ( arg ) ;
target . process ( arg ) ;
<unk> = ( Configuration ) getConfiguration ( arg ) . clone ( arg ) ;
data . <unk> = <unk> + <unk> ;
data . label = node . toString ( arg ) ;
data . <unk> = data . label ;
nodeMetadatas = exchange . getIn ( arg ) . getBody ( arg ) ;
nodeMetadatas = exchange . getIn ( arg ) . getBody ( arg ) ;
nodeState = NodeMetadata . Status . valueOf ( arg ) ;
nodeState = NodeMetadata . Status . valueOf ( arg ) ;
<unk> = node ;
ObjectHelper . <unk> ( arg ) ;
ObjectHelper . notNull ( arg ) ;
ObjectHelper . notNull ( arg ) ;
<unk> = <unk> ;
assertTrue ( arg ) ;
<unk> = endpoint . <unk> ( arg ) ;
<unk> = <unk> ( arg ) . <unk> ( arg ) ;
oid = headers . get ( arg ) ;
oid = headers . get ( arg ) ;
oldExchange . setIn ( arg ) ;
oldExchange . getIn ( arg ) . setBody ( arg ) ;
<unk> = oldExchange . getIn ( arg ) . getBody ( arg ) ;
answer = onCompletion ( arg ) ;
onException ( arg ) . setDelay ( arg ) . maximumRedeliveries ( arg ) . maximumRedeliveryDelay ( arg ) . backOffMultiplier ( arg ) . useExponentialBackOff ( arg ) . retryAttemptedLogLevel ( arg ) . retriesExhaustedLogLevel ( arg ) . setHeader ( arg ) . to ( arg ) ;
onException ( arg ) . handled ( arg ) . useOriginalMessage ( arg ) . maximumRedeliveries ( arg ) . to ( arg ) ;
onException ( arg ) . handled ( arg ) . useOriginalMessage ( arg ) . maximumRedeliveries ( arg ) . to ( arg ) ;
onException ( arg ) . handled ( arg ) . useOriginalBody ( arg ) . redeliveryDelay ( arg ) . maximumRedeliveries ( arg ) . to ( arg ) ;
onException ( arg ) . handled ( arg ) . useOriginalMessage ( arg ) . redeliveryDelay ( arg ) . maximumRedeliveries ( arg ) . to ( arg ) ;
onException ( arg ) . delay ( arg ) . maximumRedeliveries ( arg ) . maximumRedeliveryDelay ( arg ) . backOffMultiplier ( arg ) . useExponentialBackOff ( arg ) . retryAttemptedLogLevel ( arg ) . retriesExhaustedLogLevel ( arg ) . setHeader ( arg ) . to ( arg ) ;
onException ( arg ) . maximumRedeliveries ( arg ) . redeliveryDelay ( arg ) ;
onException ( arg ) . to ( arg ) ;
onException ( arg ) . maximumRedeliveries ( arg ) . useOriginalMessage ( arg ) . handled ( arg ) . to ( arg ) ;
onException ( arg ) . maximumRedeliveries ( arg ) . setHeader ( arg ) . to ( arg ) ;
onException ( arg ) . onWhen ( arg ) . maximumRedeliveries ( arg ) . backOffMultiplier ( arg ) . redeliveryDelay ( arg ) . to ( arg ) ;
onException ( arg ) . process ( arg ) . stop ( arg ) ;
onException ( arg ) . retryWhile ( arg ) . end ( arg ) ;
onException ( arg ) . retryWhile ( arg ) . end ( arg ) ;
onException ( arg ) . retryWhile ( arg ) . handled ( arg ) . transform ( arg ) . constant ( arg ) . stop ( arg ) ;
onException ( arg ) . retryWhile ( arg ) . handled ( arg ) . transform ( arg ) . constant ( arg ) ;
onException ( arg ) . redeliveryDelay ( arg ) . maximumRedeliveries ( arg ) . maximumRedeliveryDelay ( arg ) . backOffMultiplier ( arg ) . useExponentialBackOff ( arg ) . retryAttemptedLogLevel ( arg ) . retriesExhaustedLogLevel ( arg ) . setHeader ( arg ) . to ( arg ) ;
onException ( arg ) . onWhen ( arg ) . maximumRedeliveries ( arg ) . to ( arg ) ;
onException ( arg ) . onWhen ( arg ) . maximumRedeliveries ( arg ) . to ( arg ) ;
ON_EXCEPTION_RETRY . incrementAndGet ( arg ) ;
ON_EXCEPTION_RETRY . incrementAndGet ( arg ) ;
ON_EXCEPTION_RETRY . incrementAndGet ( arg ) ;
ON_EXCEPTION_RETRY . incrementAndGet ( arg ) ;
ON_EXCEPTION_RETRY . incrementAndGet ( arg ) ;
ON_EXCEPTION_RETRY . incrementAndGet ( arg ) ;
process ( arg ) ;
process ( arg ) ;
process ( arg ) ;
answer = aggregated ;
notify . matchesMockWaitTime ( arg ) ;
notify . matchesMockWaitTime ( arg ) ;
oneExchangeDone = event ( arg ) . whenDone ( arg ) . create ( arg ) ;
<unk> ( arg ) ;
operation = getEndpoint ( arg ) . getConfig ( arg ) . getOperation ( arg ) ;
<unk> = <unk> . getName ( arg ) ;
directory = fileName . substring ( arg ) ;
( ( RemoteFileOperations ) getOperations ( arg ) ) . disconnect ( arg ) ;
order . addAndGet ( arg ) ;
order . addAndGet ( arg ) ;
order . addAndGet ( arg ) ;
order . addAndGet ( arg ) ;
order . addAndGet ( arg ) ;
order . addAndGet ( arg ) ;
order . addAndGet ( arg ) ;
order . addAndGet ( arg ) ;
order . addAndGet ( arg ) ;
order . addAndGet ( arg ) ;
order . addAndGet ( arg ) ;
order . addAndGet ( arg ) ;
order . addAndGet ( arg ) ;
order . addAndGet ( arg ) ;
order . addAndGet ( arg ) ;
order . addAndGet ( arg ) ;
order . addAndGet ( arg ) ;
order . addAndGet ( arg ) ;
order . addAndGet ( arg ) ;
order . addAndGet ( arg ) ;
order . addAndGet ( arg ) ;
order . addAndGet ( arg ) ;
order . addAndGet ( arg ) ;
order . addAndGet ( arg ) ;
order . addAndGet ( arg ) ;
ORDER . addAndGet ( arg ) ;
ORDER . addAndGet ( arg ) ;
ORDER . addAndGet ( arg ) ;
ORDER . addAndGet ( arg ) ;
ORDER . addAndGet ( arg ) ;
ORDER . addAndGet ( arg ) ;
ORDER . addAndGet ( arg ) ;
ORDER . addAndGet ( arg ) ;
ORDER . addAndGet ( arg ) ;
ORDER . addAndGet ( arg ) ;
ORDER . addAndGet ( arg ) ;
ORDER . addAndGet ( arg ) ;
ORDER . addAndGet ( arg ) ;
ORDER . addAndGet ( arg ) ;
ORDER . addAndGet ( arg ) ;
ORDER . addAndGet ( arg ) ;
ORDER . addAndGet ( arg ) ;
ORDER . addAndGet ( arg ) ;
ORDER . addAndGet ( arg ) ;
ORDER . addAndGet ( arg ) ;
ORDER . addAndGet ( arg ) ;
ORDER . addAndGet ( arg ) ;
ORDER . addAndGet ( arg ) ;
ORDER . addAndGet ( arg ) ;
ORDER . addAndGet ( arg ) ;
ORDER . set ( arg ) ;
ORDER . set ( arg ) ;
ORDER . set ( arg ) ;
ORDER . set ( arg ) ;
ORDER . set ( arg ) ;
ORDER . set ( arg ) ;
ORDER . set ( arg ) ;
ORDER . set ( arg ) ;
ORDER . set ( arg ) ;
ORDER . set ( arg ) ;
final org . apache . camel . Exchange exchange = this . producer . createExchange ( arg ) ;
org . apache . cxf . message . Message answer = CxfMessageHelper . getCxfInMessage ( arg ) ;
org . apache . cxf . message . Message inMessage = CxfMessageHelper . getCxfInMessage ( arg ) ;
Bundle [ ] bundles = null ;
org . springframework . integration . Message < ? > message = siMessage . getMessage ( arg ) ;
org . springframework . integration . Message < ? > request = SpringIntegrationBinding . createSpringIntegrationMessage ( arg ) ;
org . springframework . integration . Message < ? > <unk> = SpringIntegrationBinding . <unk> ( arg ) ;
org . springframework . integration . Message < ? > siOutmessage = SpringIntegrationBinding . createSpringIntegrationMessage ( arg ) ;
org . springframework . integration . Message message = siMessage . getMessage ( arg ) ;
org . springframework . integration . Message request = SpringIntegrationBinding . createSpringIntegrationMessage ( arg ) ;
org . springframework . integration . Message siOutmessage = SpringIntegrationBinding . createSpringIntegrationMessage ( arg ) ;
org . springframework . integration . <unk> . Message message = siMessage . getMessage ( arg ) ;
<unk> ( arg ) ;
exception = true ;
<unk> = null ;
<unk> = null ;
IOHelper . close ( arg ) ;
IOHelper . close ( arg ) ;
ByteArrayOutputStream <unk> = new ByteArrayOutputStream ( arg ) ;
otherwiseProcessor = createProcessor ( arg ) ;
ObjectName <unk> = new ObjectName ( arg ) ;
IOHelper . close ( arg ) ;
answer . setBody ( arg ) ;
answer . setHeader ( arg ) ;
out = ( in != null && in instanceof MessageSupport ) ? ( ( MessageSupport ) in ) . newInstance ( arg ) : new DefaultMessage ( arg ) ;
out = ( in != null && in instanceof MessageSupport ) ? ( ( MessageSupport ) in ) . newInstance ( arg ) : <unk> ( arg ) ;
out = exchange . hasOut ( arg ) ? exchange . getOut ( arg ) : exchange . getIn ( arg ) ;
<unk> . <unk> ( arg ) ;
AsyncProcessorHelper . process ( arg ) ;
output = this . createChildProcessor ( arg ) ;
return <unk> ( arg ) ;
outputsWithoutCatches = new ArrayList < ProcessorDefinition > ( arg ) ;
outputsWithoutCatches = new ArrayList < ProcessorDefinition < ? >> ( arg ) ;
outputsWithoutCatches = new ArrayList < ProcessorDefinition < ? >> ( arg ) ;
outputsWithoutCatches = new ArrayList < ProcessorType > ( arg ) ;
outputsWithoutCatches = new ArrayList < ProcessorType < ? >> ( arg ) ;
processor . process ( arg ) ;
overdueEndpoint . expectedMinimumMessageCount ( arg ) ;
overdueEndpoint . setResultWaitTime ( arg ) ;
<unk> = new OutputDefinition ( arg ) ;
<unk> = <unk> ;
answer . <unk> ( arg ) ;
answer . <unk> ( arg ) ;
params [ 0 ] = exchange . getIn ( arg ) . getMandatoryBody ( arg ) ;
params [ 0 ] = exchange . getIn ( arg ) . getMandatoryBody ( arg ) ;
addProcessBuilder ( arg ) ;
return CamelContextHelper . mandatoryLookup ( arg ) ;
part = ( ( <unk> < ? > ) part ) . value ;
<unk> = component . getAndRemoveParameter ( arg ) ;
path = converter . convertTo ( arg ) ;
path = target ;
payload . inBody = checkSerializableBody ( arg ) ;
payload . inBody = checkSerializableObject ( arg ) ;
payload . outBody = checkSerializableBody ( arg ) ;
payload . outBody = checkSerializableObject ( arg ) ;
pc . <unk> ( arg ) ;
<unk> . value = <unk> ;
<unk> . <unk> ( arg ) ;
<unk> . <unk> ( arg ) ;
pivot = endIdx + <unk> . length ( arg ) ;
pivot = idx + delta ;
policies = new HashMap < ExceptionPolicyKey , ExceptionType > ( arg ) ;
policies = new HashMap < ExceptionPolicyKey , ExceptionType > ( arg ) ;
policy . setRedeliveryDelay ( arg ) ;
return <unk> ( arg ) ;
rc += <unk> ( arg ) ;
pollerExecutor = endpoint . getCamelContext ( arg ) . getExecutorServiceManager ( arg ) . newSingleThreadExecutor ( arg ) ;
pollerExecutor = endpoint . getCamelContext ( arg ) . getExecutorServiceManager ( arg ) . getExecutorService ( arg ) ;
startService ( arg ) ;
pool = new <unk> ( arg ) ;
poolSize = defaultProfile2 . getPoolSize ( arg ) ;
poolSize = defaultProfile . getPoolSize ( arg ) ;
<unk> . clear ( arg ) ;
populateAttachments ( arg ) ;
populateAttachments ( arg ) ;
populateRequestParameters ( arg ) ;
populateRequestParameters ( arg ) ;
<unk> ( arg ) ;
endpoint . getPrepareStatementStrategy ( arg ) . populateStatement ( arg ) ;
<unk> ( arg ) ;
port = AvailablePortFinder . getNextAvailable ( arg ) ;
port = AvailablePortFinder . getNextAvailable ( arg ) ;
<unk> = port ;
<unk> = in . <unk> ( arg ) - 2 ;
httpclient . getConnectionManager ( arg ) . shutdown ( arg ) ;
httpclient . getConnectionManager ( arg ) . shutdown ( arg ) ;
httpclient . getConnectionManager ( arg ) . shutdown ( arg ) ;
httpclient . getConnectionManager ( arg ) . shutdown ( arg ) ;
httpclient . getConnectionManager ( arg ) . shutdown ( arg ) ;
httpclient . getConnectionManager ( arg ) . shutdown ( arg ) ;
httpclient . getConnectionManager ( arg ) . shutdown ( arg ) ;
<unk> ( arg ) ;
<unk> ( arg ) ;
PredicateSupport . assertMatches ( arg ) ;
PredicateSupport . assertMatches ( arg ) ;
PredicateSupport . assertMatches ( arg ) ;
PredicateSupport . assertMatches ( arg ) ;
PredicateSupport . assertMatches ( arg ) ;
predicate = new ExpressionToPredicateAdapter ( arg ) ;
predicate = createPredicate ( arg ) ;
<unk> ( arg ) ;
<unk> ( arg ) ;
copy = prepareExchangeForFailover ( arg ) ;
copy = prepareExchangeForFailover ( arg ) ;
sendFiles ( arg ) ;
sendFiles ( arg ) ;
sendFiles ( arg ) ;
sendFiles ( arg ) ;
ExchangeHelper . prepareOutToIn ( arg ) ;
ExchangeHelper . prepareOutToIn ( arg ) ;
ExchangeHelper . prepareOutToIn ( arg ) ;
ExchangeHelper . prepareOutToIn ( arg ) ;
ExchangeHelper . prepareOutToIn ( arg ) ;
ExchangeHelper . prepareOutToIn ( arg ) ;
RouteDefinitionHelper . <unk> ( arg ) ;
Map printSettings = URISupport . parseParameters ( arg ) ;
private <unk> < String , String > sentTo = new ConcurrentHashMap < String , String > ( arg ) ;
private Object <unk> ;
private boolean done ;
private AtomicBoolean done = new AtomicBoolean ( arg ) ;
private final AtomicBoolean matches = new AtomicBoolean ( arg ) ;
private final AtomicBoolean matches = new AtomicBoolean ( arg ) ;
private AtomicBoolean sentTo = new AtomicBoolean ( arg ) ;
private final Exchange copy = <unk> ( arg ) ;
private AtomicInteger current = new AtomicInteger ( arg ) ;
private AtomicInteger current = new AtomicInteger ( arg ) ;
private AtomicInteger current = new AtomicInteger ( arg ) ;
private AtomicInteger current = new AtomicInteger ( arg ) ;
private AtomicInteger current = new AtomicInteger ( arg ) ;
private AtomicInteger current = new AtomicInteger ( arg ) ;
private AtomicInteger current = new AtomicInteger ( arg ) ;
privateChat = <unk> . getThreadChat ( arg ) ;
<unk> ( arg ) ;
asyncProcess ( arg ) ;
return processBatch ( arg ) ;
return processBatch ( arg ) ;
<unk> ( arg ) ;
AsyncProcessorHelper . process ( arg ) ;
index = <unk> ( arg ) ;
getBinding ( arg ) . <unk> ( arg ) ;
processor . process ( arg ) ;
processor . process ( arg ) ;
processor . process ( arg ) ;
processor . process ( arg ) ;
processor . process ( arg ) ;
getProcessor ( arg ) . process ( arg ) ;
getProcessor ( arg ) . process ( arg ) ;
processor = new CompositeProcessor ( arg ) ;
route . <unk> ( arg ) . add ( arg ) ;
processor = p1 . getProcessor ( arg ) ;
processor = <unk> ( arg ) ;
processor = <unk> ( arg ) ;
processor = <unk> ( arg ) ;
processorDefinition = ( ProcessorDefinition < ? > ) definition ;
producer . process ( arg ) ;
producer . process ( arg ) ;
producer . process ( arg ) ;
producer . process ( arg ) ;
wrapped . process ( arg ) ;
ServiceHelper . startService ( arg ) ;
ServiceHelper . startService ( arg ) ;
ServiceHelper . stopService ( arg ) ;
ServiceHelper . stopService ( arg ) ;
ServiceHelper . stopService ( arg ) ;
wrapped = builder . <unk> ( arg ) ;
Producer producer = endpoint . createProducer ( arg ) ;
Producer producer = endpoint . createProducer ( arg ) ;
producer = pool . addAndAcquire ( arg ) ;
getProducerCache ( arg ) . send ( arg ) ;
ServiceHelper . stopService ( arg ) ;
camelContext . getExecutorServiceStrategy ( arg ) . shutdownNow ( arg ) ;
producerExecutorService = destination . getCamelContext ( arg ) . getExecutorServiceStrategy ( arg ) . newCachedThreadPool ( arg ) ;
producerExecutorService = destination . getCamelContext ( arg ) . getExecutorServiceStrategy ( arg ) . newDefaultThreadPool ( arg ) ;
startServices ( arg ) ;
LOG . debug ( arg ) ;
template . sendBody ( arg ) ;
template . sendBody ( arg ) ;
template . sendBody ( arg ) ;
answer . put ( arg ) ;
answer . put ( arg ) ;
properties = new ConcurrentHashMap < String , Object > ( arg ) ;
Properties properties = new Properties ( arg ) ;
<unk> = getRegistry ( arg ) . lookupByNameAndType ( arg ) ;
properties . put ( arg ) ;
<unk> ( arg ) ;
<unk> = secure ? https : http ;
httpclient . getConnectionManager ( arg ) . shutdown ( arg ) ;
httpclient . getConnectionManager ( arg ) . shutdown ( arg ) ;
<unk> . <unk> ( arg ) ;
queryString = getEndpoint ( arg ) . getHttpUri ( arg ) . <unk> ( arg ) ;
queryString = UnsafeUriCharactersEncoder . encodeHttpURI ( arg ) ;
queryString = UnsafeUriCharactersEncoder . encodeHttpURI ( arg ) ;
queryString = UnsafeUriCharactersEncoder . encodeHttpURI ( arg ) ;
queryString = UnsafeUriCharactersEncoder . encodeHttpURI ( arg ) ;
queryString = endpoint . getHttpUri ( arg ) . getRawQuery ( arg ) ;
queryString = getEndpoint ( arg ) . getHttpUri ( arg ) . getRawQuery ( arg ) ;
queryString = getEndpoint ( arg ) . getHttpUri ( arg ) . getRawQuery ( arg ) ;
addToQueue ( arg ) ;
addToQueue ( arg ) ;
<unk> ( arg ) ;
endpoint . getQueue ( arg ) . remove ( arg ) ;
process ( arg ) ;
queue = createQueue ( arg ) ;
workQueue = new LinkedBlockingQueue < Runnable > ( arg ) ;
workQueue = new LinkedBlockingQueue < Runnable > ( arg ) ;
workQueue = new SynchronousQueue < Runnable > ( arg ) ;
getQueues ( arg ) . clear ( arg ) ;
<unk> . put ( arg ) ;
r = Response . status ( arg ) . <unk> ( arg ) . build ( arg ) ;
r = new PEMParser ( arg ) ;
rc = <unk> ;
rc [ 1 ] = splitURI [ 1 ] ;
rc [ 1 ] = splitURI [ 1 ] ;
rc [ 1 ] = splitURI [ 2 ] ;
rc [ 1 ] = splitURI [ 2 ] ;
rce = wrapRuntimeCamelException ( arg ) ;
rce = wrapRuntimeCamelException ( arg ) ;
rce = wrapRuntimeCamelException ( arg ) ;
rce = wrapRuntimeCamelException ( arg ) ;
rce = <unk> ( arg ) ;
reader = <unk> ( arg ) != null ? new InputStreamReader ( arg ) : new InputStreamReader ( arg ) ;
reader = IOHelper . buffered ( arg ) ;
reader = IOHelper . buffered ( arg ) ;
reader = IOHelper . buffered ( arg ) ;
reader = IOHelper . buffered ( arg ) ;
reader = IOHelper . buffered ( arg ) ;
reader = IOHelper . buffered ( arg ) ;
reader = IOHelper . buffered ( arg ) ;
reader = IOHelper . buffered ( arg ) ;
received = consumer . receiveBody ( arg ) ;
assertTrue ( arg ) ;
assertTrue ( arg ) ;
receivedExchange = e ;
receivedExchange = ( JmsExchange ) e ;
<unk> ( arg ) ;
recipientKeyAlias = context . getProperty ( arg ) ;
recipientKeyAlias = context . getProperty ( arg ) ;
destination = address ;
<unk> . unlock ( arg ) ;
recoverService . scheduleWithFixedDelay ( arg ) ;
recoverService = camelContext . getExecutorServiceManager ( arg ) . newScheduledThreadPool ( arg ) ;
recoverService = camelContext . getExecutorServiceManager ( arg ) . getScheduledExecutorService ( arg ) ;
deleteDirectory ( arg ) ;
deleteDirectory ( arg ) ;
deleteDirectory ( arg ) ;
deleteDirectory ( arg ) ;
deleteDirectory ( arg ) ;
deleteDirectory ( arg ) ;
deleteDirectory ( arg ) ;
redelivery . getRedeliveryPolicy ( arg ) . setRedeliveryDelay ( arg ) ;
<unk> ( arg ) ;
redeliveryDelayResult += redeliveryDelayResult * <unk> ;
redeliveryDelayResult = Math . round ( arg ) ;
redeliveryDelay = redeliverDelay ;
redeliveryDelay = delay ;
redeliveryDelayResult = maximumRedeliveryDelay ;
redeliveryDelayResult = <unk> ;
redeliveryDelayResult = redeliveryDelay ;
redeliveryDelay = currentRedeliveryPolicy . getRedeliveryDelay ( arg ) ;
<unk> ( arg ) ;
<unk> ( arg ) ;
registry . put ( arg ) ;
registerTypeConverter ( arg ) ;
registerTypeConverter ( arg ) ;
registry . put ( arg ) ;
registry . put ( arg ) ;
registry . lookupByNameAndType ( arg ) ;
<unk> = port ;
rejectedPolicy = defaultProfile2 . getRejectedPolicy ( arg ) ;
rejectedPolicy = defaultProfile . getRejectedPolicy ( arg ) ;
resourceURI = relatedURI . intern ( arg ) ;
resourceURI = relatedURI . intern ( arg ) ;
String <unk> = <unk> . get ( arg ) ;
relatedURI = FileUtil . <unk> ( arg ) ;
relevantDependencies = Collections . emptySet ( arg ) ;
relevantDependencies = Collections . emptySet ( arg ) ;
relevantDependencies = new HashSet < Artifact > ( arg ) ;
relevantDependencies = new HashSet < Artifact > ( arg ) ;
answer . setAbsoluteFileName ( arg ) ;
remote . setAbsoluteFileName ( arg ) ;
remote . setAbsoluteFileName ( arg ) ;
answer . <unk> ( arg ) ;
answer . <unk> ( arg ) ;
processStrategy . commit ( arg ) ;
processStrategy . rollback ( arg ) ;
<unk> ( arg ) ;
replaceFromWith ( arg ) ;
replaceFromWith ( arg ) ;
replaceFromWith ( arg ) ;
replaceFromWith ( arg ) ;
replaceFromWith ( arg ) ;
replaceFromWith ( arg ) ;
reply = <unk> ( arg ) ;
reply = context . getApplicationContext ( arg ) . getBean ( arg ) ;
this . <unk> = channel ;
replyManager = createReplyManager ( arg ) ;
replyManager = createReplyManager ( arg ) ;
replyManagerExecutorService = getCamelContext ( arg ) . getExecutorServiceManager ( arg ) . newSingleThreadScheduledExecutor ( arg ) ;
replyManagerExecutorService = getCamelContext ( arg ) . getExecutorServiceManager ( arg ) . getScheduledExecutorService ( arg ) ;
repo . setRecoveryInterval ( arg ) ;
repo = <unk> . <unk> ( arg ) ;
repo = context . getRegistry ( arg ) . lookupByNameAndType ( arg ) ;
repo = context . getRegistry ( arg ) . lookupByNameAndType ( arg ) ;
repo = new HawtDBAggregationRepository ( arg ) ;
repo = new HawtDBAggregationRepository ( arg ) ;
repo = new HawtDBAggregationRepository ( arg ) ;
repo = new HawtDBAggregationRepository ( arg ) ;
repo = new HawtDBAggregationRepository ( arg ) ;
repo = new HawtDBAggregationRepository ( arg ) ;
repo = new HawtDBAggregationRepository ( arg ) ;
Map <unk> = request . getParameterMap ( arg ) ;
<unk> ( arg ) ;
messageGateway . <unk> ( arg ) ;
messageGateway . <unk> ( arg ) ;
engine . setTimeout ( arg ) ;
this . resourceClasses = resourceClasses ;
<unk> = <unk> ( arg ) . send ( arg ) ;
producer . process ( arg ) ;
resourceURI = relatedURI ;
resourceURI = relatedURI ;
IOHelper . copyAndCloseInput ( arg ) ;
EntityUtils . consume ( arg ) ;
response = template . requestBody ( arg ) ;
response = template . requestBodyAndHeaders ( arg ) ;
<unk> ( arg ) ;
template . requestBody ( arg ) ;
template . requestBody ( arg ) ;
<unk> ( arg ) ;
result = queue + File . separator + ( ( Queue ) destination ) . <unk> ( arg ) + File . separator ;
result = <unk> + File . separator + ( ( <unk> ) destination ) . <unk> ( arg ) + File . separator ;
assertIsSatisfied ( arg ) ;
assertIsSatisfied ( arg ) ;
result . expectedBodiesReceivedInAnyOrder ( arg ) ;
result . expectedBodiesReceivedInAnyOrder ( arg ) ;
result . expectedBodiesReceived ( arg ) ;
result . expectedMinimumMessageCount ( arg ) ;
result . expectedMinimumMessageCount ( arg ) ;
result . expectedMinimumMessageCount ( arg ) ;
result . expectedMinimumMessageCount ( arg ) ;
result . expectedMinimumMessageCount ( arg ) ;
result . expectedMinimumMessageCount ( arg ) ;
result . expectedMinimumMessageCount ( arg ) ;
if ( source . hasProperties ( arg ) ) {
if ( source . hasProperties ( arg ) ) {
result . setResultWaitTime ( arg ) ;
result . setResultWaitTime ( arg ) ;
result . setResultWaitTime ( arg ) ;
result . setResultWaitTime ( arg ) ;
result . setResultWaitTime ( arg ) ;
result . <unk> ( arg ) ;
result = subExchange ;
result = execResult . getStdout ( arg ) != null ? execResult . getStdout ( arg ) : null ;
result = getDefaultValueForPrimitive ( arg ) ;
String result = <unk> . getLoanQuote ( arg ) ;
return createProcessorExchangePairsList ( arg ) ;
return newExchange ;
result = new SshResult ( arg ) ;
result = parallelLoanBroker . getLoanQuote ( arg ) ;
result = template . requestBodyAndHeader ( arg ) ;
resultEndpoint . assertIsSatisfied ( arg ) ;
assertMockEndpointsSatisfied ( arg ) ;
assertMockEndpointsSatisfied ( arg ) ;
assertMockEndpointsSatisfied ( arg ) ;
assertMockEndpointsSatisfied ( arg ) ;
assertMockEndpointsSatisfied ( arg ) ;
assertMockEndpointsSatisfied ( arg ) ;
assertMockEndpointsSatisfied ( arg ) ;
resultEndpoint . expectedBodiesReceivedInAnyOrder ( arg ) ;
resultEndpoint . expectedBodiesReceivedInAnyOrder ( arg ) ;
resultEndpoint . expectedBodiesReceivedInAnyOrder ( arg ) ;
resultEndpoint . expectedMinimumMessageCount ( arg ) ;
resultEndpoint . setResultWaitTime ( arg ) ;
resultEndpoint = context . getEndpoint ( arg ) ;
resultEndpoint = context . getEndpoint ( arg ) ;
resultEndpoint = context . getEndpoint ( arg ) ;
resultEndpoint = context . getEndpoint ( arg ) ;
resultEndpoint = context . getEndpoint ( arg ) ;
resultEndpoint = context . getEndpoint ( arg ) ;
resultEndpoint = context . getEndpoint ( arg ) ;
resultEndpoint = getMockEndpoint ( arg ) ;
resultEndpoint = getMockEndpoint ( arg ) ;
resultEndpoint = getMockEndpoint ( arg ) ;
resultEndpoint = getMockEndpoint ( arg ) ;
resultEndpoint = getMockEndpoint ( arg ) ;
resultEndpoint = getMockEndpoint ( arg ) ;
resultEndpoint = getMockEndpoint ( arg ) ;
resultEndpoint = getMockEndpoint ( arg ) ;
resultEndpoint = getMockEndpoint ( arg ) ;
resultEndpoint = getMockEndpoint ( arg ) ;
resultEndpoint = getMockEndpoint ( arg ) ;
resultEndpoint = getMockEndpoint ( arg ) ;
resultEndpoint = getMockEndpoint ( arg ) ;
resultEndpoint = getMockEndpoint ( arg ) ;
resultEndpoint = getMockEndpoint ( arg ) ;
resultEndpoint = getMockEndpoint ( arg ) ;
resultEndpoint = getMockEndpoint ( arg ) ;
resultEndpoint = getMockEndpoint ( arg ) ;
MockEndpoint resultEndpoint = getMockEndpoint ( arg ) ;
MockEndpoint resultEndpoint = getMockEndpoint ( arg ) ;
MockEndpoint resultEndpoint = getMockEndpoint ( arg ) ;
resultQName = XPathConstants . <unk> ;
resultQName = XPathConstants . <unk> ;
resultQName = XPathConstants . <unk> ;
resultQName = XPathConstants . <unk> ;
resultQName = XPathConstants . <unk> ;
resultWaitTime = 0 ;
results . assertIsSatisfied ( arg ) ;
results = entityManager . createQuery ( arg ) . getResultList ( arg ) ;
results = entityManager . createQuery ( arg ) . getResultList ( arg ) ;
results = entityManager . createQuery ( arg ) . getResultList ( arg ) ;
Map < Integer , List < String >> results = new HashMap < Integer , List < String >> ( arg ) ;
Map < Integer , List < String >> results = new HashMap < Integer , List < String >> ( arg ) ;
results = new HashMap < Integer , List < String >> ( arg ) ;
results = new HashMap < Integer , List < String >> ( arg ) ;
results = jpaTemplate . find ( arg ) ;
results = jpaTemplate . find ( arg ) ;
ServiceHelper . <unk> ( arg ) ;
answer = Sides . <unk> ;
answer = Sides . <unk> ;
answer = Sides . <unk> ;
answer = Sides . <unk> ;
answer = Sides . <unk> ;
RETRY . incrementAndGet ( arg ) ;
RETRY . incrementAndGet ( arg ) ;
RETRY . incrementAndGet ( arg ) ;
RETRY . incrementAndGet ( arg ) ;
RETRY . incrementAndGet ( arg ) ;
RETRY . incrementAndGet ( arg ) ;
return <unk> + description ( arg ) + ] ;
return  + getExpression ( arg ) +  <unk>  + <unk> ( arg ) +  ( <unk> ) ;
return ! isStoppingOrStopped ( arg ) ;
return ! ObjectHelper . equal ( arg ) ;
return ! attributeName . equals ( arg ) &&! attributeName . startsWith ( arg ) &&! attributeName . equals ( arg ) &&! attributeName . equals ( arg ) &&! attributeName . equals ( arg ) &&! attributeName . equals ( arg ) &&! attributeName . equals ( arg ) &&! attributeName . equals ( arg ) ;
return ! attributeName . equals ( arg ) &&! attributeName . startsWith ( arg ) &&! attributeName . equals ( arg ) &&! attributeName . equals ( arg ) &&! attributeName . equals ( arg ) &&! attributeName . equals ( arg ) &&! attributeName . equals ( arg ) ;
return ! <unk> . contains ( arg ) ;
return ! getEndpoint ( arg ) . getInProgressRepository ( arg ) . add ( arg ) ;
return ! endpoint . getInProgressRepository ( arg ) . add ( arg ) ;
return false ;
return ( arg ) && ( parameterTypes . length == 1 || ( parameterTypes . length == 2 && Exchange . class . <unk> ( arg ) ) ) ;
return ( arg ) && ( tracer . getTraceFilter ( arg ) == null || tracer . getTraceFilter ( arg ) . matches ( arg ) ) ;
return tracer . isEnabled ( arg ) && ( tracer . getTraceFilter ( arg ) == null || tracer . getTraceFilter ( arg ) . matches ( arg ) ) ;
return ( arg ) bean ;
return ( arg ) bean ;
return getCamelContext ( arg ) . resolvePropertyPlaceholders ( arg ) ;
return value . toString ( arg ) ;
return files . size ( arg ) >= 1 ;
return idx < Array . getLength ( arg ) ;
return ( arg ) < Array . getLength ( arg ) ;
return idx < nodeList . getLength ( arg ) ;
return Executors . newFixedThreadPool ( arg ) ;
return <unk> . newProxyInstance ( arg ) ;
return Math . round ( arg ) ;
return convertTo ( arg ) ;
return SpringCamelContext . springCamelContext ( arg ) ;
return SpringCamelContext . springCamelContext ( arg ) ;
return answer ;
return applicationContext . getBean ( arg ) ;
return applicationContext . getBean ( arg ) ;
return applicationContext . getBean ( arg ) ;
return applicationContext . getBean ( arg ) ;
return applicationContext . getBean ( arg ) ;
return applicationContext . getBean ( arg ) ;
return args . toArray ( arg ) ;
return args . toArray ( arg ) ;
return CastUtils . cast ( arg ) ;
return completionQueue . <unk> ( arg ) ;
return ( arg ) configuration . clone ( arg ) ;
return context . getBean ( arg ) ;
return context . getBean ( arg ) ;
return context . getBean ( arg ) ;
return type . cast ( arg ) ;
return endpoint . createExchange ( arg ) ;
return endpoint . createExchange ( arg ) ;
return entry . getKey ( arg ) ;
return CastUtils . cast ( arg ) ;
return exchange . getContext ( arg ) . getInjector ( arg ) . newInstance ( arg ) ;
return expression . evaluate ( arg ) ;
return f ;
return factoryBean . create ( arg ) ;
return getApplicationContext ( arg ) . getBean ( arg ) ;
return getCamelContext ( arg ) . getEndpoint ( arg ) ;
return getCamelContext ( arg ) . getEndpoint ( arg ) ;
return getCamelContext ( arg ) . getEndpoint ( arg ) ;
return getRouteboxEndpoint ( arg ) ;
return i . next ( arg ) ;
return map ;
return new DefaultExchange ( arg ) ;
return new DefaultExchange ( arg ) ;
return new <unk> ( arg ) ;
return ( arg ) new <unk> ( arg ) ;
return ( arg ) new <unk> ( arg ) ;
return service . echo ( arg ) ;
return endpoint ;
return super . getExchange ( arg ) ;
return ( arg ) template . requestBody ( arg ) ;
return this . applicationContext . getBean ( arg ) ;
return answer ;
return answer ;
return answer ;
return answer ;
return answer ;
return answer ;
return answer ;
return answer ;
return tokens . toArray ( arg ) ;
return type . <unk> ( arg ) ;
return ( arg ) camelContext . getInjector ( arg ) . newInstance ( arg ) ;
return type . cast ( arg ) ;
return ( arg ) new <unk> ( arg ) ;
return ( arg ) new <unk> ( arg ) ;
return ( arg ) < nodeList . getLength ( arg ) ;
return idx + 1 == 0 && ObjectHelper . isNotEmpty ( arg ) ;
return ++ idx == 0 && ObjectHelper . isNotEmpty ( arg ) ;
return <unk> . getAndIncrement ( arg ) ;
return <unk> . get ( arg ) ;
return port ;
return port ;
return port ;
return port ;
return age ;
return <unk> == 0x02 ? Alphabet . <unk> : Alphabet . valueOf ( arg ) ;
return null ;
return null ;
return albp . process ( arg ) ;
return BeanInfo . <unk> ( arg ) ;
return body ;
return getUnitOfWork ( arg ) != null && getUnitOfWork ( arg ) . isTransacted ( arg ) ;
return Text . class ;
return Text . class ;
return Builder . <unk> ( arg ) ;
return Builder . outBody ( arg ) ;
return Builder . body ( arg ) ;
return Builder . header ( arg ) ;
return Builder . outBody ( arg ) ;
return Builder . systemProperty ( arg ) ;
return Builder . systemProperty ( arg ) ;
return Builder . <unk> ( arg ) ;
return <unk> . simple ( arg ) ;
return XPathBuilder . xpath ( arg ) ;
return BusFactory . getThreadDefaultBus ( arg ) ;
return BusFactory . <unk> ( arg ) ;
rc = Byte . class ;
return Byte . valueOf ( arg ) ;
return number . <unk> ( arg ) ;
return NullWritable . class ;
return FloatWritable . class ;
return FloatWritable . class ;
return <unk> ;
return EHCacheUtil . createCacheManager ( arg ) ;
return EHCacheUtil . createCacheManager ( arg ) ;
return SpringCamelContext . class ;
return name ;
return context . <unk> ( arg ) ;
return <unk> . instance ;
return DefaultProducerTemplate . class ;
return createLruCache ( arg ) ;
return createLruCache ( arg ) ;
return <unk> ;
return <unk> ;
return choice ;
return Collections . emptySet ( arg ) ;
return Collections . emptySet ( arg ) ;
return Collections . emptyList ( arg ) . iterator ( arg ) ;
return Collections . emptyList ( arg ) ;
return Collections . emptyList ( arg ) ;
return Collections . emptyList ( arg ) ;
return Collections . emptyList ( arg ) ;
return Collections . emptyList ( arg ) ;
return Collections . emptyList ( arg ) ;
return Collections . emptyList ( arg ) ;
return Collections . emptyList ( arg ) ;
return Collections . emptyList ( arg ) ;
return Collections . emptyList ( arg ) ;
return Collections . emptyMap ( arg ) ;
return Collections . emptyMap ( arg ) ;
return Collections . < Class < ? >> emptySet ( arg ) ;
return Collections . < Class < ? >> emptySet ( arg ) ;
return <unk> ( arg ) ;
return Collections . EMPTY_LIST ;
return Collections . EMPTY_LIST ;
return findByTypeWithName ( arg ) ;
return createdById ;
return createdDate ;
return <unk> . class ;
return <unk> . class ;
return UuidGenerator . get ( arg ) . generateUuid ( arg ) ;
return CamelContext ( arg ) ;
return ConsumerTemplate . class ;
return DefaultMessageListenerContainer . <unk> ;
return <unk> + processor + ] ;
rc = Double . class ;
return Double . valueOf ( arg ) ;
return number . <unk> ( arg ) ;
return <unk> . class ;
return ExchangeHelper . createCopy ( arg ) ;
return camelContext . getExecutorServiceStrategy ( arg ) . newCachedThreadPool ( arg ) ;
return ExecutorServiceHelper . newCachedThreadPool ( arg ) ;
return ExecutorServiceHelper . newCachedThreadPool ( arg ) ;
return ExecutorServiceHelper . newCachedThreadPool ( arg ) ;
answer = ExpressionBuilder . convertToExpression ( arg ) ;
return ExpressionBuilder . <unk> ( arg ) ;
return ExpressionBuilder . systemProperty ( arg ) ;
answer = ExpressionBuilder . regexTokenizeExpression ( arg ) ;
return ExpressionBuilder . <unk> ( arg ) ;
answer = ExpressionBuilder . tokenizeExpression ( arg ) ;
answer = ExpressionBuilder . <unk> ( arg ) ;
answer = ExpressionBuilder . <unk> ( arg ) ;
return answer . createAndSetExpression ( arg ) ;
return answer . createAndSetExpression ( arg ) ;
return <unk> + super . getLabel ( arg ) + ] ;
return <unk> + getProcessors ( arg ) + ] ;
return File . <unk> ;
return super . getFileSeparator ( arg ) ;
return <unk> . class ;
rc = Float . class ;
return Float . valueOf ( arg ) ;
return number . <unk> ( arg ) ;
return <unk> . class ;
return <unk> + description ( arg ) + ] ;
return <unk> . toInputStream ( arg ) ;
return <unk> . <unk> ( arg ) ;
return GroovyRenderer . HEADER + buffer . toString ( arg ) + GroovyRenderer . <unk> ;
return GroovyRenderer . HEADER + buffer . toString ( arg ) + GroovyRenderer . <unk> ;
return <unk> + processor + ] ;
return CamelTargetAdapter . class ;
return <unk>  + me +  from  + <unk> ;
answer = INDEX_FACTORY . open ( arg ) ;
return IOHelper . getCharsetName ( arg ) ;
return toReader ( arg ) ;
return id ;
return id ;
return id ;
return <unk> ;
return <unk> + processor + ] ;
return <unk> . class ;
rc = Integer . class ;
return <unk> . compareTo ( arg ) ;
return Integer . valueOf ( arg ) ;
return rows ;
return isDeleted ;
return <unk> . <unk> ( arg ) ;
return LOG . <unk> ( arg ) ;
return JUL_LOG ;
return JUL_LOG ;
return JUL_LOG ;
return lastActivityDate ;
return lastModifiedById ;
return lastModifiedDate ;
return <unk> . <unk> ;
return routes . getClass ( arg ) ;
rc = Long . class ;
return Long . valueOf ( arg ) ;
return number . longValue ( arg ) ;
return DoubleWritable . class ;
return DoubleWritable . class ;
return DefaultExchangeHolder . marshal ( arg ) ;
return DefaultExchangeHolder . marshal ( arg ) ;
return Multicast + getEndpoints ( arg ) ;
return Multicast + getProcessors ( arg ) ;
return <unk> + getProcessors ( arg ) + ] ;
return multicast ;
return prefix <unk> <unk> ( arg ) ;
return name ;
return name ;
return <unk> . class ;
return ObjectConverter . <unk> ( arg ) ;
return ObjectHelper . equal ( arg ) && ObjectHelper . equal ( arg ) && ObjectHelper . equal ( arg ) ;
return ObjectHelper . equal ( arg ) && ObjectHelper . equal ( arg ) ;
return ObjectHelper . equal ( arg ) && ObjectHelper . equal ( arg ) ;
return ObjectHelper . equal ( arg ) ;
return ObjectHelper . equal ( arg ) ;
return ObjectHelper . equal ( arg ) ;
return ObjectHelper . isNotEmpty ( arg ) ;
return ObjectHelper . isEmpty ( arg ) || <unk> . equals ( arg ) ;
return ObjectConverter . toBoolean ( arg ) ;
return ObjectConverter . toBoolean ( arg ) ;
return onCompletion ;
return <unk> + processor + ] ;
return new OsgiTypeConverter ( arg ) ;
return new OsgiTypeConverter ( arg ) ;
return outBody ;
return ownerId ;
return Pipeline + getEndpoints ( arg ) ;
return Pipeline + getProcessors ( arg ) ;
return <unk> + getProcessors ( arg ) + ] ;
return pipeline ;
return onNewPredicate ( arg ) ;
return onNewPredicate ( arg ) ;
return onNewPredicate ( arg ) ;
return onNewPredicate ( arg ) ;
return onNewPredicate ( arg ) ;
return onNewPredicate ( arg ) ;
return onNewPredicate ( arg ) ;
return onNewPredicate ( arg ) ;
return onNewPredicate ( arg ) ;
return onNewPredicate ( arg ) ;
return ExpressionToPredicateAdapter . toPredicate ( arg ) ;
return ExpressionToPredicateAdapter . toPredicate ( arg ) ;
return ExpressionToPredicateAdapter . toPredicate ( arg ) ;
return ExpressionToPredicateAdapter . toPredicate ( arg ) ;
return ExpressionToPredicateAdapter . toPredicate ( arg ) ;
return ExpressionToPredicateAdapter . toPredicate ( arg ) ;
return ExpressionToPredicateAdapter . toPredicate ( arg ) ;
return ExpressionToPredicateAdapter . toPredicate ( arg ) ;
return <unk> . <unk> ( arg ) ;
return resequencer ;
return <unk> ( arg ) ;
return rollback ;
return Route  + getId ( arg ) ;
return <unk> ;
return ( arg ) &&! <unk> . <unk> ( arg ) ;
return expression ( arg ) ;
return <unk> ;
return ServiceStatus . <unk> ;
return getConfiguration ( arg ) . <unk> ( arg ) ;
rc = Short . class ;
return Short . valueOf ( arg ) ;
return number . <unk> ( arg ) ;
return ShrinkWrap . create ( arg ) . addPackage ( arg ) . addPackage ( arg ) . addPackage ( arg ) . addAsManifestResource ( arg ) ;
return ShrinkWrap . create ( arg ) . addPackage ( arg ) . addPackage ( arg ) . addClass ( arg ) . addClass ( arg ) . addAsManifestResource ( arg ) ;
return ShrinkWrap . create ( arg ) . addPackage ( arg ) . addAsManifestResource ( arg ) ;
return BusFactory . newInstance ( arg ) . createBus ( arg ) ;
return SpringCamelContext . springCamelContext ( arg ) ;
return Stop ;
return <unk> + processor + ] ;
return StreamCachingInterceptor ( arg ) ;
return <unk> ;
return String . format ( arg ) ;
return new Date ( arg ) ;
return systemModstamp ;
return IntWritable . class ;
return IntWritable . class ;
return <unk> ;
return rc ;
return ObjectHelper . <unk> ( arg ) ;
return exchange . getContext ( arg ) . getUnitOfWorkFactory ( arg ) . createUnitOfWork ( arg ) ;
return UnitOfWork ( arg ) ;
return UnsafeUriCharactersEncoder . encodeHttpURI ( arg ) ;
return StringHelper . sanitize ( arg ) ;
return activityRules ;
return resolvePropertyPlaceholders ( arg ) ;
return resolvePropertyPlaceholders ( arg ) ;
return adr ;
return adr ;
return <unk> ;
return <unk> + description ( arg ) + ] ;
return aggregationCount . get ( arg ) ;
return aggregate ;
return AsyncProcessorHelper . process ( arg ) ;
return <unk> ;
return allowDuplicates != null && allowDuplicates ;
return annotation . value ( arg ) ;
return clause ;
return clause ;
return clause ;
processor = answer . get ( arg ) ;
return <unk> ;
return <unk> ? <unk> : all ;
return ( arg ) applicationContext . getBean ( arg ) ;
return <unk> . <unk> ( arg ) ;
return tokens ;
return AsyncProcessorHelper . process ( arg ) ;
return 0 ;
return attributeName != null &&! ID_ATTRIBUTE . equals ( arg ) &&! attributeName . equals ( arg ) &&! attributeName . startsWith ( arg ) ;
return attributeName != null &&! ID_ATTRIBUTE . equals ( arg ) &&! attributeName . equals ( arg ) &&! attributeName . startsWith ( arg ) &&! attributeName . equals ( arg ) &&! attributeName . equals ( arg ) &&! attributeName . equals ( arg ) ;
return awaitExistence ;
return ObjectHelper . <unk> ( arg ) + ( + ObjectHelper . <unk> ( arg ) + ) ;
return beanType ;
return getBinding ( arg ) . getBody ( arg ) ;
return ( arg ) getProperty ( arg ) ;
return resolvePropertyPlaceholders ( arg ) ;
answer = block . createExpression ( arg ) ;
answer = block . createExpression ( arg ) ;
return lookupByName ( arg ) ;
return body ;
return body ;
return binding . getBody ( arg ) ;
return strategy . <unk> ( arg ) ;
return getRouteList ( arg ) ;
return getRouteList ( arg ) ;
return getRouteList ( arg ) ;
return getRouteList ( arg ) ;
return getRouteList ( arg ) ;
return getRouteList ( arg ) ;
return getRouteList ( arg ) ;
return getRouteList ( arg ) ;
return getRouteList ( arg ) ;
return getRouteList ( arg ) ;
return getRouteList ( arg ) ;
return builder . getRouteList ( arg ) ;
return builder . getRouteList ( arg ) ;
return builder . getRouteList ( arg ) ;
return builder . getRouteList ( arg ) ;
return builder . getRouteList ( arg ) ;
return builder . getRouteList ( arg ) ;
return builder . getRouteList ( arg ) ;
return builder . getRouteList ( arg ) ;
return builder . getRouteList ( arg ) ;
return builder . getRouteList ( arg ) ;
return builder . getRouteList ( arg ) ;
return bundleContext . getBundle ( arg ) . <unk> ( arg ) ;
return CamelContextHelper . <unk> ( arg ) ;
return camelContext . getExecutorServiceManager ( arg ) . newCachedThreadPool ( arg ) ;
return camelContext . getExecutorServiceStrategy ( arg ) . newCachedThreadPool ( arg ) ;
return true . equals ( arg ) ? Boolean . TRUE : Boolean . FALSE ;
return config . <unk> ( arg ) ;
return IOConverter . normalizeCharset ( arg ) ;
return childServices != null && childServices . remove ( arg ) ;
answer = client . <unk> ( arg ) ;
return this . client . deleteFile ( arg ) ;
answer = client . storeFile ( arg ) ;
return <unk> . get ( arg ) ;
return client ;
return <unk> ( arg ) >= 0 ;
return <unk> != null ;
return completionFromBatchConsumer != null && completionFromBatchConsumer ;
return getEntityManagerFactory ( arg ) . createEntityManager ( arg ) ;
return <unk> ;
return getComponent ( arg ) . <unk> ( arg ) ;
return <unk> ;
return configuration . getAmazonSDBClient ( arg ) != null ? configuration . getAmazonSDBClient ( arg ) : <unk> ( arg ) ;
return getConfiguration ( arg ) . <unk> ( arg ) ;
return ( arg ) . remoteServerInformation ( arg ) ;
answer = <unk> ( arg ) ;
answer = <unk> ( arg ) ;
return uri ;
return consumer . getEndpoint ( arg ) . getNettyHttpBinding ( arg ) . fromCamelMessage ( arg ) ;
return consumer . getEndpoint ( arg ) . getNettyHttpBinding ( arg ) . fromCamelMessage ( arg ) ;
return getConsumerCache ( arg ) . receive ( arg ) ;
return getConsumerCache ( arg ) . receive ( arg ) ;
return getConsumerCache ( arg ) . receiveNoWait ( arg ) ;
return CONSUMERS . get ( arg ) ;
return camelContext . getEndpoint ( arg ) ;
return camelContext . getManagementStrategy ( arg ) ;
return context . getRegistry ( arg ) . lookupByNameAndType ( arg ) ;
return context . getRegistry ( arg ) . lookupByNameAndType ( arg ) ;
return context . getRegistry ( arg ) . lookupByNameAndType ( arg ) ;
return context . getRegistry ( arg ) . lookupByNameAndType ( arg ) ;
return context . getRegistry ( arg ) . lookupByNameAndType ( arg ) ;
return context . getRegistry ( arg ) . lookupByNameAndType ( arg ) ;
return camelContext . getTypeConverter ( arg ) . convertTo ( arg ) ;
return camelContext . getTypeConverter ( arg ) . convertTo ( arg ) ;
return camelContext . getTypeConverter ( arg ) . convertTo ( arg ) ;
return camelContext . getTypeConverter ( arg ) . convertTo ( arg ) ;
return camelContext . getTypeConverter ( arg ) . convertTo ( arg ) ;
return camelContext . getTypeConverter ( arg ) . convertTo ( arg ) ;
return camelContext . getTypeConverter ( arg ) . convertTo ( arg ) ;
endpoint = context . resolveEndpoint ( arg ) ;
return camelContext ;
return contextPath != null ? contextPath : super . getContextPath ( arg ) ;
return contextPath != null ? contextPath : super . getContextPath ( arg ) ;
return config . <unk> ( arg ) ;
return mapper . map ( arg ) ;
return data ;
return AsyncProcessorHelper . process ( arg ) ;
return copy ;
return copy != null ? copy : true ;
return cos . getWrappedInputStream ( arg ) ;
return cos . getWrappedInputStream ( arg ) ;
return cos . newStreamCache ( arg ) ;
return cos . newStreamCache ( arg ) ;
return <unk> . get ( arg ) ;
return receivedExchanges . size ( arg ) ;
return endpoint ;
return new GenericFileExchange ( arg ) ;
return this . createChildProcessor ( arg ) ;
return this . createChildProcessor ( arg ) ;
return this . createChildProcessor ( arg ) ;
answer = <unk> ( arg ) ;
answer = createProcessorExchangePairsList ( arg ) ;
return SpringCamelContext . springCamelContext ( arg ) ;
return SpringCamelContext . springCamelContext ( arg ) ;
answer = created ;
return CreatedById ;
return CreatedDate ;
return Array . get ( arg ) ;
return current . get ( arg ) == number ;
return current . get ( arg ) == number ;
return current . get ( arg ) == number ;
return current . get ( arg ) >= number ;
return current . get ( arg ) >= number ;
return current . get ( arg ) >= number ;
return current . get ( arg ) >= number ;
return null ;
return customId != null && customId ;
return <unk> ( arg ) ;
return <unk> ;
return <unk> ;
executorService = <unk> . getExecutorService ( arg ) ;
return false ;
return decoders . isEmpty ( arg ) ? null : decoders . get ( arg ) ;
return resolvePropertyPlaceholders ( arg ) ;
return resolvePropertyPlaceholders ( arg ) ;
return getThreadPoolProfile ( arg ) ;
return getThreadPoolProfile ( arg ) ;
return <unk> + getExpression ( arg ) + ] ;
return delay ;
return <unk> ( arg ) ;
return findByTypeWithName ( arg ) ;
return <unk> ( arg ) ;
return <unk> ( arg ) ;
return URISupport . <unk> ( arg ) ;
return recipients . get ( arg ) ;
return <unk> ;
return discardOnCompletionTimeout != null && discardOnCompletionTimeout ;
return HttpHelper . deserializeJavaObjectFromStream ( arg ) ;
return HttpHelper . deserializeJavaObjectFromStream ( arg ) ;
return match ( arg ) ;
return <unk> ( arg ) ;
return done . get ( arg ) ;
return eager != null ? eager : true ;
return eagerCheckCompletion != null && eagerCheckCompletion ;
return encoders . isEmpty ( arg ) ? null : encoders . get ( arg ) ;
return config . <unk> ( arg ) ;
return config . <unk> ( arg ) ;
return endpoint + <unk> . incrementAndGet ( arg ) ;
return ( arg ) endpoint . createExchange ( arg ) ;
return ( arg ) endpoint . createExchange ( arg ) ;
return ( arg ) endpoint . createExchange ( arg ) ;
return getEndpoint ( arg ) . getBinding ( arg ) ;
return getEndpoint ( arg ) . getBinding ( arg ) ;
return getEndpoint ( arg ) . getCamelContext ( arg ) . getTypeConverter ( arg ) . convertTo ( arg ) ;
return endpoint . getTempPrefix ( arg ) + fileName ;
return endpoint . remoteServerInformation ( arg ) ;
return endpoint . remoteServerInformation ( arg ) ;
return uri ;
return getEndpoint ( arg ) . getExchanges ( arg ) . size ( arg ) ;
return getEndpoint ( arg ) . getPath ( arg ) ;
return getEndpoint ( arg ) . getPath ( arg ) ;
return endpoint . getConfiguration ( arg ) . getRequestTimeout ( arg ) ;
return <unk> ( arg ) ;
return endpoint . getSqlMapClient ( arg ) . getDataSource ( arg ) . getConnection ( arg ) ;
return endpoint . getSqlMapClient ( arg ) . getDataSource ( arg ) . getConnection ( arg ) ;
return dir . <unk> ( arg ) ;
return ( arg ) . remoteServerInformation ( arg ) ;
return ( arg ) super . getEndpoint ( arg ) ;
return ( arg ) super . getEndpoint ( arg ) ;
return ( arg ) super . getEndpoint ( arg ) ;
return ( arg ) super . getEndpoint ( arg ) ;
return encode ( arg ) ;
return getEndpointUri ( arg ) . <unk> ( arg ) * <unk> + 1 ;
return config . <unk> ( arg ) ;
return er . resolveEndpoint ( arg ) ;
answer = er . resolveEndpoint ( arg ) ;
return ( arg ) errorHandlerBuilder ;
return <unk> . evaluate ( arg ) + right . evaluate ( arg ) ;
return ObjectHelper . evaluateValuePredicate ( arg ) ;
return ObjectHelper . evaluateValuePredicate ( arg ) ;
return event . getSeverity ( arg ) == ValidationEvent . WARNING ;
return event . getSeverity ( arg ) == ValidationEvent . WARNING ;
return event instanceof <unk> ;
return null ;
return answer ;
return answer ;
return answer ;
return exchange != null ? exchange . getProperty ( arg ) : null ;
return exchange . getContext ( arg ) . getProperty ( arg ) ;
return exchange . getContext ( arg ) . getRegistry ( arg ) . lookupByName ( arg ) ;
return exchange . getContext ( arg ) . getRegistry ( arg ) . lookupByName ( arg ) ;
return createExpression ( arg ) . evaluate ( arg ) ;
return exchange . getException ( arg ) == null || ExchangeHelper . isFailureHandled ( arg ) || ExchangeHelper . <unk> ( arg ) ;
return exchange . getException ( arg ) == null || ExchangeHelper . isFailureHandled ( arg ) || ExchangeHelper . <unk> ( arg ) ;
return exchange . getOut ( arg ) . isFault ( arg ) ? exchange . getOut ( arg ) . getBody ( arg ) : null ;
return exchange . getOut ( arg ) . isFault ( arg ) ? exchange . getOut ( arg ) . getBody ( arg ) : null ;
return exchange . get ( arg ) . getIn ( arg ) . getBody ( arg ) ;
return MessageHelper . getContentType ( arg ) ;
return exchange . get ( arg ) . getOut ( arg ) . getHeader ( arg ) ;
return exchange . getOut ( arg ) . getBody ( arg ) ;
return exchange . getProperty ( arg ) ;
return new TreeMap < String , Object > ( arg ) ;
return exchange . getProperty ( arg ) != null || exchange . getIn ( arg ) . getHeader ( arg ) != null ;
return exchange == null ? <unk> : exchange . getProperty ( arg ) ;
return exchange . getOut ( arg ) ;
return prefix + exchange . toString ( arg ) ;
return exchange . toString ( arg ) ;
return filter . <unk> ( arg ) ;
return explicitQosEnabled != null ? explicitQosEnabled : false ;
return jxpath ( arg ) ;
return answer ;
extractResultBody ( arg ) ;
extractResultBody ( arg ) ;
extractResultBody ( arg ) ;
extractResultBody ( arg ) ;
return ( arg ) f ;
return <unk> ;
return 0 ;
return true ;
return true ;
return true ;
return true ;
return true ;
return true ;
return true ;
return true ;
return true ;
return true ;
return true ;
return true ;
return true ;
return true ;
return true ;
return true ;
return true ;
return true ;
return true ;
return true ;
return true ;
return getFault ( arg ) ;
return file != null ? file . getBody ( arg ) : super . <unk> ( arg ) ;
return ( arg ) getProperty ( arg ) ;
return <unk> ;
return <unk>  + predicate +  <unk>  + getProcessor ( arg ) + ] ;
return filterProcessor . processNext ( arg ) ;
return filter . processNext ( arg ) ;
return String . format ( arg ) ;
return String . format ( arg ) ;
return baseEndpoint . getFormat ( arg ) ;
return baseEndpoint . getFormat ( arg ) ;
return ids ;
return scheduler . <unk> ( arg ) ;
return file . getBody ( arg ) ;
return file ;
return file ;
return lookupByName ( arg ) ;
return <unk> + fileName + ] ;
return <unk> ( arg ) . <unk> ( arg ) . <unk> ( arg ) ;
return getCamelContext ( arg ) . getRegistry ( arg ) . lookupByNameAndType ( arg ) ;
return getCamelContext ( arg ) . getRegistry ( arg ) . findByTypeWithName ( arg ) ;
return applicationContext ;
return getContext ( arg ) . getExchangeConverter ( arg ) . convertTo ( arg ) ;
return getCamelContext ( arg ) . getExchangeConverter ( arg ) . convertTo ( arg ) ;
return ExchangeHelper . convertToType ( arg ) ;
return getContext ( arg ) . getEndpoint ( arg ) ;
return <unk> . <unk> ( arg ) ;
return <unk> ( arg ) . <unk> ( arg ) ;
return getContainer ( arg ) . getEndpointResolver ( arg ) . <unk> ( arg ) ;
return <unk> . equals ( arg ) ? new DigitalSignatureProducer ( arg ) : new DigitalSignatureProducer ( arg ) ;
return getDTO ( arg ) . getEndpoints ( arg ) ;
return <unk> ( arg ) . getDTO ( arg ) . getEndpoints ( arg ) ;
result = <unk> ( arg ) . <unk> ( arg ) ;
return <unk>  + getExceptionClasses ( arg ) + ] ;
return CxfBinding . <unk> ( arg ) ;
return getEndpoint ( arg ) . getBinding ( arg ) . <unk> ( arg ) ;
return getIn ( arg ) . getMessage ( arg ) ;
return getOut ( arg ) . getMessage ( arg ) ;
return getContainer ( arg ) . getExchangeConverter ( arg ) . convertTo ( arg ) ;
return getReceivedExchanges ( arg ) . get ( arg ) ;
return getReceivedExchanges ( arg ) . size ( arg ) ;
return UuidGenerator . <unk> ( arg ) ;
return endpoint . getTempPrefix ( arg ) + fileName ;
return <unk> ;
return <unk> ( arg ) ;
return CamelBlueprintHelper . getOsgiService ( arg ) ;
return CamelBlueprintHelper . getOsgiService ( arg ) ;
return CamelBlueprintHelper . getOsgiService ( arg ) ;
return CamelBlueprintHelper . getOsgiService ( arg ) ;
return getFault ( arg ) . <unk> ( arg ) ;
return 0 ;
return <unk> ( arg ) . getBean ( arg ) ;
return processor . process ( arg ) ;
return endpoint . <unk> ( arg ) ;
return getReceivedExchange ( arg ) ;
return counter ;
return getRedeliveryDelay ( arg ) ;
return getDelegate ( arg ) . convertTo ( arg ) ;
return getDelegate ( arg ) . convertTo ( arg ) ;
return getDelegate ( arg ) . mandatoryConvertTo ( arg ) ;
return getDelegate ( arg ) . mandatoryConvertTo ( arg ) ;
return <unk> ;
return Stop ;
return getComponent ( arg ) . getHeaderFilterStrategy ( arg ) ;
return getComponent ( arg ) . <unk> ( arg ) ;
return getEndpoint ( arg ) . <unk> ( arg ) . <unk> ( arg ) ;
return <unk> ( arg ) . getTransactionCommitStrategy ( arg ) ;
return getEndpoint ( arg ) . getConnectionResource ( arg ) ;
return getEndpoint ( arg ) . <unk> ( arg ) ;
return getEndpoint ( arg ) . getDestinationName ( arg ) ;
return getEndpoint ( arg ) . <unk> ( arg ) ;
return getEndpoint ( arg ) . <unk> ( arg ) ;
return getEndpoint ( arg ) . <unk> ( arg ) ;
return getEndpoint ( arg ) . <unk> ( arg ) ;
return getEndpoint ( arg ) . <unk> ( arg ) ;
return getEndpoint ( arg ) . getTransactionCommitStrategy ( arg ) ;
return getEndpoint ( arg ) . <unk> ( arg ) ;
return getEndpoint ( arg ) . <unk> ( arg ) ;
return getEndpoint ( arg ) . isTransacted ( arg ) ;
return getManagementStrategy ( arg ) . manageProcessor ( arg ) ;
return getThrottler ( arg ) . <unk> ( arg ) ;
return createUnmarshaller ( arg ) . unmarshal ( arg ) ;
return groupExchanges != null && groupExchanges ;
return getOperations ( arg ) != null ;
return headerValue != null &&! getIgnoreJmsHeaders ( arg ) . contains ( arg ) && ObjectHelper . <unk> ( arg ) ;
return headerValue != null &&! getIgnoreJmsHeaders ( arg ) . contains ( arg ) ;
return headerValue ;
return headerValue ;
return properties ;
return 0 ;
return httpUri . getPath ( arg ) . length ( arg ) == 0 ? / : httpUri . getPath ( arg ) ;
return httpUri . getPath ( arg ) . length ( arg ) == 0 ? / : httpUri . getPath ( arg ) ;
return baseEndpoint . <unk> ( arg ) ;
return baseEndpoint . getConnection ( arg ) ;
return Id ;
return Id ;
return Id ;
return <unk> . generateUuid ( arg ) ;
return idempotent != null ? idempotent : false ;
return idx == 0 && ( <unk> || ObjectHelper . isNotEmpty ( arg ) ) ;
return ignoreInvalidCorrelationKeys != null && ignoreInvalidCorrelationKeys ;
return ignoreInvalidEndpoints != null && ignoreInvalidEndpoints ;
return filter . <unk> ( arg ) ;
return index >= batchSize ;
return num >= batchSize ;
return INDEX_FACTORY . open ( arg ) ;
return ProcessorType . <unk> ( arg ) ;
return <unk> ( arg ) ;
return getInputStream ( arg ) . <unk> ( arg ) ;
return getInputStream ( arg ) . read ( arg ) ;
return INSTANCE ;
return INSTANCE ;
return <unk> + uri + ] ;
return <unk> ;
return interceptor . <unk> ( arg ) . idOrCreate ( arg ) ;
return IsDeleted ;
return enabled ;
return parallelProcessing ;
return true ;
return endpoint . getCamelContext ( arg ) . getStatus ( arg ) . isStarted ( arg ) && <unk> ( arg ) &&! <unk> ( arg ) ;
return isStarted . get ( arg ) ;
return <unk> ( arg ) && isEnabled ( arg ) ;
return new DefaultMessageListenerContainer ( arg ) ;
return new <unk> ( arg ) ;
return <unk> . contains ( arg ) ;
return <unk> . contains ( arg ) ;
return jxpath ;
return jdbcTemplate . queryForObject ( arg ) ;
return expression ( arg ) ;
return expression ( arg ) ;
return expression ( arg ) ;
return expression ( arg ) ;
return expression ( arg ) ;
return expression ( arg ) ;
return expression ( arg ) ;
return expression ( arg ) ;
return expression ( arg ) ;
return expression ( arg ) ;
return expression ( arg ) ;
return expression ( arg ) ;
return expression ( arg ) ;
return expression ( arg ) ;
return delegate . <unk> ( arg ) ;
return last != null ? last . getLabel ( arg ) : null ;
return last != null ? last . getLabel ( arg ) : null ;
return LastActivityDate ;
return LastModifiedById ;
return LastModifiedDate ;
return lazyLoadTypeConverters != null ? lazyLoadTypeConverters : Boolean . FALSE ;
return first +   + operator +   + last ;
return <unk> ;
return list . toArray ( arg ) ;
return list != null && index < list . size ( arg ) ;
return LITERAL_MAP . get ( arg ) ;
return camelContext . getClassResolver ( arg ) . resolveClass ( arg ) ;
return loader != null ? loader . getClass ( arg ) . getName ( arg ) . startsWith ( arg ) : false ;
return localServer . getServiceAddress ( arg ) . getHostName ( arg ) ;
return localServer . getServiceAddress ( arg ) . getPort ( arg ) ;
return loggingFeature != null ;
return loggingFeature != null ;
return loggingFeature != null ;
return loggingFeature != null ;
return findByTypeWithName ( arg ) ;
return aggregated . size ( arg ) ;
return aggregated . values ( arg ) . iterator ( arg ) ;
return markRollbackOnly != null && markRollbackOnly ;
return markRollbackOnlyLast != null && markRollbackOnlyLast ;
return codec . unmarshallExchange ( arg ) ;
return matches && current . get ( arg ) == bodies . size ( arg ) ;
return matches && current . get ( arg ) >= bodies . size ( arg ) ;
return matches . get ( arg ) ;
return matches . get ( arg ) ;
return answer ;
return new MemoryIdempotentRepository ( arg ) ;
return idempotentRepository ;
return idempotentRepository ;
return httpRequest ;
return 0 ;
return <unk> ;
return extractUnmarshalResult ( arg ) ;
return extractUnmarshalResult ( arg ) ;
return extractUnmarshalResult ( arg ) ;
return moveNamePostfix != null || moveNamePrefix != null || endpoint . getConfiguration ( arg ) . getExpression ( arg ) != null ;
return moveNamePostfix != null || moveNamePrefix != null || <unk> != null || <unk> != null || moveExpression != null ;
return Name ;
return Name ;
return <unk> . get ( arg ) ;
return NAME_PARSER ;
return NAME_PARSER ;
return <unk> ( arg ) ;
return new AdviceWithBuilder < T > ( arg ) ;
return new AdviceWithBuilder < T > ( arg ) ;
return null ;
return new DefaultExchange ( arg ) ;
return new DefaultExchange ( arg ) ;
answer = new BeanExpression ( arg ) ;
answer = new BeanExpression ( arg ) ;
answer = new BeanExpression ( arg ) ;
return new BeanExpression ( arg ) ;
factory = new BindyFixedLengthFactory ( arg ) ;
return IOHelper . buffered ( arg ) ;
return IOHelper . buffered ( arg ) ;
return IOHelper . buffered ( arg ) ;
return IOHelper . buffered ( arg ) ;
return IOHelper . buffered ( arg ) ;
return IOHelper . buffered ( arg ) ;
answer = new BundleDescriptor ( arg ) ;
is = new ByteArrayInputStream ( arg ) ;
return new <unk> ( arg ) ;
return new CamelContext < E > ( arg ) ;
return new DefaultCamelContext < E > ( arg ) ;
return camelContext . createProducerTemplate ( arg ) ;
internal . addTask ( arg ) ;
return new <unk> ( arg ) ;
return new <unk> ( arg ) ;
processor = new CompositeProcessor < E > ( arg ) ;
return answer ;
return answer ;
return toDOMSource ( arg ) ;
return toDOMSource ( arg ) ;
return new DataFormatClause < ProcessorType < Type >> ( arg ) ;
return new DataFormatClause < ProcessorType < Type >> ( arg ) ;
return new DataTypeClause < ProcessorType < Type >> ( arg ) ;
return new DataTypeClause < ProcessorType < Type >> ( arg ) ;
return new DataTypeExpression < ProcessorType < Type >> ( arg ) ;
return new DataTypeExpression < ProcessorType < Type >> ( arg ) ;
return new DefaultErrorHandlerBuilder ( arg ) ;
return new DeadLetterChannelBuilder ( arg ) ;
return new DeadLetterChannelBuilder ( arg ) ;
return new <unk> ( arg ) ;
return new DefaultCamelContext ( arg ) ;
return new <unk> ( arg ) ;
return new <unk> ( arg ) ;
return new ErrorHandlerBuilderRef ( arg ) ;
return resolveFactoryFinder ( arg ) ;
return new JmsExchange ( arg ) ;
return new JmsExchange ( arg ) ;
return new EventDrivenPollingConsumer ( arg ) ;
return new EventDrivenPollingConsumer < E > ( arg ) ;
answer = new DefaultProducerTemplate ( arg ) ;
return new DefaultProducerTemplate ( arg ) ;
return new <unk> ( arg ) ;
return new <unk> ( arg ) ;
return new DirectProducer < E > ( arg ) ;
return new DirectProducer ( arg ) ;
return new DirectProducer ( arg ) ;
answer = new <unk> ( arg ) . parse ( arg ) ;
return new <unk> < T > ( arg ) ;
return new EventDrivenPollingConsumer < HttpExchange > ( arg ) ;
return new EventDrivenPollingConsumer ( arg ) ;
return new EventDrivenPollingConsumer ( arg ) ;
return new <unk> ( arg ) ;
return ObjectHelper . createExceptionIterator ( arg ) ;
return new <unk> ( arg ) ;
answer = new FailOverLoadBalancer ( arg ) ;
answer = new FailOverLoadBalancer ( arg ) ;
return new BufferedInputStream ( arg ) ;
return new FilterDefinition ( arg ) ;
return new <unk> ( arg ) ;
return new DefaultExchange ( arg ) ;
return new DefaultExchange ( arg ) ;
return new <unk> < T > ( arg ) ;
return new GenericMessage < Object > ( arg ) ;
return new GenericMessage < Object > ( arg ) ;
return new GenericMessage < Object > ( arg ) ;
return new <unk> ( arg ) ;
return new TreeMap < String , Endpoint > ( arg ) ;
return new ConcurrentHashMap < String , Object > ( arg ) ;
return new <unk> ( arg ) ;
return new DefaultExchange ( arg ) ;
return new MarkableInputStreamCache ( arg ) ;
return IOHelper . buffered ( arg ) ;
return asRequestEntity ( arg ) ;
return asRequestEntity ( arg ) ;
return asRequestEntity ( arg ) ;
return createExchange ( arg ) ;
return super . createProducer ( arg ) ;
return startService ( arg ) ;
return startService ( arg ) ;
return new LRUCache < Object , Object > ( arg ) ;
return new LRUSoftCache < Object , Object > ( arg ) ;
return new LRUSoftCache < K , V > ( arg ) ;
return new LRUCache < String , PollingConsumer > ( arg ) ;
return new LRUCache < String , Producer > ( arg ) ;
return new LinkedBlockingQueue < SedaEndpoint . Entry < E >> ( arg ) ;
return queueFactory . create ( arg ) ;
return queueFactory . create ( arg ) ;
return new LinkedBlockingQueue < SedaEndpoint . Entry > ( arg ) ;
return new LinkedBlockingQueue < Exchange > ( arg ) ;
return CastUtils . cast ( arg ) ;
return new <unk> < String > ( arg ) ;
return endpoint ;
return new CamelLogger ( arg ) ;
return new CamelLogger ( arg ) ;
return new CamelLogger ( arg ) ;
return new CamelLogger ( arg ) ;
return new <unk> ( arg ) ;
return new LoggingErrorHandlerBuilder ( arg ) ;
return new LoggingErrorHandlerBuilder ( arg ) ;
return new LoggingErrorHandlerBuilder ( arg ) ;
return new LoopDefinition ( arg ) ;
return createExchange ( arg ) ;
return createExchange ( arg ) ;
return new InputStreamCache ( arg ) ;
endpoint = new <unk> ( arg ) ;
return new DefaultExchange ( arg ) ;
return new MulticastProcessor ( arg ) ;
return new <unk> < Object > ( arg ) ;
return new NoErrorHandlerBuilder ( arg ) ;
return new NoErrorHandlerBuilder ( arg ) ;
return new <unk> ( arg ) ;
return new <unk> ( arg ) ;
return createObjectName ( arg ) ;
return createObjectName ( arg ) ;
return createObjectName ( arg ) ;
return createObjectName ( arg ) ;
return createObjectName ( arg ) ;
return IOHelper . buffered ( arg ) ;
return new Pipeline ( arg ) ;
return new BeanExchange ( arg ) ;
return createEndpoint ( arg ) ;
return <unk> ( arg ) ;
return new <unk> ( arg ) ;
return new DefaultExchange ( arg ) ;
return new SedaEndpoint < E > ( arg ) ;
return new <unk> < E > ( arg ) ;
answer = new RecipientList ( arg ) ;
answer = new RecipientList ( arg ) ;
return new RecipientList ( arg ) ;
return new <unk> ( arg ) ;
return new GenericFileExchange < T > ( arg ) ;
return new RemoteFileProducer < T > ( arg ) ;
return <unk> ( arg ) ;
return new RenameFileProcessStrategy ( arg ) ;
return new RenameFileProcessStrategy ( arg ) ;
return new RouteDefinition ( arg ) ;
return ExecutorServiceHelper . newScheduledThreadPool ( arg ) ;
return new <unk> ( arg ) ;
return new SedaEndpoint ( arg ) ;
return new <unk> ( arg ) ;
return new SendProcessor ( arg ) ;
result = new SimpleDateFormat ( arg ) ;
result = new SimpleDateFormat ( arg ) ;
return new <unk> < T > ( arg ) ;
return new <unk> ( arg ) ;
return new DefaultExchange ( arg ) ;
return new <unk> ( arg ) ;
return super . <unk> ( arg ) ;
return toInputStream ( arg ) ;
return createIterator ( arg ) ;
return new <unk> ( arg ) ;
return <unk> ( arg ) . <unk> ( arg ) ;
return new TransactionErrorHandler ( arg ) ;
return new TreeMap < Object , Object > ( arg ) ;
internal . addTask ( arg ) ;
return new ValueBuilder ( arg ) ;
return new ValueBuilder ( arg ) ;
return createExchange ( arg ) ;
return createExchange ( arg ) ;
return new XsltBuilder ( arg ) ;
return new <unk> ( arg ) ;
return new FailOverLoadBalancer ( arg ) ;
return new FailOverLoadBalancer ( arg ) ;
return ( arg ) ? newExchange . getException ( arg ) : oldExchange . getException ( arg ) ;
return nickname != null ? nickname : getUser ( arg ) ;
return <unk> ( arg ) ;
return new <unk> ( arg ) ;
return Byte . valueOf ( arg ) ;
return Double . valueOf ( arg ) ;
return Float . valueOf ( arg ) ;
return Integer . valueOf ( arg ) ;
return Long . valueOf ( arg ) ;
return Short . valueOf ( arg ) ;
return bean ;
return <unk> . getFileName ( arg ) . <unk> ( arg ) ;
return <unk> . getId ( arg ) . compareTo ( arg ) ;
return ! super . hasImpliedDecimalPosition ( arg ) ? super . getFormat ( arg ) . format ( arg ) : super . getFormat ( arg ) . format ( arg ) ;
return ! super . hasImpliedDecimalPosition ( arg ) ? super . getFormat ( arg ) . format ( arg ) : super . getFormat ( arg ) . format ( arg ) ;
return ! super . hasImpliedDecimalPosition ( arg ) ? super . getFormat ( arg ) . format ( arg ) : super . getFormat ( arg ) . format ( arg ) ;
return oldOstream . getNumOfWrittenMessages ( arg ) >= value ;
return oldOstream . getNumOfWrittenMessages ( arg ) >= value ;
return oldOstream . getNumOfWrittenMessages ( arg ) >= value ;
return oldOstream . getNumOfWrittenMessages ( arg ) >= value ;
return oldOstream . getNumOfWrittenMessages ( arg ) >= value ;
return oldOstream . getNumOfWrittenBytes ( arg ) >= value ;
return oldOstream . getNumOfWrittenBytes ( arg ) >= value ;
return oldOstream . getNumOfWrittenBytes ( arg ) >= value ;
return oldOstream . getNumOfWrittenBytes ( arg ) >= value ;
return oldOstream . getNumOfWrittenBytes ( arg ) >= value ;
return oldOstream . getNumOfWrittenBytes ( arg ) >= value ;
return oldOstream . getNumOfWrittenBytes ( arg ) >= value ;
return onCompleteOnly != null && onCompleteOnly ;
return onFailureOnly != null && onFailureOnly ;
return new ExpressionClause < Predicate > ( arg ) ;
return operation ;
return org . mvel2 . MVEL . executeExpression ( arg ) ;
return DefaultInstrumentationAgent . <unk> ;
return <unk> ;
return <unk> ;
return toString ( arg ) ;
return <unk> . contains ( arg ) ;
return AsyncProcessorHelper . process ( arg ) ;
return <unk> ;
return output ;
return Collections . EMPTY_LIST ;
return OwnerId ;
return parallelProcessing != null && parallelProcessing ;
return parallelProcessing != null && parallelProcessing ;
return parallelProcessing != null && parallelProcessing ;
return parallelProcessing != null && parallelProcessing ;
return parameter != null && parameter . trim ( arg ) . startsWith ( arg ) ;
return parent . endParent ( arg ) ;
answer = parentTypeConverter . convertTo ( arg ) ;
return <unk> ( arg ) ;
return ! ( parser . getValidationContext ( arg ) instanceof NoValidation ) ;
return ! ( parser . getValidationContext ( arg ) instanceof NoValidation ) ;
return participant != null ? participant : user ;
parent = path . getParent ( arg ) ;
parent = path . getParent ( arg ) ;
return path . replace ( arg ) ;
answer = pendingExchanges ;
answer = pendingExchanges ;
answer = pendingExchanges ;
answer = pendingExchanges ;
answer = pendingExchanges ;
answer = pendingExchanges ;
answer = pendingExchanges ;
answer = pendingExchanges ;
answer = pendingExchanges ;
return getShortName ( arg ) + [ + policy . toString ( arg ) + ] ;
return <unk> ( arg ) ;
return processor . process ( arg ) ;
return destination ;
return AsyncProcessorHelper . process ( arg ) ;
return AsyncProcessorHelper . process ( arg ) ;
return answer ;
return ( arg ) processorType . marshal ( arg ) ;
return ( arg ) processorType . unmarshal ( arg ) ;
return uri ;
return oldOstream . getNumOfWrittenMessages ( arg ) >= value ;
return oldOstream . getNumOfWrittenMessages ( arg ) >= value ;
return oldOstream . getNumOfWrittenMessages ( arg ) >= value ;
return new <unk> ( arg ) ;
return getProducerCache ( arg ) . send ( arg ) ;
return getProducerCache ( arg ) . send ( arg ) ;
return baseEndpoint . <unk> ( arg ) ;
return <unk> . equals ( arg ) ;
return provider == null ? null : provider . <unk> ( arg ) ;
return proxy . getServiceAddress ( arg ) . getHostName ( arg ) ;
return proxy . getServiceAddress ( arg ) . getPort ( arg ) ;
return resolvePropertyPlaceholders ( arg ) ;
return ref ;
answer = rc . getRoute ( arg ) . getId ( arg ) ;
strategy = readLockStrategy ;
return doReceive ( arg ) ;
return doReceive ( arg ) ;
return <unk> ( arg ) . size ( arg ) ;
return counter ;
return destination ;
return <unk> ( arg ) ;
return redelivery . getRedeliveryPolicy ( arg ) . getRedeliveryDelay ( arg ) ;
return redeliveryCounter <unk> getMaximumRedeliveries ( arg ) ;
return redeliveryCounter < getMaximumRedeliveries ( arg ) ;
return redeliveryDelayResult ;
return <unk> . type ( arg ) . toString ( arg ) ;
return regexTokenizeExpression ( arg ) ;
return registry . get ( arg ) ;
return registry . lookup ( arg ) ;
return registry . lookupByType ( arg ) ;
return registry . lookupByName ( arg ) ;
return registry . lookupByName ( arg ) ;
return registry . findByTypeWithName ( arg ) ;
return GZIPHelper . getInputStream ( arg ) ;
return <unk> . get ( arg ) ;
return configuration . getRequestTimeout ( arg ) ;
return engine . getTimeout ( arg ) ;
return resequence ;
return getMockEndpoint ( arg ) ;
return getMockEndpoint ( arg ) ;
return ResourceHelper . <unk> ( arg ) ;
return resolvePojoComponent ( arg ) ;
return <unk> ( arg ) ;
return extractResultBody ( arg ) ;
answer = result . length == 1 ? new Locale ( arg ) : new Locale ( arg ) ;
return answer ;
return retval ;
return retVal ;
return reverse != null && reverse ;
return <unk> ;
return AsyncProcessorHelper . process ( arg ) ;
return roundRobin != null && roundRobin ;
return roundRobin != null && roundRobin ;
return roundRobin != null && roundRobin . booleanValue ( arg ) ;
return roundRobin != null && roundRobin . booleanValue ( arg ) ;
return onException ( arg ) ;
return getRouteCollection ( arg ) . toString ( arg ) ;
return createOutputsProcessor ( arg ) ;
return this . createChildProcessor ( arg ) ;
return this . createChildProcessor ( arg ) ;
return routeContext . getCamelContext ( arg ) . <unk> ( arg ) ;
return routeContext . getCamelContext ( arg ) . <unk> ( arg ) ;
return CamelContextHelper . mandatoryLookup ( arg ) ;
return <unk> <unk> ;
return answer ;
return isStarted ( arg ) ;
r = s . <unk> ( arg ) ;
return o ;
return o ;
answer = sb . toString ( arg ) ;
return CastUtils . cast ( arg ) ;
return secureTagContents != null && secureTagContents ;
sendBody ( arg ) ;
sendBody ( arg ) ;
sendBodyAndHeader ( arg ) ;
sendBodyAndHeader ( arg ) ;
sendBodyAndHeaders ( arg ) ;
sendBodyAndHeaders ( arg ) ;
sendBodyAndProperty ( arg ) ;
sendBodyAndProperty ( arg ) ;
return sentTo . get ( arg ) ;
return ( arg ) || server . isRegistered ( arg ) ;
return getCamelContext ( arg ) . getRegistry ( arg ) . lookup ( arg ) ;
return setOperations . add ( arg ) != null ;
return setOperations . remove ( arg ) != null ;
return siMessage . getHeaders ( arg ) . get ( arg ) ;
return signatureHeaderName != null ? signatureHeaderName : <unk> . <unk> ;
return true ;
return true ;
return map . size ( arg ) > <unk> ;
return FileUtil . renameFile ( arg ) ;
return <unk> + getExpression ( arg ) + ] ;
return split ;
return config . <unk> ( arg ) ;
return result ;
return result ;
return <unk> . get ( arg ) ;
return started . get ( arg ) ;
return started . get ( arg ) &&! <unk> . get ( arg ) ;
return ( arg ) channel . <unk> ( arg ) ;
return tweets ;
return stopOnException != null && stopOnException ;
return stopOnException != null && stopOnException ;
return stopOnException != null && stopOnException ;
return stopped . get ( arg ) ;
return <unk> ( arg ) ;
return getStrategy ( arg ) . manageProcessor ( arg ) ;
return null ;
return streamCachingStrategy . getStatistics ( arg ) . <unk> ( arg ) ;
return streamCachingStrategy . getStatistics ( arg ) . <unk> ( arg ) ;
return streamCachingStrategy . getStatistics ( arg ) . <unk> ( arg ) ;
return streamCachingStrategy . getStatistics ( arg ) . <unk> ( arg ) ;
return streaming != null && streaming ;
return streaming != null && streaming ;
return streaming != null && streaming ;
return <unk> ( arg ) ;
return routeContext . lookup ( arg ) ;
return new <unk> ( arg ) ;
return CastUtils . cast ( arg ) ;
return super . <unk> ( arg ) ;
return ( arg ) ? property : super . getValue ( arg ) ;
return attributeName != null && super . <unk> ( arg ) &&! attributeName . equals ( arg ) ;
return processor . process ( arg ) ;
return processor . process ( arg ) ;
return processor . process ( arg ) ;
return processor . process ( arg ) ;
return processor . process ( arg ) ;
return processor . process ( arg ) ;
return processor . process ( arg ) ;
return processor . process ( arg ) ;
return processor . process ( arg ) ;
return super . process ( arg ) ;
return getComponent ( arg ) ;
return baseEndpoint . getConnection ( arg ) ;
return SystemModstamp ;
return new StreamCachingInterceptor ( arg ) ;
return te . getProperties ( arg ) . getTwitter ( arg ) . getMentionsTimeline ( arg ) ;
return te . getProperties ( arg ) . getTwitter ( arg ) . getDirectMessages ( arg ) ;
return te . getProperties ( arg ) . getTwitter ( arg ) . getHomeTimeline ( arg ) ;
return te . getProperties ( arg ) . getTwitter ( arg ) . getMentions ( arg ) ;
return te . getProperties ( arg ) . getTwitter ( arg ) . <unk> ( arg ) ;
return te . getProperties ( arg ) . getTwitter ( arg ) . getRetweetsOfMe ( arg ) ;
return te . getProperties ( arg ) . getTwitter ( arg ) . getUserTimeline ( arg ) ;
return echo  + text ;
return this . apiVersion ;
return this . description ;
return this . isActive ;
return this . notifyForFields ;
return this . notifyForOperations ;
return this . query ;
return this . ApiVersion ;
return <unk> ;
return borrowObject ( arg ) ;
return borrowObject ( arg ) ;
return ( arg ) ? certResource . substring ( arg ) : null ;
return new <unk> ( arg ) ;
return this . Description ;
return getComponent ( arg ) . getConnectionResource ( arg ) ;
return this . IsActive ;
return this . NotifyForFields ;
return this . NotifyForOperations ;
return producerCache ;
return build ( arg ) ;
return this . Query ;
return messageGateway . <unk> ( arg ) ;
return this . seed + sequence . getAndIncrement ( arg ) ;
return this . seed + sequence . getAndIncrement ( arg ) ;
return <unk> ;
return this . endParent ( arg ) ;
return this . endParent ( arg ) ;
return this == other || ( this . getClass ( arg ) == other . getClass ( arg ) && <unk> ) ;
return executor ;
return throttle ;
return <unk> ( arg ) != null ;
return timePeriodMillis . get ( arg ) ;
return <unk> ( arg ) != null ;
return timeout ;
return timeout ;
return timeout ;
return Math . <unk> ( arg ) ;
return <unk> ;
return destination . getEndpointUri ( arg ) ;
return exchange . getContext ( arg ) . getTypeConverter ( arg ) . convertTo ( arg ) ;
return new <unk> ( arg ) ;
return <unk> + description ( arg ) + ] ;
return type . cast ( arg ) ;
return type . cast ( arg ) ;
return answer ;
return ( arg ) && ( traceFilter == null || traceFilter . matches ( arg ) ) ;
return traceHandlers . get ( arg ) ;
return tracer . <unk> ( arg ) . <unk> ( arg ) ;
return trace ;
return <unk> ( arg ) ;
return resolvePropertyPlaceholders ( arg ) ;
return true . <unk> ( arg ) ? Boolean . TRUE : Boolean . FALSE ;
return Boolean . valueOf ( arg ) ;
return endpoint . <unk> ( arg ) ;
return tryProcessor != null || catchClauses != null &&! catchClauses . isEmpty ( arg ) || finallyProcessor != null ;
return type != null && ObjectHelper . hasAnnotation ( arg ) ;
return type != null && hasAnnotation ( arg ) ;
answer = blueprintContainer . <unk> ( arg ) ;
return type . getDataFormat ( arg ) ;
return type . <unk> ( arg ) ;
return definition . getOnWhen ( arg ) . getExpression ( arg ) . matches ( arg ) ;
return type . getOnWhen ( arg ) . getExpression ( arg ) . matches ( arg ) ;
return rc ;
return typeConverter . mandatoryConvertTo ( arg ) ;
return <unk> . toString ( arg ) ;
return marshaller . unmarshallExchange ( arg ) ;
xmlReader = staxConverter . createXMLStreamReader ( arg ) ;
xmlReader = staxConverter . createXMLStreamReader ( arg ) ;
return consumer . getEndpoint ( arg ) . getEndpointUri ( arg ) ;
return IOHelper . buffered ( arg ) ;
return <unk> . booleanValue ( arg ) ;
return <unk> ;
return useOriginalMessagePolicy != null && useOriginalMessagePolicy ;
return useOriginalMessagePolicy != null ;
return parser . getValidationContext ( arg ) instanceof NoValidation ;
return parser . getValidationContext ( arg ) instanceof NoValidation ;
return validate != null ? validate : true ;
return validation == null || validation . booleanValue ( arg ) ;
return validation != null ? validation : true ;
return false ;
return value ;
return value . <unk> ( arg ) ;
return value == null || value ;
return <unk> . toArray ( arg ) ;
return <unk> + destination . getEndpointUri ( arg ) + ] ;
return processor ;
return resolvePropertyPlaceholders ( arg ) ;
return delegate . xpath ( arg ) ;
return delegate . xpath ( arg ) ;
return delegate . xquery ( arg ) ;
return delegate . xquery ( arg ) ;
return <unk> ;
right = ExpressionBuilder . convertToExpression ( arg ) ;
<unk> = ExpressionBuilder . convertToExpression ( arg ) ;
route . getOutputs ( arg ) . add ( arg ) ;
route . getOutputs ( arg ) . add ( arg ) ;
route . <unk> ( arg ) ;
this . routeAdded = routeAdded ;
<unk> = component . resolveAndRemoveReferenceParameter ( arg ) ;
camelContext . addRouteDefinitions ( arg ) ;
getRouteCollection ( arg ) . setCamelContext ( arg ) ;
getRouteCollection ( arg ) . <unk> ( arg ) ;
routeContext . <unk> ( arg ) ;
routeContext . <unk> ( arg ) ;
routeContext . <unk> ( arg ) . add ( arg ) ;
<unk> ( arg ) ;
stopRouteService ( arg ) ;
stopRouteService ( arg ) ;
stopRouteService ( arg ) ;
routesToRemove . add ( arg ) ;
routesToRemove . add ( arg ) ;
addRoutes ( arg ) ;
answer . add ( arg ) ;
routes = new LinkedHashSet < Route > ( arg ) ;
s = mbsc . queryNames ( arg ) ;
s = mbsc . queryNames ( arg ) ;
s = mbsc . queryNames ( arg ) ;
s = mbsc . queryNames ( arg ) ;
s = mbsc . queryNames ( arg ) ;
s = mbsc . queryNames ( arg ) ;
s = CastUtils . cast ( arg ) ;
s = CastUtils . cast ( arg ) ;
s = CastUtils . cast ( arg ) ;
exchange . setIn ( arg ) ;
sb . append ( arg ) . append ( arg ) . append ( arg ) ;
sb . append ( arg ) . append ( arg ) . append ( arg ) ;
sb . append ( arg ) . append ( arg ) . append ( arg ) ;
sb . append ( arg ) . append ( arg ) . append ( arg ) ;
scheduled = routeContext . getCamelContext ( arg ) . getExecutorServiceManager ( arg ) . newDefaultScheduledThreadPool ( arg ) ;
scheduled = routeContext . getCamelContext ( arg ) . getExecutorServiceManager ( arg ) . newDefaultScheduledThreadPool ( arg ) ;
scheduler . <unk> ( arg ) ;
scheduler = getEndpoint ( arg ) . getCamelContext ( arg ) . getExecutorServiceManager ( arg ) . newSingleThreadScheduledExecutor ( arg ) ;
scheduler = getEndpoint ( arg ) . getCamelContext ( arg ) . getExecutorServiceManager ( arg ) . getScheduledExecutorService ( arg ) ;
<unk> = true ;
scheme = converter . convertTo ( arg ) ;
scheme = HttpHelper . isSecureConnection ( arg ) ? https : http ;
schemeSpecificPart = converter . convertTo ( arg ) ;
<unk> . <unk> ( arg ) ;
security . <unk> ( arg ) ;
security . <unk> ( arg ) ;
sendBody ( arg ) ;
sendBody ( arg ) ;
sendBody ( arg ) ;
sendBody ( arg ) ;
sendBody ( arg ) ;
sendBody ( arg ) ;
sendBody ( arg ) ;
sendBody ( arg ) ;
sendBody ( arg ) ;
sendBody ( arg ) ;
sendBody ( arg ) ;
sendOriginalFile ( arg ) ;
sendOriginalFile ( arg ) ;
template . sendBody ( arg ) ;
template . sendBody ( arg ) ;
<unk> ( arg ) ;
sentTo . clear ( arg ) ;
sentTo . set ( arg ) ;
sentTo . set ( arg ) ;
sentTo . set ( arg ) ;
getServer ( arg ) . <unk> ( arg ) ;
resetPartTypes ( arg ) ;
server . getEndpoint ( arg ) . <unk> ( arg ) . add ( arg ) ;
getServer ( arg ) . removeConnector ( arg ) ;
server . <unk> ( arg ) ;
<unk> . stop ( arg ) ;
server = ApnsUtils . prepareAndStartServer ( arg ) ;
server = ApnsUtils . prepareAndStartServer ( arg ) ;
server = ApnsUtils . prepareAndStartServer ( arg ) ;
server = ApnsUtils . prepareAndStartServer ( arg ) ;
<unk> ( arg ) ;
<unk> ( arg ) ;
<unk> . setOption ( arg ) ;
service . shutdownNow ( arg ) ;
service = new SubmitOrderedCompletionService < Object > ( arg ) ;
<unk> = ( List < Object > ) obj ;
serviceClass = <unk> . <unk> ( arg ) ;
serviceClass = CxfEndpointUtils . getServiceClass ( arg ) ;
serviceClass = <unk> . loadClass ( arg ) ;
<unk> = service ;
<unk> = services . keySet ( arg ) . iterator ( arg ) . next ( arg ) ;
if ( sr != null ) {
<unk> = url ;
<unk> = context . getRegistry ( arg ) . lookupByNameAndType ( arg ) ;
session . close ( arg ) ;
session . unbindAndClose ( arg ) ;
session . unbindAndClose ( arg ) ;
session . unbindAndClose ( arg ) ;
session . unbindAndClose ( arg ) ;
<unk> ( arg ) . <unk> ( arg ) ;
<unk> = <unk> . iterator ( arg ) . next ( arg ) ;
cache . put ( arg ) ;
set = converter . convertTo ( arg ) ;
set = CastUtils . cast ( arg ) ;
<unk> ( arg ) ;
<unk> ( arg ) ;
setResultWaitTime ( arg ) ;
setExpression ( arg ) ;
<unk> ( arg ) ;
filter . setExcludes ( arg ) ;
exp = bodyExpression ( arg ) ;
ExchangeHelper . <unk> ( arg ) ;
setDirectory ( arg ) ;
getOutputs ( arg ) . add ( arg ) ;
<unk> ( arg ) ;
setProperties ( arg ) ;
id = <unk> ( arg ) ;
filter . setIncludes ( arg ) ;
routeCollection . <unk> ( arg ) ;
setDelay ( arg ) ;
setLowercase ( arg ) ;
setLowercase ( arg ) ;
setLogExhausted ( arg ) ;
setExpression ( arg ) ;
setDataFormatName ( arg ) ;
setDataFormatName ( arg ) ;
setTimeout ( arg ) ;
setRelativeFilePath ( arg ) ;
setRelativeFilePath ( arg ) ;
setResultHandlerFactory ( arg ) ;
setResultHandlerFactory ( arg ) ;
setResultHandlerFactory ( arg ) ;
<unk> ( arg ) ;
<unk> ( arg ) ;
<unk> ( arg ) ;
<unk> ( arg ) ;
br . close ( arg ) ;
<unk> = new NettyServerBossPoolBuilder ( arg ) . withBossCount ( arg ) . build ( arg ) ;
nettySharedHttpServer . stop ( arg ) ;
nettySharedHttpServer = new <unk> ( arg ) ;
shutdown =! ( ( ShutdownAware ) consumer ) . <unk> ( arg ) ;
shutdownNow ( arg ) ;
shutdownNow ( arg ) ;
<unk> ( arg ) ;
<unk> . <unk> ( arg ) ;
siMessage . getHeaders ( arg ) . put ( arg ) ;
this . siMessage = message ;
<unk> . <unk> ( arg ) ;
simple . lookupByNameAndType ( arg ) ;
size += ( ( ShutdownAware ) consumer ) . <unk> ( arg ) ;
sizeCheck = 0 == sizeDifference ;
sizeCheck = sizeDifference == 0 ;
sizeCheck = ( sizeDifference == 0 ) ;
<unk> = 0 ;
IOHelper . close ( arg ) ;
IOHelper . close ( arg ) ;
IOHelper . close ( arg ) ;
IOHelper . close ( arg ) ;
source = converter . toDOMSource ( arg ) ;
source = converter . toDOMSource ( arg ) ;
source = exchange . getContext ( arg ) . getTypeConverter ( arg ) . tryConvertTo ( arg ) ;
source = exchange . getContext ( arg ) . getTypeConverter ( arg ) . tryConvertTo ( arg ) ;
source = exchange . getContext ( arg ) . getTypeConverter ( arg ) . tryConvertTo ( arg ) ;
source = exchange . getContext ( arg ) . getTypeConverter ( arg ) . tryConvertTo ( arg ) ;
source = exchange . getContext ( arg ) . getTypeConverter ( arg ) . tryConvertTo ( arg ) ;
source = exchange . getContext ( arg ) . getTypeConverter ( arg ) . tryConvertTo ( arg ) ;
source = exchange . getContext ( arg ) . getTypeConverter ( arg ) . tryConvertTo ( arg ) ;
source = exchange . getContext ( arg ) . getTypeConverter ( arg ) . tryConvertTo ( arg ) ;
source = xmlConverter . toDOMSource ( arg ) ;
sourceId = ( ( <unk> ) source ) . getShortName ( arg ) ;
<unk> . add ( arg ) ;
applicationContext . destroy ( arg ) ;
src = ( Source ) value ;
<unk> = <unk> ( arg ) ;
sslSocketConnector . getSslContextFactory ( arg ) . setKeyStorePath ( arg ) ;
sslSocketConnector . getSslContextFactory ( arg ) . setKeyStorePath ( arg ) ;
sslSocketConnector . getSslContextFactory ( arg ) . <unk> ( arg ) ;
sslSocketConnector = new SslSelectChannelConnector ( arg ) ;
<unk> ( arg ) ;
watch = new StopWatch ( arg ) ;
watch = new StopWatch ( arg ) ;
assertTrue ( arg ) ;
assertTrue ( arg ) ;
<unk> ( arg ) ;
startService ( arg ) ;
startService ( arg ) ;
startService ( arg ) ;
startService ( arg ) ;
startService ( arg ) ;
startTime = System . nanoTime ( arg ) ;
startTime = System . currentTimeMillis ( arg ) ;
<unk> ( arg ) ;
holder . <unk> ( arg ) ;
channel . setAttachment ( arg ) ;
channel . setAttachment ( arg ) ;
staticQueryContext . <unk> ( arg ) ;
staticQueryContext = getConfiguration ( arg ) . <unk> ( arg ) ;
<unk> ( arg ) ;
removeRouteDefinition ( arg ) ;
stopRoute ( arg ) ;
stopRoute ( arg ) ;
<unk> ( arg ) ;
shutdownServices ( arg ) ;
shutdownServices ( arg ) ;
shutdownServices ( arg ) ;
shutdownServices ( arg ) ;
stopped . set ( arg ) ;
Route <unk> = state . getRoute ( arg ) ;
processStrategy . commit ( arg ) ;
getStrategy ( arg ) . <unk> ( arg ) ;
getStrategy ( arg ) . manageObject ( arg ) ;
getStrategy ( arg ) . manageObject ( arg ) ;
getStrategy ( arg ) . manageObject ( arg ) ;
getStrategy ( arg ) . manageObject ( arg ) ;
getStrategy ( arg ) . manageObject ( arg ) ;
<unk> ( arg ) ;
strategy . <unk> ( arg ) ;
config . <unk> ( arg ) ;
getStrategy ( arg ) . unmanageObject ( arg ) ;
getStrategy ( arg ) . unmanageObject ( arg ) ;
getStrategy ( arg ) . unmanageObject ( arg ) ;
getStrategy ( arg ) . unmanageObject ( arg ) ;
strategy = <unk> ( arg ) ;
strategy = new <unk> ( arg ) ;
strategy = routeContext . mandatoryLookup ( arg ) ;
this . streamConfig = streamConfig ;
stream = <unk> ( arg ) ;
stream = IOHelper . buffered ( arg ) ;
stream = new BufferedInputStream ( arg ) ;
<unk> . <unk> ( arg ) ;
wrapped . <unk> ( arg ) ;
super . <unk> ( arg ) . remove ( arg ) ;
return super . processExchange ( arg ) ;
super . addService ( arg ) ;
super . addService ( arg ) ;
super . addService ( arg ) ;
super . addService ( arg ) ;
super . addService ( arg ) ;
super . addService ( arg ) ;
ds = new <unk> ( arg ) ;
BeanInfo <unk> = new BeanInfo ( arg ) ;
server = svrBean . create ( arg ) ;
server = svrBean . create ( arg ) ;
sync = new DefaultNodeSynchronization ( arg ) ;
sync = new DefaultNodeSynchronization ( arg ) ;
sync = new DefaultNodeSynchronization ( arg ) ;
sync = new DefaultNodeSynchronization ( arg ) ;
sync = new DefaultNodeSynchronization ( arg ) ;
sync = new DefaultNodeSynchronization ( arg ) ;
sync = new DefaultNodeSynchronization ( arg ) ;
sync = new DefaultNodeSynchronization ( arg ) ;
boolean sync = processExchange ( arg ) ;
tablePool . <unk> ( arg ) ;
table = context . getRegistry ( arg ) . lookupByNameAndType ( arg ) ;
table = context . getRegistry ( arg ) . lookupByNameAndType ( arg ) ;
table = context . getRegistry ( arg ) . lookupByNameAndType ( arg ) ;
table = context . getRegistry ( arg ) . lookupByNameAndType ( arg ) ;
table = context . getRegistry ( arg ) . lookupByNameAndType ( arg ) ;
table = context . getRegistry ( arg ) . lookupByNameAndType ( arg ) ;
table = context . getRegistry ( arg ) . lookupByNameAndType ( arg ) ;
table = context . getRegistry ( arg ) . lookupByNameAndType ( arg ) ;
table = context . getRegistry ( arg ) . lookupByNameAndType ( arg ) ;
table = context . getRegistry ( arg ) . lookupByNameAndType ( arg ) ;
FileUtil . createNewFile ( arg ) ;
super . proceed ( arg ) ;
target = ( ( DelegateProcessor ) target ) . getProcessor ( arg ) ;
target = lookupRegistry ( arg ) ;
target = lookupRegistry ( arg ) ;
target = <unk> ( arg ) ;
latch . countDown ( arg ) ;
Status <unk> = te . getProperties ( arg ) . getTwitter ( arg ) . updateStatus ( arg ) ;
te . getProperties ( arg ) . getTwitter ( arg ) . <unk> ( arg ) ;
te . getProperties ( arg ) . getTwitter ( arg ) . updateStatus ( arg ) ;
te . getProperties ( arg ) . getTwitter ( arg ) . updateStatus ( arg ) ;
<unk> . tearDownAfterClass ( arg ) ;
<unk> = <unk> ( arg ) ;
template . sendBody ( arg ) ;
template . sendBodyAndHeader ( arg ) ;
template . sendBodyAndHeader ( arg ) ;
template . sendBodyAndHeader ( arg ) ;
template . sendBodyAndHeader ( arg ) ;
template . sendBodyAndHeader ( arg ) ;
template . sendBodyAndHeader ( arg ) ;
template . sendBodyAndHeader ( arg ) ;
template . sendBodyAndHeader ( arg ) ;
template . sendBodyAndHeader ( arg ) ;
template . sendBodyAndHeader ( arg ) ;
template . sendBodyAndHeader ( arg ) ;
template . sendBodyAndHeader ( arg ) ;
template . sendBodyAndHeader ( arg ) ;
template . sendBodyAndHeader ( arg ) ;
template . sendBodyAndHeader ( mina:vm:
template . sendBodyAndHeader ( arg ) ;
template . sendBodyAndHeader ( arg ) ;
<unk> = false ;
jpaTemplate = endpoint . getTemplate ( arg ) ;
jpaTemplate = endpoint . getTemplate ( arg ) ;
template = context . createProducerTemplate ( arg ) ;
template = context . createProducerTemplate ( arg ) ;
template = context . createProducerTemplate ( arg ) ;
template = context . createProducerTemplate ( arg ) ;
template = context . createProducerTemplate ( arg ) ;
test . stream = BulkApiBatchIntegrationTest . class . getResourceAsStream ( arg ) ;
test . stream = BulkApiBatchIntegrationTest . class . getResourceAsStream ( arg ) ;
testDataFormat ( arg ) ;
testDataFormat ( arg ) ;
xmlsecTestHelper . testDecryption ( arg ) ;
xmlsecTestHelper . testDecryption ( arg ) ;
xmlsecTestHelper . testDecryption ( arg ) ;
xmlsecTestHelper . testDecryption ( arg ) ;
xmlsecTestHelper . testDecryption ( arg ) ;
xmlsecTestHelper . testDecryption ( arg ) ;
xmlsecTestHelper . testDecryption ( arg ) ;
xmlsecTestHelper . testEncryption ( arg ) ;
xmlsecTestHelper . testEncryption ( arg ) ;
xmlsecTestHelper . testEncryption ( arg ) ;
xmlsecTestHelper . testEncryption ( arg ) ;
xmlsecTestHelper . testEncryption ( arg ) ;
xmlsecTestHelper . testEncryption ( arg ) ;
xmlsecTestHelper . testEncryption ( arg ) ;
xmlsecTestHelper . testEncryption ( arg ) ;
<unk> ( arg ) ;
this . apiVersion = apiVersion ;
this . description = description ;
this . isActive = isActive ;
this . notifyForFields = notifyForFields ;
this . notifyForOperations = notifyForOperations ;
this . query = query ;
this . absoluteFileName = needToNormalize ( arg ) ? FileUtil . normalizePath ( arg ) : absoluteFileName ;
this . <unk> = normalizePathToProtocol ( arg ) ;
this . ApiVersion = apiVersion ;
this . armored = armored ;
this . attemptFileLock = attemptFileLock ;
this . awaitExistence = awaitExistence ;
<unk> ( arg ) ;
<unk> ( arg ) ;
setProperty ( arg ) ;
binding . setBody ( arg ) ;
cache . clear ( arg ) ;
camelContext = c ;
camelContextService = service ;
camelContextService = service ;
this . canonicalFileName = needToNormalize ( arg ) ? FileUtil . normalizePath ( arg ) : canonicalFileName ;
this . certResource = <unk> + <unk> ;
config . setCharset ( arg ) ;
config . setCharset ( arg ) ;
this . <unk> . addAll ( arg ) ;
this . configuration = configuration ;
this . consumer . sendMessage ( arg ) ;
this . context = ( ModelCamelContext ) context ;
config . <unk> ( arg ) ;
this . CreatedById = createdById ;
this . CreatedDate = createdDate ;
super . enableDebug ( arg ) ;
this . defaultInstance = defaultInstance ;
this . <unk> = tracer ;
this . delayTime = delayTime ;
this . Description = description ;
recipients . put ( arg ) ;
this . createDomainRequest = createDomainRequest ;
this . durableSubscriptionId = durableSubscriptionId ;
this . elementNameStrategyRef = elementNameStrategyRef ;
config . <unk> ( arg ) ;
config . <unk> ( arg ) ;
this . endpoint = ( <unk> ) endpoint ;
this . endpoint = ( RemoteFileEndpoint ) endpoint ;
this . endpoint = ( RemoteFileEndpoint ) endpoint ;
this . endpointPath = normalizePathToProtocol ( arg ) ;
this . exception = routeContext . getCamelContext ( arg ) . getRegistry ( arg ) . lookupByNameAndType ( arg ) ;
this . <unk> = new Statistic ( arg ) ;
filter . setExcludes ( arg ) ;
this . expression = new <unk> ( arg ) ;
this . expression = new <unk> ( arg ) ;
this . file = needToNormalize ( arg ) ? FileUtil . normalizePath ( arg ) : file ;
this . file = FileUtil . normalizePath ( arg ) ;
this . fileName = createFileLangugeExpression ( arg ) ;
this . fileName = createFileLanguageExpression ( arg ) ;
this . fileName = normalizePathToProtocol ( arg ) ;
baseEndpoint . setFormat ( arg ) ;
baseEndpoint . setFormat ( arg ) ;
this . <unk> = new HashMap < String , Object > ( arg ) ;
getExceptionHandler ( arg ) . handleException ( arg ) ;
getUnitOfWork ( arg ) . <unk> ( arg ) ;
baseEndpoint . setGuiAvailable ( arg ) ;
this . Id = id ;
this . Id = id ;
this . Id = id ;
this . ignoreUnmarshalledHeaders = ignoreUnmarshalledHeaders ;
filter . setIncludes ( arg ) ;
setDelay ( arg ) ;
this . IsActive = isActive ;
this . IsDeleted = isDeleted ;
this . LastActivityDate = lastActivityDate ;
this . LastModifiedById = lastModifiedById ;
this . LastModifiedDate = lastModifiedDate ;
loadBalancerType = new LoadBalancerType ( arg ) ;
this . <unk> = new <unk> ( arg ) ;
this . messageReceived = false ;
this . messageReceived = false ;
setMethod ( arg ) ;
this . move = createFileLangugeExpression ( arg ) ;
this . move = createFileLanguageExpression ( arg ) ;
this . <unk> = createFileLanguageExpression ( arg ) ;
this . Name = name ;
this . Name = name ;
this . namingStrategy = strategy ;
this . <unk> = next ;
this . NotifyForFields = notifyForFields ;
this . NotifyForOperations = notifyForOperations ;
this . objectMapper . <unk> ( arg ) . writeValue ( arg ) ;
objects . add ( arg ) ;
<unk> . add ( arg ) ;
this . otherwise = new FromBuilder < E > ( arg ) ;
this . otherwise = new FromBuilder ( arg ) ;
this . OwnerId = ownerId ;
this . pathSeparator = pathSeparator != null ? pathSeparator : <unk> ;
this . preMove = createFileLangugeExpression ( arg ) ;
this . preMove = createFileLanguageExpression ( arg ) ;
this . predicate = PredicateBuilder . and ( arg ) ;
this . predicate = PredicateBuilder . <unk> ( arg ) ;
this . <unk> = <unk> ;
this . processor = AsyncProcessorConverterHelper . convert ( arg ) ;
this . Query = query ;
this . delegate = null ;
this . delegate = null ;
this . relativeFileName = needToNormalize ( arg ) ? FileUtil . normalizePath ( arg ) : relativeFileName ;
this . <unk> = normalizePathToProtocol ( arg ) ;
this . processStrategy = <unk> ;
this . messageGateway . <unk> ( arg ) ;
this . messageGateway . setRequestTimeout ( arg ) ;
configuration . setRequestTimeout ( arg ) ;
this . routes = new LinkedHashSet < Route > ( arg ) ;
this . scheduledExecutorService = getCamelContext ( arg ) . getExecutorServiceManager ( arg ) . newSingleThreadScheduledExecutor ( arg ) ;
<unk> . scheduler = scheduler ;
this . service = configuration . getConnectionFactory ( arg ) . <unk> ( arg ) ;
this . <unk> = ProxyHelper . createProxy ( arg ) ;
session . commit ( arg ) ;
session . rollback ( arg ) ;
this . session = SessionFactoryLocator . getSessionFactory ( arg ) . createSession ( arg ) ;
this . session = SessionFactoryLocator . getSessionFactory ( arg ) . <unk> ( arg ) . get ( arg ) . createSession ( arg ) ;
this . <unk> = path ;
config . <unk> ( arg ) ;
this . streamCache = cache ;
this . streamCache = cache ;
this . synchronous = synchronous ;
baseEndpoint . <unk> ( arg ) ;
baseEndpoint . setGuiAvailable ( arg ) ;
this . SystemModstamp = systemModstamp ;
this . target = AsyncProcessorConverterHelper . convert ( arg ) ;
this . target = new FromBuilder < E > ( arg ) ;
this . target = new FromBuilder ( arg ) ;
this . target = new FromBuilder ( arg ) ;
this . <unk> = createFileLanguageExpression ( arg ) ;
template . sendBody ( arg ) ;
this . timePeriodMillis . set ( arg ) ;
this . timeout . <unk> ( arg ) ;
timer . <unk> ( arg ) ;
super . <unk> ( arg ) ;
this . traceHandlers . add ( arg ) ;
this . externalRedeliveries = new Statistic ( arg ) ;
this . transactionCommitStrategy = transactionCommitStrategy ;
<unk> ( arg ) ;
profile . <unk> ( arg ) ;
profile . <unk> ( arg ) ;
threadPoolExecutor = context . getRegistry ( arg ) . lookupByNameAndType ( arg ) ;
executor = routeContext . lookup ( arg ) ;
throw e ;
ex = ( NoSuchBeanException ) e ;
throw new IOException ( arg ) ;
throw new IOException ( arg ) ;
throw new IOException ( arg ) ;
throw new IOException ( arg ) ;
throw new IOException ( arg ) ;
throw new IOException ( arg ) ;
throw new IOException ( arg ) ;
throw new IOException ( arg ) ;
throw new IOException ( arg ) ;
throw new IOException ( arg ) ;
throw new IOException ( arg ) ;
throw new IOException ( arg ) ;
throw new IOException ( arg ) ;
LOG . warn ( arg ) ;
throw new TypeConversionException ( arg ) ;
exchange . setException ( arg ) ;
throw e ;
throw e ;
fail ( arg ) ;
fail ( arg ) ;
throw new IllegalArgumentException ( arg ) ;
throw <unk> ( arg ) ;
throw new CamelExchangeException ( arg ) ;
throw new CamelExchangeException ( arg ) ;
throw new CamelExchangeException ( arg ) ;
throw new CamelExchangeException ( arg ) ;
throw new CamelExchangeException ( arg ) ;
throw new CamelExchangeException ( arg ) ;
throw new CamelExchangeException ( arg ) ;
throw new CamelExchangeException ( arg ) ;
throw new CamelExchangeException ( arg ) ;
throw new CamelExchangeException ( arg ) ;
throw new <unk> ( arg ) ;
throw ObjectHelper . wrapCamelExecutionException ( arg ) ;
throw new IllegalStateException ( arg ) ;
log . warn ( arg ) ;
throw IOHelper . createIOException ( arg ) ;
throw IOHelper . createIOException ( arg ) ;
throw IOHelper . createIOException ( arg ) ;
throw IOHelper . createIOException ( arg ) ;
LOG . info ( arg ) ;
throw new IllegalActionException ( arg ) ;
throw new RuntimeCamelException ( arg ) ;
throw new ExpressionIllegalSyntaxException ( arg ) ;
throw new ExpressionIllegalSyntaxException ( arg ) ;
throw new ExpressionIllegalSyntaxException ( arg ) ;
throw fault ;
throw new IllegalArgumentException ( arg ) ;
throw new RuntimeCamelException ( arg ) ;
throw new RuntimeCamelException ( arg ) ;
throw new RuntimeCamelException ( arg ) ;
throw new RuntimeCamelException ( arg ) ;
throw new MessagePropertyAccessException ( arg ) ;
throw new MessagePropertyAccessException ( arg ) ;
throw new RuntimeCamelException ( arg ) ;
throw new <unk> ( arg ) ;
throw new IllegalArgumentException ( arg ) ;
throw new NoSuchBeanException ( arg ) ;
throw new TypeConversionException ( arg ) ;
throw new IllegalArgumentException ( arg ) ;
throw new GenericFileOperationFailedException ( arg ) ;
throw new GenericFileOperationFailedException ( arg ) ;
throw new GenericFileOperationFailedException ( arg ) ;
throw new GenericFileOperationFailedException ( arg ) ;
throw new GenericFileOperationFailedException ( arg ) ;
throw new GenericFileOperationFailedException ( arg ) ;
throw new GenericFileOperationFailedException ( arg ) ;
throw new GenericFileOperationFailedException ( arg ) ;
throw new GenericFileOperationFailedException ( arg ) ;
throw new GenericFileOperationFailedException ( arg ) ;
throw new GenericFileOperationFailedException ( arg ) ;
throw new GenericFileOperationFailedException ( arg ) ;
throw new GenericFileOperationFailedException ( arg ) ;
throw new GenericFileOperationFailedException ( arg ) ;
throw new GenericFileOperationFailedException ( arg ) ;
throw new GenericFileOperationFailedException ( arg ) ;
throw new GenericFileOperationFailedException ( arg ) ;
throw new GenericFileOperationFailedException ( arg ) ;
throw new GenericFileOperationFailedException ( arg ) ;
throw new GenericFileOperationFailedException ( arg ) ;
throw new GenericFileOperationFailedException ( arg ) ;
throw new GenericFileOperationFailedException ( arg ) ;
throw new GenericFileOperationFailedException ( arg ) ;
throw new GenericFileOperationFailedException ( arg ) ;
throw new GenericFileOperationFailedException ( arg ) ;
throw new GenericFileOperationFailedException ( arg ) ;
throw new GenericFileOperationFailedException ( arg ) ;
throw new GenericFileOperationFailedException ( arg ) ;
throw new GenericFileOperationFailedException ( arg ) ;
throw new GenericFileOperationFailedException ( arg ) ;
throw new GenericFileOperationFailedException ( arg ) ;
throw new GenericFileOperationFailedException ( arg ) ;
throw new GenericFileOperationFailedException ( arg ) ;
throw new GenericFileOperationFailedException ( arg ) ;
throw new GenericFileOperationFailedException ( arg ) ;
throw new GenericFileOperationFailedException ( arg ) ;
throw ObjectHelper . wrapRuntimeCamelException ( arg ) ;
throw ObjectHelper . wrapRuntimeCamelException ( arg ) ;
throw ObjectHelper . wrapRuntimeCamelException ( arg ) ;
throw new ExpressionEvaluationException ( arg ) ;
throw new ExpressionEvaluationException ( arg ) ;
throw new RuntimeException ( arg ) ;
throw new RuntimeCamelException ( arg ) ;
throw new RuntimeCamelException ( arg ) ;
throw new RuntimeExchangeException ( arg ) ;
throw new RuntimeExchangeException ( arg ) ;
return getObject ( arg ) ;
throw new java . <unk> . IllegalArgumentException ( arg ) ;
throw ObjectHelper . wrapRuntimeCamelException ( arg ) ;
throw ObjectHelper . wrapRuntimeCamelException ( arg ) ;
throw wrapCamelExecutionException ( arg ) ;
throw wrapCamelExecutionException ( arg ) ;
throw wrapCamelExecutionException ( arg ) ;
time += <unk> ( arg ) ;
time = longValue ;
timeUnit = defaultProfile2 . getTimeUnit ( arg ) ;
timeUnit = defaultProfile . getTimeUnit ( arg ) ;
timeout = localParameters . remove ( arg ) ;
timeout = localParameters . remove ( arg ) ;
addExchangeToTimeoutMap ( arg ) ;
addExchangeToTimeoutMap ( arg ) ;
<unk> = routeContext . getCamelContext ( arg ) . getRegistry ( arg ) . lookupByNameAndType ( arg ) ;
<unk> . <unk> ( arg ) ;
timer = new <unk> ( arg ) ;
GenericFile < T > to = renameFile ( arg ) ;
GenericFile < T > to = renameFile ( arg ) ;
total . incrementAndGet ( arg ) ;
<unk> ( arg ) . process ( arg ) ;
ServiceHelper . startService ( arg ) ;
state = <unk> ( arg ) ;
interceptor . <unk> ( arg ) ;
tracer . setDestinationUri ( arg ) ;
tracer . setDestinationUri ( arg ) ;
tracer . <unk> ( arg ) ;
externalRedeliveries . reset ( arg ) ;
transformer . transform ( arg ) ;
<unk> = <unk> . trim ( arg ) ;
<unk> = context . getProperty ( arg ) ;
tuow . <unk> ( arg ) ;
traced . <unk> ( arg ) ;
<unk> = ( <unk> ) <unk> . newProxyInstance ( arg ) ;
type = <unk> ( arg ) ;
type = <unk> ( arg ) ;
type = <unk> . findClass ( arg ) ;
type = <unk> . findClass ( arg ) ;
type = <unk> . findClass ( arg ) ;
type = ( ( ModelCamelContext ) routeContext . getCamelContext ( arg ) ) . <unk> ( arg ) ;
<unk> ( arg ) ;
typeConversionFailed = e ;
typeConversionFailed = e ;
unexpected = wrapRuntimeCamelException ( arg ) ;
unexpected = wrapRuntimeCamelException ( arg ) ;
response = updateStatus ( arg ) ;
uri = UnsafeUriCharactersEncoder . encodeHttpURI ( arg ) ;
uri = UnsafeUriCharactersEncoder . encodeHttpURI ( arg ) ;
uri = UnsafeUriCharactersEncoder . encodeHttpURI ( arg ) ;
uri = UnsafeUriCharactersEncoder . encodeHttpURI ( arg ) ;
uri = endpoint . getHttpUri ( arg ) . toASCIIString ( arg ) ;
uri = endpoint . getHttpUri ( arg ) . toASCIIString ( arg ) ;
<unk> = uri . substring ( arg ) ;
url = <unk> ( arg ) ;
urls [ i ] = file . toURI ( arg ) . toURL ( arg ) ;
urls [ i ] = file . toURI ( arg ) . toURL ( arg ) ;
usePlatformMBeanServer = value ;
usePlatformMBeanServer = value != null ? value : Boolean . FALSE ;
userDir = FileUtil . getUserDir ( arg ) . toURI ( arg ) . toString ( arg ) ;
userDir = FileUtil . getUserDir ( arg ) . toURI ( arg ) . toASCIIString ( arg ) ;
users = future . get ( arg ) ;
uuid = new <unk> ( arg ) . generateUuid ( arg ) ;
uuid = new <unk> ( arg ) . generateUuid ( arg ) ;
uuidGenerator = new <unk> ( arg ) ;
uuidGenerator = getEndpoint ( arg ) . getCamelContext ( arg ) . getUuidGenerator ( arg ) ;
uuidGenerator = UuidGenerator . get ( arg ) ;
uuidGenerator = UuidGenerator . get ( arg ) ;
validateParameters ( arg ) ;
validateParameters ( arg ) ;
<unk> . <unk> ( arg ) ;
value = exchange . getIn ( arg ) . getHeader ( arg ) ;
value = values . get ( arg ) ;
value = values . get ( arg ) ;
value = expression . evaluate ( arg ) ;
value = converter . tryConvertTo ( arg ) ;
answer = exchange . getContext ( arg ) . getTypeConverter ( arg ) . mandatoryConvertTo ( arg ) ;
value = getDefaultValueForPrimitive ( arg ) ;
valueFormatted = format . format ( arg ) ;
valueFormatted = format . format ( arg ) ;
<unk> ( arg ) . <unk> ( arg ) ;
<unk> = new <unk> ( arg ) ;
assertMockEndpointsSatisfied ( arg ) ;
assertMockEndpointsSatisfied ( arg ) ;
assertMockEndpointsSatisfied ( arg ) ;
assertMockEndpointsSatisfied ( arg ) ;
assertMockEndpointsSatisfied ( arg ) ;
assertMockEndpointsSatisfied ( arg ) ;
assertMockEndpointsSatisfied ( arg ) ;
assertMockEndpointsSatisfied ( arg ) ;
assertMockEndpointsSatisfied ( arg ) ;
assertMockEndpointsSatisfied ( arg ) ;
assertMockEndpointsSatisfied ( arg ) ;
verify ( arg ) . writeAttribute ( arg ) ;
verify ( arg ) . writeAttribute ( arg ) ;
verify ( arg ) . writeAttribute ( arg ) ;
<unk> ( arg ) ;
<unk> = new ArrayList < <unk> > ( arg ) ;
visitedURIs . clear ( arg ) ;
visitedURIs . clear ( arg ) ;
getMockFixture ( arg ) . waitForMessages ( arg ) ;
getMockFixture ( arg ) . waitForMessages ( arg ) ;
<unk> = true ;
<unk> = true ;
webServiceTemplate = applicationContext . getBean ( arg ) ;
webServiceTemplate = applicationContext . getBean ( arg ) ;
webServiceTemplate = applicationContext . getBean ( arg ) ;
websocketConsumer . sendMessage ( arg ) ;
websocketConsumer . sendMessage ( arg ) ;
websocketConsumer . sendMessage ( arg ) ;
<unk> . addOutput ( arg ) ;
<unk> ( arg ) ;
workQueue = new SynchronousQueue < Runnable > ( arg ) ;
<unk> . start ( arg ) ;
<unk> = <unk> . nextInt ( arg ) ;
<unk> = <unk> ( arg ) ;
<unk> = camelContext . getRegistry ( arg ) . lookupByNameAndType ( arg ) ;
<unk> . <unk> ( arg ) ;
