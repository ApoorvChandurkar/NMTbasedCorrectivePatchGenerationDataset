InputStream inStream = getClass ( arg ) . getResourceAsStream ( arg ) ;
InputStream inStream = getClass ( arg ) . getResourceAsStream ( arg ) ;
configuration . setSendToPrinter ( arg ) ;
Iterator < String > userIDs = keyring . getSecretKey ( arg ) . getUserIDs ( arg ) ;
Set < String > keyUserIds = getUserIds ( arg ) ;
ValidationProviderResolver validationProviderResolver = resolveValidationProviderResolver ( arg ) ;
PGPPassphraseAccessor passphraseAccessorSeveralKeys = new DefaultPGPPassphraseAccessor ( arg ) ;
Class < ? > activatorClass = currentThread ( arg ) . getContextClassLoader ( arg ) . loadClass ( arg ) ;
return isInOsgiEnvironment ( arg ) ;
List < PGPSecretKeyAndPrivateKeyAndUserId > sigSecretKeysWithPrivateKeyAndUserId = secretKeyAccessor . getSignerKeys ( arg ) ;
PGPPublicKey sigPublicKey = publicKeyAccessor . getPublicKey ( arg ) ;
List < PGPPublicKey > keys = publicKeyAccessor . getEncryptionKeys ( arg ) ;
key = secretKeyAccessor . getPrivateKey ( arg ) ;
return PlatformHelper . isOsgiContext ( arg ) ;
return mavenBundle ( arg ) . groupId ( arg ) . artifactId ( arg ) . classifier ( arg ) . type ( arg ) . versionAsInProject ( arg ) ;
snsClient . setEndpoint ( arg ) ;
websocket = getClient ( arg ) . prepareGet ( arg ) . execute ( arg ) . get ( arg ) ;
return createRouteStaticEndpointJson ( arg ) ;
return enabled && event instanceof ExchangeSendingEvent || event instanceof RouteAddedEvent || event instanceof RouteRemovedEvent ;
return configuration . getConsumerStreams ( arg ) ;
return configuration . getGroupId ( arg ) ;
return configuration . getPartitioner ( arg ) ;
return configuration . getZookeeperHost ( arg ) ;
return configuration . getZookeeperPort ( arg ) ;
configuration . setConsumerStreams ( arg ) ;
configuration . setGroupId ( arg ) ;
configuration . setPartitioner ( arg ) ;
configuration . setZookeeperHost ( arg ) ;
configuration . setZookeeperPort ( arg ) ;
List < Map < String , Object >> generatedKeys = out . getOut ( arg ) . getHeader ( arg ) ;
SolrFixtures . clearIndex ( arg ) ;
int nbMessages = 50 ;
result = createMetricRegistry ( arg ) ;
return result ;
listing = DropboxAPIFacade . client . getMetadataWithChildren ( arg ) ;
downloadedFile = DropboxAPIFacade . client . getFile ( arg ) ;
entry = DropboxAPIFacade . client . getMetadata ( arg ) ;
uploadedFile = DropboxAPIFacade . client . uploadFile ( arg ) ;
listing = DropboxAPIFacade . client . getMetadataWithChildren ( arg ) ;
entries = DropboxAPIFacade . client . searchFileAndFolderNames ( arg ) ;
classpathElements = project . getTestClasspathElements ( arg ) ;
return getCanonicalName ( arg ) ;
classPatterns = Pattern . compile ( arg ) ;
final Substitution [ ] adapters = new Substitution [ 4 ] ;
return apiProxy ;
inOrder . verify ( arg ) . getHeader ( arg ) ;
inOrder . verify ( arg ) . getHeader ( arg ) ;
inOrder . verify ( arg ) . getHeader ( arg ) ;
inOrder . verify ( arg ) . getHeader ( arg ) ;
renamed = renameFileUsingCopy ( arg ) ;
configureSourceGeneratorMojo ( arg ) ;
configureSourceGeneratorMojo ( arg ) ;
configureSourceGeneratorMojo ( arg ) ;
return ApiMethodHelper . invokeMethod ( arg ) ;
ApiMethod result ;
List < ApiMethod > filteredMethods = ApiMethodHelper . filterMethods ( arg ) ;
result = ApiMethodHelper . getHighestPriorityMethod ( arg ) ;
candidates = new ArrayList < ApiMethod > ( arg ) ;
final List < ApiMethod > filteredMethods = ApiMethodHelper . filterMethods ( arg ) ;
method = ApiMethodHelper . getHighestPriorityMethod ( arg ) ;
final ApiMethod method = findMethod ( arg ) ;
List < Object > arguments = argumentsMap . get ( arg ) ;
List < T > methods = methodMap . get ( arg ) ;
return Collections . < ApiMethod > unmodifiableList ( arg ) ;
final List < ApiMethod > filteredSet = filterMethods ( arg ) ;
List < ApiMethod > methods = ApiMethodHelper . filterMethods ( arg ) ;
methods = ApiMethodHelper . filterMethods ( arg ) ;
methods = ApiMethodHelper . filterMethods ( arg ) ;
methods = ApiMethodHelper . filterMethods ( arg ) ;
methods = ApiMethodHelper . filterMethods ( arg ) ;
List < ApiMethod > methods = apiMethodHelper . getCandidateMethods ( arg ) ;
@ SuppressWarnings ( arg ) final List < ApiMethodParser . ApiMethodModel > models = parser . parse ( arg ) ;
String argText = StringEscapeUtils . unescapeHtml ( arg ) ;
@ SuppressWarnings ( arg ) final Set < String > apiNames = new TreeSet < String > ( arg ) ;
@ SuppressWarnings ( arg ) Class < ? extends ApiMethod > apiMethod = ( Class < ? extends ApiMethod > ) entry . getKey ( arg ) ;
return this . destDir +/+ getDocumentName ( arg ) ;
updateReportOutputDirectory ( arg ) ;
interceptPropertyNames ( arg ) ;
interceptResult ( arg ) ;
interceptPropertyNames ( arg ) ;
String filterString = it . next ( arg ) ;
return getEndpoint ( arg ) . getWebSocket ( arg ) ;
byte [ ] resp = new byte [ req . length + RESPONSE_GREETING_BYTES . length ] ;
ConnectorRef conector = WebsocketComponent . getConnectors ( arg ) . values ( arg ) . iterator ( arg ) . next ( arg ) ;
new EndpointSubscription < T > ( arg ) ;
final Class < ? > type = argument . getType ( arg ) ;
String key = SparkConstants . SPLAT ;
String accept = getEndpoint ( arg ) . getAccept ( arg ) ;
log . info ( arg ) ;
openConnection ( arg ) ;
return candidates ;
properties . putAll ( arg ) ;
interceptResult ( arg ) ;
String folderId = 0 ;
folderId = exchange . getProperty ( arg ) ;
ZipEntry entry ;
final List < ApiMethod > filteredMethods = methodHelper . filterMethods ( arg ) ;
List < ApiMethod > filteredMethods = endpoint . methodHelper . filterMethods ( arg ) ;
List < ApiMethod > methods = apiMethodHelper . filterMethods ( arg ) ;
methods = apiMethodHelper . filterMethods ( arg ) ;
methods = apiMethodHelper . filterMethods ( arg ) ;
methods = apiMethodHelper . filterMethods ( arg ) ;
methods = apiMethodHelper . filterMethods ( arg ) ;
final String [ ] argTypes = typeArgs . split ( arg ) ;
endpoint . setLoggerName ( arg ) ;
endpoint . setProvidedLogger ( arg ) ;
answer . setUri ( arg ) ;
verb . addOutput ( arg ) ;
rest ( arg ) . path ( arg ) . get ( arg ) . routeId ( arg ) . to ( arg ) . get ( arg ) . routeId ( arg ) . to ( arg ) . post ( arg ) . to ( arg ) ;
rest ( arg ) . path ( arg ) . get ( arg ) . routeId ( arg ) . to ( arg ) . get ( arg ) . accept ( arg ) . routeId ( arg ) . to ( arg ) . post ( arg ) . to ( arg ) ;
rest ( arg ) . path ( arg ) . get ( arg ) . routeId ( arg ) . to ( arg ) . endPath ( arg ) . get ( arg ) . accept ( arg ) . routeId ( arg ) . to ( arg ) . endPath ( arg ) . post ( arg ) . to ( arg ) ;
rest ( arg ) . path ( arg ) . get ( arg ) . to ( arg ) . transform ( arg ) . endPath ( arg ) . path ( arg ) . get ( arg ) . accept ( arg ) . to ( arg ) . transform ( arg ) . post ( arg ) . to ( arg ) ;
rest ( arg ) . path ( arg ) . get ( arg ) . to ( arg ) . endPath ( arg ) . path ( arg ) . get ( arg ) . accept ( arg ) . to ( arg ) . endPath ( arg ) . post ( arg ) . to ( arg ) ;
rest ( arg ) . path ( arg ) . get ( arg ) . to ( arg ) . path ( arg ) . get ( arg ) . accept ( arg ) . to ( arg ) . post ( arg ) . to ( arg ) ;
rest ( arg ) . path ( arg ) . get ( arg ) . to ( arg ) . path ( arg ) . get ( arg ) . accept ( arg ) . to ( arg ) . post ( arg ) . to ( arg ) ;
rest ( arg ) . path ( arg ) . to ( arg ) . path ( arg ) . get ( arg ) . to ( arg ) . path ( arg ) . post ( arg ) . to ( arg ) ;
rest ( arg ) . path ( arg ) . get ( arg ) . to ( arg ) . transform ( arg ) . endPath ( arg ) . path ( arg ) . get ( arg ) . consumes ( arg ) . to ( arg ) . transform ( arg ) . post ( arg ) . to ( arg ) ;
rest ( arg ) . path ( arg ) . get ( arg ) . to ( arg ) . endPath ( arg ) . path ( arg ) . get ( arg ) . consumes ( arg ) . to ( arg ) . endPath ( arg ) . post ( arg ) . to ( arg ) ;
rest ( arg ) . path ( arg ) . get ( arg ) . to ( arg ) . path ( arg ) . get ( arg ) . consumes ( arg ) . to ( arg ) . post ( arg ) . to ( arg ) ;
rest ( arg ) . path ( arg ) . get ( arg ) . to ( arg ) . path ( arg ) . get ( arg ) . consumes ( arg ) . to ( arg ) . post ( arg ) . to ( arg ) ;
rest ( arg ) . component ( arg ) . path ( arg ) . get ( arg ) . to ( arg ) . path ( arg ) . get ( arg ) . to ( arg ) . post ( arg ) . to ( arg ) ;
rest ( arg ) . path ( arg ) . get ( arg ) . to ( arg ) . path ( arg ) . get ( arg ) . to ( arg ) . path ( arg ) . post ( arg ) . to ( arg ) ;
return rest . head ( arg ) ;
return rest . verb ( arg ) ;
rest ( arg ) . get ( arg ) . consumes ( arg ) . to ( arg ) . transform ( arg ) . constant ( arg ) ;
rest ( arg ) . get ( arg ) . to ( arg ) . transform ( arg ) . simple ( arg ) ;
rest ( arg ) . component ( arg ) . get ( arg ) . consumes ( arg ) . to ( arg ) . transform ( arg ) . simple ( arg ) . endRest ( arg ) . get ( arg ) . consumes ( arg ) . to ( arg ) . transform ( arg ) . simple ( arg ) . endRest ( arg ) . get ( arg ) . consumes ( arg ) . to ( arg ) . transform ( arg ) . simple ( arg ) ;
rest ( arg ) . component ( arg ) . uri ( arg ) . get ( arg ) . consumes ( arg ) . to ( arg ) . transform ( arg ) . simple ( arg ) . endRest ( arg ) . get ( arg ) . consumes ( arg ) . to ( arg ) . transform ( arg ) . simple ( arg ) . endRest ( arg ) . get ( arg ) . consumes ( arg ) . to ( arg ) . transform ( arg ) . simple ( arg ) ;
return restConfiguration ;
ctx . setRestConfiguration ( arg ) ;
restConfiguration ( arg ) . component ( arg ) . host ( arg ) . port ( arg ) . property ( arg ) ;
rest ( arg ) . get ( arg ) . consumes ( arg ) . to ( arg ) . post ( arg ) . to ( arg ) ;
rest ( arg ) . uri ( arg ) . get ( arg ) . consumes ( arg ) . to ( arg ) . post ( arg ) . to ( arg ) ;
rest ( arg ) . get ( arg ) . consumes ( arg ) . route ( arg ) . to ( arg ) . endRest ( arg ) . post ( arg ) . to ( arg ) ;
rest ( arg ) . get ( arg ) . consumes ( arg ) . route ( arg ) . to ( arg ) . transform ( arg ) . constant ( arg ) ;
rest ( arg ) . get ( arg ) . route ( arg ) . to ( arg ) . transform ( arg ) . simple ( arg ) ;
rest ( arg ) . uri ( arg ) . get ( arg ) . consumes ( arg ) . route ( arg ) . to ( arg ) . transform ( arg ) . simple ( arg ) . endRest ( arg ) . get ( arg ) . consumes ( arg ) . route ( arg ) . to ( arg ) . transform ( arg ) . simple ( arg ) . endRest ( arg ) . get ( arg ) . consumes ( arg ) . route ( arg ) . to ( arg ) . transform ( arg ) . simple ( arg ) ;
return context . isMessageHistory ( arg ) != null ? context . isMessageHistory ( arg ) : false ;
rest ( arg ) . get ( arg ) . consumes ( arg ) . route ( arg ) . to ( arg ) . transform ( arg ) . simple ( arg ) . endRest ( arg ) . get ( arg ) . consumes ( arg ) . route ( arg ) . to ( arg ) . transform ( arg ) . simple ( arg ) . endRest ( arg ) . get ( arg ) . consumes ( arg ) . route ( arg ) . to ( arg ) . transform ( arg ) . simple ( arg ) ;
restConfiguration ( arg ) . component ( arg ) . host ( arg ) . port ( arg ) . componentProperty ( arg ) . componentProperty ( arg ) . endpointProperty ( arg ) . consumerProperty ( arg ) ;
this . propertyPrefixResolved = FilePathResolver . resolvePath ( arg ) ;
this . propertySuffixResolved = FilePathResolver . resolvePath ( arg ) ;
ByteBuf [ ] delimiters = delimiter == TextLineDelimiter . LINE ? Delimiters . lineDelimiter ( arg ) : Delimiters . nulDelimiter ( arg ) ;
ByteBuf buf = ByteBufAllocator . DEFAULT . buffer ( arg ) ;
buf = PooledByteBufAllocator . DEFAULT . buffer ( arg ) ;
rest ( arg ) . post ( arg ) . type ( arg ) . to ( arg ) ;
rest ( arg ) . post ( arg ) . type ( arg ) . to ( arg ) ;
rest ( arg ) . post ( arg ) . type ( arg ) . to ( arg ) ;
verb . setTypeList ( arg ) ;
verb . setType ( arg ) ;
verb . setTypeList ( arg ) ;
rest ( arg ) . get ( arg ) . consumes ( arg ) . produces ( arg ) . to ( arg ) . post ( arg ) . to ( arg ) ;
rest ( arg ) . get ( arg ) . consumes ( arg ) . produces ( arg ) . to ( arg ) . post ( arg ) . to ( arg ) ;
result = getConfiguration ( arg ) . getXpathsToIdAttributes ( arg ) ;
rest ( arg ) . post ( arg ) . type ( arg ) . outType ( arg ) . route ( arg ) . bean ( arg ) ;
rest ( arg ) . get ( arg ) . consumes ( arg ) . to ( arg ) . post ( arg ) . to ( arg ) ;
rest ( arg ) . get ( arg ) . consumes ( arg ) . to ( arg ) . post ( arg ) . to ( arg ) ;
restConfiguration ( arg ) . component ( arg ) . host ( arg ) . port ( arg ) . bindingMode ( arg ) ;
restConfiguration ( arg ) . component ( arg ) . host ( arg ) . port ( arg ) . bindingMode ( arg ) ;
restConfiguration ( arg ) . component ( arg ) . host ( arg ) . port ( arg ) . bindingMode ( arg ) ;
restConfiguration ( arg ) . component ( arg ) . host ( arg ) . port ( arg ) . bindingMode ( arg ) ;
restConfiguration ( arg ) . component ( arg ) . host ( arg ) . port ( arg ) . bindingMode ( arg ) ;
isXml = body . startsWith ( arg ) ;
isXml = body . startsWith ( arg ) ;
String name = context . getRestConfiguration ( arg ) . getJsonDataFormat ( arg ) ;
return restBinding ;
List < ? > list = extractRows ( arg ) ;
String result = StringEscapeUtils . unescapeHtml ( arg ) . replaceAll ( arg ) . replaceAll ( arg ) ;
return method ;
rest ( arg ) . consumes ( arg ) . produces ( arg ) . get ( arg ) . outType ( arg ) . to ( arg ) . put ( arg ) . type ( arg ) . outType ( arg ) . to ( arg ) . get ( arg ) . outTypeList ( arg ) . to ( arg ) ;
String method = ObjectHelper . before ( arg ) ;
answer . setMethod ( arg ) ;
rest . setPath ( arg ) ;
rest ( arg ) . path ( arg ) . get ( arg ) . consumes ( arg ) . to ( arg ) . post ( arg ) . to ( arg ) ;
restConfiguration ( arg ) . component ( arg ) . bindingMode ( arg ) . dataFormatProperty ( arg ) . contextPath ( arg ) . port ( arg ) ;
rest ( arg ) . consumes ( arg ) . produces ( arg ) . get ( arg ) . outType ( arg ) . to ( arg ) . put ( arg ) . type ( arg ) . to ( arg ) . get ( arg ) . outTypeList ( arg ) . to ( arg ) ;
rest ( arg ) . description ( arg ) . consumes ( arg ) . produces ( arg ) . get ( arg ) . description ( arg ) . outType ( arg ) . to ( arg ) . put ( arg ) . description ( arg ) . type ( arg ) . to ( arg ) . get ( arg ) . description ( arg ) . outTypeList ( arg ) . to ( arg ) ;
return jsonUnmarshal . process ( arg ) ;
return xmlUnmarshal . process ( arg ) ;
registry = route . getRouteContext ( arg ) . getCamelContext ( arg ) . hasService ( arg ) ;
registryService . setMetricsRegistry ( arg ) ;
answer . setMetricsRegistry ( arg ) ;
factory . setMetricsRegistry ( arg ) ;
factory . setMetricsRegistry ( arg ) ;
broker . setUseJmx ( arg ) ;
consumers . close ( arg ) ;
fillProducersPool ( arg ) ;
getProducers ( arg ) . close ( arg ) ;
MessageConsumerResources consumer = consumers . borrowObject ( arg ) ;
String typeName = string ;
ErrorListener errorListener = resolveAndRemoveReferenceParameter ( arg ) ;
Object topicValue = exchange . getIn ( arg ) . getHeader ( arg ) ;
repeat = EndpointHelper . resolveParameter ( arg ) ;
interval = EndpointHelper . resolveParameter ( arg ) ;
long interval = EndpointHelper . resolveParameter ( arg ) ;
String timeZone = EndpointHelper . resolveParameter ( arg ) ;
Long interval = EndpointHelper . resolveParameter ( arg ) ;
Integer counter = EndpointHelper . resolveParameter ( arg ) ;
from ( arg ) . onException ( arg ) . handled ( arg ) . end ( arg ) . choice ( arg ) . when ( arg ) . log ( arg ) . stop ( arg ) . when ( arg ) . log ( arg ) . setFaultBody ( arg ) . when ( arg ) . log ( arg ) . throwException ( arg ) . when ( arg ) . log ( arg ) . throwException ( arg ) . when ( arg ) . log ( arg ) . rollback ( arg ) . when ( arg ) . log ( arg ) . markRollbackOnly ( arg ) . end ( arg ) . log ( arg ) . to ( arg ) ;
entityManager . joinTransaction ( arg ) ;
LOG . debug ( arg ) ;
entityManager . persist ( arg ) ;
return entityManager . merge ( arg ) ;
final Olingo2AppWrapper result ;
return apiProxy . getOlingo2App ( arg ) ;
ChannelInitializer < Channel > pipelineFactory = new HttpServerSharedInitializerFactory ( arg ) ;
pipelineFactory = new DefaultServerInitializerFactory ( arg ) ;
ClientInitializerFactory factory = configuration . getClientPipelineFactory ( arg ) ;
pipelineFactory = new DefaultClientInitializerFactory ( arg ) ;
result = method . getReturnType ( arg ) . getName ( arg ) ;
client = getClientFactory ( arg ) . makeClient ( arg ) ;
clientFactory = new InteractiveGoogleDriveClientFactory ( arg ) ;
rejectQuietly ( arg ) ;
rejectQuietly ( arg ) ;
rejectQuietly ( arg ) ;
long deliveryTag = envelope . getDeliveryTag ( arg ) ;
rejectQuietly ( arg ) ;
BeanstalkComponent . connectionSettingsFactory = connFactory ;
LOG . warn ( arg ) ;
LOG . error ( arg ) ;
LOG . error ( arg ) ;
LOG . error ( arg ) ;
return jobPriority ;
return jobTimeToRun ;
this . jobPriority = jobPriority ;
this . jobTimeToRun = jobTimeToRun ;
final ConnectionSettingsFactory factory = BeanstalkComponent . getConnectionSettingsFactory ( arg ) ;
final ConnectionSettingsFactory factory = BeanstalkComponent . getConnectionSettingsFactory ( arg ) ;
final ConnectionSettingsFactory factory = BeanstalkComponent . getConnectionSettingsFactory ( arg ) ;
BeanstalkComponent . setConnectionSettingsFactory ( arg ) ;
this . awaitJob = awaitJob ;
throw new UnsupportedOperationException ( arg ) ;
HttpRequest request = new DefaultFullHttpRequest ( arg ) ;
apnsServiceFactory . setSslContextParameters ( arg ) ;
return serviceUri == null ? other . serviceUri == null : serviceUri . equals ( arg ) && contentType == null ? other . contentType == null : contentType . equals ( arg ) && httpHeaders == null ? other . httpHeaders == null : httpHeaders . equals ( arg ) && connectTimeout == other . connectTimeout && socketTimeout == other . socketTimeout && proxy == null ? other . proxy == null : proxy . equals ( arg ) && sslContextParameters == null ? other . sslContextParameters == null : sslContextParameters . equals ( arg ) && httpAsyncClientBuilder == null ? other . httpAsyncClientBuilder == null : httpAsyncClientBuilder . equals ( arg ) ;
camelContextConfiguration . beforeStart ( arg ) ;
verify ( arg ) . beforeStart ( arg ) ;
restConfiguration ( arg ) . component ( arg ) . host ( arg ) . port ( arg ) . endpointProperty ( arg ) ;
restConfiguration ( arg ) . component ( arg ) . host ( arg ) . port ( arg ) . endpointProperty ( arg ) ;
restConfiguration ( arg ) . component ( arg ) . host ( arg ) . endpointProperty ( arg ) ;
restConfiguration ( arg ) . component ( arg ) . host ( arg ) . port ( arg ) . endpointProperty ( arg ) ;
restConfiguration ( arg ) . component ( arg ) . host ( arg ) . port ( arg ) . endpointProperty ( arg ) ;
Set < String > customIds = new HashSet < String > ( arg ) ;
return clientInitializerFactory ;
this . clientInitializerFactory = clientPipelineFactory ;
ServerInitializerFactory factory = configuration . getServerInitializerFactory ( arg ) ;
ClientInitializerFactory factory = configuration . getClientInitializerFactory ( arg ) ;
return serverInitializerFactory ;
this . serverInitializerFactory = serverPipelineFactory ;
verify ( arg ) . beforeApplicationStart ( arg ) ;
CamelLogger camelLogger ;
List < String [ ] > options = JsonSchemaHelper . parseEndpointExplainJson ( arg ) ;
List < String [ ] > options = JsonSchemaHelper . parseEndpointExplainJson ( arg ) ;
List < Map < String , String >> answer = new ArrayList < Map < String , String >> ( arg ) ;
String description = option . get ( arg ) ;
String name = entry . getKey ( arg ) ;
String name = row . get ( arg ) ;
List < Map < String , String >> rows = JsonSchemaHelper . parseJsonSchema ( arg ) ;
List < Map < String , String >> options = JsonSchemaHelper . parseJsonSchema ( arg ) ;
List < Map < String , String >> options = JsonSchemaHelper . parseJsonSchema ( arg ) ;
List < Object > oids = new ArrayList < Object > ( arg ) ;
DockerClientConfig . DockerClientConfigBuilder configBuilder = new DockerClientConfig . DockerClientConfigBuilder ( arg ) . withUsername ( arg ) . withPassword ( arg ) . withEmail ( arg ) . withReadTimeout ( arg ) . withDockerCertPath ( arg ) . withUri ( arg ) ;
Collection < Field > fields = new ArrayList < Field > ( arg ) ;
Map < String , String > result = new HashMap < String , String > ( arg ) ;
Map < String , String > defaultProps = new HashMap < String , String > ( arg ) ;
List < RoutesBuilder > routesBuilders = new ArrayList < RoutesBuilder > ( arg ) ;
return sb . toString ( arg ) ;
String status = context . hasComponent ( arg ) != null ? in use : on classpath ;
mockEndpoints ( arg ) ;
bootstrap . bind ( arg ) . syncUninterruptibly ( arg ) ;
bootstrap . bind ( arg ) . syncUninterruptibly ( arg ) ;
group . shutdownGracefully ( arg ) . syncUninterruptibly ( arg ) ;
return performContextCommand ( arg ) ;
Map < String , String > row = new HashMap < String , String > ( arg ) ;
Trigger trigger = createTrigger ( arg ) ;
CamelComponentCatalog catalog = new DefaultCamelComponentCatalog ( arg ) ;
CamelComponentCatalog catalog = new DefaultCamelComponentCatalog ( arg ) ;
CamelComponentCatalog catalog = new DefaultCamelComponentCatalog ( arg ) ;
int labelLen = Math . min ( arg ) ;
labelLen = Math . max ( arg ) ;
int maxLabelLen = LABEL_COLUMN_LABEL . length ( arg ) ;
String label = safeNull ( arg ) ;
Map < String , Set < String >> labels = camelController . listLabelCatalog ( arg ) ;
List < Map < String , String >> rows = JSonSchemaHelper . parseJsonSchema ( arg ) ;
List < Map < String , String >> rows = JSonSchemaHelper . parseJsonSchema ( arg ) ;
String defaultMetricsName = getEndpoint ( arg ) . getMetricsName ( arg ) ;
MetricRegistry registry = getEndpoint ( arg ) . getRegistry ( arg ) ;
Endpoint endpoint = new MetricsEndpoint ( arg ) ;
Endpoint endpoint = new MetricsEndpoint ( arg ) ;
Endpoint endpoint = new MetricsEndpoint ( arg ) ;
Endpoint endpoint = new MetricsEndpoint ( arg ) ;
int size = Math . min ( arg ) ;
subscriber . add ( arg ) ;
result . getClass ( arg ) . getMethod ( arg ) . invoke ( arg ) ;
result . getClass ( arg ) . getMethod ( arg ) . invoke ( arg ) ;
result . getClass ( arg ) . getMethod ( arg ) . invoke ( arg ) ;
result . getClass ( arg ) . getMethod ( arg ) . invoke ( arg ) ;
setThreadPoolOrExecutor ( arg ) ;
return ce . getResponseContentBytes ( arg ) ;
final HttpFields f = ce . getResponseFields ( arg ) ;
return ce . getResponseStatus ( arg ) ;
ce . setRequestContentSource ( arg ) ;
ce . setRequestContent ( arg ) ;
ce . setRequestContent ( arg ) ;
ce . setRequestContent ( arg ) ;
ce . setRequestContentType ( arg ) ;
ce . setURL ( arg ) ;
GitHubEndpoint endpoint = new GitHubEndpoint ( arg ) ;
JIRAEndpoint endpoint = new JIRAEndpoint ( arg ) ;
answer = JmsMessageType . Text ;
JmsMessageHelper . setJMSReplyTo ( arg ) ;
JmsMessageHelper . populateExchange ( arg ) ;
bodyHeaders = new HashMap < String , Object > ( arg ) ;
bodyHeaders = new HashMap < String , Object > ( arg ) ;
Map < String , Object > body = new HashMap < String , Object > ( arg ) ;
List < Object > list = new ArrayList < Object > ( arg ) ;
Map < String , Object > headers = new HashMap < String , Object > ( arg ) ;
Map < String , Object > headers = new HashMap < String , Object > ( arg ) ;
Collection < Message > messages = new ArrayList < Message > ( arg ) ;
Exchanger < Object > messageExchanger = new Exchanger < Object > ( arg ) ;
Map < Object , Object > map = new HashMap < Object , Object > ( arg ) ;
channelFactory . releaseExternalResources ( arg ) ;
datagramChannelFactory . releaseExternalResources ( arg ) ;
return new NioServerBossPool ( arg ) ;
workerPool = new NioWorkerPool ( arg ) ;
Chunk newChunk ;
MockJiraRestClient jiraRestClient = factory . getClient ( arg ) ;
MockJiraRestClient jiraRestClient = factory . getClient ( arg ) ;
MockJiraRestClient client = factory . getClient ( arg ) ;
MockJiraRestClient client = factory . getClient ( arg ) ;
Connection connection = entityManager . unwrap ( arg ) ;
this . factory = ServerCnxnFactory . createFactory ( arg ) ;
SparkBase . stop ( arg ) ;
SparkBase . setPort ( arg ) ;
SparkBase . setPort ( arg ) ;
SparkBase . setIpAddress ( arg ) ;
ServiceTracker < T , T > tracker ;
tracker = new ServiceTracker < T , T > ( arg ) ;
channelPool = new GenericObjectPool < Channel > ( arg ) ;
return ( arg ) ? getMessageBody ( arg ) : xmppPacket ;
name = getClass ( arg ) . getName ( arg ) ;
List < ? > data = getEndpoint ( arg ) . queryForList ( arg ) ;
List < ? > generatedKeys = getEndpoint ( arg ) . queryForList ( arg ) ;
rest ( arg ) . get ( arg ) . consumes ( arg ) . route ( arg ) . routeId ( arg ) . transform ( arg ) . constant ( arg ) . endRest ( arg ) . post ( arg ) . to ( arg ) ;
xml = camelController . getRouteModelAsXml ( arg ) ;
List < Map < String , String >> answer = new ArrayList < Map < String , String >> ( arg ) ;
String json = camelController . explainEndpointAsJSon ( arg ) ;
String json = camelController . explainEndpointAsJSon ( arg ) ;
List < Map < String , String >> camelRoutes = camelController . getRoutes ( arg ) ;
List < Map < String , String >> routes = camelController . getRoutes ( arg ) ;
Set < String > names = new LinkedHashSet < String > ( arg ) ;
final List < Map < String , String >> camelContexts = camelController . getCamelContexts2 ( arg ) ;
statusLen = Math . max ( arg ) ;
final List < Map < String , String >> camelContexts = camelController . getCamelContexts ( arg ) ;
JettyHttpComponent jetty = context . getComponent ( arg ) ;
controller = new DefaultJolokiaCamelController ( arg ) ;
controller = new DefaultJolokiaCamelController ( arg ) ;
controller = new DefaultJolokiaCamelController ( arg ) ;
controller = new DefaultJolokiaCamelController ( arg ) ;
controller = new DefaultJolokiaCamelController ( arg ) ;
controller = new DefaultJolokiaCamelController ( arg ) ;
controller = new DefaultJolokiaCamelController ( arg ) ;
controller = new DefaultJolokiaCamelController ( arg ) ;
controller = new DefaultJolokiaCamelController ( arg ) ;
controller = new DefaultJolokiaCamelController ( arg ) ;
controller = new DefaultJolokiaCamelController ( arg ) ;
controller = new DefaultJolokiaCamelController ( arg ) ;
controller = new DefaultJolokiaCamelController ( arg ) ;
controller = new DefaultJolokiaCamelController ( arg ) ;
controller = new DefaultJolokiaCamelController ( arg ) ;
controller = new DefaultJolokiaCamelController ( arg ) ;
controller = new DefaultJolokiaCamelController ( arg ) ;
controller = new DefaultJolokiaCamelController ( arg ) ;
camelController . suspendContext ( arg ) ;
List < J4pReadRequest > list = new ArrayList < J4pReadRequest > ( arg ) ;
return new RemovePropertiesProcessor ( arg ) ;
return new RemovePropertiesProcessor ( arg ) ;
return new RemovePropertiesProcessor ( arg ) ;
J4pVersionResponse vr ;
BulkRequest request ;
exchange . setException ( arg ) ;
exchange . removeProperty ( arg ) ;
Set < String > enums = new TreeSet < String > ( arg ) ;
Set < String > oneOfTypes = new TreeSet < String > ( arg ) ;
String doc = entry . getDocumentation ( arg ) ;
Set < String > labels = catalog . findComponentLabels ( arg ) ;
