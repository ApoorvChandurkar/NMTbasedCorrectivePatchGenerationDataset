InputStream inStream = getClass ( arg ) . getClassLoader ( arg ) . getResourceAsStream ( arg ) ;
InputStream inStream = getClass ( arg ) . getClassLoader ( arg ) . getResourceAsStream ( arg ) ;
configuration . setOrientation ( arg ) ;
Iterator < String > userIDs = secKey . getUserIDs ( arg ) ;
PGPSecretKey secKey = keyring . getSecretKey ( arg ) ;
ValidationProviderResolver validationProviderResolver = resolveAndRemoveReferenceParameter ( arg ) ;
PGPPassphraseAccessor passphraseAccessorSeveralKeys = new PGPPassphraseAccessorDefault ( arg ) ;
Class < ? > activatorClass = Class . forName ( arg ) ;
return getCamelContext ( arg ) . getClass ( arg ) . getSimpleName ( arg ) . startsWith ( arg ) ;
List < PGPSecretKeyAndPrivateKeyAndUserId > sigSecretKeysWithPrivateKeyAndUserId = secretKeyAccess . getSignerKeys ( arg ) ;
PGPPublicKey sigPublicKey = publicKeyAccess . getPublicKey ( arg ) ;
List < PGPPublicKey > keys = publicKeyAccess . getEncryptionKeys ( arg ) ;
key = secretKeyAccess . getPrivateKey ( arg ) ;
return isInOsgiEnvironment ( arg ) ;
return mavenBundle ( arg ) . groupId ( arg ) . artifactId ( arg ) . classifier ( arg ) . type ( arg ) ;
getSNSClient ( arg ) . setEndpoint ( arg ) ;
websocket = client . prepareGet ( arg ) . execute ( arg ) . get ( arg ) ;
return context . createRouteStaticEndpointJson ( arg ) ;
return enabled && event instanceof ExchangeSendingEvent || event instanceof RouteStartedEvent ;
return consumerStreams ;
return groupId ;
return partitioner ;
return zookeeperHost ;
return zookeeperPort ;
this . consumerStreams = consumerStreams ;
this . groupId = groupId ;
this . partitioner = partitioner ;
this . zookeeperHost = zookeeperHost ;
this . zookeeperPort = zookeeperPort ;
List < Map < String , Object >> generatedKeys = out . getIn ( arg ) . getHeader ( arg ) ;
solrFixtures . clearIndex ( arg ) ;
int nbMessages = 100 ;
metricRegistry = createMetricRegistry ( arg ) ;
return metricRegistry ;
listing = instance . client . getMetadataWithChildren ( arg ) ;
downloadedFile = instance . client . getFile ( arg ) ;
entry = instance . client . getMetadata ( arg ) ;
uploadedFile = instance . client . uploadFile ( arg ) ;
listing = instance . client . getMetadataWithChildren ( arg ) ;
entries = instance . client . searchFileAndFolderNames ( arg ) ;
classpathElements = project . getRuntimeClasspathElements ( arg ) ;
return resultType . getCanonicalName ( arg ) ;
classes = Pattern . compile ( arg ) ;
final Substitution [ ] adapters = new Substitution [ 3 ] ;
return proxyCache . get ( arg ) ;
inOrder . verify ( arg ) . getLongHeader ( arg ) ;
inOrder . verify ( arg ) . getLongHeader ( arg ) ;
inOrder . verify ( arg ) . getLongHeader ( arg ) ;
inOrder . verify ( arg ) . getLongHeader ( arg ) ;
renameFileUsingCopy ( arg ) ;
configureMojo ( arg ) ;
configureMojo ( arg ) ;
configureMojo ( arg ) ;
return methodHelper . invokeMethod ( arg ) ;
Enum < ? extends ApiMethod > result ;
List < Enum < ? extends ApiMethod >> filteredMethods = methodHelper . filterMethods ( arg ) ;
result = methodHelper . getHighestPriorityMethod ( arg ) ;
candidates = new ArrayList < Enum < ? extends ApiMethod >> ( arg ) ;
final List < Enum < ? extends ApiMethod >> filteredMethods = methodHelper . filterMethods ( arg ) ;
method = methodHelper . getHighestPriorityMethod ( arg ) ;
final Enum < ? extends ApiMethod > method = findMethod ( arg ) ;
List < Object > arguments = ARGUMENTS_MAP . get ( arg ) ;
List < T > methods = METHOD_MAP . get ( arg ) ;
return Collections . unmodifiableList ( arg ) ;
final List < T > filteredSet = filterMethods ( arg ) ;
List < TestMethod > methods = apiMethodHelper . filterMethods ( arg ) ;
methods = apiMethodHelper . filterMethods ( arg ) ;
methods = apiMethodHelper . filterMethods ( arg ) ;
methods = apiMethodHelper . filterMethods ( arg ) ;
methods = apiMethodHelper . filterMethods ( arg ) ;
List < TestMethod > methods = apiMethodHelper . getCandidateMethods ( arg ) ;
final List < ApiMethodParser . ApiMethodModel > models = parser . parse ( arg ) ;
String argText = methodTextBuilder . toString ( arg ) . replaceAll ( arg ) . replaceAll ( arg ) ;
final Set < String > apiNames = new TreeSet < String > ( arg ) ;
Class < ? extends ApiMethod > apiMethod = ( Class < ? extends ApiMethod > ) entry . getKey ( arg ) ;
return this . componentName + Component ;
this . reportOutputDirectory = reportOutputDirectory ;
interceptArgumentNames ( arg ) ;
doProcessResult ( arg ) ;
interceptEndpointArguments ( arg ) ;
String filterString = ( String ) it . next ( arg ) ;
return ( arg ) . getWebSocket ( arg ) ;
byte [ ] resp = new byte [ ( ( byte [ ] ) req ) . length + RESPONSE_GREETING_BYTES . length ] ;
ConnectorRef conector = component . getConnectors ( arg ) . values ( arg ) . iterator ( arg ) . next ( arg ) ;
onSubscribe ( arg ) ;
Class < ? > type = argument . getType ( arg ) ;
String key = splat ;
String acceptType = getEndpoint ( arg ) . getAcceptType ( arg ) ;
Spark . get ( arg ) ;
openConnectionAndChannel ( arg ) ;
return Collections . unmodifiableList ( arg ) ;
propertiesHelper . getEndpointProperties ( arg ) ;
doProcessResult ( arg ) ;
String parentId = 0 ;
parentId = exchange . getProperty ( arg ) ;
ZipEntry entry = null ;
final List < ApiMethod > filteredMethods = ApiMethodHelper . filterMethods ( arg ) ;
List < ApiMethod > filteredMethods = ApiMethodHelper . filterMethods ( arg ) ;
List < ApiMethod > methods = ApiMethodHelper . filterMethods ( arg ) ;
methods = ApiMethodHelper . filterMethods ( arg ) ;
methods = ApiMethodHelper . filterMethods ( arg ) ;
methods = ApiMethodHelper . filterMethods ( arg ) ;
methods = ApiMethodHelper . filterMethods ( arg ) ;
String [ ] argTypes = typeArgs . split ( arg ) ;
camelLogger = new CamelLogger ( arg ) ;
camelLogger = new CamelLogger ( arg ) ;
answer . setUrl ( arg ) ;
verb . setTo ( arg ) ;
rest ( arg ) . path ( arg ) . get ( arg ) . to ( arg ) . get ( arg ) . to ( arg ) . post ( arg ) . to ( arg ) ;
rest ( arg ) . path ( arg ) . get ( arg ) . routeId ( arg ) . to ( arg ) . get ( arg ) . routeId ( arg ) . to ( arg ) . post ( arg ) . to ( arg ) ;
rest ( arg ) . path ( arg ) . get ( arg ) . routeId ( arg ) . to ( arg ) . get ( arg ) . accept ( arg ) . routeId ( arg ) . to ( arg ) . post ( arg ) . to ( arg ) ;
rest ( arg ) . path ( arg ) . get ( arg ) . routeId ( arg ) . to ( arg ) . transform ( arg ) . get ( arg ) . accept ( arg ) . routeId ( arg ) . to ( arg ) . transform ( arg ) . post ( arg ) . to ( arg ) ;
rest ( arg ) . path ( arg ) . get ( arg ) . routeId ( arg ) . to ( arg ) . endPath ( arg ) . get ( arg ) . accept ( arg ) . routeId ( arg ) . to ( arg ) . endPath ( arg ) . post ( arg ) . to ( arg ) ;
rest ( arg ) . path ( arg ) . get ( arg ) . routeId ( arg ) . to ( arg ) . endPath ( arg ) . get ( arg ) . accept ( arg ) . routeId ( arg ) . to ( arg ) . endPath ( arg ) . post ( arg ) . to ( arg ) ;
rest ( arg ) . path ( arg ) . get ( arg ) . to ( arg ) . get ( arg ) . to ( arg ) . post ( arg ) . to ( arg ) ;
rest ( arg ) . path ( arg ) . get ( arg ) . to ( arg ) . get ( arg ) . to ( arg ) . post ( arg ) . to ( arg ) ;
rest ( arg ) . path ( arg ) . get ( arg ) . to ( arg ) . transform ( arg ) . endPath ( arg ) . path ( arg ) . get ( arg ) . accept ( arg ) . to ( arg ) . transform ( arg ) . post ( arg ) . to ( arg ) ;
rest ( arg ) . path ( arg ) . get ( arg ) . to ( arg ) . endPath ( arg ) . path ( arg ) . get ( arg ) . accept ( arg ) . to ( arg ) . endPath ( arg ) . post ( arg ) . to ( arg ) ;
rest ( arg ) . path ( arg ) . get ( arg ) . to ( arg ) . path ( arg ) . get ( arg ) . accept ( arg ) . to ( arg ) . post ( arg ) . to ( arg ) ;
rest ( arg ) . path ( arg ) . get ( arg ) . to ( arg ) . path ( arg ) . get ( arg ) . accept ( arg ) . to ( arg ) . post ( arg ) . to ( arg ) ;
rest ( arg ) . component ( arg ) . path ( arg ) . get ( arg ) . to ( arg ) . get ( arg ) . to ( arg ) . post ( arg ) . to ( arg ) ;
rest ( arg ) . path ( arg ) . to ( arg ) . path ( arg ) . get ( arg ) . to ( arg ) . path ( arg ) . post ( arg ) . to ( arg ) ;
return path . head ( arg ) ;
return path . verb ( arg ) ;
rest ( arg ) . path ( arg ) . get ( arg ) . consumes ( arg ) . to ( arg ) . transform ( arg ) . constant ( arg ) ;
rest ( arg ) . path ( arg ) . get ( arg ) . to ( arg ) . transform ( arg ) . simple ( arg ) ;
rest ( arg ) . component ( arg ) . path ( arg ) . get ( arg ) . consumes ( arg ) . to ( arg ) . transform ( arg ) . simple ( arg ) . endPath ( arg ) . path ( arg ) . get ( arg ) . consumes ( arg ) . to ( arg ) . transform ( arg ) . simple ( arg ) . endPath ( arg ) . path ( arg ) . get ( arg ) . consumes ( arg ) . to ( arg ) . transform ( arg ) . simple ( arg ) ;
rest ( arg ) . component ( arg ) . get ( arg ) . consumes ( arg ) . to ( arg ) . transform ( arg ) . simple ( arg ) . endRest ( arg ) . get ( arg ) . consumes ( arg ) . to ( arg ) . transform ( arg ) . simple ( arg ) . endRest ( arg ) . get ( arg ) . consumes ( arg ) . to ( arg ) . transform ( arg ) . simple ( arg ) ;
return getContext ( arg ) . getRestConfigurationDefinition ( arg ) ;
ctx . setRestConfigurationDefinition ( arg ) ;
restConfiguration ( arg ) . component ( arg ) . host ( arg ) . port ( arg ) ;
rest ( arg ) . get ( arg ) . consumes ( arg ) . to ( arg ) . endRest ( arg ) . post ( arg ) . to ( arg ) ;
rest ( arg ) . uri ( arg ) . get ( arg ) . consumes ( arg ) . to ( arg ) . endRest ( arg ) . post ( arg ) . to ( arg ) ;
rest ( arg ) . get ( arg ) . consumes ( arg ) . to ( arg ) . endRest ( arg ) . post ( arg ) . to ( arg ) ;
rest ( arg ) . get ( arg ) . consumes ( arg ) . to ( arg ) . transform ( arg ) . constant ( arg ) ;
rest ( arg ) . get ( arg ) . to ( arg ) . transform ( arg ) . simple ( arg ) ;
rest ( arg ) . uri ( arg ) . get ( arg ) . consumes ( arg ) . to ( arg ) . transform ( arg ) . simple ( arg ) . endRest ( arg ) . get ( arg ) . consumes ( arg ) . to ( arg ) . transform ( arg ) . simple ( arg ) . endRest ( arg ) . get ( arg ) . consumes ( arg ) . to ( arg ) . transform ( arg ) . simple ( arg ) ;
return context . isMessageHistory ( arg ) ;
rest ( arg ) . uri ( arg ) . get ( arg ) . consumes ( arg ) . route ( arg ) . to ( arg ) . transform ( arg ) . simple ( arg ) . endRest ( arg ) . get ( arg ) . consumes ( arg ) . route ( arg ) . to ( arg ) . transform ( arg ) . simple ( arg ) . endRest ( arg ) . get ( arg ) . consumes ( arg ) . route ( arg ) . to ( arg ) . transform ( arg ) . simple ( arg ) ;
restConfiguration ( arg ) . component ( arg ) . host ( arg ) . port ( arg ) . property ( arg ) ;
this . propertyPrefix = FilePathResolver . resolvePath ( arg ) ;
this . propertySuffix = FilePathResolver . resolvePath ( arg ) ;
ChannelBuffer [ ] delimiters = delimiter == TextLineDelimiter . LINE ? Delimiters . lineDelimiter ( arg ) : Delimiters . nulDelimiter ( arg ) ;
ChannelBuffer buf = ChannelBuffers . dynamicBuffer ( arg ) ;
buf = ByteBufAllocator . DEFAULT . buffer ( arg ) ;
rest ( arg ) . post ( arg ) . as ( arg ) . to ( arg ) ;
rest ( arg ) . post ( arg ) . as ( arg ) . to ( arg ) ;
rest ( arg ) . post ( arg ) . as ( arg ) . to ( arg ) ;
verb . setType ( arg ) ;
verb . setTypeList ( arg ) ;
verb . setType ( arg ) ;
rest ( arg ) . get ( arg ) . consumes ( arg ) . to ( arg ) . post ( arg ) . to ( arg ) ;
rest ( arg ) . get ( arg ) . consumes ( arg ) . to ( arg ) . post ( arg ) . to ( arg ) ;
result = getConfiguration ( arg ) . getXpathToIdAttributes ( arg ) ;
rest ( arg ) . post ( arg ) . type ( arg ) . route ( arg ) . bean ( arg ) ;
rest ( arg ) . get ( arg ) . consumes ( arg ) . produces ( arg ) . to ( arg ) . post ( arg ) . to ( arg ) ;
rest ( arg ) . get ( arg ) . consumes ( arg ) . produces ( arg ) . to ( arg ) . post ( arg ) . to ( arg ) ;
restConfiguration ( arg ) . component ( arg ) . host ( arg ) . port ( arg ) ;
restConfiguration ( arg ) . component ( arg ) . host ( arg ) . port ( arg ) ;
restConfiguration ( arg ) . component ( arg ) . host ( arg ) . port ( arg ) ;
restConfiguration ( arg ) . component ( arg ) . host ( arg ) . port ( arg ) ;
restConfiguration ( arg ) . component ( arg ) . host ( arg ) . port ( arg ) ;
isXml = body . startsWith ( arg ) || body . contains ( arg ) ;
isXml = body . startsWith ( arg ) || body . contains ( arg ) ;
String name = jsonDataFormat ;
return rest ;
List < Map < String , Object >> list = extractRows ( arg ) ;
String result = StringEscapeUtils . unescapeHtml ( arg ) . replaceAll ( arg ) ;
return verb ;
rest ( arg ) . consumes ( arg ) . produces ( arg ) . get ( arg ) . outType ( arg ) . to ( arg ) . get ( arg ) . outTypeList ( arg ) . to ( arg ) . put ( arg ) . type ( arg ) . outType ( arg ) . to ( arg ) ;
String verb = ObjectHelper . before ( arg ) ;
answer . setVerb ( arg ) ;
rest . setUri ( arg ) ;
rest ( arg ) . uri ( arg ) . get ( arg ) . consumes ( arg ) . to ( arg ) . post ( arg ) . to ( arg ) ;
restConfiguration ( arg ) . component ( arg ) . bindingMode ( arg ) . dataFormatProperty ( arg ) ;
rest ( arg ) . consumes ( arg ) . produces ( arg ) . get ( arg ) . outType ( arg ) . to ( arg ) . put ( arg ) . type ( arg ) . outType ( arg ) . to ( arg ) . get ( arg ) . outTypeList ( arg ) . to ( arg ) ;
rest ( arg ) . consumes ( arg ) . produces ( arg ) . get ( arg ) . outType ( arg ) . to ( arg ) . put ( arg ) . type ( arg ) . to ( arg ) . get ( arg ) . outTypeList ( arg ) . to ( arg ) ;
return xmlUnmarshal . process ( arg ) ;
return jsonUnmarshal . process ( arg ) ;
registry = route . getRouteContext ( arg ) . getCamelContext ( arg ) . hasServiceByType ( arg ) ;
registryService . setRegistry ( arg ) ;
answer . setRegistry ( arg ) ;
factory . setRegistry ( arg ) ;
factory . setRegistry ( arg ) ;
broker . getManagementContext ( arg ) . setConnectorPort ( arg ) ;
consumers . drainPool ( arg ) ;
getProducers ( arg ) . fillPool ( arg ) ;
getProducers ( arg ) . drainPool ( arg ) ;
MessageConsumerResource consumer = consumers . borrowObject ( arg ) ;
typeName = string ;
ErrorListener errorListener = getAndRemoveParameter ( arg ) ;
Object topicValue = exchange . getProperty ( arg ) ;
repeat = EndpointHelper . resloveStringParameter ( arg ) ;
interval = EndpointHelper . resloveStringParameter ( arg ) ;
long interval = EndpointHelper . resloveStringParameter ( arg ) ;
String timeZone = EndpointHelper . resloveStringParameter ( arg ) ;
Long interval = EndpointHelper . resloveStringParameter ( arg ) ;
Integer counter = EndpointHelper . resloveStringParameter ( arg ) ;
from ( arg ) . onException ( arg ) . handled ( arg ) . end ( arg ) . choice ( arg ) . when ( arg ) . log ( arg ) . stop ( arg ) . when ( arg ) . log ( arg ) . setFaultBody ( arg ) . when ( arg ) . log ( arg ) . throwException ( arg ) . when ( arg ) . log ( arg ) . throwException ( arg ) . end ( arg ) . log ( arg ) . to ( arg ) ;
targetEntityManager . joinTransaction ( arg ) ;
targetEntityManager . joinTransaction ( arg ) ;
targetEntityManager . persist ( arg ) ;
return targetEntityManager . merge ( arg ) ;
final Olingo2App result ;
return apiProxy ;
ChannelInitializer < Channel > pipelineFactory = new HttpServerSharedPipelineFactory ( arg ) ;
pipelineFactory = new DefaultServerPipelineFactory ( arg ) ;
ClientPipelineFactory factory = configuration . getClientPipelineFactory ( arg ) ;
pipelineFactory = new DefaultClientPipelineFactory ( arg ) ;
result = method . getReturnType ( arg ) . getCanonicalName ( arg ) ;
getClientFactory ( arg ) . makeClient ( arg ) ;
clientFactory = new DefaultGoogleDriveClientFactory ( arg ) ;
rejectQuicly ( arg ) ;
rejectQuicly ( arg ) ;
rejectQuicly ( arg ) ;
long deliveryTag = 0 ;
rejectQuicly ( arg ) ;
BeanstalkComponent . connFactory = connFactory ;
if ( log . isWarnEnabled ( arg ) ) log . warn ( arg ) ;
if ( log . isErrorEnabled ( arg ) ) log . error ( arg ) ;
if ( log . isErrorEnabled ( arg ) ) log . error ( arg ) ;
if ( log . isErrorEnabled ( arg ) ) log . error ( arg ) ;
return priority ;
return timeToRun ;
this . priority = priority ;
this . timeToRun = timeToRun ;
final ConnectionSettingsFactory factory = BeanstalkComponent . connFactory ;
final ConnectionSettingsFactory factory = BeanstalkComponent . connFactory ;
final ConnectionSettingsFactory factory = BeanstalkComponent . connFactory ;
BeanstalkComponent . connFactory = new ConnectionSettingsFactory ( arg ) ;
this . deleteImmediately =! awaitingCompletion ;
return new JIRAProducer ( arg ) ;
HttpRequest request = new DefaultHttpRequest ( arg ) ;
apnsServiceFactory . setSslContext ( arg ) ;
return serviceUri == null ? other . serviceUri == null : serviceUri . equals ( arg ) && contentType == null ? other . contentType == null : contentType . equals ( arg ) && httpHeaders == null ? other . httpHeaders == null : httpHeaders . equals ( arg ) && connectTimeout == other . connectTimeout && socketTimeout == other . socketTimeout && proxy == null ? other . proxy == null : proxy . equals ( arg ) && sslContext == null ? other . sslContext == null : sslContext . equals ( arg ) && httpAsyncClientBuilder == null ? other . httpAsyncClientBuilder == null : httpAsyncClientBuilder . equals ( arg ) ;
camelContextConfiguration . postConfiguration ( arg ) ;
verify ( arg ) . postConfiguration ( arg ) ;
restConfiguration ( arg ) . component ( arg ) . host ( arg ) . port ( arg ) ;
restConfiguration ( arg ) . component ( arg ) . host ( arg ) . port ( arg ) ;
restConfiguration ( arg ) . component ( arg ) . host ( arg ) ;
restConfiguration ( arg ) . component ( arg ) . host ( arg ) . port ( arg ) ;
restConfiguration ( arg ) . component ( arg ) . host ( arg ) . port ( arg ) ;
Set < String > customIds = new HashSet <> ( arg ) ;
return clientPipelineFactory ;
this . clientPipelineFactory = clientPipelineFactory ;
ServerInitializerFactory factory = configuration . getServerPipelineFactory ( arg ) ;
ClientInitializerFactory factory = configuration . getClientPipelineFactory ( arg ) ;
return serverPipelineFactory ;
this . serverPipelineFactory = serverPipelineFactory ;
verify ( arg ) . beforeStart ( arg ) ;
CamelLogger camelLogger = null ;
List < String [ ] > options = EndpointHelper . parseEndpointExplainJson ( arg ) ;
List < String [ ] > options = EndpointHelper . parseEndpointExplainJson ( arg ) ;
List < String [ ] > answer = new ArrayList <> ( arg ) ;
String description = option [ 2 ] ;
String option = entry . getKey ( arg ) ;
String option = row . get ( arg ) ;
List < Map < String , String >> rows = JsonSchemaHelper . parseEndpointExplainJson ( arg ) ;
List < Map < String , String >> options = JsonSchemaHelper . parseEndpointExplainJson ( arg ) ;
List < Map < String , String >> options = JsonSchemaHelper . parseEndpointExplainJson ( arg ) ;
List < ObjectId > oids = new ArrayList < ObjectId > ( arg ) ;
DockerClientConfig . DockerClientConfigBuilder configBuilder = new DockerClientConfig . DockerClientConfigBuilder ( arg ) . withUsername ( arg ) . withPassword ( arg ) . withEmail ( arg ) . withReadTimeout ( arg ) . withUri ( arg ) ;
Collection < Field > fields = new ArrayList <> ( arg ) ;
Map < String , String > result = new HashMap <> ( arg ) ;
Map < String , String > defaultProps = new HashMap <> ( arg ) ;
List < RoutesBuilder > routesBuilders = new ArrayList <> ( arg ) ;
return documentation ;
String status = context . hasComponent ( arg ) != null ? loaded : classpath ;
mockEndpointsAndSkip ( arg ) ;
bootstrap . bind ( arg ) . syncUninterruptibly ( arg ) . channel ( arg ) . closeFuture ( arg ) . syncUninterruptibly ( arg ) ;
bootstrap . bind ( arg ) . syncUninterruptibly ( arg ) . channel ( arg ) . closeFuture ( arg ) . syncUninterruptibly ( arg ) ;
group . shutdownGracefully ( arg ) ;
performContextCommand ( arg ) ;
Map < String , String > row = new HashMap <> ( arg ) ;
trigger = createTrigger ( arg ) ;
CamelComponentCatalog catalog = new CamelComponentCatalogService ( arg ) ;
CamelComponentCatalog catalog = new CamelComponentCatalogService ( arg ) ;
CamelComponentCatalog catalog = new CamelComponentCatalogService ( arg ) ;
int statusLen = Math . min ( arg ) ;
statusLen = Math . max ( arg ) ;
int maxStatusLen = STATUS_COLUMN_LABEL . length ( arg ) ;
String status = safeNull ( arg ) ;
Set < String > labels = camelController . listLabelCatalog ( arg ) ;
List < Map < String , String >> rows = JsonSchemaHelper . parseJsonSchema ( arg ) ;
List < Map < String , String >> rows = JsonSchemaHelper . parseJsonSchema ( arg ) ;
String defaultMetricsName = endpoint . getMetricsName ( arg ) ;
MetricRegistry registry = endpoint . getRegistry ( arg ) ;
Endpoint endpoint = component . createNewEndpoint ( arg ) ;
Endpoint endpoint = component . createNewEndpoint ( arg ) ;
Endpoint endpoint = component . createNewEndpoint ( arg ) ;
Endpoint endpoint = component . createNewEndpoint ( arg ) ;
int size = min ( arg ) ;
new EndpointSubscription < T > ( arg ) ;
result . setRequestBufferSize ( arg ) ;
result . setRequestHeaderSize ( arg ) ;
result . setResponseBufferSize ( arg ) ;
result . setResponseBufferSize ( arg ) ;
setThreadPool ( arg ) ;
return super . getResponseContentBytes ( arg ) ;
final HttpFields f = super . getResponseFields ( arg ) ;
return super . getResponseStatus ( arg ) ;
super . setRequestContentSource ( arg ) ;
super . setRequestContent ( arg ) ;
super . setRequestContent ( arg ) ;
super . setRequestContent ( arg ) ;
super . setRequestContentType ( arg ) ;
super . setURL ( arg ) ;
Endpoint endpoint = new GitHubEndpoint ( arg ) ;
Endpoint endpoint = new JIRAEndpoint ( arg ) ;
answer = JmsMessageType . Bytes ;
SjmsExchangeMessageHelper . setJMSReplyTo ( arg ) ;
SjmsExchangeMessageHelper . populateExchange ( arg ) ;
bodyHeaders = new HashMap <> ( arg ) ;
bodyHeaders = new HashMap <> ( arg ) ;
Map < String , Object > body = new HashMap <> ( arg ) ;
List list = new ArrayList <> ( arg ) ;
Map < String , Object > headers = new HashMap <> ( arg ) ;
Map < String , Object > headers = new HashMap <> ( arg ) ;
Collection < Message > messages = new ArrayList <> ( arg ) ;
Exchanger < Object > messageExchanger = new Exchanger <> ( arg ) ;
Map < Object , Object > map = new HashMap <> ( arg ) ;
channelFactory . shutdown ( arg ) ;
datagramChannelFactory . shutdown ( arg ) ;
return new CamelNioServerBossPool ( arg ) ;
workerPool = new CamelNioWorkerPool ( arg ) ;
Chunk newChunk = null ;
MockJiraRestClient jiraRestClient = ( MockJiraRestClient ) factory . getClient ( arg ) ;
MockJiraRestClient jiraRestClient = ( MockJiraRestClient ) factory . getClient ( arg ) ;
MockJiraRestClient client = ( MockJiraRestClient ) factory . getClient ( arg ) ;
MockJiraRestClient client = ( MockJiraRestClient ) factory . getClient ( arg ) ;
Connection connection = ( Connection ) entityManager . unwrap ( arg ) ;
this . factory = NIOServerCnxnFactory . createFactory ( arg ) ;
Spark . stop ( arg ) ;
Spark . setPort ( arg ) ;
Spark . setPort ( arg ) ;
Spark . setIpAddress ( arg ) ;
ServiceTracker < ? , ? > tracker = null ;
tracker = new ServiceTracker < Object , Object > ( arg ) ;
channelPool = new GenericObjectPool <> ( arg ) ;
return ( arg ) ? GetMessageBody ( arg ) : xmppPacket ;
name = BlueprintTracerRefTest . class . getName ( arg ) ;
List < Map < String , Object >> data = getEndpoint ( arg ) . queryForList ( arg ) ;
List < Map < String , Object >> generatedKeys = getEndpoint ( arg ) . queryForList ( arg ) ;
rest ( arg ) . get ( arg ) . consumes ( arg ) . to ( arg ) . post ( arg ) . to ( arg ) ;
String xml = camelController . getRouteModelAsXml ( arg ) ;
Map < String , List < RestRegistry . RestService >> answer = new LinkedHashMap < String , List < RestRegistry . RestService >> ( arg ) ;
String json = camelController . explainEndpoint ( arg ) ;
String json = camelController . explainEndpoint ( arg ) ;
List < Route > camelRoutes = camelController . getRoutes ( arg ) ;
List < Route > routes = camelController . getRoutes ( arg ) ;
Set < String > names = new LinkedHashSet <> ( arg ) ;
final List < CamelContext > camelContexts = camelController . getCamelContexts ( arg ) ;
routeLen = Math . max ( arg ) ;
final List < Map < String , String >> camelContexts = camelController . getCamelContexts2 ( arg ) ;
JettyHttpComponent jetty = new JettyHttpComponent ( arg ) ;
controller = new JolokiaCamelController ( arg ) ;
controller = new JolokiaCamelController ( arg ) ;
controller = new JolokiaCamelController ( arg ) ;
controller = new JolokiaCamelController ( arg ) ;
controller = new JolokiaCamelController ( arg ) ;
controller = new JolokiaCamelController ( arg ) ;
controller = new JolokiaCamelController ( arg ) ;
controller = new JolokiaCamelController ( arg ) ;
controller = new JolokiaCamelController ( arg ) ;
controller = new JolokiaCamelController ( arg ) ;
controller = new JolokiaCamelController ( arg ) ;
controller = new JolokiaCamelController ( arg ) ;
controller = new JolokiaCamelController ( arg ) ;
controller = new JolokiaCamelController ( arg ) ;
controller = new JolokiaCamelController ( arg ) ;
controller = new JolokiaCamelController ( arg ) ;
controller = new JolokiaCamelController ( arg ) ;
controller = new JolokiaCamelController ( arg ) ;
camelController . resumeContext ( arg ) ;
List < J4pReadRequest > list = new ArrayList <> ( arg ) ;
return ProcessorBuilder . removeProperties ( arg ) ;
return ProcessorBuilder . removeProperties ( arg ) ;
return ProcessorBuilder . removeProperties ( arg ) ;
J4pVersionResponse vr = null ;
BulkRequest request = null ;
retVal = false ;
exchange . removeProperties ( arg ) ;
Set < String > enums = new LinkedHashSet < String > ( arg ) ;
Set < String > oneOfTypes = new LinkedHashSet < String > ( arg ) ;
String doc = entry . getDocumentationWithNotes ( arg ) ;
Set < String > labels = catalog . findLabels ( arg ) ;
