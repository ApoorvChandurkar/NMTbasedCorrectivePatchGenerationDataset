copy . put ( arg ) ;
return req ;
return Boolean . parseBoolean ( arg ) ;
Assert . assertTrue ( arg ) ;
if ( map == null ) throw new IllegalStateException ( arg ) ;
Set < String > knownRoles = new HashSet ( arg ) ;
if ( destroys == null ) destroys = new ArrayList ( arg ) ;
Path basePath = baseDir . toPath ( arg ) . resolve ( arg ) ;
LOG . info ( arg ) ;
result = prime * result + ( ( dir == null ) ? 0 : dir . hashCode ( arg ) ) ;
chunk . callback . failed ( arg ) ;
if ( _state == null ) LOG . warn ( arg ) ;
if ( _state == null ) LOG . warn ( arg ) ;
LOG . debug ( arg ) ;
channel . content ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
return ! parser . parse ( arg ) ;
if ( ! parse ( arg ) ) return false ;
if ( ! parse ( arg ) ) return false ;
LOG . info ( arg ) ;
INSTANCE . out . printf ( arg ) ;
INSTANCE . err . printf ( arg ) ;
INSTANCE . err . printf ( arg ) ;
LOG . debug ( arg ) ;
return true ;
return true ;
buf . put ( arg ) ;
buf . put ( arg ) ;
Assert . assertEquals ( arg ) ;
if ( c >= 128 ) throw new IllegalArgumentException ( arg ) ;
if ( c >= 128 ) throw new IllegalArgumentException ( arg ) ;
buf . put ( arg ) ;
int i = buf . get ( arg ) & 0xff ;
b = 0xff & buf . get ( arg ) ;
b = 0xff & buf . get ( arg ) ;
client . write ( arg ) ;
return null ;
String [ ] values = value . split ( arg ) ;
return super . parsedHeader ( arg ) ;
HttpField field = fields . get ( arg ) ;
add ( arg ) ;
add ( arg ) ;
return get ( arg ) ;
if ( put ) remove ( arg ) ;
set ( arg ) ;
if ( ! put ) add ( arg ) ;
active = queue . poll ( arg ) ;
MetaData . Request metaData = new MetaData . Request ( arg ) ;
MetaData . Request metaData = new MetaData . Request ( arg ) ;
fail ( arg ) ;
IStream stream = getStream ( arg ) ;
generator . generate ( arg ) ;
flusher . offer ( arg ) ;
return length ;
session . frame ( arg ) ;
messageComplete ( arg ) ;
messageComplete ( arg ) ;
super . messageComplete ( arg ) ;
return super . startRequest ( arg ) ;
HttpInput input = ( HttpInput ) _request . getHttpInput ( arg ) ;
callback . succeeded ( arg ) ;
client . newStream ( arg ) ;
client . ping ( arg ) ;
super . succeeded ( arg ) ;
entry . failed ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
_callback = null ;
session . close ( arg ) ;
close ( arg ) ;
session . close ( arg ) ;
out . tag ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
Thread . currentThread ( arg ) . sleep ( arg ) ;
return _metadata == null ? null : _metadata . getHttpVersion ( arg ) ;
return _metadata == null ? null : _metadata . getHttpVersion ( arg ) . toString ( arg ) ;
return _httpMethod ;
return _serverPort ;
return HttpMethod . HEAD . asString ( arg ) . equals ( arg ) ;
_uri . clear ( arg ) ;
_uri . parse ( arg ) ;
LOG . ignore ( arg ) ;
final int p = LOG . isDebugEnabled ( arg ) ? buffer . position ( arg ) : null ;
return StringUtil . toLong ( arg ) ;
_fields . addAll ( arg ) ;
_fields . set ( arg ) ;
if ( ! put ) _fields . add ( arg ) ;
String sessionCookie = response . getHeaders ( arg ) . getStringField ( arg ) ;
name = _context . get ( arg ) ;
name = _context . get ( arg ) ;
return frame . getStreamId ( arg ) ;
stream . getSession ( arg ) . reset ( arg ) ;
stream1 . getSession ( arg ) . reset ( arg ) ;
stream . getSession ( arg ) . reset ( arg ) ;
session . reset ( arg ) ;
if ( ! response . isCommitted ( arg ) ) response . setStatus ( arg ) ;
if ( _initOnStartup ) setInitParameter ( arg ) ;
terminate ( arg ) ;
terminate ( arg ) ;
terminate ( arg ) ;
terminate ( arg ) ;
terminate ( arg ) ;
terminate ( arg ) ;
terminate ( arg ) ;
terminate ( arg ) ;
terminate ( arg ) ;
LOG . debug ( arg ) ;
if ( _initOnStartup ) setInitParameter ( arg ) ;
if ( LOG . isDebugEnabled ( arg ) ) LOG . debug ( arg ) ;
context . addServlet ( arg ) ;
while ( arg ) runChanges ( arg ) ;
HttpGenerator . ResponseInfo info = null ;
info = new HttpGenerator . ResponseInfo ( arg ) ;
ResponseInfo info = new ResponseInfo ( arg ) ;
buf . append ( arg ) ;
System . err . println ( arg ) ;
err . printf ( arg ) ;
err . printf ( arg ) ;
System . err . println ( arg ) ;
System . err . println ( arg ) ;
_transport . abort ( arg ) ;
_channel . getRequest ( arg ) . getHttpInput ( arg ) . consumeAll ( arg ) ;
final Set < String > list = new HashSet <> ( arg ) ;
SelectorManager . LOG . debug ( arg ) ;
if ( SelectorManager . LOG . isDebugEnabled ( arg ) ) SelectorManager . LOG . debug ( arg ) ;
SelectorManager . LOG . warn ( arg ) ;
if ( SelectorManager . LOG . isDebugEnabled ( arg ) ) SelectorManager . LOG . debug ( arg ) ;
SelectorManager . LOG . ignore ( arg ) ;
if ( SelectorManager . LOG . isDebugEnabled ( arg ) ) SelectorManager . LOG . debug ( arg ) ;
if ( SelectorManager . LOG . isDebugEnabled ( arg ) ) SelectorManager . LOG . debug ( arg ) ;
if ( SelectorManager . LOG . isDebugEnabled ( arg ) ) SelectorManager . LOG . debug ( arg ) ;
if ( SelectorManager . LOG . isDebugEnabled ( arg ) ) SelectorManager . LOG . debug ( arg ) ;
SelectorManager . LOG . warn ( arg ) ;
if ( SelectorManager . LOG . isDebugEnabled ( arg ) ) SelectorManager . LOG . debug ( arg ) ;
SelectorManager . LOG . debug ( arg ) ;
if ( SelectorManager . LOG . isDebugEnabled ( arg ) ) SelectorManager . LOG . debug ( arg ) ;
execute ( arg ) ;
execute ( arg ) ;
_request . getHttpInput ( arg ) . messageComplete ( arg ) ;
return _metadata . getURI ( arg ) ;
_transport . completed ( arg ) ;
new Thread ( arg ) ;
input . content ( arg ) ;
_in . content ( arg ) ;
