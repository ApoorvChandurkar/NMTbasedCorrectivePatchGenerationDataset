copy . put ( arg ) . flip ( arg ) ;
return request ;
return false . equalsIgnoreCase ( arg ) ;
Assert . assertThat ( arg ) ;
if ( map == null ) LOG . warn ( arg ) ;
Set < String > knownRoles = new HashSet <> ( arg ) ;
if ( destroys == null ) destroys = new ArrayList <> ( arg ) ;
Path basePath = baseDir . resolve ( arg ) ;
if ( LOG . isDebugEnabled ( arg ) ) LOG . debug ( arg ) ;
result = ( prime * result ) + ( ( dir == null ) ? 0 : dir . hashCode ( arg ) ) ;
if ( chunk != null ) chunk . callback . failed ( arg ) ;
if ( _state == null ) LOG . debug ( arg ) ;
if ( _state == null ) LOG . debug ( arg ) ;
if ( LOG . isDebugEnabled ( arg ) ) LOG . debug ( arg ) ;
if ( ! channel . content ( arg ) ) return true ;
if ( LOG . isDebugEnabled ( arg ) ) LOG . debug ( arg ) ;
if ( LOG . isDebugEnabled ( arg ) ) LOG . debug ( arg ) ;
return parser . parse ( arg ) ;
if ( parse ( arg ) ) return false ;
if ( parse ( arg ) ) return false ;
LOG . debug ( arg ) ;
out . printf ( arg ) ;
err . printf ( arg ) ;
err . printf ( arg ) ;
LOG . info ( arg ) ;
return false ;
return false ;
array [ p ++ ] = ( byte ) ( current >> n ) ;
array [ p ++ ] = ( byte ) current ;
assertEquals ( arg ) ;
if ( c >= 128 || c <   ) throw new IllegalArgumentException ( arg ) ;
if ( c >= 128 || c <   ) throw new IllegalArgumentException ( arg ) ;
if ( n < 8 ) buf . put ( arg ) ;
int i = buffer . get ( arg ) & 0xff ;
b = 0xff & buffer . get ( arg ) ;
b = 0xff & buffer . get ( arg ) ;
output . write ( arg ) ;
return session ;
String [ ] values = field . getValues ( arg ) ;
super . parsedHeader ( arg ) ;
HttpField field = fields . getField ( arg ) ;
_fields . add ( arg ) ;
_fields . add ( arg ) ;
return _fields . get ( arg ) ;
if ( put ) _fields . remove ( arg ) ;
_fields . set ( arg ) ;
if ( ! put ) _fields . add ( arg ) ;
if ( ! closed ) current = active = queue . poll ( arg ) ;
MetaData . Request metaData = newRequest ( arg ) ;
MetaData . Request metaData = newRequest ( arg ) ;
closed ( arg ) ;
final IStream stream = getStream ( arg ) ;
entry . generate ( arg ) ;
flusher . append ( arg ) ;
return data . remaining ( arg ) ;
session . data ( arg ) ;
onRequestComplete ( arg ) ;
onRequestComplete ( arg ) ;
onRequestComplete ( arg ) ;
return false ;
HttpInput input = _request . getHttpInput ( arg ) ;
super . succeeded ( arg ) ;
session . newStream ( arg ) ;
session . ping ( arg ) ;
callback . succeeded ( arg ) ;
entry . reset ( arg ) ;
if ( LOG . isDebugEnabled ( arg ) ) LOG . debug ( arg ) ;
if ( LOG . isDebugEnabled ( arg ) ) LOG . debug ( arg ) ;
if ( LOG . isDebugEnabled ( arg ) ) LOG . debug ( arg ) ;
if ( LOG . isDebugEnabled ( arg ) ) LOG . debug ( arg ) ;
if ( LOG . isDebugEnabled ( arg ) ) LOG . debug ( arg ) ;
if ( LOG . isDebugEnabled ( arg ) ) LOG . debug ( arg ) ;
_callback . succeeded ( arg ) ;
getSession ( arg ) . close ( arg ) ;
shutdown ( arg ) ;
getSession ( arg ) . close ( arg ) ;
if ( holder instanceof FilterHolder ) out . tag ( arg ) ;
if ( LOG . isDebugEnabled ( arg ) ) LOG . debug ( arg ) ;
if ( LOG . isDebugEnabled ( arg ) ) LOG . debug ( arg ) ;
if ( LOG . isDebugEnabled ( arg ) ) LOG . debug ( arg ) ;
TimeUnit . MILLISECONDS . sleep ( arg ) ;
return _metadata == null ? null : _metadata . getVersion ( arg ) ;
return _metadata == null ? null : _metadata . getVersion ( arg ) . toString ( arg ) ;
return _metadata . getMethod ( arg ) ;
return port ;
return _metadata != null && HttpMethod . HEAD . is ( arg ) ;
_metadata . getURI ( arg ) . clear ( arg ) ;
_metadata . getURI ( arg ) . parse ( arg ) ;
LOG . warn ( arg ) ;
final int p = _debug ? buffer . position ( arg ) : null ;
return Long . valueOf ( arg ) ;
for ( int i = 0 ; i < fields . _size ; i ++ ) add ( arg ) ;
_fields [ i ] = field ;
if ( ! put ) add ( arg ) ;
String sessionCookie = response . getHeaders ( arg ) . get ( arg ) ;
Entry name = _context . get ( arg ) ;
Entry name = _context . get ( arg ) ;
return streamId ;
stream . reset ( arg ) ;
stream1 . reset ( arg ) ;
stream . reset ( arg ) ;
reset ( arg ) ;
if ( ! response . isCommitted ( arg ) &&! baseRequest . getHttpChannelState ( arg ) . isAsync ( arg ) ) response . setStatus ( arg ) ;
setInitParameter ( arg ) ;
abort ( arg ) ;
abort ( arg ) ;
abort ( arg ) ;
abort ( arg ) ;
abort ( arg ) ;
abort ( arg ) ;
abort ( arg ) ;
abort ( arg ) ;
abort ( arg ) ;
if ( LOG . isDebugEnabled ( arg ) ) LOG . debug ( arg ) ;
setInitParameter ( arg ) ;
LOG . info ( arg ) ;
context . addServlet ( arg ) . setInitParameter ( arg ) ;
while ( arg ) select ( arg ) ;
MetaData . Response info = null ;
info = new MetaData . Response ( arg ) ;
MetaData . Response info = new MetaData . Response ( arg ) ;
append ( arg ) ;
StartLog . log ( arg ) ;
log ( arg ) ;
log ( arg ) ;
StartLog . warn ( arg ) ;
StartLog . warn ( arg ) ;
abort ( arg ) ;
if ( ! _channel . getRequest ( arg ) . getHttpInput ( arg ) . consumeAll ( arg ) ) _channel . abort ( arg ) ;
final Set < String > set = new HashSet <> ( arg ) ;
LOG . debug ( arg ) ;
if ( LOG . isDebugEnabled ( arg ) ) LOG . debug ( arg ) ;
LOG . warn ( arg ) ;
if ( LOG . isDebugEnabled ( arg ) ) LOG . debug ( arg ) ;
LOG . ignore ( arg ) ;
if ( LOG . isDebugEnabled ( arg ) ) LOG . debug ( arg ) ;
if ( LOG . isDebugEnabled ( arg ) ) LOG . debug ( arg ) ;
if ( LOG . isDebugEnabled ( arg ) ) LOG . debug ( arg ) ;
if ( LOG . isDebugEnabled ( arg ) ) LOG . debug ( arg ) ;
LOG . warn ( arg ) ;
if ( LOG . isDebugEnabled ( arg ) ) LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
if ( LOG . isDebugEnabled ( arg ) ) LOG . debug ( arg ) ;
return this ;
return this ;
_request . getHttpInput ( arg ) . eof ( arg ) ;
return _metadata == null ? null : _metadata . getURI ( arg ) ;
_transport . onCompleted ( arg ) ;
new Thread ( arg ) . start ( arg ) ;
input . addContent ( arg ) ;
_in . addContent ( arg ) ;
