( ( HttpChannel . Output ) getServletResponse ( arg ) . getOutputStream ( arg ) ) . sendContent ( arg ) ;
( ( HttpChannel . Output ) getServletResponse ( arg ) . getOutputStream ( arg ) ) . sendResponse ( arg ) ;
( ( HttpOutput ) out ) . sendContent ( arg ) ;
( ( HttpOutput ) out ) . sendContent ( arg ) ;
( _generator ) . <unk> ( arg ) ;
( ( AsyncEndPoint ) _endp ) . scheduleWrite ( arg ) ;
( ( AsyncEndPoint ) endp ) . asyncDispatch ( arg ) ;
( ( ContinuationListener ) LazyList . get ( arg ) ) . onComplete ( arg ) ;
_bout . writeTo ( arg ) ;
_bout . writeTo ( arg ) ;
( ( Callback ) attachment ) . failed ( arg ) ;
( ( SelectChannelConnector ) ( _server . getConnectors ( arg ) [ 0 ] ) ) . dump ( arg ) ;
child . destroy ( arg ) ;
listeners . get ( arg ) . onComplete ( arg ) ;
( ( HttpOutput ) getServletResponse ( arg ) . getOutputStream ( arg ) ) . sendContent ( arg ) ;
( ( AbstractHttpConnection . Output ) getServletResponse ( arg ) . getOutputStream ( arg ) ) . sendContent ( arg ) ;
( ( AbstractHttpConnection . Output ) getServletResponse ( arg ) . getOutputStream ( arg ) ) . sendResponse ( arg ) ;
( ( AbstractHttpConnection . Output ) out ) . sendContent ( arg ) ;
( ( AbstractHttpConnection . Output ) out ) . sendContent ( arg ) ;
( ( HttpGenerator ) super . _generator ) . sendResponse ( arg ) ;
baseRequest . getConnection ( arg ) . getGenerator ( arg ) . setPersistent ( arg ) ;
( ( HttpChannel . Output ) getServletResponse ( arg ) . getOutputStream ( arg ) ) . sendContent ( arg ) ;
connector0 . getConnectionFactory ( arg ) . <unk> ( arg ) . setSecurePort ( arg ) ;
response . addHeader ( arg ) ;
response . addHeader ( arg ) ;
response . addHeader ( arg ) ;
response . addHeader ( arg ) ;
response . addHeader ( arg ) ;
response . addHeader ( arg ) ;
response . addHeader ( arg ) ;
response . addHeader ( arg ) ;
response . addHeader ( arg ) ;
response . addHeader ( arg ) ;
response . addHeader ( arg ) ;
response . addHeader ( arg ) ;
injections . add ( arg ) ;
injections . add ( arg ) ;
session . <unk> ( arg ) ;
session . <unk> ( arg ) ;
_metadata . <unk> ( arg ) ;
( ( ChannelHttpConnector ) ( _server . getConnectors ( arg ) [ 0 ] ) ) . dump ( arg ) ;
_endp . setConnection ( arg ) ;
if ( key . isReadable ( arg ) || key . isWritable ( arg ) ) ( arg ) . schedule ( arg ) ;
( ( SelectableAsyncEndPoint ) endp ) . checkForIdleOrReadWriteTimeout ( arg ) ;
( ( SelectableAsyncEndPoint ) endpoint ) . onSelected ( arg ) ;
( ( SelectableAsyncEndPoint ) endpoint ) . onSelected ( arg ) ;
( ( AsyncEndPoint ) endpoint ) . scheduleIdle ( arg ) ;
( <unk> . <unk> ( arg ) ) . destroy ( arg ) ;
<unk> ( arg ) ;
l . <unk> ( arg ) ;
session . timeout ( arg ) ;
( ( StdErrLog ) Log . getLogger ( arg ) ) . setHideStacks ( arg ) ;
( ( StdErrLog ) Log . getLogger ( arg ) ) . setHideStacks ( arg ) ;
( ( StdErrLog ) Log . getLogger ( arg ) ) . setHideStacks ( arg ) ;
( ( StdErrLog ) Log . getLogger ( arg ) ) . setHideStacks ( arg ) ;
( ( StdErrLog ) Log . getLogger ( arg ) ) . setHideStacks ( arg ) ;
( ( StdErrLog ) Log . getLogger ( arg ) ) . setHideStacks ( arg ) ;
final CountDownLatch <unk> = new CountDownLatch ( arg ) ;
( request instanceof Request ? ( Request ) request : HttpChannel . getCurrentHttpChannel ( arg ) . getRequest ( arg ) ) . setHandled ( arg ) ;
( request instanceof Request ? ( Request ) request : AbstractHttpConnection . getCurrentConnection ( arg ) . getRequest ( arg ) ) . setHandled ( arg ) ;
count . incrementAndGet ( arg ) ;
-- _indexes [ TAIL_OFFSET ] ;
-- _indexes [ TAIL_OFFSET ] ;
Enumeration < String > protocols = request . getHeaders ( arg ) ;
Enumeration < String > protocols = request . getHeaders ( arg ) ;
@ SuppressWarnings ( arg ) Future < WriteResult > future = outbound . write ( arg ) ;
@ SuppressWarnings ( arg ) HttpInput < T > input = ( HttpInput < T > ) _request . getHttpInput ( arg ) ;
@ SuppressWarnings ( arg ) Map < Resource , Resource > frags = ( Map < Resource , Resource > ) context . getAttribute ( arg ) ;
@ SuppressWarnings ( arg ) Set < Resource > resources = ( Set < Resource > ) context . getAttribute ( arg ) ;
AsyncConnection connection = endp . getAsyncConnection ( arg ) ;
AsyncConnection connection = this ;
AsyncConnection delegate = super . newConnection ( arg ) ;
AsyncConnection switched = ( AsyncConnection ) _channel . getRequest ( arg ) . getAttribute ( arg ) ;
Connection c = destination . reserveConnection ( arg ) ;
Connection q_connection = null ;
Connection result = _connection ;
Extension ext = new IdentityExtension ( arg ) ;
AbstractHttpConnection . setCurrentHttpChannel ( arg ) ;
TestHttpChannel . setCurrentHttpChannel ( arg ) ;
AbstractHttpConnection connection = AbstractHttpConnection . getCurrentHttpChannel ( arg ) ;
TestHttpChannel connection = new TestHttpChannel ( arg ) ;
TestHttpChannel connection = new TestHttpChannel ( arg ) ;
TestHttpChannel connection = new TestHttpChannel ( arg ) ;
TestHttpChannel connection = new TestHttpChannel ( arg ) ;
TestHttpChannel connection = new TestHttpChannel ( arg ) ;
TestHttpChannel connection = new TestHttpChannel ( arg ) ;
AbstractHttpConnection httpConnection = AbstractHttpConnection . getCurrentHttpChannel ( arg ) ;
AbstractHttpConnection httpConnection = AbstractHttpConnection . getCurrentHttpChannel ( arg ) ;
HashSessionManager manager = new HashSessionManager ( arg ) ;
HashSessionManager manager = new HashSessionManager ( arg ) ;
SessionManager sessionManager = newSessionManager ( arg ) ;
SessionManager sessionManager = newSessionManager ( arg ) ;
ContainerLifeCycle . dump ( arg ) ;
ContainerLifeCycle . dump ( arg ) ;
ContainerLifeCycle . dump ( arg ) ;
ContainerLifeCycle . dumpObject ( arg ) ;
AnnotatedByteBufferSocket socket = new AnnotatedByteBufferSocket ( arg ) ;
AnnotatedBinaryArraySocket socket = new AnnotatedBinaryArraySocket ( arg ) ;
AnnotatedBinaryStreamSocket socket = new AnnotatedBinaryStreamSocket ( arg ) ;
AnnotatedEndpointScanner < ClientEndpoint , ClientEndpointConfig > scanner = new AnnotatedEndpointScanner <> ( arg ) ;
AnnotatedEndpointScanner < ClientEndpoint , ClientEndpointConfig > scanner = new AnnotatedEndpointScanner <> ( arg ) ;
ArrayList < Object > list = new ArrayList <> ( arg ) ;
ArrayList < T > <unk> = new ArrayList <> ( arg ) ;
ArrayList < File > files = ( ArrayList < File > ) request . getAttribute ( arg ) ;
ArrayList < File > files = ( ArrayList < File > ) request . getAttribute ( arg ) ;
ArrayList < String > keys = new ArrayList < String > ( arg ) ;
@ SuppressWarnings ( arg ) ArrayList l = new ArrayList ( arg ) ;
@ SuppressWarnings ( arg ) ArrayList l = new ArrayList ( arg ) ;
ArrayList < String > list = new ArrayList <> ( arg ) ;
ArrayList < String > <unk> = new ArrayList < String > ( arg ) ;
List < String > unsatisfied_options = new ArrayList < String > ( arg ) ;
ArrayQueue < Object > q = new ArrayQueue <> ( arg ) ;
new Random ( arg ) . nextBytes ( arg ) ;
new Random ( arg ) . nextBytes ( arg ) ;
new Random ( arg ) . nextBytes ( arg ) ;
ByteBufferAssert . assertEquals ( arg ) ;
ByteBufferAssert . assertEquals ( arg ) ;
assertEquals ( arg ) ;
assertEquals ( arg ) ;
assertEquals ( arg ) ;
assertEquals ( arg ) ;
assertEquals ( arg ) ;
assertEquals ( arg ) ;
assertEquals ( arg ) ;
assertEquals ( arg ) ;
assertEquals ( arg ) ;
assertEquals ( arg ) ;
assertEquals ( arg ) ;
assertEquals ( arg ) ;
assertEquals ( arg ) ;
assertEquals ( arg ) ;
assertEquals ( arg ) ;
assertEquals ( arg ) ;
assertEquals ( arg ) ;
assertEquals ( arg ) ;
assertEquals ( arg ) ;
assertEquals ( arg ) ;
assertEquals ( arg ) ;
failed . set ( arg ) ;
failed . set ( arg ) ;
failed . set ( arg ) ;
assertThat ( arg ) ;
Assert . assertThat ( arg ) ;
Assert . assertThat ( arg ) ;
assertResponseOnBadRequest ( arg ) ;
assertResponseOnBadRequest ( arg ) ;
assertResponseOnBadRequest ( arg ) ;
assertResponseOnBadRequest ( arg ) ;
assertTrue ( arg ) ;
assertTrue ( arg ) ;
assertTrue ( arg ) ;
assertTrue ( arg ) ;
assertTrue ( arg ) ;
assertTrue ( arg ) ;
assertTrue ( arg ) ;
assertTrue ( arg ) ;
assertTrue ( arg ) ;
assertTrue ( arg ) ;
assertTrue ( arg ) ;
assertTrue ( arg ) ;
assertTrue ( arg ) ;
assertTrue ( arg ) ;
assertTrue ( arg ) ;
assertTrue ( arg ) ;
assertTrue ( arg ) ;
assertTrue ( arg ) ;
assertTrue ( arg ) ;
assertTrue ( arg ) ;
assertTrue ( arg ) ;
assertTrue ( arg ) ;
assertTrue ( arg ) ;
assertTrue ( arg ) ;
assertTrue ( arg ) ;
assertTrue ( arg ) ;
assertTrue ( arg ) ;
assertTrue ( arg ) ;
assertTrue ( arg ) ;
assertTrue ( arg ) ;
assertTrue ( arg ) ;
assertTrue ( arg ) ;
assertTrue ( arg ) ;
assertTrue ( arg ) ;
assertTrue ( arg ) ;
assertTrue ( arg ) ;
assumeTrue ( arg ) ;
<unk> endp = new <unk> ( arg ) ;
Connection connection = ( Connection ) getRequest ( arg ) . getAttribute ( arg ) ;
AbstractAsyncConnection connection = endp . getAsyncConnection ( arg ) ;
AsyncConnection connection = new EmptyAsyncConnection ( arg ) ;
AsyncConnection connection = new EmptyAsyncConnection ( arg ) ;
AbstractAsyncConnection connection = this ;
Connection delegate = newPlainConnection ( arg ) ;
AbstractAsyncConnection old = getAsyncConnection ( arg ) ;
AbstractAsyncConnection switched = ( AbstractAsyncConnection ) _channel . getRequest ( arg ) . getAttribute ( arg ) ;
ConnectionFactory asyncConnectionFactory = connector . getAsyncConnectionFactory ( arg ) ;
ConnectionFactory asyncConnectionFactory = connector . getDefaultAsyncConnectionFactory ( arg ) ;
AsyncConnectionFactory connectionFactory = getDefaultAsyncConnectionFactory ( arg ) ;
AsyncConnectionFactory connectionFactory = new <unk> ( arg ) ;
AsyncConnectionFactory connectionFactory = getAsyncConnectionFactory ( arg ) ;
doSuspend ( arg ) ;
doSuspend ( arg ) ;
HttpChannelState async = baseRequest . getAsyncContinuation ( arg ) ;
AsyncContinuation async = baseRequest . getAsyncContinuation ( arg ) ;
AsyncContinuation asyncContextState = baseRequest . getAsyncContinuation ( arg ) ;
HttpChannelState continuation = ( HttpChannelState ) ContinuationSupport . getContinuation ( arg ) ;
HttpChannelState continuation = ( HttpChannelState ) ContinuationSupport . getContinuation ( arg ) ;
HttpChannelState continuation = baseRequest . getAsyncContinuation ( arg ) ;
HttpChannelState continuation = request . getAsyncContinuation ( arg ) ;
EndPoint _endp = getEndPoint ( arg ) ;
EndPoint endPoint = getEndPoint ( arg ) ;
EndPoint endPoint = getEndPoint ( arg ) ;
EndPoint endPoint = getEndPoint ( arg ) ;
EndPoint endPoint = getEndPoint ( arg ) ;
EndPoint endPoint = getEndPoint ( arg ) ;
EndPoint endPoint = newEndPoint ( arg ) ;
EndPoint endp = getEndPoint ( arg ) ;
EndPoint endp = http . getEndPoint ( arg ) ;
SelectableAsyncEndPoint endp = newEndPoint ( arg ) ;
EndPoint endpoint = createEndPoint ( arg ) ;
EndPoint endpoint = createEndPoint ( arg ) ;
EndPoint endpoint = getEndPoint ( arg ) ;
EndPoint result = new SelectChannelEndPoint ( arg ) ;
AsyncEndPoint sslEndPoint = sslConnection . getSslEndPoint ( arg ) ;
AsyncEndPoint sslEndPoint = sslConnection . getSslEndPoint ( arg ) ;
AsyncEndPoint sslEndPoint = sslConnection . getDecryptedEndPoint ( arg ) ;
AsyncEndPoint sslEndPoint = sslConnection . getDecryptedEndPoint ( arg ) ;
AsyncContextEvent event ;
AsyncHttpConnection connection = ( AsyncHttpConnection ) _endp . getConnection ( arg ) ;
ContinuationListener listener = ( ( ContinuationListener ) LazyList . get ( arg ) ) ;
AsyncContinuation async = baseRequest . getAsyncRequest ( arg ) ;
AsyncContinuation asyncContextState = baseRequest . getAsyncRequest ( arg ) ;
SPDYAsyncConnection connection = new SPDYAsyncConnection ( arg ) ;
WebSocketAsyncConnection connection = new WebSocketAsyncConnection ( arg ) ;
Authentication . Result <unk> = getHttpClient ( arg ) . <unk> ( arg ) . <unk> ( arg ) ;
Authentication next = new FormAuthentication ( arg ) ;
Authentication auth = ( Authentication ) <unk> . match ( arg ) ;
Authentication auth = <unk> . <unk> ( arg ) ;
WebSocketFrame binaryFrame = FrameBuilder . binary ( arg ) . asFrame ( arg ) ;
WebSocketFrame binaryFrame = FrameBuilder . binary ( arg ) . asFrame ( arg ) ;
WebSocketFrame binaryFrame = FrameBuilder . binary ( arg ) . asFrame ( arg ) ;
WebSocketFrame binaryFrame = FrameBuilder . binary ( arg ) . asFrame ( arg ) ;
WebSocketFrame binaryFrame = FrameBuilder . binary ( arg ) . asFrame ( arg ) ;
WebSocketFrame binaryFrame = FrameBuilder . binary ( arg ) . asFrame ( arg ) ;
WebSocketFrame binaryFrame = FrameBuilder . binary ( arg ) . asFrame ( arg ) ;
WebSocketFrame close = FrameBuilder . close ( arg ) . asFrame ( arg ) ;
BaseFrame frame = frames . remove ( arg ) ;
BaseFrame frame = frames . remove ( arg ) ;
BaseFrame frame = frames . remove ( arg ) ;
BaseFrame frame = frames . remove ( arg ) ;
BaseFrame frame = frames . remove ( arg ) ;
BaseFrame frame = frames . remove ( arg ) ;
WebSocketFrame frame = FrameBuilder . binary ( arg ) . asFrame ( arg ) ;
WebSocketFrame frame = FrameBuilder . binary ( arg ) . fin ( arg ) . asFrame ( arg ) ;
WebSocketFrame frame = FrameBuilder . ping ( arg ) . payload ( arg ) . asFrame ( arg ) ;
WebSocketFrame frame = FrameBuilder . text ( arg ) . asFrame ( arg ) ;
WebSocketFrame frame = FrameBuilder . text ( arg ) . fin ( arg ) . asFrame ( arg ) ;
WebSocketFrame frame = new WebSocketFrame ( arg ) ;
WebSocketFrame text = FrameBuilder . text ( arg ) . asFrame ( arg ) ;
WebSocketFrame text = FrameBuilder . text ( arg ) . mask ( arg ) . asFrame ( arg ) ;
WebSocketFrame textFrame = FrameBuilder . text ( arg ) . asFrame ( arg ) ;
WebSocketFrame textFrame = FrameBuilder . text ( arg ) . asFrame ( arg ) ;
WebSocketFrame textFrame = FrameBuilder . text ( arg ) . asFrame ( arg ) ;
WebSocketFrame textFrame = FrameBuilder . text ( arg ) . asFrame ( arg ) ;
WebSocketFrame textFrame = FrameBuilder . text ( arg ) . asFrame ( arg ) ;
WebSocketFrame textFrame = FrameBuilder . text ( arg ) . asFrame ( arg ) ;
BinaryFrame binFrame = new BinaryFrame ( arg ) . setPayload ( arg ) ;
WebSocketFrame binmsg = frames . remove ( arg ) ;
BaseFrame frame = FrameBuilder . binary ( arg ) . asFrame ( arg ) ;
Binding b = ( Binding ) _delegate . next ( arg ) ;
Binding b = ( Binding ) _delegate . next ( arg ) ;
@ SuppressWarnings ( arg ) BlockheadClient client = new BlockheadClient ( arg ) ;
@ SuppressWarnings ( arg ) BlockheadClient client = new BlockheadClient ( arg ) ;
BlockingArrayQueue < String > queue = new BlockingArrayQueue <> ( arg ) ;
super . close ( arg ) ;
super . close ( arg ) ;
super . close ( arg ) ;
BlockingResponseListener listener = ( BlockingResponseListener ) exchange . getResponseListeners ( arg ) . get ( arg ) ;
BlockingResponseListener listener = ( BlockingResponseListener ) exchange . getResponseListeners ( arg ) . get ( arg ) ;
BlockingResponseListener listener = ( BlockingResponseListener ) exchange . getResponseListeners ( arg ) . get ( arg ) ;
BlockingResponseListener listener = ( BlockingResponseListener ) exchange . getResponseListeners ( arg ) . get ( arg ) ;
BlockingResponseListener listener = ( BlockingResponseListener ) exchange . getResponseListeners ( arg ) . get ( arg ) ;
BlockingResponseListener listener = ( BlockingResponseListener ) exchange . getResponseListeners ( arg ) . get ( arg ) ;
FutureResponseListener listener = ( FutureResponseListener ) exchange . getResponseListeners ( arg ) . get ( arg ) ;
FutureResponseListener listener = ( FutureResponseListener ) exchange . getResponseListeners ( arg ) . get ( arg ) ;
FutureResponseListener listener = ( FutureResponseListener ) exchange . getResponseListeners ( arg ) . get ( arg ) ;
FutureResponseListener listener = ( FutureResponseListener ) exchange . getResponseListeners ( arg ) . get ( arg ) ;
FutureResponseListener listener = ( FutureResponseListener ) exchange . getResponseListeners ( arg ) . get ( arg ) ;
FutureResponseListener listener = ( FutureResponseListener ) exchange . getResponseListeners ( arg ) . get ( arg ) ;
BlockingResponseListener listener = ( BlockingResponseListener ) exchange . getResponseListener ( arg ) ;
BlockingResponseListener listener = ( BlockingResponseListener ) exchange . getResponseListener ( arg ) ;
BlockingResponseListener listener = ( BlockingResponseListener ) exchange . getResponseListener ( arg ) ;
BlockingResponseListener listener = ( BlockingResponseListener ) exchange . getResponseListener ( arg ) ;
BlockingResponseListener listener = ( BlockingResponseListener ) exchange . getResponseListener ( arg ) ;
BlockingResponseListener listener = ( BlockingResponseListener ) exchange . getResponseListener ( arg ) ;
FutureResponseListener listener = new FutureResponseListener ( arg ) ;
FutureResponseListener listener = new FutureResponseListener ( arg ) ;
FutureResponseListener listener = new FutureResponseListener ( arg ) ;
FutureResponseListener listener = new FutureResponseListener ( arg ) ;
FutureResponseListener listener = new FutureResponseListener ( arg ) ;
ByteBuffer b = buffers . _buffer ;
ByteBuffer b = buffers . _header ;
ByteBuffer b = buffers . _other ;
ByteBuffer b = buffers . _other ;
ByteBuffer b = buffers . _other ;
ByteBuffer buf = <unk> . getHeader ( arg ) ;
ByteBuffer buf = new ByteArrayBuffer ( arg ) ;
ByteBuffer buf = new ByteArrayBuffer ( arg ) ;
ByteBuffer buf [ ] = { val } ;
ByteBuffer buffer = _buffer ;
ByteBuffer buffer = _buffer ;
ByteBuffer buffer = _buffers . poll ( arg ) ;
ByteBuffer buffer = <unk> . get ( arg ) ;
ByteBuffer buffer = _headers . poll ( arg ) ;
ByteBuffer buffer = <unk> . get ( arg ) ;
ByteBuffer buffer = <unk> . poll ( arg ) ;
ByteBuffer buffer = _parser . getBuffer ( arg ) ;
ByteBuffer buffer = direct ? content . getDirectBuffer ( arg ) : content . getIndirectBuffer ( arg ) ;
ByteBuffer buffer = ByteBuffer . allocate ( arg ) ;
ByteBuffer buffer = ByteBuffer . allocate ( arg ) ;
ByteBuffer buffer = ByteBuffer . allocate ( arg ) ;
ByteBuffer buffer = new DirectNIOBuffer ( arg ) ;
ByteBuffer buffer = new IndirectNIOBuffer ( arg ) ;
ByteBuffer buffer = super . _generator . <unk> ( arg ) ;
ByteBuffer buffer2 = ResourceCache . this . getDirectBuffer ( arg ) ;
ByteBuffer buffer2 = ResourceCache . this . getIndirectBuffer ( arg ) ;
ByteBuffer chunk = _requestContentChunk ;
ByteBuffer chunk = _requestContentChunk ;
ByteBuffer content = _content ;
ByteBuffer content = _parser . blockForContent ( arg ) ;
ByteBuffer content = _parser . blockForContent ( arg ) ;
ByteBuffer contentType = mimetypes . getMimeByExtension ( arg ) ;
ByteBuffer data = _buffer . get ( arg ) ;
ByteBuffer data = _buffer . get ( arg ) ;
ByteBuffer data = _buffer . get ( arg ) ;
ByteBuffer data = _buffer . <unk> ( arg ) ;
ByteBuffer header = _parser . <unk> ( arg ) ;
ByteBuffer hostPort = _connection . getRequestFields ( arg ) . get ( arg ) ;
ByteBuffer indirect = getIndirectBuffer ( arg ) ;
String <unk> = content . <unk> ( arg ) ;
ByteBuffer mime = _mimeTypes . getMimeByExtension ( arg ) ;
ByteBuffer mime = _mimeTypes . getMimeByExtension ( arg ) ;
ByteBuffer <unk> = _buffers . getBuffer ( arg ) ;
ByteBuffer <unk> = _exchange . <unk> ( arg ) ;
ByteBuffer type = null ;
Buffer value = <unk> == null ? <unk> : new ByteArrayBuffer ( arg ) ;
BufferUtil . put ( arg ) ;
BufferUtil . clearToFill ( arg ) ;
BufferUtil . clearToFill ( arg ) ;
BufferUtil . clearToFill ( arg ) ;
BufferUtil . clearToFill ( arg ) ;
BufferUtil . clearToFill ( arg ) ;
BufferUtil . clear ( arg ) ;
BufferUtil . clear ( arg ) ;
BufferUtil . clear ( arg ) ;
BufferUtil . flipToFlush ( arg ) ;
BufferUtil . flipToFlush ( arg ) ;
BufferUtil . flipToFlush ( arg ) ;
buf . flip ( arg ) ;
generator . generateWholeFrame ( arg ) ;
if ( frame . <unk> ( arg ) ) BufferUtil . writeTo ( arg ) ;
InputStream in = new <unk> ( arg ) ;
try ( OutputStream <unk> = new <unk> ( arg ) ) {
try ( BufferedReader br = new BufferedReader ( arg ) ) {
try ( BufferedReader br = new BufferedReader ( arg ) ) {
ByteArrayOutputStream <unk> = new ByteArrayOutputStream ( arg ) ;
try ( BufferedReader <unk> = new BufferedReader ( arg ) ) {
try ( BufferedReader <unk> = new BufferedReader ( arg ) ) {
try ( BufferedReader in = new BufferedReader ( arg ) ) {
try ( Writer writer = new BufferedWriter ( arg ) ) {
try ( Writer writer = new BufferedWriter ( arg ) ) {
BlockingResponseListener listener = new BlockingResponseListener ( arg ) ;
BlockingResponseListener listener = new BlockingResponseListener ( arg ) ;
BlockingResponseListener listener = new BlockingResponseListener ( arg ) ;
BlockingResponseListener listener = new BlockingResponseListener ( arg ) ;
BlockingResponseListener listener = new BlockingResponseListener ( arg ) ;
<unk> [ ] <unk> = <unk> . INSTANCE . <unk> ( arg ) ;
OSGiApp app = new OSGiApp ( arg ) ;
OSGiApp app = new OSGiApp ( arg ) ;
OSGiApp app = new OSGiApp ( arg ) ;
OSGiApp app = new OSGiApp ( arg ) ;
ByteBuffer buf = ByteBuffer . allocate ( arg ) ;
ByteBuffer buf = ByteBuffer . allocate ( arg ) ;
ByteBuffer buffer = BufferUtil . allocate ( arg ) ;
ByteBuffer buffer = BufferUtil . allocate ( arg ) ;
ByteBuffer buffer = BufferUtil . allocate ( arg ) ;
ByteBuffer buffer = BufferUtil . allocate ( arg ) ;
ByteBuffer buffer = BufferUtil . allocate ( arg ) ;
ByteBuffer buffer = BufferUtil . allocate ( arg ) ;
ByteBuffer buffer = BufferUtil . allocate ( arg ) ;
ByteBuffer buffer = BufferUtil . allocate ( arg ) ;
ByteBuffer buffer = BufferUtil . allocate ( arg ) ;
ByteBuffer buffer = BufferUtil . allocate ( arg ) ;
ByteBuffer buffer = BufferUtil . allocate ( arg ) ;
ByteBuffer buffer = BufferUtil . allocate ( arg ) ;
ByteBuffer buffer = BufferUtil . allocate ( arg ) ;
try ( ByteArrayISO8859Writer writer = new ByteArrayISO8859Writer ( arg ) ) {
ByteBuffer actual = ByteBuffer . allocate ( arg ) ;
ByteBuffer actual = ByteBuffer . allocate ( arg ) ;
ByteBuffer actual = ByteBuffer . allocate ( arg ) ;
ByteBuffer actual = ByteBuffer . allocate ( arg ) ;
ByteBuffer actual = ByteBuffer . allocate ( arg ) ;
ByteBuffer actual = ByteBuffer . allocate ( arg ) ;
ByteBuffer actual = ByteBuffer . allocate ( arg ) ;
ByteBuffer actual = generateWholeFrame ( arg ) ;
ByteBuffer actual = generateWholeFrame ( arg ) ;
ByteBuffer actual = generateWholeFrame ( arg ) ;
ByteBuffer actual = generateWholeFrame ( arg ) ;
ByteBuffer bb = ByteBuffer . allocateDirect ( arg ) ;
ByteBuffer bb = ByteBuffer . allocateDirect ( arg ) ;
ByteBuffer bb = ByteBuffer . allocateDirect ( arg ) ;
ByteBuffer bb = ByteBuffer . allocateDirect ( arg ) ;
ByteBuffer bb = ByteBuffer . allocateDirect ( arg ) ;
ByteBuffer bb = ByteBuffer . allocateDirect ( arg ) ;
ByteBuffer bb = ByteBuffer . allocateDirect ( arg ) ;
ByteBuffer bb = ByteBuffer . allocate ( arg ) ;
ByteBuffer bb = ByteBuffer . allocate ( arg ) ;
ByteBuffer bb = ByteBuffer . allocate ( arg ) ;
ByteBuffer bb = ByteBuffer . allocate ( arg ) ;
ByteBuffer bb = ByteBuffer . allocate ( arg ) ;
ByteBuffer bb = ByteBuffer . allocate ( arg ) ;
ByteBuffer bb = ByteBuffer . allocate ( arg ) ;
ByteBuffer bb = StandardCharsets . UTF_8 . <unk> ( arg ) ;
ByteBuffer bbuf = ByteBuffer . allocateDirect ( arg ) ;
ByteBuffer bbuf = ByteBuffer . allocateDirect ( arg ) ;
ByteBuffer bbuf = ByteBuffer . allocate ( arg ) ;
ByteBuffer bbuf = ByteBuffer . allocate ( arg ) ;
final ByteBuffer bbuf = <unk> ( arg ) ;
ByteBuffer buf = ByteBuffer . allocateDirect ( arg ) ;
ByteBuffer buf = ByteBuffer . allocateDirect ( arg ) ;
ByteBuffer buf = ByteBuffer . allocateDirect ( arg ) ;
ByteBuffer buf = ByteBuffer . allocateDirect ( arg ) ;
ByteBuffer buf = ByteBuffer . allocateDirect ( arg ) ;
ByteBuffer buf = ByteBuffer . allocateDirect ( arg ) ;
ByteBuffer buf = ByteBuffer . allocateDirect ( arg ) ;
ByteBuffer buf = ByteBuffer . allocateDirect ( arg ) ;
ByteBuffer buf = ByteBuffer . allocateDirect ( arg ) ;
ByteBuffer buf = ByteBuffer . allocateDirect ( arg ) ;
ByteBuffer buf = ByteBuffer . allocateDirect ( arg ) ;
ByteBuffer buf = ByteBuffer . allocateDirect ( arg ) ;
ByteBuffer buf = ByteBuffer . allocateDirect ( arg ) ;
ByteBuffer buf = ByteBuffer . allocateDirect ( arg ) ;
ByteBuffer buf = ByteBuffer . allocateDirect ( arg ) ;
ByteBuffer buf = ByteBuffer . allocateDirect ( arg ) ;
ByteBuffer buf = ByteBuffer . allocateDirect ( arg ) ;
ByteBuffer buf = ByteBuffer . allocateDirect ( arg ) ;
ByteBuffer buf = ByteBuffer . allocateDirect ( arg ) ;
ByteBuffer buf = ByteBuffer . allocateDirect ( arg ) ;
ByteBuffer buf = ByteBuffer . allocateDirect ( arg ) ;
ByteBuffer buf = ByteBuffer . allocate ( arg ) ;
ByteBuffer buf = ByteBuffer . allocate ( arg ) ;
ByteBuffer buf = ByteBuffer . allocate ( arg ) ;
ByteBuffer buf = ByteBuffer . allocate ( arg ) ;
ByteBuffer buf = ByteBuffer . allocate ( arg ) ;
ByteBuffer buf = ByteBuffer . allocate ( arg ) ;
ByteBuffer buf = ByteBuffer . allocate ( arg ) ;
ByteBuffer buf = ByteBuffer . allocate ( arg ) ;
ByteBuffer buf = ByteBuffer . allocate ( arg ) ;
ByteBuffer buf = ByteBuffer . allocate ( arg ) ;
ByteBuffer buf = ByteBuffer . allocate ( arg ) ;
ByteBuffer buf = ByteBuffer . allocate ( arg ) ;
ByteBuffer buf = ByteBuffer . allocate ( arg ) ;
ByteBuffer buf = ByteBuffer . allocate ( arg ) ;
ByteBuffer buf = ByteBuffer . allocate ( arg ) ;
ByteBuffer buf = ByteBuffer . allocate ( arg ) ;
ByteBuffer buf = ByteBuffer . allocate ( arg ) ;
ByteBuffer buf = ByteBuffer . allocate ( arg ) ;
ByteBuffer buf = ByteBuffer . allocate ( arg ) ;
ByteBuffer buf = ByteBuffer . allocate ( arg ) ;
ByteBuffer buf = ByteBuffer . allocate ( arg ) ;
ByteBuffer headerBuf = generator . generateHeaderBytes ( arg ) ;
ByteBuffer headerBuf = generator . generateHeaderBytes ( arg ) ;
ByteBuffer buf = UnitGenerator . generate ( arg ) ;
ByteBuffer buf = UnitGenerator . generate ( arg ) ;
ByteBuffer chunk = BufferUtil . allocate ( arg ) ;
ByteBuffer buffer = BufferUtil . toMappedBuffer ( arg ) ;
ByteBuffer buffer = BufferUtil . toMappedBuffer ( arg ) ;
ByteBuffer buffer = getByteBufferPool ( arg ) . acquire ( arg ) ;
ByteBuffer buffer = getByteBufferPool ( arg ) . acquire ( arg ) ;
ByteBuffer buffer = getByteBufferPool ( arg ) . acquire ( arg ) ;
Generator . Result result = generator . <unk> ( arg ) ;
List < ByteBuffer > buffers = null ;
final ByteBuffer byteBuffer = ( ByteBuffer ) value ;
ByteBuffer completeBuf = ByteBuffer . allocateDirect ( arg ) ;
ByteBuffer completeBuf = ByteBuffer . allocateDirect ( arg ) ;
ByteBuffer completeBuf = ByteBuffer . allocate ( arg ) ;
ByteBuffer completeBuf = ByteBuffer . allocate ( arg ) ;
String contentType = mimetypes . getMimeByExtension ( arg ) ;
ByteBuffer copy = ByteBuffer . allocateDirect ( arg ) ;
ByteBuffer copy = ByteBuffer . allocate ( arg ) ;
ByteBuffer data = ByteBuffer . allocateDirect ( arg ) ;
ByteBuffer data = ByteBuffer . allocate ( arg ) ;
ByteBuffer decompressed = ByteBuffer . allocateDirect ( arg ) ;
ByteBuffer decompressed = ByteBuffer . allocateDirect ( arg ) ;
ByteBuffer decompressed = ByteBuffer . allocate ( arg ) ;
ByteBuffer decompressed = ByteBuffer . allocate ( arg ) ;
ByteBuffer expected = <unk> . get ( arg ) ;
ByteBuffer expected = ByteBuffer . allocateDirect ( arg ) ;
ByteBuffer expected = ByteBuffer . allocateDirect ( arg ) ;
ByteBuffer expected = ByteBuffer . allocateDirect ( arg ) ;
ByteBuffer expected = ByteBuffer . allocateDirect ( arg ) ;
ByteBuffer expected = ByteBuffer . allocateDirect ( arg ) ;
ByteBuffer expected = ByteBuffer . allocateDirect ( arg ) ;
ByteBuffer expected = ByteBuffer . allocateDirect ( arg ) ;
ByteBuffer expected = ByteBuffer . allocateDirect ( arg ) ;
ByteBuffer expected = ByteBuffer . allocateDirect ( arg ) ;
ByteBuffer expected = ByteBuffer . allocateDirect ( arg ) ;
ByteBuffer expected = ByteBuffer . allocateDirect ( arg ) ;
ByteBuffer expected = ByteBuffer . allocateDirect ( arg ) ;
ByteBuffer expected = ByteBuffer . allocateDirect ( arg ) ;
ByteBuffer expected = ByteBuffer . allocateDirect ( arg ) ;
ByteBuffer expected = ByteBuffer . allocateDirect ( arg ) ;
ByteBuffer expected = ByteBuffer . allocateDirect ( arg ) ;
ByteBuffer expected = ByteBuffer . allocateDirect ( arg ) ;
ByteBuffer expected = ByteBuffer . allocateDirect ( arg ) ;
ByteBuffer expected = ByteBuffer . allocateDirect ( arg ) ;
ByteBuffer expected = ByteBuffer . allocateDirect ( arg ) ;
ByteBuffer expected = ByteBuffer . allocateDirect ( arg ) ;
ByteBuffer expected = ByteBuffer . allocateDirect ( arg ) ;
ByteBuffer expected = ByteBuffer . allocateDirect ( arg ) ;
ByteBuffer expected = ByteBuffer . allocateDirect ( arg ) ;
ByteBuffer expected = ByteBuffer . allocateDirect ( arg ) ;
ByteBuffer expected = ByteBuffer . allocateDirect ( arg ) ;
ByteBuffer expected = ByteBuffer . allocateDirect ( arg ) ;
ByteBuffer expected = ByteBuffer . allocateDirect ( arg ) ;
ByteBuffer expected = ByteBuffer . allocateDirect ( arg ) ;
ByteBuffer expected = ByteBuffer . allocateDirect ( arg ) ;
ByteBuffer expected = ByteBuffer . allocateDirect ( arg ) ;
ByteBuffer expected = ByteBuffer . allocateDirect ( arg ) ;
ByteBuffer expected = ByteBuffer . allocateDirect ( arg ) ;
ByteBuffer expected = ByteBuffer . allocateDirect ( arg ) ;
ByteBuffer expected = ByteBuffer . allocateDirect ( arg ) ;
ByteBuffer expected = ByteBuffer . allocateDirect ( arg ) ;
ByteBuffer expected = ByteBuffer . allocateDirect ( arg ) ;
ByteBuffer expected = ByteBuffer . allocateDirect ( arg ) ;
ByteBuffer expected = ByteBuffer . allocateDirect ( arg ) ;
ByteBuffer expected = ByteBuffer . allocateDirect ( arg ) ;
ByteBuffer expected = ByteBuffer . allocateDirect ( arg ) ;
ByteBuffer expected = ByteBuffer . allocateDirect ( arg ) ;
ByteBuffer expected = ByteBuffer . allocateDirect ( arg ) ;
ByteBuffer expected = ByteBuffer . allocateDirect ( arg ) ;
ByteBuffer expected = ByteBuffer . allocateDirect ( arg ) ;
ByteBuffer expected = ByteBuffer . allocateDirect ( arg ) ;
ByteBuffer expected = ByteBuffer . allocateDirect ( arg ) ;
ByteBuffer expected = ByteBuffer . allocateDirect ( arg ) ;
ByteBuffer expected = ByteBuffer . allocateDirect ( arg ) ;
ByteBuffer expected = ByteBuffer . allocateDirect ( arg ) ;
ByteBuffer expected = ByteBuffer . allocateDirect ( arg ) ;
ByteBuffer expected = ByteBuffer . allocateDirect ( arg ) ;
ByteBuffer expected = ByteBuffer . allocateDirect ( arg ) ;
ByteBuffer expected = ByteBuffer . allocateDirect ( arg ) ;
ByteBuffer expected = ByteBuffer . allocateDirect ( arg ) ;
ByteBuffer expected = ByteBuffer . allocateDirect ( arg ) ;
ByteBuffer expected = ByteBuffer . allocateDirect ( arg ) ;
ByteBuffer expected = ByteBuffer . allocateDirect ( arg ) ;
ByteBuffer expected = ByteBuffer . allocateDirect ( arg ) ;
ByteBuffer expected = ByteBuffer . allocate ( arg ) ;
ByteBuffer expected = ByteBuffer . allocate ( arg ) ;
ByteBuffer expected = ByteBuffer . allocate ( arg ) ;
ByteBuffer expected = ByteBuffer . allocate ( arg ) ;
ByteBuffer expected = ByteBuffer . allocate ( arg ) ;
ByteBuffer expected = ByteBuffer . allocate ( arg ) ;
ByteBuffer expected = ByteBuffer . allocate ( arg ) ;
ByteBuffer expected = ByteBuffer . allocate ( arg ) ;
ByteBuffer expected = ByteBuffer . allocate ( arg ) ;
ByteBuffer expected = ByteBuffer . allocate ( arg ) ;
ByteBuffer expected = ByteBuffer . allocate ( arg ) ;
ByteBuffer expected = ByteBuffer . allocate ( arg ) ;
ByteBuffer expected = ByteBuffer . allocate ( arg ) ;
ByteBuffer expected = ByteBuffer . allocate ( arg ) ;
ByteBuffer expected = ByteBuffer . allocate ( arg ) ;
ByteBuffer expected = ByteBuffer . allocate ( arg ) ;
ByteBuffer expected = ByteBuffer . allocate ( arg ) ;
ByteBuffer expected = ByteBuffer . allocate ( arg ) ;
ByteBuffer expected = ByteBuffer . allocate ( arg ) ;
ByteBuffer expected = ByteBuffer . allocate ( arg ) ;
ByteBuffer expected = ByteBuffer . allocate ( arg ) ;
ByteBuffer expected = ByteBuffer . allocate ( arg ) ;
ByteBuffer expected = ByteBuffer . allocate ( arg ) ;
ByteBuffer expected = ByteBuffer . allocate ( arg ) ;
ByteBuffer expected = ByteBuffer . allocate ( arg ) ;
ByteBuffer expected = ByteBuffer . allocate ( arg ) ;
ByteBuffer expected = ByteBuffer . allocate ( arg ) ;
ByteBuffer expected = ByteBuffer . allocate ( arg ) ;
ByteBuffer expected = ByteBuffer . allocate ( arg ) ;
ByteBuffer expected = ByteBuffer . allocate ( arg ) ;
ByteBuffer expected = ByteBuffer . allocate ( arg ) ;
ByteBuffer expected = ByteBuffer . allocate ( arg ) ;
ByteBuffer expected = ByteBuffer . allocate ( arg ) ;
ByteBuffer expected = ByteBuffer . allocate ( arg ) ;
ByteBuffer expected = ByteBuffer . allocate ( arg ) ;
ByteBuffer expected = ByteBuffer . allocate ( arg ) ;
ByteBuffer expected = ByteBuffer . allocate ( arg ) ;
ByteBuffer expected = ByteBuffer . allocate ( arg ) ;
ByteBuffer expected = ByteBuffer . allocate ( arg ) ;
ByteBuffer expected = ByteBuffer . allocate ( arg ) ;
ByteBuffer expected = ByteBuffer . allocate ( arg ) ;
ByteBuffer expected = ByteBuffer . allocate ( arg ) ;
ByteBuffer expected = ByteBuffer . allocate ( arg ) ;
ByteBuffer expected = ByteBuffer . allocate ( arg ) ;
ByteBuffer expected = ByteBuffer . allocate ( arg ) ;
ByteBuffer expected = ByteBuffer . allocate ( arg ) ;
ByteBuffer expected = ByteBuffer . allocate ( arg ) ;
ByteBuffer expected = ByteBuffer . allocate ( arg ) ;
ByteBuffer expected = ByteBuffer . allocate ( arg ) ;
ByteBuffer expected = ByteBuffer . allocate ( arg ) ;
ByteBuffer expected = ByteBuffer . allocate ( arg ) ;
ByteBuffer expected = ByteBuffer . allocate ( arg ) ;
ByteBuffer expected = ByteBuffer . allocate ( arg ) ;
ByteBuffer expected = ByteBuffer . allocate ( arg ) ;
ByteBuffer expected = ByteBuffer . allocate ( arg ) ;
ByteBuffer expected = ByteBuffer . allocate ( arg ) ;
ByteBuffer expected = ByteBuffer . allocate ( arg ) ;
ByteBuffer expected = ByteBuffer . allocate ( arg ) ;
ByteBuffer expected = ByteBuffer . allocate ( arg ) ;
ByteBuffer expected1 = ByteBuffer . allocateDirect ( arg ) ;
ByteBuffer expected1 = ByteBuffer . allocate ( arg ) ;
ByteBuffer expected2 = ByteBuffer . allocateDirect ( arg ) ;
ByteBuffer expected2 = ByteBuffer . allocate ( arg ) ;
ByteBuffer frame = FrameBuilder . close ( arg ) . mask ( arg ) . asByteBuffer ( arg ) ;
ByteBuffer frame1 = FrameBuilder . ping ( arg ) . fin ( arg ) . payload ( arg ) . asByteBuffer ( arg ) ;
ByteBuffer frame1 = FrameBuilder . pong ( arg ) . fin ( arg ) . payload ( arg ) . asByteBuffer ( arg ) ;
ByteBuffer frame1 = FrameBuilder . text ( arg ) . fin ( arg ) . payload ( arg ) . asByteBuffer ( arg ) ;
ByteBuffer frame2 = FrameBuilder . continuation ( arg ) . fin ( arg ) . payload ( arg ) . asByteBuffer ( arg ) ;
ByteBuffer frame2 = FrameBuilder . ping ( arg ) . payload ( arg ) . asByteBuffer ( arg ) ;
ByteBuffer frame2 = FrameBuilder . ping ( arg ) . payload ( arg ) . asByteBuffer ( arg ) ;
ByteBuffer <unk> = FrameBuilder . continuation ( arg ) . payload ( arg ) . asByteBuffer ( arg ) ;
String hostPort = _connection . getRequestFields ( arg ) . getStringField ( arg ) ;
String mime = _mimeTypes . getMimeByExtension ( arg ) ;
ByteBuffer outbuf = ByteBuffer . allocateDirect ( arg ) ;
ByteBuffer outbuf = ByteBuffer . allocate ( arg ) ;
ByteBuffer payload = ByteBuffer . allocateDirect ( arg ) ;
ByteBuffer payload = ByteBuffer . allocateDirect ( arg ) ;
ByteBuffer payload = ByteBuffer . allocateDirect ( arg ) ;
ByteBuffer payload = ByteBuffer . allocateDirect ( arg ) ;
ByteBuffer payload = ByteBuffer . allocateDirect ( arg ) ;
ByteBuffer payload = ByteBuffer . allocateDirect ( arg ) ;
ByteBuffer payload = ByteBuffer . allocateDirect ( arg ) ;
ByteBuffer payload = ByteBuffer . allocateDirect ( arg ) ;
ByteBuffer payload = ByteBuffer . allocateDirect ( arg ) ;
ByteBuffer payload = ByteBuffer . allocateDirect ( arg ) ;
ByteBuffer payload = ByteBuffer . allocate ( arg ) ;
ByteBuffer payload = ByteBuffer . allocate ( arg ) ;
ByteBuffer payload = ByteBuffer . allocate ( arg ) ;
ByteBuffer payload = ByteBuffer . allocate ( arg ) ;
ByteBuffer payload = ByteBuffer . allocate ( arg ) ;
ByteBuffer payload = ByteBuffer . allocate ( arg ) ;
ByteBuffer payload = ByteBuffer . allocate ( arg ) ;
ByteBuffer payload = ByteBuffer . allocate ( arg ) ;
ByteBuffer payload = ByteBuffer . allocate ( arg ) ;
ByteBuffer payload = ByteBuffer . allocate ( arg ) ;
ByteBuffer payload = frame . getPayload ( arg ) ;
ByteBuffer payload = frame . getPayload ( arg ) ;
ByteBuffer view = wrap . <unk> ( arg ) ;
ByteBuffer ret = ByteBuffer . allocateDirect ( arg ) ;
ByteBuffer ret = ByteBuffer . allocate ( arg ) ;
ByteBuffer serverFrame = ByteBuffer . allocateDirect ( arg ) ;
ByteBuffer serverFrame = ByteBuffer . allocate ( arg ) ;
String type = null ;
ByteBuffer <unk> = f . getPayload ( arg ) ;
Assert . assertArrayEquals ( arg ) ;
Assert . assertArrayEquals ( arg ) ;
Assert . assertEquals ( arg ) ;
Assert . assertEquals ( arg ) ;
Assert . assertEquals ( arg ) ;
Assert . assertEquals ( arg ) ;
Assert . assertEquals ( arg ) ;
Assert . assertEquals ( arg ) ;
Assert . assertEquals ( arg ) ;
Assert . assertEquals ( arg ) ;
Assert . assertEquals ( arg ) ;
Assert . assertEquals ( arg ) ;
Assert . assertEquals ( arg ) ;
Assert . assertEquals ( arg ) ;
Assert . assertEquals ( arg ) ;
Assert . assertEquals ( arg ) ;
Assert . assertEquals ( arg ) ;
Assert . assertEquals ( arg ) ;
Assert . assertEquals ( arg ) ;
ByteBufferQueuedHttpInput input = new ByteBufferQueuedHttpInput ( arg ) ;
ByteBufferPool bufferPool = connection . getHttpClient ( arg ) . getByteBufferPool ( arg ) ;
ByteBufferPool bufferPool = new MappedByteBufferPool ( arg ) ;
ByteBufferPool bufferPool = new MappedByteBufferPool ( arg ) ;
ByteBufferPool bufferPool = new MappedByteBufferPool ( arg ) ;
ByteBufferPool bufferPool = new MappedByteBufferPool ( arg ) ;
ByteBufferPool bufferPool = new MappedByteBufferPool ( arg ) ;
ByteBufferPool bufferPool = new MappedByteBufferPool ( arg ) ;
ByteBufferPool bufferPool = new MappedByteBufferPool ( arg ) ;
ByteBufferPool bufferPool = new MappedByteBufferPool ( arg ) ;
ByteBufferPool bufferPool = client . getByteBufferPool ( arg ) ;
HttpHeaderValue cb = HttpHeaderValue . CACHE . get ( arg ) ;
CachedBuffer cb = HttpHeaderValue . CACHE . get ( arg ) ;
CachedBuffer cb = HttpHeaderValue . CACHE . get ( arg ) ;
CachedBuffer v = HttpVersion . CACHE . get ( arg ) ;
ParameterizedMethod cm = ( ParameterizedMethod ) testcase . metadataField . get ( arg ) ;
Callback [ ] callbacks = new Callback [ 3 ] ;
Callback callback = ( Callback ) args [ 0 ] ;
Callback < Object > callback = _callback ;
Callback < Object > callback = _callback ;
Callback < Object > callback = _callback ;
Callback < Object > callback = _callback ;
Callback < Object > callback = _callback ;
Callback < Object > callback = _callback ;
Callback < Object > callback = _callback ;
List < Callback > successNotifiers = new ArrayList <> ( arg ) ;
Certificate [ ] <unk> = <unk> ( arg ) ;
SelectChannelConnector connector = ( SelectChannelConnector ) _connector ;
SelectChannelConnector connector = ( SelectChannelConnector ) _connector ;
SelectChannelConnector connector = new SelectChannelConnector ( arg ) ;
SelectChannelConnector connector = new SelectChannelConnector ( arg ) ;
Charset charset = StandardCharsets . ISO_8859_1 ;
Charset charset = encoding == null ? StandardCharsets . UTF_8 : Charset . forName ( arg ) ;
Charset iso1 = StandardCharsets . ISO_8859_1 ;
Charset iso1 = StandardCharsets . ISO_8859_1 ;
Class < ? > <unk> = method . <unk> ( arg ) [ i ] ;
Class < ? > <unk> = Class . forName ( arg ) ;
Class < ? > oClass = nodeClass ( arg ) ;
Class < ? > oClass = nodeClass ( arg ) ;
Class < ? > onMessageClass = ReflectUtils . findGenericClassFor ( arg ) ;
Class < ? > onMessageClass = ReflectUtils . findGenericClassFor ( arg ) ;
Class < ? > <unk> = Primitives . getPrimitiveType ( arg ) ;
Class < ? > <unk> = Primitives . getPrimitiveType ( arg ) ;
Class < ? extends <unk> > <unk> = metadata . <unk> ( arg ) ;
Class < ? extends Extension > extClass = extensionClasses . get ( arg ) ;
Class < ? extends Extension > extClass = extensionClasses . get ( arg ) ;
Class < ? extends Extension > extClass = _extensionClasses . get ( arg ) ;
@ SuppressWarnings ( arg ) Class < WebSocketServletFactory > <unk> = ( Class < WebSocketServletFactory > ) getServletContext ( arg ) . getClass ( arg ) . <unk> ( arg ) . loadClass ( arg ) ;
Class < ? > [ ] vClass = { val } ;
Class < ? > <unk> = java . <unk> . Object . class ;
Class < ? > c = null ;
Class < ? > clazz = Class . forName ( arg ) ;
Class < ? extends java . util . EventListener > clazz = ( Class < ? extends EventListener > ) <unk> ( arg ) ;
Class < ? > clazz = loader . loadClass ( arg ) ;
Class < ? > clazz = loader . loadClass ( arg ) ;
Class < ? extends Object > clazz = o . getClass ( arg ) ;
Class < ? extends Object > clazz = o . getClass ( arg ) ;
Class < ? extends Object > clazz = o . getClass ( arg ) ;
Class < ? extends Object > clazz = o . getClass ( arg ) ;
Class < ? > <unk> = <unk> . loadClass ( arg ) ;
Class < ? > <unk> = ( Class < ? > ) request . getAttribute ( arg ) ;
Class < ? > jsp_page = Loader . loadClass ( arg ) ;
Class < ? > jsp_page = Loader . loadClass ( arg ) ;
Class < ? > jsp_page = Loader . loadClass ( arg ) ;
Class < ? > listener = Class . forName ( arg ) ;
Class < ? > <unk> = context . loadClass ( arg ) ;
Class < ? > log_class ;
Class < ? > log_class = Loader . loadClass ( arg ) ;
Class < ? > mClass = ( Object . class . equals ( arg ) ) ? oClass = <unk> . class : Loader . loadClass ( arg ) ;
Class < ? > oClass = nodeClass ( arg ) ;
Class < ? > oClass = nodeClass ( arg ) ;
Class < ? > oClass = nodeClass ( arg ) ;
Class < ? > oClass = nodeClass ( arg ) ;
Class < ? > oClass = o . getClass ( arg ) ;
Class < ? > o_class = _managed . getClass ( arg ) ;
Class < ? > <unk> = <unk> . <unk> ( arg ) ;
Class < ? > <unk> = method . <unk> ( arg ) ;
Class < ? > sClass = set . getParameterTypes ( arg ) [ 0 ] ;
Class < ? > t = <unk> . getParameterTypes ( arg ) [ 0 ] . <unk> ( arg ) ;
loader = <unk> ;
Classpath classpath = _config . <unk> ( arg ) ;
expected = new Classpath ( arg ) ;
ClientEndpointConfig cec = new <unk> ( arg ) ;
ClientUpgradeResponse resp = ( ClientUpgradeResponse ) parser . parse ( arg ) ;
BaseFrame close = FrameBuilder . close ( arg ) . asFrame ( arg ) ;
WebSocketFrame closeFrame = FrameBuilder . close ( arg ) . asFrame ( arg ) ;
WebSocketFrame closeFrame = FrameBuilder . close ( arg ) . asFrame ( arg ) ;
WebSocketFrame closeFrame = FrameBuilder . close ( arg ) . asFrame ( arg ) ;
WebSocketFrame closeFrame = FrameBuilder . close ( arg ) . asFrame ( arg ) ;
Assert . assertEquals ( arg ) ;
@ SuppressWarnings ( arg ) Collection < Object > c = ( Collection < Object > ) r ;
Collection < ObjectName > connectors ;
Collection < PermissionNode > permissions = new HashSet < PermissionNode > ( arg ) ;
Collection < PermissionEntry > permissions = new HashSet < PermissionEntry > ( arg ) ;
@ SuppressWarnings ( arg ) Collection < Resource > <unk> = ( Collection < Resource > ) _context . getAttribute ( arg ) ;
Collection < String > i = fields . <unk> ( arg ) ;
String [ ] [ ] data = new String [ ] [ ] { val } ;
String [ ] [ ] data = new String [ ] [ ] { val } ;
String [ ] [ ] data = new String [ ] [ ] { val } ;
StartLog . debug ( arg ) ;
ServerEndpointConfig . Configurator configurator = config . getConfigurator ( arg ) ;
EndPointPair < ChannelEndPoint > c = new EndPointPair < ChannelEndPoint > ( arg ) ;
EndPointPair < SocketEndPoint > c = new EndPointPair < SocketEndPoint > ( arg ) ;
EndPointPair < T > c = newConnection ( arg ) ;
EndPointPair < T > c = newConnection ( arg ) ;
ConnectorEndPoint connection = ( ConnectorEndPoint ) endpoint ;
ConnectorEndPoint connection = ( ConnectorEndPoint ) endpoint ;
ConnectorEndPoint connection = ( ConnectorEndPoint ) iter . next ( arg ) ;
Connection connection = connectionFactory . newConnection ( arg ) ;
Connection connection = connectionFactory . newConnection ( arg ) ;
Connection connection = asyncConnectionFactory . newConnection ( arg ) ;
Connection connection = asyncConnectionFactory . newConnection ( arg ) ;
Connection connection = client . getAsyncConnectionFactory ( arg ) . newConnection ( arg ) ;
Connection connection = client . getDefaultAsyncConnectionFactory ( arg ) . newConnection ( arg ) ;
Connection connection = client . getConnectionFactory ( arg ) . newConnection ( arg ) ;
Connection connection = destination . getConnectionPool ( arg ) . getIdleConnections ( arg ) . poll ( arg ) ;
Connection connection = destination . getIdleConnections ( arg ) . poll ( arg ) ;
Connection connection = null ;
Connection connection = getDefaultConnectionFactory ( arg ) . newConnection ( arg ) ;
Connection connection = getDefaultConnectionFactory ( arg ) . newConnection ( arg ) ;
Connection connection = idleConnections . <unk> ( arg ) ;
ConnectorEndPoint connection = new ConnectorEndPoint ( arg ) ;
ConnectorEndPoint connection = new ConnectorEndPoint ( arg ) ;
ConnectorEndPoint connection = new SslConnection ( arg ) ;
Connection connection = newWebSocketConnection ( arg ) ;
Connection connection = newWebSocketConnection ( arg ) ;
Connection connection = getConnectionFactory ( arg ) . newConnection ( arg ) ;
AsyncConnection connection = this ;
AsyncConnection delegate = newPlainConnection ( arg ) ;
endPoint . getConnection ( arg ) . onClose ( arg ) ;
Connection <unk> = null ;
HttpConnection result = _connection ;
AsyncConnection switched = ( AsyncConnection ) _channel . getRequest ( arg ) . getAttribute ( arg ) ;
Connection tunnel = client . <unk> ( arg ) . tunnel ( arg ) ;
ConnectionFactory connectionFactory = connector . getConnectionFactory ( arg ) ;
ConnectionFactory connectionFactory = connector . getDefaultConnectionFactory ( arg ) ;
ConnectionFactory connectionFactory = new <unk> ( arg ) ;
SPDYClientConnectionFactory connectionFactory = new SPDYClientConnectionFactory ( arg ) ;
ConnectionFactory defaultFactory = new ServerHTTPSPDYConnectionFactory ( arg ) ;
ConnectionFactory defaultFactory = new ServerHTTPSPDYConnectionFactory ( arg ) ;
ConnectionFactory defaultFactory = new ServerHTTPSPDYConnectionFactory ( arg ) ;
ConnectionFactory defaultFactory = new ServerHTTPSPDYConnectionFactory ( arg ) ;
ConnectionFactory defaultFactory = new ServerHTTPSPDYConnectionFactory ( arg ) ;
NetworkConnector conn = ( NetworkConnector ) server . getConnectors ( arg ) [ 0 ] ;
NetworkConnector conn = ( NetworkConnector ) server . getConnectors ( arg ) [ 0 ] ;
Collection < NetworkConnector > connectors = _server . getBeans ( arg ) ;
Connector connector = AbstractHttpConnection . getCurrentConnection ( arg ) . getConnector ( arg ) ;
NetworkConnector connector = ( NetworkConnector ) connectors [ i ] ;
SelectChannelConnector connector = new SelectChannelConnector ( arg ) ;
SelectChannelConnector connector = new SelectChannelConnector ( arg ) ;
SelectChannelConnector connector = new SelectChannelConnector ( arg ) ;
SelectChannelConnector connector = new SelectChannelConnector ( arg ) ;
connector = <unk> ( arg ) ;
BlockingChannelEndPoint connection = new BlockingChannelEndPoint ( arg ) ;
ConnectorEndPoint connection = new <unk> ( arg ) ;
<unk> . <unk> ( arg ) ;
<unk> [ ] mappings = _security . <unk> ( arg ) . toArray ( arg ) ;
Constructor < ? > [ ] <unk> = oClass . <unk> ( arg ) ;
Constructor < ? > c = clazz . getConstructor ( arg ) ;
Constructor < ? > c = clazz . getConstructor ( arg ) ;
Constructor < ? > <unk> = sClass . getConstructor ( arg ) ;
Constructor < ? > <unk> = mClass . getConstructor ( arg ) ;
<unk> content = request . getContent ( arg ) ;
ContentResponse response = client . newRequest ( arg ) . content ( arg ) . send ( arg ) ;
ContentResponse response = client . newRequest ( arg ) . followRedirects ( arg ) . timeout ( arg ) . send ( arg ) ;
ContentResponse response = client . newRequest ( arg ) . method ( arg ) . content ( arg ) . timeout ( arg ) . send ( arg ) ;
ContentResponse response = client . newRequest ( arg ) . method ( arg ) . content ( arg ) . timeout ( arg ) . send ( arg ) ;
ContentResponse response = client . newRequest ( arg ) . method ( arg ) . content ( arg ) . timeout ( arg ) . send ( arg ) ;
ContentResponse response = client . newRequest ( arg ) . scheme ( arg ) . method ( arg ) . path ( arg ) . content ( arg ) . send ( arg ) . get ( arg ) ;
ContentResponse response = client . newRequest ( arg ) . path ( arg ) . timeout ( arg ) . send ( arg ) ;
ContentResponse response = client . newRequest ( arg ) . path ( arg ) . timeout ( arg ) . send ( arg ) ;
ContentResponse response = client . newRequest ( arg ) . scheme ( arg ) . header ( arg ) . content ( arg ) . timeout ( arg ) . send ( arg ) ;
ContentResponse response = client . newRequest ( arg ) . scheme ( arg ) . method ( arg ) . path ( arg ) . content ( arg ) . timeout ( arg ) . send ( arg ) ;
ContentResponse response = client . newRequest ( arg ) . scheme ( arg ) . method ( arg ) . timeout ( arg ) . send ( arg ) ;
ContentResponse response = client . newRequest ( arg ) . scheme ( arg ) . path ( arg ) . timeout ( arg ) . send ( arg ) ;
ContentResponse response = client . newRequest ( arg ) . scheme ( arg ) . path ( arg ) . timeout ( arg ) . send ( arg ) ;
ContentResponse response = client . newRequest ( arg ) . scheme ( arg ) . timeout ( arg ) . send ( arg ) ;
ContentResponse response = client . newRequest ( arg ) . scheme ( arg ) . timeout ( arg ) . send ( arg ) ;
ContentResponse response = client . newRequest ( arg ) . scheme ( arg ) . timeout ( arg ) . send ( arg ) ;
ContentResponse response = client . newRequest ( arg ) . scheme ( arg ) . timeout ( arg ) . send ( arg ) ;
ContentResponse response = client . newRequest ( arg ) . timeout ( arg ) . send ( arg ) ;
ContentResponse response = client . newRequest ( arg ) . timeout ( arg ) . send ( arg ) ;
ContentResponse response = client . newRequest ( arg ) . timeout ( arg ) . send ( arg ) ;
ContentResponse response = client . newRequest ( arg ) . timeout ( arg ) . send ( arg ) ;
ContentResponse response = client . newRequest ( arg ) . timeout ( arg ) . send ( arg ) ;
ContentResponse response = client . newRequest ( arg ) . timeout ( arg ) . send ( arg ) ;
ContentResponse response = client . newRequest ( arg ) . timeout ( arg ) . send ( arg ) ;
ContentResponse response = client . newRequest ( arg ) . timeout ( arg ) . send ( arg ) ;
ContentResponse response = client . newRequest ( arg ) . timeout ( arg ) . send ( arg ) ;
ContentResponse response = client . newRequest ( arg ) . timeout ( arg ) . send ( arg ) ;
ContentResponse response = client . newRequest ( arg ) . timeout ( arg ) . send ( arg ) ;
client . newRequest ( arg ) . timeout ( arg ) . send ( arg ) ;
ContentResponse response = httpClient . newRequest ( arg ) . path ( arg ) . timeout ( arg ) . send ( arg ) ;
ContentResponse response = request . timeout ( arg ) . send ( arg ) ;
ContentResponse response = request . timeout ( arg ) . send ( arg ) ;
Context ctx = ( Context ) __threadContext . get ( arg ) ;
ServletContextHandler servletContext = new ServletContextHandler ( arg ) ;
ServletContextHandler servletContext = new ServletContextHandler ( arg ) ;
ContextProvider context_provider = new ContextProvider ( arg ) ;
ContextHandler . this . <unk> ( arg ) ;
ContextHandler ch = ContextHandler . getContextHandler ( arg ) ;
ContextHandler ch = ContextHandler . getContextHandler ( arg ) ;
ContextHandler ch = ContextHandler . getContextHandler ( arg ) ;
ContextHandler context = <unk> . newInstance ( arg ) ;
List < ContextHandler > contexts = new ArrayList < ContextHandler > ( arg ) ;
ContextHandler h = ( ( <unk> ) app ) . createContextHandler ( arg ) ;
ContextHandler handler = getWebBundleDeployerHelp ( arg ) . <unk> ( arg ) ;
ContextHandler handler = getWebBundleDeployerHelp ( arg ) . <unk> ( arg ) ;
frameBytes = new ControlFrameBytes ( arg ) ;
Convertor convertor = _convertors . get ( arg ) ;
Convertor convertor = _convertors . get ( arg ) ;
HttpCookie cookie = _sessionManager . getSessionCookie ( arg ) ;
HttpCookie cookie = getSessionCookie ( arg ) ;
DBObject o = _dbSessions . findOne ( arg ) ;
DBObject o = _dbSessions . findOne ( arg ) ;
DBObject o = _dbSessions . findOne ( arg ) ;
Date date = ( Date ) element . <unk> ( arg ) ;
DecoderFactory . Wrapper decoder = msgWrapper . getDecoder ( arg ) ;
DecoderFactory . Wrapper decoder = msgWrapper . getDecoder ( arg ) ;
ConnectPromise connectPromise = ( ConnectPromise ) attachment ;
CompressExtension ext = new CompressExtension ( arg ) ;
CompressExtension ext = new CompressExtension ( arg ) ;
CompressExtension ext = new CompressExtension ( arg ) ;
CompressExtension ext = new CompressExtension ( arg ) ;
CompressExtension ext = new CompressExtension ( arg ) ;
CompressExtension ext = new CompressExtension ( arg ) ;
CompressExtension ext = new CompressExtension ( arg ) ;
DeploymentManager <unk> = jetty . getServer ( arg ) . getBean ( arg ) ;
<unk> . Address address = destination . <unk> ( arg ) ;
HttpDestination destination = callback . destination ;
HttpDestination destination = <unk> . get ( arg ) ;
Dictionary < String , String > dic = new Hashtable < String , String > ( arg ) ;
Dictionary < String , String > properties = new Hashtable < String , String > ( arg ) ;
DispatchingIOFuture . rethrow ( arg ) ;
DispatchingIOFuture . rethrow ( arg ) ;
DispatchingIOFuture future = new DispatchingIOFuture ( arg ) ;
DispatchingIOFuture future = new DispatchingIOFuture ( arg ) ;
DispatcherType dispatch = baseRequest . getDispatcherType ( arg ) ;
DispatcherType type = base_request . getDispatcherType ( arg ) ;
FutureCallback . rethrow ( arg ) ;
FutureCallback . rethrow ( arg ) ;
DownloadArg arg = new DownloadArg ( arg ) ;
@ SuppressWarnings ( arg ) E old = ( E ) _elements [ i ] ;
@ SuppressWarnings ( arg ) E old = ( E ) _elements [ i ] ;
EndPoint endp = channel . getEndPoint ( arg ) ;
EndPoint endPoint = exchanger . exchange ( arg ) ;
final EndPoint endpoint = new SocketEndPoint ( arg ) ;
EndPointPair < ChannelEndPoint > c = new EndPointPair <> ( arg ) ;
Map . Entry < String , Object > entry = iter . next ( arg ) ;
MappedEntry match = getMatch ( arg ) ;
@ SuppressWarnings ( arg ) Enumeration < String > protocols = request . getHeaders ( arg ) ;
Enumeration < URL > <unk> = BundleFileLocatorHelperFactory . getFactory ( arg ) . getHelper ( arg ) . <unk> ( arg ) ;
Enumeration < String > a = request . getAttributeNames ( arg ) ;
Enumeration < String > attributes = request . getAttributeNames ( arg ) ;
Enumeration < String > e = _attributes . getAttributeNames ( arg ) ;
Enumeration < String > e = _attributes . getAttributeNames ( arg ) ;
Enumeration e = _fields . getValues ( arg ) ;
Enumeration < ? > e = _fields . getValues ( arg ) ;
Iterator < String > e = _response . getHeaders ( arg ) . iterator ( arg ) ;
Enumeration < String > e = _scontext . getAttributeNames ( arg ) ;
Enumeration < String > e = _scontext . getAttributeNames ( arg ) ;
Enumeration < String > e = fields . getFieldNames ( arg ) ;
Enumeration < String > e = fields . getFieldNames ( arg ) ;
e = fields . getValues ( arg ) ;
Enumeration < String > e = header . getFieldNames ( arg ) ;
Enumeration < String > e = header . getFieldNames ( arg ) ;
Enumeration < String > e = header . getFieldNames ( arg ) ;
Enumeration < JarEntry > e = jarFile . entries ( arg ) ;
Enumeration < JarEntry > e = jarFile . entries ( arg ) ;
Enumeration < JarEntry > e = jarFile . entries ( arg ) ;
Enumeration < JarEntry > e = jarFile . entries ( arg ) ;
Enumeration < JarEntry > e = jarFile . entries ( arg ) ;
Enumeration < String > en = attrs . getAttributeNames ( arg ) ;
Enumeration < ? > en = response . getHeaders ( arg ) ;
Enumeration < String > enm = _fields . getValues ( arg ) ;
Enumeration < String > enm = _fields . getValues ( arg ) ;
Enumeration < ? > enm = _fields . getValues ( arg ) ;
Enumeration < String > h = request . getHeaderNames ( arg ) ;
Enumeration < String > <unk> = request . getHeaders ( arg ) ;
Enumeration < String > headers = request . getHeaderNames ( arg ) ;
Enumeration < String > keys = session . getAttributeNames ( arg ) ;
Enumeration < Locale > <unk> = request . <unk> ( arg ) ;
Enumeration < String > names = request . <unk> ( arg ) ;
Enumeration < String > <unk> = null ;
Enumeration < ? extends Principal > <unk> = roles . members ( arg ) ;
Enumeration < String > values = fields . getValues ( arg ) ;
Executor executor = getExecutor ( arg ) ;
Executor executor = http . getConnector ( arg ) . getExecutor ( arg ) ;
Executor threadPool = getExecutor ( arg ) ;
final CountDownLatch <unk> = new CountDownLatch ( arg ) ;
AbstractExtension ext = new IdentityExtension ( arg ) ;
Extension <unk> = <unk> . newInstance ( arg ) ;
ExtensionConfig config = ExtensionConfig . parse ( arg ) ;
ExtensionConfig config = ExtensionConfig . parse ( arg ) ;
ExtensionConfig config = ExtensionConfig . parse ( arg ) ;
ExtensionConfig config = ExtensionConfig . parse ( arg ) ;
ExtensionConfig config = ExtensionConfig . parse ( arg ) ;
ExtensionConfig config = ExtensionConfig . parse ( arg ) ;
ExtensionConfig config = ExtensionConfig . parse ( arg ) ;
ExtensionConfig config = ExtensionConfig . parse ( arg ) ;
ExtensionConfig config = ExtensionConfig . parse ( arg ) ;
ExtensionConfig config = ExtensionConfig . parse ( arg ) ;
ExtensionConfig config = ExtensionConfig . parse ( arg ) ;
ExtensionConfig config = ExtensionConfig . parse ( arg ) ;
<unk> = new <unk> ( arg ) ;
ServerFCGIConnectionFactory <unk> = new ServerFCGIConnectionFactory ( arg ) ;
Field f = _fields . get ( arg ) ;
@ SuppressWarnings ( arg ) Field <unk> = <unk> ( arg ) ;
Field field = _bufferMap . get ( arg ) ;
Field field = _bufferMap . get ( arg ) ;
Field field = _bufferMap . get ( arg ) ;
Field field = _fields . get ( arg ) ;
Field field = _fields . get ( arg ) ;
Field field = _fields . get ( arg ) ;
Field field = _fields . get ( arg ) ;
HttpField field = getField ( arg ) ;
HttpField field = getField ( arg ) ;
HttpField field = getField ( arg ) ;
HttpField field = new HttpField ( arg ) ;
HttpField field = new HttpField ( arg ) ;
HttpFields fields = new HttpFields ( arg ) ;
HttpFields fields = new HttpFields ( arg ) ;
HttpFields fields = new HttpFields ( arg ) ;
HttpFields fields = new HttpFields ( arg ) ;
HttpFields fields = new HttpFields ( arg ) ;
Fields fields = request . <unk> ( arg ) ;
Fields headers = SPDYTestUtils . createHeaders ( arg ) ;
Fields headers = SPDYTestUtils . createHeaders ( arg ) ;
Fields headers = SPDYTestUtils . createHeaders ( arg ) ;
Fields headers = SPDYTestUtils . createHeaders ( arg ) ;
Fields headers = SPDYTestUtils . createHeaders ( arg ) ;
Fields headers = SPDYTestUtils . createHeaders ( arg ) ;
Fields headers = SPDYTestUtils . createHeaders ( arg ) ;
Fields headers = SPDYTestUtils . createHeaders ( arg ) ;
Fields headers = SPDYTestUtils . createHeaders ( arg ) ;
Fields headers = SPDYTestUtils . createHeaders ( arg ) ;
Fields headers = SPDYTestUtils . createHeaders ( arg ) ;
Fields headers = SPDYTestUtils . createHeaders ( arg ) ;
Fields headers = SPDYTestUtils . createHeaders ( arg ) ;
Fields headers = SPDYTestUtils . createHeaders ( arg ) ;
Fields headers = SPDYTestUtils . createHeaders ( arg ) ;
Fields headers = SPDYTestUtils . createHeaders ( arg ) ;
Fields headers = SPDYTestUtils . createHeaders ( arg ) ;
Fields headers = SPDYTestUtils . createHeaders ( arg ) ;
Fields headers = SPDYTestUtils . createHeaders ( arg ) ;
Fields headers = SPDYTestUtils . createHeaders ( arg ) ;
Fields headers = SPDYTestUtils . createHeaders ( arg ) ;
Fields headers = SPDYTestUtils . createHeaders ( arg ) ;
Fields headers = SPDYTestUtils . createHeaders ( arg ) ;
Fields headers = SPDYTestUtils . createHeaders ( arg ) ;
Fields headers = SPDYTestUtils . createHeaders ( arg ) ;
final Fields pushHeaders = <unk> ( arg ) ;
String [ ] files = _storeDir . list ( arg ) ;
File <unk> = _provider . getContextXmlDirAsFile ( arg ) ;
File dir = itor . next ( arg ) ;
File file = _config . getBaseHome ( arg ) . getFile ( arg ) ;
file = new File ( arg ) ;
File jarFile = _webInfJarMap . get ( arg ) ;
File jettyHomeDir = null ;
File lib = new File ( arg ) ;
File lib = MavenTestingUtils . <unk> ( arg ) ;
System . setProperty ( arg ) ;
File <unk> = new File ( arg ) ;
File policyFile = MavenTestingUtils . getTestResourceFile ( arg ) ;
File policyFile = MavenTestingUtils . getTestResourceFile ( arg ) ;
File <unk> = testdir . getFile ( arg ) ;
File start_d = baseHome . getBaseFile ( arg ) ;
File start_d = baseHome . getBaseFile ( arg ) ;
File stuff = ( ( MultiPartInputStreamParser . MultiPart ) part ) . getFile ( arg ) ;
File stuff = ( ( MultiPartInputStreamParser . MultiPart ) part ) . getFile ( arg ) ;
File <unk> = ( ( MultiPartInputStreamParser . MultiPart ) stuff ) . getFile ( arg ) ;
File xml = _config . getBaseHome ( arg ) . getFile ( arg ) ;
FileFilter disabledModuleFilter = new FS . FilenameRegexFilter ( arg ) ;
FileFilter disabledModuleFilter = new FS . FilenameRegexFilter ( arg ) ;
try ( InputStream fis = new FileInputStream ( arg ) ) {
try ( InputStream fis = new FileInputStream ( arg ) ) {
try ( InputStream in = new FileInputStream ( arg ) ) {
<unk> = new FileOutputStream ( arg ) ;
try ( OutputStream fout = new FileOutputStream ( arg ) ) {
try ( OutputStream fout = new FileOutputStream ( arg ) ) {
try ( OutputStream out = new FileOutputStream ( arg ) ) {
try ( OutputStream out = new FileOutputStream ( arg ) ) {
try ( OutputStream out = new FileOutputStream ( arg ) ) {
try ( OutputStream out = new FileOutputStream ( arg ) ) {
try ( OutputStream out = new FileOutputStream ( arg ) ) {
try ( FileResource fileres = new FileResource ( arg ) ) {
try ( FileResource fileres = new FileResource ( arg ) ) {
try ( FileResource fileres = new FileResource ( arg ) ) {
ini . <unk> ( arg ) ;
createNIOSymlink ( arg ) ;
createNIOSymlink ( arg ) ;
createNIOSymlink ( arg ) ;
createNIOSymlink ( arg ) ;
<unk> <unk> = sce . getServletContext ( arg ) . addFilter ( arg ) ;
Float q = __qualities . get ( arg ) ;
Float q = ql . get ( arg ) ;
<unk> flowControlStrategy = connector . <unk> ( arg ) ;
Frame binmsg = capture . getFrames ( arg ) . poll ( arg ) ;
Frame binmsg = capture . getFrames ( arg ) . poll ( arg ) ;
Frame cf = capture . getFrames ( arg ) . poll ( arg ) ;
Frame cf = capture . getFrames ( arg ) . poll ( arg ) ;
WebSocketFrame frame = WebSocketFrame . binary ( arg ) . setPayload ( arg ) ;
Frame frame = new TextFrame ( arg ) . setPayload ( arg ) ;
Frame frame = new TextFrame ( arg ) . setPayload ( arg ) ;
Frame frame = new TextFrame ( arg ) . setPayload ( arg ) ;
Frame frame = new TextFrame ( arg ) . setPayload ( arg ) ;
Frame frame = new TextFrame ( arg ) . setPayload ( arg ) ;
Frame frame = new TextFrame ( arg ) . setPayload ( arg ) ;
Frame frame = new TextFrame ( arg ) . setPayload ( arg ) ;
Frame frame = new TextFrame ( arg ) . setPayload ( arg ) ;
Frame ping = new PingFrame ( arg ) ;
Frame ping = new PingFrame ( arg ) ;
Frame ping = new PingFrame ( arg ) ;
Frame ping = new PingFrame ( arg ) ;
Frame ping = new PingFrame ( arg ) . setPayload ( arg ) ;
Frame ping = new PingFrame ( arg ) . setPayload ( arg ) ;
Frame ping = new PingFrame ( arg ) . setPayload ( arg ) ;
Frame ping = new PingFrame ( arg ) . setPayload ( arg ) ;
Frame textFrame = new TextFrame ( arg ) . setPayload ( arg ) ;
FrameBuilder . binary ( arg ) . fin ( arg ) . fill ( arg ) ;
WebSocketFrame . ping ( arg ) . setPayload ( arg ) ;
FrameBytes frameBytes = null ;
ext . setNextIncomingFrames ( arg ) ;
ext . setNextIncomingFrames ( arg ) ;
ext . setNextIncomingFrames ( arg ) ;
ext . setNextIncomingFrames ( arg ) ;
ext . setNextIncomingFrames ( arg ) ;
ext . setNextOutgoingFrames ( arg ) ;
ext . setNextOutgoingFrames ( arg ) ;
ext . setNextOutgoingFrames ( arg ) ;
ext . setNextOutgoingFrames ( arg ) ;
ext . setNextOutgoingFrames ( arg ) ;
IncomingFramesCapture capture = new IncomingFramesCapture ( arg ) ;
IncomingFramesCapture capture = new IncomingFramesCapture ( arg ) ;
IncomingFramesCapture capture = new IncomingFramesCapture ( arg ) ;
IncomingFramesCapture capture = new IncomingFramesCapture ( arg ) ;
IncomingFramesCapture capture = new IncomingFramesCapture ( arg ) ;
IncomingFramesCapture capture = new IncomingFramesCapture ( arg ) ;
IncomingFramesCapture capture = new IncomingFramesCapture ( arg ) ;
IncomingFramesCapture capture = new IncomingFramesCapture ( arg ) ;
IncomingFramesCapture capture = new IncomingFramesCapture ( arg ) ;
IncomingFramesCapture capture = new IncomingFramesCapture ( arg ) ;
IncomingFramesCapture capture = new IncomingFramesCapture ( arg ) ;
IncomingFramesCapture capture = new IncomingFramesCapture ( arg ) ;
IncomingFramesCapture capture = new IncomingFramesCapture ( arg ) ;
IncomingFramesCapture capture = new IncomingFramesCapture ( arg ) ;
IncomingFramesCapture capture = new IncomingFramesCapture ( arg ) ;
IncomingFramesCapture capture = new IncomingFramesCapture ( arg ) ;
IncomingFramesCapture capture = new IncomingFramesCapture ( arg ) ;
IncomingFramesCapture capture = new IncomingFramesCapture ( arg ) ;
IncomingFramesCapture capture = new IncomingFramesCapture ( arg ) ;
IncomingFramesCapture capture = new IncomingFramesCapture ( arg ) ;
IncomingFramesCapture capture = new IncomingFramesCapture ( arg ) ;
IncomingFramesCapture capture = new IncomingFramesCapture ( arg ) ;
IncomingFramesCapture capture = new IncomingFramesCapture ( arg ) ;
IncomingFramesCapture capture = new IncomingFramesCapture ( arg ) ;
IncomingFramesCapture capture = new IncomingFramesCapture ( arg ) ;
IncomingFramesCapture capture = new IncomingFramesCapture ( arg ) ;
IncomingFramesCapture capture = new IncomingFramesCapture ( arg ) ;
IncomingFramesCapture capture = new IncomingFramesCapture ( arg ) ;
IncomingFramesCapture capture = new IncomingFramesCapture ( arg ) ;
IncomingFramesCapture capture = new IncomingFramesCapture ( arg ) ;
IncomingFramesCapture capture = new IncomingFramesCapture ( arg ) ;
IncomingFramesCapture capture = new IncomingFramesCapture ( arg ) ;
IncomingFramesCapture capture = new IncomingFramesCapture ( arg ) ;
IncomingFramesCapture capture = new IncomingFramesCapture ( arg ) ;
IncomingFramesCapture capture = new IncomingFramesCapture ( arg ) ;
IncomingFramesCapture capture = new IncomingFramesCapture ( arg ) ;
IncomingFramesCapture capture = new IncomingFramesCapture ( arg ) ;
IncomingFramesCapture capture = new IncomingFramesCapture ( arg ) ;
IncomingFramesCapture capture = new IncomingFramesCapture ( arg ) ;
IncomingFramesCapture capture = new IncomingFramesCapture ( arg ) ;
IncomingFramesCapture capture = new IncomingFramesCapture ( arg ) ;
IncomingFramesCapture capture = new IncomingFramesCapture ( arg ) ;
IncomingFramesCapture capture = new IncomingFramesCapture ( arg ) ;
IncomingFramesCapture capture = new IncomingFramesCapture ( arg ) ;
IncomingFramesCapture capture = new IncomingFramesCapture ( arg ) ;
IncomingFramesCapture capture = new IncomingFramesCapture ( arg ) ;
IncomingFramesCapture capture = new IncomingFramesCapture ( arg ) ;
Scheduler . <unk> <unk> = null ;
Future < Session > future = client . connect ( arg ) ;
Future < Session > future = client . connect ( arg ) ;
Future < Session > future = client . connect ( arg ) ;
Future < Session > future = client . connect ( arg ) ;
Future < Session > future = client . connect ( arg ) ;
Future < Session > future = client . connect ( arg ) ;
Future < Session > future = client . connect ( arg ) ;
Future < Session > future = client . connect ( arg ) ;
Future < Session > future = client . connect ( arg ) ;
Future < Session > future = client . connect ( arg ) ;
Future < Session > future = client . connect ( arg ) ;
Future < Session > future = client . connect ( arg ) ;
Future < Session > future = client . connect ( arg ) ;
Future < Session > future = client . connect ( arg ) ;
Future < ContentResponse > future = client . newRequest ( arg ) . scheme ( arg ) . send ( arg ) ;
Future < Response > responseFuture = builder . method ( arg ) . path ( arg ) . header ( arg ) . build ( arg ) . send ( arg ) ;
Future < ContentResponse > responseFuture = request . send ( arg ) ;
Future < WriteResult > fut ;
Future < WriteResult > future = null ;
Future < WriteResult > future = null ;
Future < WriteResult > future = null ;
Future < Session > future = fact . connect ( arg ) ;
Future < Session > future = fact . connect ( arg ) ;
Session session = <unk> . get ( arg ) ;
Future < ClientUpgradeResponse > future = client . connect ( arg ) ;
Future < ClientUpgradeResponse > future = client . connect ( arg ) ;
Future < ClientUpgradeResponse > future = client . connect ( arg ) ;
Future < ClientUpgradeResponse > future = client . connect ( arg ) ;
Future < ClientUpgradeResponse > future = client . connect ( arg ) ;
Future < ClientUpgradeResponse > future = client . connect ( arg ) ;
Future < ClientUpgradeResponse > future = client . connect ( arg ) ;
Future < ClientUpgradeResponse > future = client . connect ( arg ) ;
Future < ClientUpgradeResponse > future = client . connect ( arg ) ;
Future < ClientUpgradeResponse > future = client . connect ( arg ) ;
Future < ClientUpgradeResponse > future = client . connect ( arg ) ;
Future < ClientUpgradeResponse > future = client . connect ( arg ) ;
Future < ClientUpgradeResponse > future = client . connect ( arg ) ;
Future < ClientUpgradeResponse > future = client . connect ( arg ) ;
Future < ClientUpgradeResponse > result = null ;
Future < UpgradeResponse > future = client . connect ( arg ) ;
Future < UpgradeResponse > future = client . connect ( arg ) ;
Future < UpgradeResponse > future = client . connect ( arg ) ;
Future < UpgradeResponse > future = client . connect ( arg ) ;
Future < UpgradeResponse > future = client . connect ( arg ) ;
Future < UpgradeResponse > future = client . connect ( arg ) ;
Future < UpgradeResponse > future = client . connect ( arg ) ;
Future < UpgradeResponse > future = client . connect ( arg ) ;
Future < Void > fut ;
Future < Void > lastMessage = null ;
assertExpectedError ( arg ) ;
assertExpectedError ( arg ) ;
assertExpectedError ( arg ) ;
assertExpectedError ( arg ) ;
assertExpectedError ( arg ) ;
assertExpectedError ( arg ) ;
assertExpectedError ( arg ) ;
assertExpectedError ( arg ) ;
FutureCallback [ ] <unk> = new FutureCallback [ <unk> . length ] ;
FuturePromise < Connection > result = new FuturePromise <> ( arg ) ;
FutureCallback callback = new FutureCallback ( arg ) ;
FutureCallback fcb = new FutureCallback ( arg ) ;
FutureCallback fcb = new FutureCallback ( arg ) ;
FutureCallback fcb = new FutureCallback ( arg ) ;
FutureCallback fcb = new FutureCallback ( arg ) ;
Future < UpgradeResponse > future = client . connect ( arg ) ;
Future < UpgradeResponse > future = client . connect ( arg ) ;
Future < UpgradeResponse > result = null ;
FutureCallback fcb = new FutureCallback ( arg ) ;
Generator generator = new UnitGenerator ( arg ) ;
Generator generator = new UnitGenerator ( arg ) ;
Generator generator = new UnitGenerator ( arg ) ;
Generator generator = new UnitGenerator ( arg ) ;
Generator generator = new UnitGenerator ( arg ) ;
Generator generator = new UnitGenerator ( arg ) ;
Generator generator = new UnitGenerator ( arg ) ;
Generator generator = new UnitGenerator ( arg ) ;
Generator generator = new UnitGenerator ( arg ) ;
Generator generator = new UnitGenerator ( arg ) ;
Generator generator = new UnitGenerator ( arg ) ;
Generator generator = new UnitGenerator ( arg ) ;
Generator generator = new UnitGenerator ( arg ) ;
Generator generator = new UnitGenerator ( arg ) ;
Generator generator = new UnitGenerator ( arg ) ;
Generator generator = new UnitGenerator ( arg ) ;
GoAwayReceivedInfo goAway = goAwayRef . get ( arg ) ;
GoAwayResultInfo goAway = goAwayRef . get ( arg ) ;
GrantEntry <unk> = new GrantEntry ( arg ) ;
GrantEntry grant = grantEntries . get ( arg ) ;
GrantEntry grant = grantEntries . get ( arg ) ;
HttpClient client = new HttpClient ( arg ) ;
HTTPSPDYAsyncConnection connection = new HTTPSPDYAsyncConnection ( arg ) ;
Callback < StandardSession . FrameBytes > callback = ( Callback < FrameBytes > ) args [ 1 ] ;
Handler [ ] <unk> = _handlers == null ? null : _handlers . clone ( arg ) ;
updateBeans ( arg ) ;
Handler handler = new TestHandler ( arg ) ;
Handler handler = new TestHandler ( arg ) ;
updateBean ( arg ) ;
Handler test = new TestHandler ( arg ) ;
HashMap properties = new HashMap ( arg ) ;
HashMap < String , O > map = ( HashMap < String , O > ) in . <unk> ( arg ) ;
HashMap < String , O > map = new HashMap < String , O > ( arg ) ;
Map < String , String > params = new HashMap < String , String > ( arg ) ;
AbstractSessionIdManager <unk> = new HashSessionIdManager ( arg ) ;
AbstractSessionIdManager <unk> = new HashSessionIdManager ( arg ) ;
HashedSession session = i . next ( arg ) ;
Set < String > done = new HashSet < String > ( arg ) ;
Hashtable < Object , Object > <unk> = <unk> ( arg ) ;
Fields . Field host = headers . remove ( arg ) ;
Fields . Field <unk> = <unk> . getHeaders ( arg ) . get ( arg ) ;
Fields associatedRequestHeaders = createHeaders ( arg ) ;
Fields associatedRequestHeaders = createHeaders ( arg ) ;
Fields associatedRequestHeaders = createHeaders ( arg ) ;
Fields associatedRequestHeaders = createHeaders ( arg ) ;
Fields associatedRequestHeaders = createHeaders ( arg ) ;
Fields associatedRequestHeaders = createHeadersWithoutReferrer ( arg ) ;
Fields associatedRequestHeaders = new Fields ( arg ) ;
Fields <unk> = createHeaders ( arg ) ;
Fields <unk> = createHeaders ( arg ) ;
Fields headers = new Fields ( arg ) ;
Fields headers = new Fields ( arg ) ;
Fields headers = new Fields ( arg ) ;
Fields headers = new Fields ( arg ) ;
Fields headers = new Fields ( arg ) ;
Fields headers = new Fields ( arg ) ;
Fields headers = new Fields ( arg ) ;
Fields headers = new Fields ( arg ) ;
Fields headers = new Fields ( arg ) ;
Fields headers = new Fields ( arg ) ;
Fields headers = new Fields ( arg ) ;
Fields headers = new Fields ( arg ) ;
Fields headers = new Fields ( arg ) ;
Fields headers = new Fields ( arg ) ;
Fields headers = new Fields ( arg ) ;
Fields headers = new Fields ( arg ) ;
Fields headers = new Fields ( arg ) ;
Fields headers = new Fields ( arg ) ;
Fields headers = new Fields ( arg ) ;
Fields headers = new Fields ( arg ) ;
Fields headers = new Fields ( arg ) ;
Fields headers = new Fields ( arg ) ;
Fields headers = new Fields ( arg ) ;
Fields headers = new Fields ( arg ) ;
Fields headers = new Fields ( arg ) ;
Fields headers = new Fields ( arg ) ;
Fields headers = new Fields ( arg ) ;
Fields headers = new Fields ( arg ) ;
Fields headers = new Fields ( arg ) ;
Fields headers = new Fields ( arg ) ;
Fields headers = new Fields ( arg ) ;
Fields headers = new Fields ( arg ) ;
Fields headers = new Fields ( arg ) ;
Fields headers = new Fields ( arg ) ;
Fields headers = new Fields ( arg ) ;
Fields headers = new Fields ( arg ) ;
Fields headers = new Fields ( arg ) ;
Fields headers = new Fields ( arg ) ;
Fields headers = new Fields ( arg ) ;
Fields headers = new Fields ( arg ) ;
Fields headers = new Fields ( arg ) ;
Fields headers = new Fields ( arg ) ;
Fields headers = replyInfo . getHeaders ( arg ) ;
Fields headers = replyInfo . getHeaders ( arg ) ;
Fields headers = synInfo . getHeaders ( arg ) ;
Fields mainRequestHeaders = createHeaders ( arg ) ;
Fields mainRequestHeaders = createHeadersWithoutReferrer ( arg ) ;
Fields mainRequestHeaders = createHeadersWithoutReferrer ( arg ) ;
Fields mainRequestHeaders = createHeadersWithoutReferrer ( arg ) ;
Fields mainRequestHeaders = createHeadersWithoutReferrer ( arg ) ;
Fields mainRequestHeaders = createHeadersWithoutReferrer ( arg ) ;
Fields mainRequestHeaders = createHeadersWithoutReferrer ( arg ) ;
Fields mainRequestHeaders = createHeadersWithoutReferrer ( arg ) ;
Fields <unk> = createHeaders ( arg ) ;
Fields pushHeaders = new Fields ( arg ) ;
Fields pushHeaders = new Fields ( arg ) ;
Fields replyHeaders = replyInfo . getHeaders ( arg ) ;
Fields replyHeaders = replyInfo . getHeaders ( arg ) ;
Fields replyHeaders = replyInfo . getHeaders ( arg ) ;
Fields replyHeaders = replyInfo . getHeaders ( arg ) ;
Fields replyHeaders = replyInfo . getHeaders ( arg ) ;
Fields replyHeaders = replyInfo . getHeaders ( arg ) ;
Fields replyHeaders = replyInfo . getHeaders ( arg ) ;
Fields replyHeaders = replyInfo . getHeaders ( arg ) ;
Fields replyHeaders = replyInfo . getHeaders ( arg ) ;
Fields replyHeaders = replyInfo . getHeaders ( arg ) ;
Fields replyHeaders = replyInfo . getHeaders ( arg ) ;
Fields replyHeaders = replyInfo . getHeaders ( arg ) ;
Fields replyHeaders = replyInfo . getHeaders ( arg ) ;
Fields replyHeaders = replyInfo . getHeaders ( arg ) ;
Fields replyHeaders = replyInfo . getHeaders ( arg ) ;
Fields replyHeaders = replyInfo . getHeaders ( arg ) ;
Fields replyHeaders = replyInfo . getHeaders ( arg ) ;
Fields replyHeaders = replyInfo . getHeaders ( arg ) ;
Fields replyHeaders = replyInfo . getHeaders ( arg ) ;
Fields replyHeaders = replyInfo . getHeaders ( arg ) ;
Fields replyHeaders = replyInfo . getHeaders ( arg ) ;
Fields replyHeaders = replyInfo . getHeaders ( arg ) ;
Fields replyHeaders = replyInfo . getHeaders ( arg ) ;
Fields replyHeaders = replyInfo . getHeaders ( arg ) ;
Fields replyHeaders = replyInfo . getHeaders ( arg ) ;
Fields requestHeaders = <unk> ( arg ) ;
Fields requestHeaders = new Fields ( arg ) ;
Fields requestHeaders = synInfo . getHeaders ( arg ) ;
Fields requestHeaders = synInfo . getHeaders ( arg ) ;
Fields requestHeaders = synInfo . getHeaders ( arg ) ;
Fields requestHeaders = synInfo . getHeaders ( arg ) ;
Fields requestHeaders = synInfo . getHeaders ( arg ) ;
Fields requestHeaders = synInfo . getHeaders ( arg ) ;
Fields responseHeaders = new Fields ( arg ) ;
Fields responseHeaders = new Fields ( arg ) ;
Fields responseHeaders = new Fields ( arg ) ;
Fields responseHeaders = new Fields ( arg ) ;
Fields responseHeaders = new Fields ( arg ) ;
Fields responseHeaders = new Fields ( arg ) ;
Fields responseHeaders = new Fields ( arg ) ;
Fields responseHeaders = new Fields ( arg ) ;
Fields responseHeaders = replyInfo . getHeaders ( arg ) ;
Holder . this . <unk> ( arg ) ;
Holder . this . <unk> ( arg ) . putAll ( arg ) ;
BaseHome hb = _config . getBaseHome ( arg ) ;
BaseHome hb = _config . getBaseHome ( arg ) ;
BaseHome hb = _config . getBaseHome ( arg ) ;
HttpChannel < ? > channel = baseRequest . getHttpChannel ( arg ) ;
HttpConfiguration config = new HttpConfiguration ( arg ) ;
HttpConfiguration config = new HttpConfiguration ( arg ) ;
HttpConfiguration config = new HttpConfiguration ( arg ) ;
HttpConfiguration config = new HttpConfiguration ( arg ) ;
HttpConfiguration <unk> = HttpChannel . getCurrentHttpChannel ( arg ) . getHttpConfiguration ( arg ) ;
<unk> channel = <unk> . remove ( arg ) ;
HttpChannelState async = baseRequest . getHttpChannelState ( arg ) ;
HttpChannelState continuation = baseRequest . getHttpChannelState ( arg ) ;
HttpClient client = <unk> ( arg ) ;
AbstractHttpConnection . getCurrentConnection ( arg ) . getEndPoint ( arg ) . close ( arg ) ;
AbstractHttpConnection . getCurrentConnection ( arg ) . getRequest ( arg ) . setHandled ( arg ) ;
AbstractHttpConnection . setCurrentConnection ( arg ) ;
generate ( arg ) ;
generate ( arg ) ;
reset ( arg ) ;
HttpConnection . this . generate ( arg ) ;
HttpConnection . this . generate ( arg ) ;
AbstractHttpConnection connection = ( AbstractHttpConnection ) ep . getConnection ( arg ) ;
AsyncHttpConnection connection = ( AsyncHttpConnection ) super . newConnection ( arg ) ;
AbstractHttpConnection connection = AbstractHttpConnection . getCurrentConnection ( arg ) ;
AbstractHttpConnection connection = AbstractHttpConnection . getCurrentConnection ( arg ) ;
AbstractHttpConnection connection = _connection ;
AbstractHttpConnection connection = baseRequest . getConnection ( arg ) ;
HttpClient client = connection . getHttpClient ( arg ) ;
AbstractHttpConnection connection = getConnection ( arg ) ;
AbstractHttpConnection connection = <unk> ( arg ) ;
AbstractHttpConnection connection = new BlockingHttpConnection ( arg ) ;
HttpConnection connection = new TestHttpConnection ( arg ) ;
HttpConnection connection = new TestHttpConnection ( arg ) ;
HttpConnection connection = new TestHttpConnection ( arg ) ;
HttpConnection connection = new TestHttpConnection ( arg ) ;
HttpConnection connection = new TestHttpConnection ( arg ) ;
HttpConnection connection = new TestHttpConnection ( arg ) ;
AbstractHttpConnection connection = new TestHttpConnection ( arg ) ;
AbstractHttpConnection connection = new TestHttpConnection ( arg ) ;
AbstractHttpConnection connection = new TestHttpConnection ( arg ) ;
AbstractHttpConnection connection = new TestHttpConnection ( arg ) ;
AbstractHttpConnection connection = new TestHttpConnection ( arg ) ;
AbstractHttpConnection connection = new TestHttpConnection ( arg ) ;
HttpConnectionOverHTTP connection = null ;
AbstractHttpConnection http = AbstractHttpConnection . getCurrentConnection ( arg ) ;
HttpConnectionOverHTTP httpConnection = ( HttpConnectionOverHTTP ) connection ;
AbstractHttpConnection httpConnection = AbstractHttpConnection . getCurrentConnection ( arg ) ;
AbstractHttpConnection httpConnection = AbstractHttpConnection . getCurrentConnection ( arg ) ;
AbstractHttpConnection httpConnection = _connection ;
HttpConnection httpConnection = _connection ;
AbstractConnection q_connection = null ;
AbstractConnection result = _connection ;
Connection switched = exchange . <unk> ( arg ) ;
ConnectionPool connectionPool = destination . getConnectionPool ( arg ) ;
ConnectionPool connectionPool = destination . getConnectionPool ( arg ) ;
ConnectionPool connectionPool = destination . getConnectionPool ( arg ) ;
ConnectionPool connectionPool = destination . getConnectionPool ( arg ) ;
ConnectionPool connectionPool = destination . getConnectionPool ( arg ) ;
ConnectionPool connectionPool = destination . getConnectionPool ( arg ) ;
ConnectionPool connectionPool = destination . getConnectionPool ( arg ) ;
ConnectionPool connectionPool = destination . getConnectionPool ( arg ) ;
ConnectionPool connectionPool = destination . getConnectionPool ( arg ) ;
ConnectionPool connectionPool = destination . getConnectionPool ( arg ) ;
ConnectionPool connectionPool = httpDestination . getConnectionPool ( arg ) ;
ConnectionPool connectionPool = httpDestination . getConnectionPool ( arg ) ;
Connector connector = HttpChannel . getCurrentHttpChannel ( arg ) . getConnector ( arg ) ;
HttpContent content = this . content = new HttpContent ( arg ) ;
HttpConversation conversation = client . getConversation ( arg ) ;
HttpConversation conversation = getHttpClient ( arg ) . getConversation ( arg ) ;
HttpDestinationOverHTTP destination = new HttpDestinationOverHTTP ( arg ) ;
HttpDestination destination = destinationFor ( arg ) ;
HttpExchange ex = _exchanges . remove ( arg ) ;
HttpExchange ex = _queue . remove ( arg ) ;
HttpExchange ex = _queue . remove ( arg ) ;
HttpExchange ex = _queue . remove ( arg ) ;
exchange = _exchange ;
exchange = _pipeline ;
exchange = _pipeline ;
exchange = _pipeline ;
HttpExchange exchange = _queue . get ( arg ) ;
HttpExchange exchange = _queue . remove ( arg ) ;
HttpExchange exchange = connection . getExchange ( arg ) ;
HttpExchange exchange = connection . getExchange ( arg ) ;
HttpExchange exchange = connection . getExchange ( arg ) ;
HttpExchange <unk> = disassociate ( arg ) ;
HttpField field = HttpParser . CONTENT_TYPE . get ( arg ) ;
HttpField field = HttpParser . CONTENT_TYPE . get ( arg ) ;
HttpField field = HttpParser . CONTENT_TYPE . get ( arg ) ;
HttpField field = fields . getField ( arg ) ;
HttpField transfer_encoding = null ;
HttpFields fields = _request . getHttpFields ( arg ) ;
HttpFields fields = _request . getHttpFields ( arg ) ;
HttpFields fields = _request . getHttpFields ( arg ) ;
HttpFields fields = _request . getHttpFields ( arg ) ;
HttpFields fields = _request . getHttpFields ( arg ) ;
HttpFields fields = _request . getHttpFields ( arg ) ;
HttpFields fields = _request . getHttpFields ( arg ) ;
HttpFields fields = _request . getHttpFields ( arg ) ;
HttpFields fields = _request . getHttpFields ( arg ) ;
HttpFields fields = _request . getHttpFields ( arg ) ;
HttpFields fields = _request . getHttpFields ( arg ) ;
HttpFields fields = _request . getHttpFields ( arg ) ;
HttpFields fields = _request . getHttpFields ( arg ) ;
HttpFields headers = response . getHeaders ( arg ) ;
HttpFields httpFields = request . getHttpChannel ( arg ) . getRequestFields ( arg ) ;
HttpFields httpFields = request . getHttpFields ( arg ) ;
HttpFields responseHeaders = exchange . getResponse ( arg ) . getHeaders ( arg ) ;
HttpFields <unk> = _fields ;
HttpGenerator . Result result = gen . generate ( arg ) ;
HttpGenerator . Result result = gen . generate ( arg ) ;
HttpGenerator . Result result = gen . generate ( arg ) ;
HttpGenerator . Result result = gen . generate ( arg ) ;
HttpGenerator . Result result = gen . generate ( arg ) ;
HttpGenerator . Result result = gen . generate ( arg ) ;
HttpGenerator . <unk> ( arg ) ;
HttpGenerator gen = new HttpGenerator ( arg ) ;
HttpHeader header = HttpHeader . CACHE . getBest ( arg ) ;
HttpHeaderValue [ ] values = HttpHeaderValue . CLOSE . is ( arg ) ? CLOSE : new HttpHeaderValue [ ] { val } ;
HttpHeader header = HttpHeader . CACHE . get ( arg ) ;
ByteBufferHttpInput input = new ByteBufferHttpInput ( arg ) ;
String method = request . method ( arg ) ;
HttpMethod method = HttpMethod . CACHE . get ( arg ) ;
final HttpOutput out = ( HttpOutput ) response . getOutputStream ( arg ) ;
Log . getLogger ( arg ) . info ( arg ) ;
HttpTester . Request request = HttpTester . newRequest ( arg ) ;
HttpTester . Request request = HttpTester . newRequest ( arg ) ;
HttpTester . Request request = HttpTester . newRequest ( arg ) ;
HttpResponse response = exchange . getResponse ( arg ) ;
RequestPair requestPair = new RequestPair ( arg ) ;
HttpServletRequest req = ( HttpServletRequest ) _context . getRequest ( arg ) ;
<unk> session = baseRequest . getSession ( arg ) ;
tester . <unk> ( arg ) ;
HttpTester . Request request = HttpTester . newRequest ( arg ) ;
HttpTester . Request request = HttpTester . newRequest ( arg ) ;
HttpTester . Request request = HttpTester . newRequest ( arg ) ;
HttpTester . Request request = HttpTester . newRequest ( arg ) ;
HttpTester . Request request = HttpTester . newRequest ( arg ) ;
HttpTester . Response response ;
HttpTester . Response response ;
HttpTester . Response response ;
HttpTester . Response response ;
HttpVersion v = HttpVersion . CACHE . get ( arg ) ;
HttpVersion v = HttpVersion . CACHE . get ( arg ) ;
HttpWriter _writer = new Utf8HttpWriter ( arg ) ;
HttpWriter _writer = new Utf8HttpWriter ( arg ) ;
HttpWriter _writer = new Utf8HttpWriter ( arg ) ;
HttpWriter _writer = new Utf8HttpWriter ( arg ) ;
HttpWriter _writer = new Utf8HttpWriter ( arg ) ;
HttpWriter _writer = new Utf8HttpWriter ( arg ) ;
HttpWriter _writer = new Utf8HttpWriter ( arg ) ;
if ( fis != null ) IO . close ( arg ) ;
IOFuture future = new CompletedIOFuture ( arg ) ;
IOFuture future = new CompletedIOFuture ( arg ) ;
IOFuture future = new DispatchingIOFuture ( arg ) ;
IOFuture future = new DispatchedIOFuture ( arg ) ;
IOFuture read = getEndPoint ( arg ) . readable ( arg ) ;
IPAddressMap < String > map = new IPAddressMap <> ( arg ) ;
IPAddressMap < String > map = new IPAddressMap <> ( arg ) ;
IPAddressMap < String > map = new IPAddressMap <> ( arg ) ;
IPAddressMap < String > map = new IPAddressMap <> ( arg ) ;
IPAddressMap < String > map = new IPAddressMap <> ( arg ) ;
IPAddressMap < String > map = new IPAddressMap <> ( arg ) ;
IPAddressMap < String > map = new IPAddressMap <> ( arg ) ;
IStream pushStream = ( IStream ) stream . syn ( arg ) ;
IStream pushStream = ( IStream ) stream . push ( arg ) ;
IStream stream = ( IStream ) session . syn ( arg ) ;
IStream stream = newStream ( arg ) ;
final IStream stream = streams . get ( arg ) ;
DefaultWebSocketClient client = ( DefaultWebSocketClient ) attachment ;
InetSocketAddress addr = WebSocketClient . toSocketAddress ( arg ) ;
InetSocketAddress addr = WebSocketClient . toSocketAddress ( arg ) ;
InetSocketAddress addr = OldWebSocketClient . toSocketAddress ( arg ) ;
InetSocketAddress addr = OldWebSocketClient . toSocketAddress ( arg ) ;
InetSocketAddress address = stream . getSession ( arg ) . getRemoteAddress ( arg ) ;
InetSocketAddress local = _transport . getLocalAddress ( arg ) ;
InetSocketAddress local = _transport . getLocalAddress ( arg ) ;
InetSocketAddress local = _transport . getLocalAddress ( arg ) ;
InetSocketAddress local = _transport . getLocalAddress ( arg ) ;
InetSocketAddress local = _channel . getLocalAddress ( arg ) ;
InetSocketAddress local = _channel . getLocalAddress ( arg ) ;
InetSocketAddress local = _channel . getLocalAddress ( arg ) ;
InetSocketAddress local = _channel . getLocalAddress ( arg ) ;
InetSocketAddress local = _processor . getLocalAddress ( arg ) ;
InetSocketAddress local = _processor . getLocalAddress ( arg ) ;
InetSocketAddress local = _processor . getLocalAddress ( arg ) ;
InetSocketAddress local = _processor . getLocalAddress ( arg ) ;
@ SuppressWarnings ( arg ) InitialContext <unk> = new InitialContext ( arg ) ;
<unk> injection = ( ( InjectionCollection ) _context . getAttribute ( arg ) ) . <unk> ( arg ) ;
url . getContent ( arg ) ;
InputStream in = new <unk> ( arg ) ;
InputStream is = ( ( JDBCSessionIdManager ) getSessionIdManager ( arg ) ) . _dbAdaptor . <unk> ( arg ) ;
if ( trustStoreInputStream == null ) trustStoreInputStream = _trustStoreInputStream == null ? Resource . newResource ( arg ) . getInputStream ( arg ) : _trustStoreInputStream ;
Integer count = <unk> . get ( arg ) ;
Integer msg = <unk> . nextInt ( arg ) ;
<unk> connection = context . getConnection ( arg ) ;
Iterator < Map . Entry < String , Object >> iter = map . entrySet ( arg ) . iterator ( arg ) ;
Iterator < Node > it = path . <unk> ( arg ) . iterator ( arg ) ;
Enumeration e = _response . getHeaders ( arg ) ;
Iterator < ? > <unk> = node . iterator ( arg ) ;
Iterator < ? > iter = _baseParameters . entrySet ( arg ) . iterator ( arg ) ;
Iterator < String > iter = _context . <unk> ( arg ) . values ( arg ) . iterator ( arg ) ;
Iterator < ? > iter = <unk> . iterator ( arg ) ;
Iterator < Object > iter = attrs . iterator ( arg ) ;
Iterator < ? > iter = <unk> . iterator ( arg ) ;
Iterator < Entry < String , Object >> iter = map . entrySet ( arg ) . iterator ( arg ) ;
Iterator < Object > iter = <unk> . iterator ( arg ) ;
Iterator < Object > iter = otherFragmentRoot . iterator ( arg ) ;
Iterator < Object > iter = otherFragmentRoot . iterator ( arg ) ;
Iterator < Object > iter = otherFragmentRoot . iterator ( arg ) ;
Iterator < Map . Entry < Object , Object >> iter = props . entrySet ( arg ) . iterator ( arg ) ;
Iterator < ? > iter = <unk> . iterator ( arg ) ;
Iterator < Resource > iter = <unk> . iterator ( arg ) ;
Iterator < Listener > itor = _listeners . iterator ( arg ) ;
Iterator < Listener > itor = _listeners . iterator ( arg ) ;
Iterator < Listener > itor = _listeners . iterator ( arg ) ;
Iterator < File > itor = _scanDirs . iterator ( arg ) ;
Iterator < Map . Entry < String , HashedSession >> itor = _sessions . entrySet ( arg ) . iterator ( arg ) ;
Iterator < XmlParser . Node > itor = node . iterator ( arg ) ;
Iterator < String > itor = u . <unk> ( arg ) . iterator ( arg ) ;
JarEntry entry = e . nextElement ( arg ) ;
JarEntry entry = e . nextElement ( arg ) ;
JarEntry entry = e . nextElement ( arg ) ;
JarEntry entry = e . nextElement ( arg ) ;
web_inf . <unk> ( arg ) ;
RunningJob [ ] jobs = new RunningJob [ 5 ] ;
RunningJob job = new RunningJob ( arg ) ;
JspConfig config = ( JspConfig ) context . getServletContext ( arg ) . <unk> ( arg ) ;
AnnotatedClientEndpointMetadata metadata = new AnnotatedClientEndpointMetadata ( arg ) ;
AnnotatedClientEndpointMetadata metadata = new AnnotatedClientEndpointMetadata ( arg ) ;
AnnotatedClientEndpointMetadata metadata = new AnnotatedClientEndpointMetadata ( arg ) ;
AnnotatedClientEndpointMetadata metadata = new AnnotatedClientEndpointMetadata ( arg ) ;
JsrEvents < <unk> , ServerEndpointConfig > events = new JsrEvents <> ( arg ) ;
<unk> metadata = <unk> ( arg ) ;
AnnotatedServerEndpointMetadata metadata = new AnnotatedServerEndpointMetadata ( arg ) ;
AnnotatedServerEndpointMetadata metadata = new AnnotatedServerEndpointMetadata ( arg ) ;
KeystoreEntry <unk> = new KeystoreEntry ( arg ) ;
if ( LOG . isDebugEnabled ( arg ) ) LOG . debug ( arg ) ;
if ( LOG . isDebugEnabled ( arg ) ) LOG . debug ( arg ) ;
if ( LOG . isDebugEnabled ( arg ) ) LOG . debug ( arg ) ;
if ( LOG . isDebugEnabled ( arg ) ) LOG . debug ( arg ) ;
if ( LOG . isDebugEnabled ( arg ) ) LOG . debug ( arg ) ;
if ( LOG . isDebugEnabled ( arg ) ) LOG . debug ( arg ) ;
if ( LOG . isDebugEnabled ( arg ) ) LOG . debug ( arg ) ;
if ( LOG . isDebugEnabled ( arg ) ) LOG . debug ( arg ) ;
if ( LOG . isDebugEnabled ( arg ) ) LOG . debug ( arg ) ;
if ( LOG . isDebugEnabled ( arg ) ) LOG . debug ( arg ) ;
if ( LOG . isDebugEnabled ( arg ) ) LOG . debug ( arg ) ;
if ( LOG . isDebugEnabled ( arg ) ) LOG . debug ( arg ) ;
if ( LOG . isDebugEnabled ( arg ) ) LOG . debug ( arg ) ;
if ( LOG . isDebugEnabled ( arg ) ) LOG . debug ( arg ) ;
if ( LOG . isDebugEnabled ( arg ) ) LOG . debug ( arg ) ;
if ( LOG . isDebugEnabled ( arg ) ) LOG . debug ( arg ) ;
if ( LOG . isDebugEnabled ( arg ) ) LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
cause . printStackTrace ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
_listeners = ( LifeCycle . Listener [ ] ) LazyList . removeFromArray ( arg ) ;
List < ? extends AbstractExtension > muxList = Collections . singletonList ( arg ) ;
List < AsyncListener > listeners = <unk> ;
List < Bean > reverse = new ArrayList <> ( arg ) ;
List < Bean > reverse = new ArrayList <> ( arg ) ;
@ SuppressWarnings ( arg ) List < Bound > <unk> = ( List < Bound > ) context . getAttribute ( arg ) ;
List < ByteBuffer > <unk> = null ;
Collection < DeploymentManager > deployers = _server . getBeans ( arg ) ;
Collection < DeploymentManager > deployers = _server . getBeans ( arg ) ;
List < <unk> > <unk> = _annotations . get ( arg ) ;
List < Extension > <unk> = connectPromise . <unk> ( arg ) . <unk> ( arg ) ;
List < File > <unk> = _config . getBaseHome ( arg ) . <unk> ( arg ) ;
List < File > <unk> = extraScanTargets ;
List < HttpCookie > cookies = client . getCookieStore ( arg ) . get ( arg ) ;
List < HttpCookie > cookies = getHttpClient ( arg ) . getCookieStore ( arg ) . get ( arg ) ;
List < HttpCookie > cookies = client . getCookieStore ( arg ) . findCookies ( arg ) ;
List < HttpCookie > cookies = client . getCookieStore ( arg ) . findCookies ( arg ) ;
List < HttpCookie > result = cookies . findCookies ( arg ) ;
List < HttpCookie > result = cookies . findCookies ( arg ) ;
List < HttpCookie > result = cookies . findCookies ( arg ) ;
List < HttpCookie > result = cookies . findCookies ( arg ) ;
List < HttpCookie > result = cookies . findCookies ( arg ) ;
List < HttpCookie > result = cookies . findCookies ( arg ) ;
List < HttpCookie > result = cookies . findCookies ( arg ) ;
List < HttpTester . Response > multiparts = HttpTesting . getParts ( arg ) ;
List < HttpTester . Response > multiparts = HttpTesting . getParts ( arg ) ;
List < HttpTester . Response > responses = HttpTesting . readResponses ( arg ) ;
List < Locale > langs = new ArrayList <> ( arg ) ;
Collection < LoginService > list = getServer ( arg ) . getBeans ( arg ) ;
List < ? extends Extension > muxList = Collections . singletonList ( arg ) ;
List < ? extends Extension > muxList = Collections . singletonList ( arg ) ;
List < ? extends Extension > muxList = Collections . singletonList ( arg ) ;
NodePath actual = lifecycle . getPath ( arg ) ;
NodePath path = lifecycle . getPath ( arg ) ;
List < Object > dump = new ArrayList <> ( arg ) ;
List < Bean > reverse = new ArrayList < Bean > ( arg ) ;
List < String > vals = _parameters . getValues ( arg ) ;
List < ? > <unk> = <unk> . getValues ( arg ) ;
@ SuppressWarnings ( arg ) List < Resource > frags = ( List < Resource > ) context . getAttribute ( arg ) ;
List < Resource > <unk> = new ArrayList < Resource > ( arg ) ;
@ SuppressWarnings ( arg ) List < Resource > list = ( List < Resource > ) context . getAttribute ( arg ) ;
List < Resource > <unk> = getOrderedWebInfJars ( arg ) ;
@ SuppressWarnings ( arg ) List < Resource > resources = ( List < Resource > ) context . getAttribute ( arg ) ;
List < Resource > resources = getOrderedWebInfJars ( arg ) ;
ArrayList < ServletContainerInitializer > <unk> = new ArrayList < ServletContainerInitializer > ( arg ) ;
Set < Stream > result = new HashSet <> ( arg ) ;
List < String > availablePlugins = new ArrayList <> ( arg ) ;
List < String > availablePlugins = new ArrayList <> ( arg ) ;
List < String > enabledCSList = new ArrayList < String > ( arg ) ;
Set < String > expiredSessionIds = new HashSet < String > ( arg ) ;
List < String > ini = <unk> ( arg ) ;
List < String > list = ArrayUtil . asMutableList ( arg ) ;
<unk> List < String > <unk> = Arrays . asList ( arg ) ;
List < String > modules = new ArrayList <> ( arg ) ;
List < String > result = new ArrayList <> ( arg ) ;
List < ExtensionConfig > ret = new ArrayList <> ( arg ) ;
List < String > values = getHeaders ( arg ) ;
List < URL > configURLs = jettyHomeDir != null ? getJettyConfigurationURLs ( arg ) : getJettyConfigurationURLs ( arg ) ;
List < WebAppContext > contexts = new ArrayList <> ( arg ) ;
List < ? > acceptLanguage = HttpFields . <unk> ( arg ) ;
List < LifeCycleCallback > callbacks = map . get ( arg ) ;
List < LifeCycleCallback > callbacks = postConstructCallbacksMap . get ( arg ) ;
List < LifeCycleCallback > callbacks = preDestroyCallbacksMap . get ( arg ) ;
List < String > expiredSessionIds = new ArrayList < String > ( arg ) ;
List l = <unk> . getValues ( arg ) ;
List < String > names = _attributes == null ? Collections . <unk> : new ArrayList < String > ( arg ) ;
List < Float > ql = LazyList . getList ( arg ) ;
List < String > roles = <unk> ( arg ) ;
List < String > roles = <unk> ( arg ) ;
List < String > roles = new ArrayList < String > ( arg ) ;
List < File > <unk> = new ArrayList < File > ( arg ) ;
List < Subject > <unk> = ( List < Subject > ) server . getBeans ( arg ) ;
List < Object > vals = _parameters . getValues ( arg ) ;
List < String > vl = LazyList . getList ( arg ) ;
Iterator < AppEntry > it = _apps . iterator ( arg ) ;
ListIterator < AppEntry > it = _apps . listIterator ( arg ) ;
ListIterator < Object > itor = <unk> . listIterator ( arg ) ;
LocalHttpConnector connector = ( LocalHttpConnector ) server . getConnectors ( arg ) [ 0 ] ;
LocalHttpConnector connector = ( LocalHttpConnector ) server . getConnectors ( arg ) [ 0 ] ;
LocalHttpConnector connector = new LocalHttpConnector ( arg ) ;
LocalHttpConnector connector = new LocalHttpConnector ( arg ) ;
LocalHttpConnector connector = new LocalHttpConnector ( arg ) ;
LocalHttpConnector connector = new LocalHttpConnector ( arg ) ;
LocalHttpConnector connector = new LocalHttpConnector ( arg ) ;
LocalHttpConnector connector = new LocalHttpConnector ( arg ) ;
LocalHttpConnector connector = new LocalHttpConnector ( arg ) ;
LocalHttpConnector connector = new LocalHttpConnector ( arg ) ;
LocalConnector . <unk> endp = connector . executeRequest ( arg ) ;
LocalConnector connector = ( LocalConnector ) server . getConnectors ( arg ) [ 0 ] ;
LocalConnector connector = ( LocalConnector ) server . getConnectors ( arg ) [ 0 ] ;
LocalConnector connector = new LocalConnector ( arg ) ;
LocalConnector connector = new LocalConnector ( arg ) ;
LocalConnector connector = new LocalConnector ( arg ) ;
LocalConnector connector = new LocalConnector ( arg ) ;
LocalConnector connector = new LocalConnector ( arg ) ;
LocalConnector connector = new LocalConnector ( arg ) ;
LocalConnector connector = new LocalConnector ( arg ) ;
LocalConnector connector = new LocalConnector ( arg ) ;
LocalWebSocketSession conn = new LocalWebSocketSession ( arg ) ;
LocalWebSocketSession conn = new LocalWebSocketSession ( arg ) ;
LocalWebSocketSession conn = new LocalWebSocketSession ( arg ) ;
LocalWebSocketSession conn = new LocalWebSocketSession ( arg ) ;
LocalWebSocketSession conn = new LocalWebSocketSession ( arg ) ;
try ( LocalWebSocketSession conn = new LocalWebSocketSession ( arg ) ) {
try ( LocalWebSocketSession conn = new LocalWebSocketSession ( arg ) ) {
try ( LocalWebSocketSession conn = new LocalWebSocketSession ( arg ) ) {
try ( LocalWebSocketSession conn = new LocalWebSocketSession ( arg ) ) {
try ( LocalWebSocketSession conn = new LocalWebSocketSession ( arg ) ) {
try ( LocalWebSocketSession conn = new LocalWebSocketSession ( arg ) ) {
Log . LOG = log ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
__logger . warn ( arg ) ;
LOG . ignore ( arg ) ;
LOG . ignore ( arg ) ;
LOG . ignore ( arg ) ;
LOG . ignore ( arg ) ;
LOG . ignore ( arg ) ;
LOG . ignore ( arg ) ;
LOG . ignore ( arg ) ;
LOG . ignore ( arg ) ;
LOG . ignore ( arg ) ;
LOG . ignore ( arg ) ;
LOG . ignore ( arg ) ;
LOG . ignore ( arg ) ;
LOG . ignore ( arg ) ;
LOG . ignore ( arg ) ;
LOG . ignore ( arg ) ;
LOG . ignore ( arg ) ;
LOG . ignore ( arg ) ;
LOG . ignore ( arg ) ;
LOG . ignore ( arg ) ;
LOG . ignore ( arg ) ;
LOG . ignore ( arg ) ;
LOG . ignore ( arg ) ;
LOG . ignore ( arg ) ;
LOG . ignore ( arg ) ;
LOG . ignore ( arg ) ;
LOG . ignore ( arg ) ;
LOG . ignore ( arg ) ;
LOG . ignore ( arg ) ;
LOG . ignore ( arg ) ;
LOG . ignore ( arg ) ;
LOG . ignore ( arg ) ;
LOG . ignore ( arg ) ;
LOG . ignore ( arg ) ;
LOG . ignore ( arg ) ;
LOG . ignore ( arg ) ;
LOG . ignore ( arg ) ;
LOG . ignore ( arg ) ;
LOG . ignore ( arg ) ;
LOG . ignore ( arg ) ;
LOG . ignore ( arg ) ;
LOG . ignore ( arg ) ;
LOG . ignore ( arg ) ;
LOG . ignore ( arg ) ;
LOG . ignore ( arg ) ;
LOG . ignore ( arg ) ;
LOG . ignore ( arg ) ;
LOG . ignore ( arg ) ;
LOG . ignore ( arg ) ;
LOG . ignore ( arg ) ;
LOG . ignore ( arg ) ;
LOG . ignore ( arg ) ;
LOG . ignore ( arg ) ;
LOG . ignore ( arg ) ;
LOG . ignore ( arg ) ;
LOG . ignore ( arg ) ;
LOG . ignore ( arg ) ;
LOG . ignore ( arg ) ;
LOG . ignore ( arg ) ;
LOG . ignore ( arg ) ;
LOG . ignore ( arg ) ;
LOG . ignore ( arg ) ;
LOG . ignore ( arg ) ;
LOG . ignore ( arg ) ;
LOG . ignore ( arg ) ;
LOG . ignore ( arg ) ;
LOG . ignore ( arg ) ;
LOG . ignore ( arg ) ;
LOG . ignore ( arg ) ;
LOG . ignore ( arg ) ;
LOG . ignore ( arg ) ;
LOG . ignore ( arg ) ;
LOG . ignore ( arg ) ;
LOG . ignore ( arg ) ;
LOG . ignore ( arg ) ;
LOG . ignore ( arg ) ;
LOG . ignore ( arg ) ;
LOG . ignore ( arg ) ;
LOG . ignore ( arg ) ;
LOG . ignore ( arg ) ;
LOG . ignore ( arg ) ;
LOG . ignore ( arg ) ;
LOG . ignore ( arg ) ;
LOG . ignore ( arg ) ;
LOG . ignore ( arg ) ;
LOG . ignore ( arg ) ;
LOG . ignore ( arg ) ;
LOG . ignore ( arg ) ;
LOG . ignore ( arg ) ;
LOG . ignore ( arg ) ;
LOG . ignore ( arg ) ;
LOG . ignore ( arg ) ;
LOG . ignore ( arg ) ;
LOG . ignore ( arg ) ;
LOG . ignore ( arg ) ;
LOG . ignore ( arg ) ;
LOG . ignore ( arg ) ;
LOG . ignore ( arg ) ;
LOG . ignore ( arg ) ;
LOG . ignore ( arg ) ;
LOG . ignore ( arg ) ;
LOG . ignore ( arg ) ;
LOG . ignore ( arg ) ;
LOG . ignore ( arg ) ;
LOG . ignore ( arg ) ;
LOG . ignore ( arg ) ;
LOG . ignore ( arg ) ;
LOG . ignore ( arg ) ;
LOG . ignore ( arg ) ;
LOG . ignore ( arg ) ;
LOG . ignore ( arg ) ;
LOG . ignore ( arg ) ;
LOG . ignore ( arg ) ;
LOG . ignore ( arg ) ;
LOG . ignore ( arg ) ;
LOG . ignore ( arg ) ;
LOG . ignore ( arg ) ;
LOG . ignore ( arg ) ;
LOG . ignore ( arg ) ;
LOG . ignore ( arg ) ;
LOG . ignore ( arg ) ;
LOG . ignore ( arg ) ;
LOG . ignore ( arg ) ;
LOG . ignore ( arg ) ;
LOG . ignore ( arg ) ;
LOG . ignore ( arg ) ;
LOG . ignore ( arg ) ;
LOG . ignore ( arg ) ;
LOG . ignore ( arg ) ;
LOG . ignore ( arg ) ;
LOG . info ( arg ) ;
LOG . info ( arg ) ;
LOG . info ( arg ) ;
LOG . info ( arg ) ;
LOG . info ( arg ) ;
LOG . info ( arg ) ;
LOG . info ( arg ) ;
LOG . info ( arg ) ;
LOG . info ( arg ) ;
LOG . info ( arg ) ;
LOG . info ( arg ) ;
LOG . info ( arg ) ;
LOG . info ( arg ) ;
LOG . info ( arg ) ;
LOG . info ( arg ) ;
LOG . info ( arg ) ;
LOG . info ( arg ) ;
LOG . info ( arg ) ;
LOG . info ( arg ) ;
LOG . info ( arg ) ;
LOG . info ( arg ) ;
LOG . info ( arg ) ;
LOG . info ( arg ) ;
LOG . info ( arg ) ;
LOG . info ( arg ) ;
LOG . info ( arg ) ;
LOG . info ( arg ) ;
LOG . info ( arg ) ;
LOG . info ( arg ) ;
LOG . info ( arg ) ;
LOG . info ( arg ) ;
LOG . info ( arg ) ;
LOG . info ( arg ) ;
LOG . info ( arg ) ;
LOG . info ( arg ) ;
LOG . info ( arg ) ;
LOG . info ( arg ) ;
LOG . info ( arg ) ;
LOG . info ( arg ) ;
LOG . info ( arg ) ;
LOG . info ( arg ) ;
LOG . info ( arg ) ;
LOG . info ( arg ) ;
LOG . info ( arg ) ;
LOG . info ( arg ) ;
LOG . info ( arg ) ;
LOG . info ( arg ) ;
LOG . info ( arg ) ;
LOG . info ( arg ) ;
LOG . info ( arg ) ;
LOG . info ( arg ) ;
LOG . warn ( arg ) ;
LOG . warn ( arg ) ;
LOG . warn ( arg ) ;
LOG . warn ( arg ) ;
LOG . warn ( arg ) ;
LOG . warn ( arg ) ;
LOG . warn ( arg ) ;
LOG . warn ( arg ) ;
LOG . warn ( arg ) ;
LOG . warn ( arg ) ;
LOG . warn ( arg ) ;
LOG . warn ( arg ) ;
LOG . warn ( arg ) ;
LOG . warn ( arg ) ;
LOG . warn ( arg ) ;
LOG . warn ( arg ) ;
LOG . warn ( arg ) ;
LOG . warn ( arg ) ;
LOG . warn ( arg ) ;
LOG . warn ( arg ) ;
LOG . warn ( arg ) ;
LOG . warn ( arg ) ;
LOG . warn ( arg ) ;
LOG . warn ( arg ) ;
LOG . warn ( arg ) ;
LOG . warn ( arg ) ;
LOG . warn ( arg ) ;
LOG . warn ( arg ) ;
LOG . warn ( arg ) ;
LOG . warn ( arg ) ;
LOG . warn ( arg ) ;
LOG . warn ( arg ) ;
LOG . warn ( arg ) ;
LOG . warn ( arg ) ;
LOG . warn ( arg ) ;
LOG . warn ( arg ) ;
LOG . warn ( arg ) ;
LOG . warn ( arg ) ;
LOG . warn ( arg ) ;
LOG . warn ( arg ) ;
LOG . warn ( arg ) ;
LOG . warn ( arg ) ;
LOG . warn ( arg ) ;
LOG . warn ( arg ) ;
LOG . warn ( arg ) ;
LOG . warn ( arg ) ;
LOG . warn ( arg ) ;
LOG . warn ( arg ) ;
LOG . warn ( arg ) ;
LOG . warn ( arg ) ;
LOG . warn ( arg ) ;
LOG . warn ( arg ) ;
LOG . warn ( arg ) ;
LOG . warn ( arg ) ;
LOG . warn ( arg ) ;
LOG . warn ( arg ) ;
LOG . warn ( arg ) ;
LOG . warn ( arg ) ;
LOG . warn ( arg ) ;
LOG . warn ( arg ) ;
LOG . warn ( arg ) ;
LOG . warn ( arg ) ;
LOG . warn ( arg ) ;
LOG . warn ( arg ) ;
LOG . warn ( arg ) ;
LOG . warn ( arg ) ;
LOG . warn ( arg ) ;
LOG . warn ( arg ) ;
LOG . warn ( arg ) ;
LOG . warn ( arg ) ;
LOG . warn ( arg ) ;
LOG . warn ( arg ) ;
LOG . warn ( arg ) ;
LOG . warn ( arg ) ;
LOG . warn ( arg ) ;
LOG . warn ( arg ) ;
LOG . warn ( arg ) ;
LOG . warn ( arg ) ;
LOG . warn ( arg ) ;
LOG . warn ( arg ) ;
LOG . warn ( arg ) ;
LOG . warn ( arg ) ;
LOG . warn ( arg ) ;
LOG . warn ( arg ) ;
LOG . warn ( arg ) ;
LOG . warn ( arg ) ;
LOG . warn ( arg ) ;
LOG . warn ( arg ) ;
LOG . warn ( arg ) ;
LOG . warn ( arg ) ;
LOG . warn ( arg ) ;
LOG . warn ( arg ) ;
LOG . warn ( arg ) ;
LOG . warn ( arg ) ;
LOG . warn ( arg ) ;
LOG . warn ( arg ) ;
LOG . warn ( arg ) ;
LOG . warn ( arg ) ;
LOG . warn ( arg ) ;
LOG . warn ( arg ) ;
LOG . warn ( arg ) ;
LOG . warn ( arg ) ;
LOG . warn ( arg ) ;
LOG . warn ( arg ) ;
LOG . warn ( arg ) ;
LOG . warn ( arg ) ;
LOG . warn ( arg ) ;
LOG . warn ( arg ) ;
LOG . warn ( arg ) ;
LOG . warn ( arg ) ;
LOG . warn ( arg ) ;
LOG . warn ( arg ) ;
LOG . warn ( arg ) ;
LOG . warn ( arg ) ;
LOG . warn ( arg ) ;
LOG . warn ( arg ) ;
LOG . warn ( arg ) ;
LOG . warn ( arg ) ;
LOG . warn ( arg ) ;
LOG . warn ( arg ) ;
LOG . warn ( arg ) ;
LOG . warn ( arg ) ;
LOG . warn ( arg ) ;
LOG . warn ( arg ) ;
LOG . warn ( arg ) ;
LOG . warn ( arg ) ;
LOG . warn ( arg ) ;
LOG . warn ( arg ) ;
LOG . warn ( arg ) ;
LOG . warn ( arg ) ;
LOG . warn ( arg ) ;
LOG . warn ( arg ) ;
LOG . warn ( arg ) ;
LOG . warn ( arg ) ;
LOG . warn ( arg ) ;
LOG . warn ( arg ) ;
LOG . warn ( arg ) ;
LOG . warn ( arg ) ;
LOG . warn ( arg ) ;
LOG . warn ( arg ) ;
LOG . warn ( arg ) ;
LOG . warn ( arg ) ;
LOG . warn ( arg ) ;
LOG . warn ( arg ) ;
LOG . warn ( arg ) ;
LOG . warn ( arg ) ;
LOG . warn ( arg ) ;
LOG . warn ( arg ) ;
LOG . warn ( arg ) ;
LOG . warn ( arg ) ;
LOG . warn ( arg ) ;
LOG . warn ( arg ) ;
LOG . warn ( arg ) ;
LOG . warn ( arg ) ;
LOG . warn ( arg ) ;
LOG . warn ( arg ) ;
LOG . warn ( arg ) ;
LOG . warn ( arg ) ;
LOG . warn ( arg ) ;
LOG . warn ( arg ) ;
LOG . warn ( arg ) ;
LOG . warn ( arg ) ;
LOG . warn ( arg ) ;
LOG . warn ( arg ) ;
LOG . warn ( arg ) ;
LOG . warn ( arg ) ;
LOG . warn ( arg ) ;
LOG . warn ( arg ) ;
LOG . warn ( arg ) ;
LOG . warn ( arg ) ;
LOG . warn ( arg ) ;
LOG . warn ( arg ) ;
LOG . warn ( arg ) ;
LOG . warn ( arg ) ;
LOG . warn ( arg ) ;
LOG . warn ( arg ) ;
LOG . warn ( arg ) ;
LOG . warn ( arg ) ;
LOG . warn ( arg ) ;
LOG . warn ( arg ) ;
LOG . warn ( arg ) ;
LOG . warn ( arg ) ;
LOG . warn ( arg ) ;
LOG . warn ( arg ) ;
LOG . warn ( arg ) ;
LOG . warn ( arg ) ;
LOG . warn ( arg ) ;
LOG . warn ( arg ) ;
LOG . warn ( arg ) ;
LOG . warn ( arg ) ;
LOG . warn ( arg ) ;
LOG . warn ( arg ) ;
LOG . warn ( arg ) ;
LOG . warn ( arg ) ;
LOG . warn ( arg ) ;
LOG . warn ( arg ) ;
LOG . warn ( arg ) ;
LOG . warn ( arg ) ;
LOG . warn ( arg ) ;
LOG . warn ( arg ) ;
LOG . warn ( arg ) ;
LOG . warn ( arg ) ;
LOG . warn ( arg ) ;
LOG . warn ( arg ) ;
LOG . warn ( arg ) ;
LOG . warn ( arg ) ;
LOG . warn ( arg ) ;
LOG . warn ( arg ) ;
LOG . warn ( arg ) ;
LOG . warn ( arg ) ;
LOG . warn ( arg ) ;
LOG . warn ( arg ) ;
LOG . warn ( arg ) ;
LOG . warn ( arg ) ;
LOG . warn ( arg ) ;
LOG . warn ( arg ) ;
LOG . warn ( arg ) ;
LOG . warn ( arg ) ;
LOG . warn ( arg ) ;
LOG . warn ( arg ) ;
LOG . warn ( arg ) ;
LOG . warn ( arg ) ;
LOG . warn ( arg ) ;
LOG . warn ( arg ) ;
LOG . warn ( arg ) ;
LOG . warn ( arg ) ;
LOG . warn ( arg ) ;
LOG . warn ( arg ) ;
LOG . warn ( arg ) ;
LOG . warn ( arg ) ;
LOG . warn ( arg ) ;
LOG . warn ( arg ) ;
LOG . warn ( arg ) ;
LOG . warn ( arg ) ;
LOG . warn ( arg ) ;
LOG . warn ( arg ) ;
LOG . warn ( arg ) ;
LOG . warn ( arg ) ;
LOG . warn ( arg ) ;
LOG . warn ( arg ) ;
LOG . warn ( arg ) ;
LOG . warn ( arg ) ;
LOG . warn ( arg ) ;
LOG . warn ( arg ) ;
LOG . warn ( arg ) ;
LOG . warn ( arg ) ;
LOG . warn ( arg ) ;
LOG . warn ( arg ) ;
LOG . warn ( arg ) ;
LOG . warn ( arg ) ;
LOG . warn ( arg ) ;
LOG . warn ( arg ) ;
LOG . warn ( arg ) ;
LOG . warn ( arg ) ;
LOG . warn ( arg ) ;
LOG . warn ( arg ) ;
LOG . warn ( arg ) ;
LOG . warn ( arg ) ;
LOG . warn ( arg ) ;
LOG . warn ( arg ) ;
LOG . warn ( arg ) ;
LOG . warn ( arg ) ;
LOG . warn ( arg ) ;
LOG . warn ( arg ) ;
LOG . warn ( arg ) ;
LOG . warn ( arg ) ;
LOG . warn ( arg ) ;
LOG . warn ( arg ) ;
LOG . warn ( arg ) ;
FS . close ( arg ) ;
FS . close ( arg ) ;
<unk> <unk> = field . getAnnotation ( arg ) ;
ManagedObject <unk> = o_class . getAnnotation ( arg ) ;
ManagedObject <unk> = oClass . getAnnotation ( arg ) ;
ManagedSelector set = chooseSelector ( arg ) ;
Map . Entry < String , String > entry ;
Map . Entry < String , String > entry ;
Entry < String , Object > entry = iter . next ( arg ) ;
Map . Entry < String , HashedSession > entry = itor . next ( arg ) ;
Map . Entry < String , Float > entry = __qualities . getEntry ( arg ) ;
MappedEntry < ? > entry = _servletHandler . getHolderEntry ( arg ) ;
Map . Entry < String , O > entry = getEntry ( arg ) ;
MappedEntry < O > entry = getMatch ( arg ) ;
MappedEntry < O > entry = null ;
@ SuppressWarnings ( arg ) Map < Object , NextProtoNego . Provider > <unk> = ( Map < Object , NextProtoNego . Provider > ) field . get ( arg ) ;
Map < String , Object > <unk> = new HashMap < String , Object > ( arg ) ;
@ SuppressWarnings ( arg ) Map < Object , Object > map = ( Map < Object , Object > ) obj ;
Map < Object , Object > map = new HashMap <> ( arg ) ;
Map < String , String > props = <unk> . getProperties ( arg ) ;
Set < PolicyBlock > policies = new HashSet < PolicyBlock > ( arg ) ;
Map < ProtectionDomain , PolicyBlock > policies = new HashMap < ProtectionDomain , PolicyBlock > ( arg ) ;
Map < String , FragmentDescriptor > <unk> = new HashMap < String , FragmentDescriptor > ( arg ) ;
Queue < HttpCookie > cookies = allCookies . get ( arg ) ;
Queue < HttpCookie > cookies = allCookies . get ( arg ) ;
Map < String , Object > <unk> = new HashMap <> ( arg ) ;
Map < String , RoleInfo > mappings = _constraintMap . get ( arg ) ;
Map < String , RoleInfo > mappings = _constraintMap . match ( arg ) ;
Map < String , String [ ] > <unk> = new HashMap < String , String [ ] > ( arg ) ;
Map < String , String > map = new HashMap <> ( arg ) ;
Map < String , String > params = new HashMap <> ( arg ) ;
Map < String , String > properties = new HashMap <> ( arg ) ;
Map < String , String > properties = new HashMap <> ( arg ) ;
Map < String , String > properties = new HashMap <> ( arg ) ;
Map < String , String > properties = new HashMap <> ( arg ) ;
Map < String , String > properties = new HashMap <> ( arg ) ;
Map < String , String > properties = new HashMap <> ( arg ) ;
Map < String , String > props = new HashMap <> ( arg ) ;
Map < String , List < String >> parameterMap = req . getParameterMap ( arg ) ;
Map < String , List < String >> parameterMap = session . getUpgradeRequest ( arg ) . getParameterMap ( arg ) ;
Map < String , List < String >> <unk> = new HashMap <> ( arg ) ;
Map < String , Object > hosts = ( Map < String , Object > ) contexts ;
Map < Object , Object > map = ( Map < Object , Object > ) obj ;
Map < String , Object > map = new HashMap < String , Object > ( arg ) ;
Map < String , Object > map = <unk> ( arg ) ;
Map < String , List < LifeCycleCallback >> map = null ;
Map < String , String [ ] > params = request . getParameterMap ( arg ) ;
Map < ? , ? > userInfoMap = ( Map < ? , ? > ) <unk> . get ( arg ) ;
Map < String , UserInfo > userInfoMap = new HashMap < String , UserInfo > ( arg ) ;
MappedEntry < O > entry ;
MappedEntry < O > entry = new MappedEntry <> ( arg ) ;
MappedEntry < ? > match = getMatch ( arg ) ;
MaskGen maskGen = _maskingEnabled ? new WebSocketGeneratorD12 . RandomMaskGen ( arg ) : new WebSocketGeneratorD12 . <unk> ( arg ) ;
MaskGen maskGen = _maskingEnabled ? new WebSocketGeneratorD12 . RandomMaskGen ( arg ) : new WebSocketGeneratorD12 . <unk> ( arg ) ;
<unk> maskGen = new <unk> ( arg ) ;
final <unk> member = <unk> . get ( arg ) ;
MessageDeflateCompressionExtension ext = new MessageDeflateCompressionExtension ( arg ) ;
MessageDeflateCompressionExtension ext = new MessageDeflateCompressionExtension ( arg ) ;
MessageDeflateCompressionExtension ext = new MessageDeflateCompressionExtension ( arg ) ;
MessageDeflateCompressionExtension ext = new MessageDeflateCompressionExtension ( arg ) ;
MessageDeflateCompressionExtension ext = new MessageDeflateCompressionExtension ( arg ) ;
final MessageHandlerWrapper wrapper = jsrsession . getMessageHandlerWrapper ( arg ) ;
final MessageHandlerWrapper wrapper = jsrsession . getMessageHandlerWrapper ( arg ) ;
MetaData metaData = _context . getMetaData ( arg ) ;
MetaData metaData = _context . getMetaData ( arg ) ;
MetaData metaData = _context . getMetaData ( arg ) ;
MetaData metaData = _context . getMetaData ( arg ) ;
MetaData metaData = _context . getMetaData ( arg ) ;
final MultiException <unk> = new MultiException ( arg ) ;
ConcurrentHashMap < String , ConcurrentHashSet < String >> <unk> = ( ConcurrentHashMap < String , ConcurrentHashSet < String >> ) context . getAttribute ( arg ) ;
MultiMap headers = new MultiMap ( arg ) ;
MultiMap input = new MultiMap ( arg ) ;
MultiMap input = new MultiMap ( arg ) ;
MultiMap <unk> = ( MultiMap ) session . getAttribute ( arg ) ;
MultiMap map = new MultiMap ( arg ) ;
ConcurrentHashMap < String , ConcurrentHashSet < String >> map = new ConcurrentHashMap < String , ConcurrentHashSet < String >> ( arg ) ;
MultiMap mm = new MultiMap ( arg ) ;
MultiMap mm = new MultiMap ( arg ) ;
MultiMap mm = new MultiMap ( arg ) ;
MultiMap mm = new MultiMap ( arg ) ;
MultiMap mm = new MultiMap ( arg ) ;
MultiMap mm = new MultiMap ( arg ) ;
MultiMap mm = new MultiMap ( arg ) ;
MultiMap mm = new MultiMap ( arg ) ;
MultiMap mm = new MultiMap ( arg ) ;
MultiMap mm = new MultiMap ( arg ) ;
MultiMap mm = new MultiMap ( arg ) ;
MultiMap mm = new MultiMap ( arg ) ;
MultiMap mm = new MultiMap ( arg ) ;
MultiMap mm = new MultiMap ( arg ) ;
MultiMap mm = new MultiMap ( arg ) ;
MultiMap mm = new MultiMap ( arg ) ;
MultiMap mm = new MultiMap ( arg ) ;
MultiMap mm = new MultiMap ( arg ) ;
MultiMap mm = new MultiMap ( arg ) ;
MultiMap mm = new MultiMap ( arg ) ;
MultiMap mm = new MultiMap ( arg ) ;
MultiMap mm = new MultiMap ( arg ) ;
MultiMap mm = new MultiMap ( arg ) ;
MultiMap mm = new MultiMap ( arg ) ;
MultiMap old_params = baseRequest . getParameters ( arg ) ;
MultiMap overridden_new_query = new MultiMap ( arg ) ;
MultiMap overridden_old_query = new MultiMap ( arg ) ;
MultiMap parameters = new MultiMap ( arg ) ;
MultiMap parameters = new MultiMap ( arg ) ;
MultiMap params = new MultiMap ( arg ) ;
MultiMap params = new MultiMap ( arg ) ;
ConcurrentHashMap < String , ConcurrentHashSet < String >> map = ( ConcurrentHashMap < String , ConcurrentHashSet < String >> ) _context . getAttribute ( arg ) ;
MultiMap < String > input = new MultiMap <> ( arg ) ;
MultiMap < String > input = new MultiMap <> ( arg ) ;
MultiMap < String > m = new MultiMap <> ( arg ) ;
MultiMap < String > <unk> = new MultiMap <> ( arg ) ;
MultiMap < String > map = ( MultiMap < String > ) context . getAttribute ( arg ) ;
MultiMap < String > map = new MultiMap <> ( arg ) ;
MultiMap < String > map = new MultiMap <> ( arg ) ;
MultiMap < String > mm = new MultiMap <> ( arg ) ;
MultiMap < String > mm = new MultiMap <> ( arg ) ;
MultiMap < String > mm = new MultiMap <> ( arg ) ;
MultiMap < String > mm = new MultiMap <> ( arg ) ;
MultiMap < String > mm = new MultiMap <> ( arg ) ;
MultiMap < String > mm = new MultiMap <> ( arg ) ;
MultiMap < String > mm = new MultiMap <> ( arg ) ;
MultiMap < String > mm = new MultiMap <> ( arg ) ;
MultiMap < String > mm = new MultiMap <> ( arg ) ;
MultiMap < String > mm = new MultiMap <> ( arg ) ;
MultiMap < String > mm = new MultiMap <> ( arg ) ;
MultiMap < String > mm = new MultiMap <> ( arg ) ;
MultiMap < String > mm = new MultiMap <> ( arg ) ;
MultiMap < String > mm = new MultiMap <> ( arg ) ;
MultiMap < String > mm = new MultiMap <> ( arg ) ;
MultiMap < String > mm = new MultiMap <> ( arg ) ;
MultiMap < String > mm = new MultiMap <> ( arg ) ;
MultiMap < String > mm = new MultiMap <> ( arg ) ;
MultiMap < String > mm = new MultiMap <> ( arg ) ;
MultiMap < String > mm = new MultiMap <> ( arg ) ;
MultiMap < String > mm = new MultiMap <> ( arg ) ;
MultiMap < String > mm = new MultiMap <> ( arg ) ;
MultiMap < String > mm = new MultiMap <> ( arg ) ;
MultiMap < String > old_params = baseRequest . getParameters ( arg ) ;
MultiMap < String > old_params = baseRequest . getParameters ( arg ) ;
MultiMap < String > old_params = baseRequest . getParameters ( arg ) ;
MultiMap < String > overridden_new_query = new MultiMap <> ( arg ) ;
MultiMap < String > overridden_old_query = new MultiMap <> ( arg ) ;
MultiMap < String > parameters = new MultiMap <> ( arg ) ;
MultiMap < String > parameters = new MultiMap <> ( arg ) ;
MultiMap < String > parameters = new MultiMap <> ( arg ) ;
MultiMap < String > params = new MultiMap <> ( arg ) ;
MultiMap < String > params = new MultiMap <> ( arg ) ;
MultiPartInputStreamParser . MultiPart mp = ( MultiPartInputStreamParser . MultiPart ) p ;
MultiPartInputStreamParser . MultiPart mp = ( MultiPartInputStreamParser . MultiPart ) p ;
MultiPartInputStreamParser . MultiPart mp = ( MultiPartInputStreamParser . MultiPart ) p ;
MultiPartInputStreamParser m = ( MultiPartInputStreamParser ) sre . getServletRequest ( arg ) . getAttribute ( arg ) ;
MultiPartInputStreamParser mpis = ( MultiPartInputStreamParser ) request . getAttribute ( arg ) ;
MultiPartInputStreamParser mpis = ( MultiPartInputStreamParser ) sre . getServletRequest ( arg ) . getAttribute ( arg ) ;
MultiPartInputStreamParser mpis = new MultiPartInputStreamParser ( arg ) ;
MultiPartInputStreamParser mpis = new MultiPartInputStreamParser ( arg ) ;
MultiPartInputStreamParser mpis = new MultiPartInputStreamParser ( arg ) ;
MultiPartInputStreamParser mpis = new MultiPartInputStreamParser ( arg ) ;
MultiPartInputStreamParser mpis = new MultiPartInputStreamParser ( arg ) ;
MultiPartInputStreamParser mpis = new MultiPartInputStreamParser ( arg ) ;
MultiPartInputStreamParser mpis = new MultiPartInputStreamParser ( arg ) ;
MultiPartInputStreamParser mpis = new MultiPartInputStreamParser ( arg ) ;
MultiPartInputStreamParser mpis = new MultiPartInputStreamParser ( arg ) ;
MultiPartInputStreamParser mpis = new MultiPartInputStreamParser ( arg ) ;
MultiPartInputStreamParser mpis = new MultiPartInputStreamParser ( arg ) ;
MultiPartInputStreamParser mpis = new MultiPartInputStreamParser ( arg ) ;
NIOBuffer buffer = byteBuffer . <unk> ( arg ) ? new DirectNIOBuffer ( arg ) : new IndirectNIOBuffer ( arg ) ;
NamingEnumeration < SearchResult > results = _rootContext . search ( arg ) ;
NamingEnumeration < SearchResult > results = _rootContext . search ( arg ) ;
NamingEnumeration < SearchResult > results = <unk> . search ( arg ) ;
NamingEnumeration < ? > roles = <unk> . <unk> ( arg ) ;
( ( AbstractConnector ) connector ) . connectionUpgraded ( arg ) ;
NextProtoNegoClientConnection connection = new NextProtoNegoClientConnection ( arg ) ;
NoSqlSession session = _sessions . get ( arg ) ;
NoSqlSession session = null ;
Node < O > child = ( node . _children == null ) ? null : node . _children [ c % <unk> ] ;
Node < O > node = _root ;
Node < O > node = _root ;
Node < O > node = _root ;
Node < O > node = _root ;
Path actual = lifecycle . getPath ( arg ) ;
Path path = lifecycle . getPath ( arg ) ;
Number keys = ( Number ) _processor . getServer ( arg ) . getAttribute ( arg ) ;
Number keys = ( Number ) _connection . getServer ( arg ) . getAttribute ( arg ) ;
Number keys = ( Number ) _channel . getServer ( arg ) . getAttribute ( arg ) ;
Number keys = ( Number ) _channel . getServer ( arg ) . getAttribute ( arg ) ;
Number size = ( Number ) _processor . getServer ( arg ) . getAttribute ( arg ) ;
Number size = ( Number ) _connection . getServer ( arg ) . getAttribute ( arg ) ;
Number size = ( Number ) _channel . getServer ( arg ) . getAttribute ( arg ) ;
Number size = ( Number ) _channel . getServer ( arg ) . getAttribute ( arg ) ;
Object [ ] elements = new Object [ _capacity + <unk> ] ;
String arr [ ] = LazyList . removeFromArray ( arg ) ;
String arr [ ] = LazyList . removeFromArray ( arg ) ;
String arr [ ] = LazyList . removeFromArray ( arg ) ;
Object arr [ ] = ArrayUtil . addToArray ( arg ) ;
Object arr [ ] = ArrayUtil . addToArray ( arg ) ;
Object arr [ ] = ArrayUtil . addToArray ( arg ) ;
Object arr [ ] = ArrayUtil . removeFromArray ( arg ) ;
Object arr [ ] = ArrayUtil . removeFromArray ( arg ) ;
List < Cookie > cookies = new ArrayList <> ( arg ) ;
String <unk> = node . getAttribute ( arg ) ;
List < FilterHolder > filters = new ArrayList <> ( arg ) ;
Object item ;
Object l = get ( arg ) ;
Object l = get ( arg ) ;
Listener l = itor . next ( arg ) ;
Listener l = itor . next ( arg ) ;
List < Locale > langs = new ArrayList < Locale > ( arg ) ;
Object list = ArrayUtil . asMutableList ( arg ) ;
Object list = ArrayUtil . asMutableList ( arg ) ;
Object list = ArrayUtil . asMutableList ( arg ) ;
Object list = ArrayUtil . asMutableList ( arg ) ;
final List < ContinuationListener > listeners ;
final List < ContinuationListener > listeners ;
Object lo = get ( arg ) ;
Object lo = get ( arg ) ;
Object lo = get ( arg ) ;
Object lo = get ( arg ) ;
Object o = _reservedConnections . take ( arg ) ;
configuration . configure ( arg ) ;
configuration . configure ( arg ) ;
configuration . configure ( arg ) ;
String o = e . nextElement ( arg ) ;
O old = node . _value ;
O <unk> = <unk> ;
Object <unk> = _contextAttributes . getAttribute ( arg ) ;
String tmp = vl . get ( arg ) ;
Object value ;
ObjectName bean = _beans . get ( arg ) ;
ObjectName bean = _beans . remove ( arg ) ;
ObjectName bean = entry . getValue ( arg ) ;
ObjectName child = _beans . get ( arg ) ;
ObjectName parent = _beans . get ( arg ) ;
JsrCallable callable = <unk> ( arg ) ;
byte op = OpCode . TEXT ;
byte opcode = frame . getOpCode ( arg ) ;
try ( OutputStream out = new FileOutputStream ( arg ) ) {
try ( OutputStream out = new FileOutputStream ( arg ) ) {
try ( OutputStream out = response . getOutputStream ( arg ) ) {
JsrCallable cm = ( JsrCallable ) testcase . metadataField . get ( arg ) ;
JsrCallable cm = ( JsrCallable ) testcase . metadataField . get ( arg ) ;
Parser parser = new UnitParser ( arg ) ;
Parser parser = new UnitParser ( arg ) ;
Parser parser = new UnitParser ( arg ) ;
Parser parser = new UnitParser ( arg ) ;
Parser parser = new UnitParser ( arg ) ;
Parser parser = new UnitParser ( arg ) ;
Parser parser = new UnitParser ( arg ) ;
Parser parser = new UnitParser ( arg ) ;
Parser parser = new UnitParser ( arg ) ;
Parser parser = new UnitParser ( arg ) ;
Parser parser = new UnitParser ( arg ) ;
Parser parser = new UnitParser ( arg ) ;
Parser parser = new UnitParser ( arg ) ;
Parser parser = new UnitParser ( arg ) ;
Parser parser = new UnitParser ( arg ) ;
Parser parser = new UnitParser ( arg ) ;
Parser parser = new UnitParser ( arg ) ;
Parser parser = new UnitParser ( arg ) ;
Parser parser = new UnitParser ( arg ) ;
Parser parser = new UnitParser ( arg ) ;
Parser parser = new UnitParser ( arg ) ;
Parser parser = new UnitParser ( arg ) ;
Parser parser = new UnitParser ( arg ) ;
Parser parser = new UnitParser ( arg ) ;
Parser parser = new UnitParser ( arg ) ;
Parser parser = new UnitParser ( arg ) ;
Parser parser = new UnitParser ( arg ) ;
Parser parser = new UnitParser ( arg ) ;
Parser parser = new UnitParser ( arg ) ;
Parser parser = new UnitParser ( arg ) ;
Parser parser = new UnitParser ( arg ) ;
Parser parser = new UnitParser ( arg ) ;
Parser parser = new UnitParser ( arg ) ;
Parser parser = new UnitParser ( arg ) ;
Parser parser = new UnitParser ( arg ) ;
Parser parser = new UnitParser ( arg ) ;
Parser parser = new UnitParser ( arg ) ;
Parser parser = new UnitParser ( arg ) ;
Parser parser = new UnitParser ( arg ) ;
Parser parser = new UnitParser ( arg ) ;
Parser parser = new UnitParser ( arg ) ;
Parser parser = new UnitParser ( arg ) ;
Parser parser = new UnitParser ( arg ) ;
Continuation c = ( Continuation ) request . getAttribute ( arg ) ;
Path <unk> = testdir . <unk> ( arg ) . <unk> ( arg ) ;
PathMap . MappedEntry entry = getHolderEntry ( arg ) ;
PathMap . MappedEntry < ServletHolder > entry = getHolderEntry ( arg ) ;
PathMap < Object > <unk> = new PathMap < Object > ( arg ) ;
PathMap < Object > map = <unk> ;
PathMap < String > p = new PathMap <> ( arg ) ;
PendingState pending = ( PendingState ) current ;
PendingState pending = ( PendingState ) previous ;
MessageCompressionExtension ext = new MessageCompressionExtension ( arg ) ;
MessageCompressionExtension ext = new MessageCompressionExtension ( arg ) ;
MessageCompressionExtension ext = new MessageCompressionExtension ( arg ) ;
MessageCompressionExtension ext = new MessageCompressionExtension ( arg ) ;
MessageCompressionExtension ext = new MessageCompressionExtension ( arg ) ;
PermissionNode pe = new PermissionNode ( arg ) ;
PermissionEntry pe = new PermissionEntry ( arg ) ;
PingFrame frame = ( PingFrame ) FrameBuilder . ping ( arg ) . asFrame ( arg ) ;
BaseFrame frame = FrameBuilder . ping ( arg ) . payload ( arg ) . asFrame ( arg ) ;
PingFrame ping = new PingFrame ( arg ) . setPayload ( arg ) ;
PingFrame pingFrame = new PingFrame ( arg ) . setPayload ( arg ) ;
PingFrame pingFrame = new PingFrame ( arg ) . setPayload ( arg ) ;
Generator gen = new Generator ( arg ) ;
PromisingPingInfoCallback pingInfo = new PromisingPingInfoCallback ( arg ) ;
PingInfo pingInfo = session . ping ( arg ) . get ( arg ) ;
PingResultInfo <unk> = ref . get ( arg ) ;
PolicyBlock policy = new PolicyBlock ( arg ) ;
PongFrame pong = new PongFrame ( arg ) . setPayload ( arg ) ;
Generator gen = new Generator ( arg ) ;
try ( <unk> selectExpiredSessions = connection . <unk> ( arg ) ) {
Set < String > expiredSessionIds = new HashSet < String > ( arg ) ;
Principal <unk> = req . <unk> ( arg ) ;
PrincipalEntry pe = new PrincipalEntry ( arg ) ;
final <unk> p ;
FuturePromise < PingInfo > result = new FuturePromise <> ( arg ) ;
FuturePromise < Stream > result = new FuturePromise <> ( arg ) ;
FuturePromise < Stream > result = new FuturePromise <> ( arg ) ;
FutureCallback result = new FutureCallback ( arg ) ;
FutureCallback result = new FutureCallback ( arg ) ;
FutureCallback result = new FutureCallback ( arg ) ;
FutureCallback result = new FutureCallback ( arg ) ;
PingInfoCallback pingInfo = new PingInfoCallback ( arg ) ;
Dictionary dic = new Hashtable ( arg ) ;
Properties properties = _config . getProperties ( arg ) ;
Properties properties = Config . getProperties ( arg ) ;
Dictionary properties = new Hashtable ( arg ) ;
Properties props = _config . getProperties ( arg ) ;
Properties props = Config . getProperties ( arg ) ;
ProtectionDomain pd = i . next ( arg ) ;
ProtectionDomain pd = i . next ( arg ) ;
ConnectHandler proxy = new ConnectHandler ( arg ) ;
ConnectHandler <unk> = new ConnectHandler ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
PushStrategy push = null ;
PushStrategy push = new <unk> ( arg ) ;
QNode n = get ( arg ) ;
QNode next = get ( arg ) ;
QNode next = get ( arg ) ;
QNode next = get ( arg ) ;
QNode prev_next = prev . get ( arg ) ;
Queue < WebSocketFrame > frames = client . readFrames ( arg ) ;
Queue < WebSocketFrame > frames = client . readFrames ( arg ) ;
Queue < WebSocketFrame > frames = client . readFrames ( arg ) ;
Queue < WebSocketFrame > frames = client . readFrames ( arg ) ;
Queue < WebSocketFrame > frames = client . readFrames ( arg ) ;
IncomingFramesCapture capture = client . readFrames ( arg ) ;
quoteOnlyOrAppend ( arg ) ;
quoteOnlyOrAppend ( arg ) ;
<unk> ( arg ) ;
try ( RandomAccessFile <unk> = new RandomAccessFile ( arg ) ) {
Request baseRequest = ( request instanceof Request ) ? ( ( Request ) request ) : AbstractHttpConnection . getCurrentHttpChannel ( arg ) . getRequest ( arg ) ;
Request baseRequest = ( request instanceof Request ) ? ( ( Request ) request ) : AbstractHttpConnection . getCurrentHttpChannel ( arg ) . getRequest ( arg ) ;
Request baseRequest = ( request instanceof Request ) ? ( ( Request ) request ) : HttpChannel . getCurrentHttpChannel ( arg ) . getRequest ( arg ) ;
Request baseRequest = ( request instanceof Request ) ? ( ( Request ) request ) : HttpChannel . getCurrentHttpChannel ( arg ) . getRequest ( arg ) ;
Request baseRequest = ( request instanceof Request ) ? ( ( Request ) request ) : AbstractHttpConnection . getCurrentConnection ( arg ) . getRequest ( arg ) ;
Request baseRequest = ( request instanceof Request ) ? ( ( Request ) request ) : AbstractHttpConnection . getCurrentConnection ( arg ) . getRequest ( arg ) ;
Request base_request = ( req instanceof Request ) ? ( Request ) req : AbstractHttpConnection . getCurrentConnection ( arg ) . getRequest ( arg ) ;
Request base_request = ( req instanceof Request ) ? ( Request ) req : AbstractHttpConnection . getCurrentConnection ( arg ) . getRequest ( arg ) ;
Request baseRequest = ( request instanceof Request ) ? ( ( Request ) request ) : HttpConnection . getCurrentConnection ( arg ) . getRequest ( arg ) ;
Request base_request = ( request instanceof Request ) ? ( Request ) request : AbstractHttpConnection . getCurrentConnection ( arg ) . getRequest ( arg ) ;
Request redirect = client . <unk> ( arg ) ;
Request request = _processor . getRequest ( arg ) ;
Request request = _channel . getRequest ( arg ) ;
Request request = _channel . getRequest ( arg ) ;
Request request = builder . method ( arg ) . path ( arg ) . header ( arg ) . build ( arg ) ;
Request request = client . newRequest ( arg ) . scheme ( arg ) . path ( arg ) ;
Request request = client . newRequest ( arg ) . scheme ( arg ) . method ( arg ) . path ( arg ) . version ( arg ) . param ( arg ) . header ( arg ) . agent ( arg ) . decoder ( arg ) . content ( arg ) . idleTimeout ( arg ) ;
Request request = client . newRequest ( arg ) . scheme ( arg ) . method ( arg ) . path ( arg ) . version ( arg ) . param ( arg ) . header ( arg ) . agent ( arg ) . content ( arg ) . idleTimeout ( arg ) ;
Request request = exchange . getRequest ( arg ) ;
Request request = exchange . getRequest ( arg ) ;
final Request request = httpClient . newRequest ( arg ) . path ( arg ) . method ( arg ) ;
Request request = _requests . take ( arg ) ;
final Request request = result . getRequest ( arg ) ;
try ( Resource <unk> = Resource . newResource ( arg ) ) {
try ( Resource ctx = Resource . newResource ( arg ) ) {
Resource <unk> = Resource . newResource ( arg ) ;
try ( Resource item = lib . addPath ( arg ) ) {
try ( Resource <unk> = Resource . newResource ( arg ) ) {
Resource <unk> = <unk> . <unk> ( arg ) ;
Resource l = web_inf . addPath ( arg ) ;
try ( Resource lib = Resource . newResource ( arg ) ) {
Resource monitoredDir = getMonitoredDirResource ( arg ) ;
Resource monitoredDir = getMonitoredDirResource ( arg ) ;
tld = ( Resource ) iter . next ( arg ) ;
ResourceCache cache = ( connector instanceof <unk> &&! ( connector instanceof <unk> ) ) ? <unk> : <unk> ;
List < Response . ResponseListener > listeners = conversation . getExchanges ( arg ) . <unk> ( arg ) . getResponseListeners ( arg ) ;
Response <unk> = baseRequest . getResponse ( arg ) ;
Response response = client . GET ( arg ) ;
Response response = client . builder ( arg ) . method ( arg ) . path ( arg ) . file ( arg ) . build ( arg ) . send ( arg ) . get ( arg ) ;
Response response = client . newRequest ( arg ) . file ( arg ) . send ( arg ) ;
Response response = client . newRequest ( arg ) . scheme ( arg ) . method ( arg ) . path ( arg ) . send ( arg ) . get ( arg ) ;
Response response = client . newRequest ( arg ) . scheme ( arg ) . path ( arg ) . send ( arg ) . get ( arg ) ;
Response response = client . newRequest ( arg ) . scheme ( arg ) . path ( arg ) . send ( arg ) . get ( arg ) ;
Response response = client . newRequest ( arg ) . scheme ( arg ) . path ( arg ) . send ( arg ) . get ( arg ) ;
Response response = client . newRequest ( arg ) . scheme ( arg ) . path ( arg ) . send ( arg ) . get ( arg ) ;
Response response = client . newRequest ( arg ) . scheme ( arg ) . followRedirects ( arg ) . path ( arg ) . timeout ( arg ) . send ( arg ) ;
Response response = client . newRequest ( arg ) . scheme ( arg ) . method ( arg ) . path ( arg ) . timeout ( arg ) . send ( arg ) ;
Response response = client . newRequest ( arg ) . scheme ( arg ) . path ( arg ) . timeout ( arg ) . send ( arg ) ;
Response response = client . newRequest ( arg ) . scheme ( arg ) . path ( arg ) . timeout ( arg ) . send ( arg ) ;
Response response = client . newRequest ( arg ) . scheme ( arg ) . path ( arg ) . timeout ( arg ) . send ( arg ) ;
Response response = client . newRequest ( arg ) . scheme ( arg ) . path ( arg ) . timeout ( arg ) . send ( arg ) ;
Response response = client . newRequest ( arg ) . timeout ( arg ) . send ( arg ) ;
Response response = client . newRequest ( arg ) . timeout ( arg ) . send ( arg ) ;
TestHttpResponse response = executeRequest ( arg ) ;
TestHttpResponse response = executeRequest ( arg ) ;
TestHttpResponse response = executeRequest ( arg ) ;
TestHttpResponse response = executeRequest ( arg ) ;
TestHttpResponse response = executeRequest ( arg ) ;
TestHttpResponse response = executeRequest ( arg ) ;
TestHttpResponse response = executeRequest ( arg ) ;
TestHttpResponse response = executeRequest ( arg ) ;
TestHttpResponse response = executeRequest ( arg ) ;
TestHttpResponse response = executeRequest ( arg ) ;
TestHttpResponse response = executeRequest ( arg ) ;
TestHttpResponse response = executeRequest ( arg ) ;
TestHttpResponse response = executeRequest ( arg ) ;
TestHttpResponse response = executeRequest ( arg ) ;
TestHttpResponse response = executeRequest ( arg ) ;
TestHttpResponse response = executeRequest ( arg ) ;
TestHttpResponse response = executeRequest ( arg ) ;
TestHttpResponse response = executeRequest ( arg ) ;
TestHttpResponse response = executeRequest ( arg ) ;
TestHttpResponse response = executeRequest ( arg ) ;
TestHttpResponse response = executeRequest ( arg ) ;
TestHttpResponse response = executeRequest ( arg ) ;
TestHttpResponse response = executeRequest ( arg ) ;
TestHttpResponse response = executeRequest ( arg ) ;
TestHttpResponse response = executeRequest ( arg ) ;
TestHttpResponse response = executeRequest ( arg ) ;
TestHttpResponse response = executeRequest ( arg ) ;
TestHttpResponse response = executeRequest ( arg ) ;
TestHttpResponse response = executeRequest ( arg ) ;
TestHttpResponse response = executeRequest ( arg ) ;
TestHttpResponse response = executeRequest ( arg ) ;
TestHttpResponse response = executeRequest ( arg ) ;
TestHttpResponse response = executeRequest ( arg ) ;
TestHttpResponse response = executeRequest ( arg ) ;
TestHttpResponse response = executeRequest ( arg ) ;
TestHttpResponse response = executeRequest ( arg ) ;
TestHttpResponse response = executeRequest ( arg ) ;
TestHttpResponse response = executeRequest ( arg ) ;
TestHttpResponse response = executeRequest ( arg ) ;
TestHttpResponse response = executeRequest ( arg ) ;
TestHttpResponse response = executeRequest ( arg ) ;
TestHttpResponse response = executeRequest ( arg ) ;
TestHttpResponse response = executeRequest ( arg ) ;
TestHttpResponse response = executeRequest ( arg ) ;
Response response = listener . get ( arg ) ;
Response response = listener . get ( arg ) ;
Response response = newResponse ( arg ) ;
Response response = newResponse ( arg ) ;
Response response = newResponse ( arg ) ;
Response response = newResponse ( arg ) ;
Response response = newResponse ( arg ) ;
Response response = newResponse ( arg ) ;
<unk> info = _response . <unk> ( arg ) ;
try ( ResultSet result = metaData . getTables ( arg ) ) {
try ( ResultSet result = metaData . getTables ( arg ) ) {
try ( ResultSet result = query . executeQuery ( arg ) ) {
try ( ResultSet result = statement . executeQuery ( arg ) ) {
try ( ResultSet result = statement . executeQuery ( arg ) ) {
final Runnable task = queue . poll ( arg ) ;
SPDYConnection connection = new <unk> ( arg ) ;
SPDYConnection connection = new <unk> ( arg ) ;
SSLEngine engine = __sslCtxFactory . newSSLEngine ( arg ) ;
SSLEngine engine = __sslCtxFactory . newSSLEngine ( arg ) ;
SSLEngine engine = __sslCtxFactory . newSSLEngine ( arg ) ;
SSLEngine engine = __sslCtxFactory . newSSLEngine ( arg ) ;
SSLEngine engine = newSSLEngine ( arg ) ;
SSLEngine engine = newSSLEngine ( arg ) ;
SSLEngine engine = sslContextFactory . newSSLEngine ( arg ) ;
SSLEngine engine = sslContextFactory . newSSLEngine ( arg ) ;
SSLEngine engine = sslContextFactory . newSSLEngine ( arg ) ;
SSLEngine engine = sslContextFactory . newSSLEngine ( arg ) ;
SSLEngine engine = sslContextFactory . newSSLEngine ( arg ) ;
SSLEngine engine = sslContextFactory . newSSLEngine ( arg ) ;
SSLEngine sslEngine = _sslContextFactory . newSslEngine ( arg ) ;
SSLEngine sslEngine = _sslContextFactory . newSSLEngine ( arg ) ;
SSLEngine sslEngine = _sslContextFactory . newSSLEngine ( arg ) ;
_engine . wrap ( arg ) ;
Scheduler scheduler = _channel . <unk> ( arg ) ;
Scheduler scheduler = new TimerScheduler ( arg ) ;
Scheduler scheduler = new TimerScheduler ( arg ) ;
if ( <unk> ) {
SecurityHandler security_handler = _contextHandler . getChildHandlerByClass ( arg ) ;
ChannelHttpConnector connector = ( ChannelHttpConnector ) _connector ;
ChannelHttpConnector connector = ( ChannelHttpConnector ) _connector ;
ServerConnector connector = new ServerConnector ( arg ) ;
ServerConnector connector = new ServerConnector ( arg ) ;
ServerConnector connector = new ServerConnector ( arg ) ;
ServerConnector connector = new ServerConnector ( arg ) ;
ServerConnector connector = new ServerConnector ( arg ) ;
ServerConnector connector = new ServerConnector ( arg ) ;
ServerConnector connector = new ServerConnector ( arg ) ;
ServerConnector connector = new ServerConnector ( arg ) ;
ServerConnector connector = new ServerConnector ( arg ) ;
ServerConnector connector = new ServerConnector ( arg ) ;
ServerConnector connector = new ServerConnector ( arg ) ;
ServerConnector connector = new ServerConnector ( arg ) ;
ServerConnector connector0 = new ServerConnector ( arg ) ;
ServerConnector connector0 = new ServerConnector ( arg ) ;
ServerConnector connector1 = new ServerConnector ( arg ) ;
ServerConnector connector1 = new ServerConnector ( arg ) ;
ServerConnector <unk> = new ServerConnector ( arg ) ;
ServerConnector <unk> = new ServerConnector ( arg ) ;
ServerConnector <unk> = new ServerConnector ( arg ) ;
ServerConnector ssl_connector = new ServerConnector ( arg ) ;
SelectableEndPoint endp = _endp ;
AsyncEndPoint endp = newEndPoint ( arg ) ;
final SelectChannelEndPoint endpoint = ( SelectChannelEndPoint ) busy . attachment ( arg ) ;
SelectableAsyncEndPoint endpoint = ( SelectableAsyncEndPoint ) <unk> ;
SelectableAsyncEndPoint endpoint = ( SelectableAsyncEndPoint ) key . attachment ( arg ) ;
AsyncEndPoint endpoint = createEndPoint ( arg ) ;
AsyncEndPoint endpoint = createEndPoint ( arg ) ;
AsyncEndPoint endpoint = createEndPoint ( arg ) ;
AsyncEndPoint endpoint = createEndPoint ( arg ) ;
SelectChannelEndPoint endpoint = _selectSet [ <unk> ] . createEndPoint ( arg ) ;
AsyncEndPoint scep = ( AsyncEndPoint ) _endp ;
ManagedSelector selectSet = <unk> ( arg ) ;
ManagedSelector set = chooseSelectSet ( arg ) ;
Selectable endp = newEndPoint ( arg ) ;
AsyncConnection connection = endp . getAsyncConnection ( arg ) ;
AsyncEndPoint endp = _endp ;
SelectionKey busy = selector . <unk> ( arg ) . iterator ( arg ) . next ( arg ) ;
key = channel . register ( arg ) ;
SslConnection . LOG . info ( arg ) ;
<unk> current = <unk> . get ( arg ) ;
ServerInstanceWrapper server = ( ServerInstanceWrapper ) <unk> . remove ( arg ) ;
Server server = getServerByPID ( arg ) ;
ServerInstanceWrapper serverInstanceWrapper = getServerByPID ( arg ) ;
final Server server = <unk> ( arg ) . getServer ( arg ) ;
ServerSPDYAsyncConnection connection = new ServerSPDYAsyncConnection ( arg ) ;
ServerContainer container = ( ServerContainer ) sce . getServletContext ( arg ) . getAttribute ( arg ) ;
ServerContainer container = ( ServerContainer ) sce . getServletContext ( arg ) . getAttribute ( arg ) ;
ServerContainer container = ( ServerContainer ) sce . getServletContext ( arg ) . getAttribute ( arg ) ;
ServerContainer container = ( ServerContainer ) sce . getServletContext ( arg ) . getAttribute ( arg ) ;
ServerContainer container = WebSocketServerContainerInitializer . configureContext ( arg ) ;
ServerContainer container = WebSocketServerContainerInitializer . configureContext ( arg ) ;
ServerContainer <unk> = WebSocketServerContainerInitializer . configureContext ( arg ) ;
Configurator configurator = config . getConfigurator ( arg ) ;
ServerEndpointConfig config = <unk> . <unk> ( arg ) ;
serverInstanceWrapper . start ( arg ) ;
server . stop ( arg ) ;
ServletContext context = ( ( Request ) request ) . getServletContext ( arg ) . <unk> ( arg ) ;
ServletContext context = event . getServletContext ( arg ) ;
WebAppContext context = server . <unk> ( arg ) ;
ServletHolder [ ] <unk> = <unk> . clone ( arg ) ;
ServletHolder <unk> = <unk> . match ( arg ) ;
@ SuppressWarnings ( arg ) ServletHolder jspholder = context . addServlet ( arg ) ;
@ SuppressWarnings ( arg ) ServletHolder jspholder = context . addServlet ( arg ) ;
ServletOutputStream out = _processor . getOutputStream ( arg ) ;
ServletOutputStream out = _channel . getOutputStream ( arg ) ;
ServletOutputStream out = _channel . getOutputStream ( arg ) ;
Session client = factory . newSPDYClient ( arg ) . connect ( arg ) ;
Session client = factory . newSPDYClient ( arg ) . connect ( arg ) ;
Session client = factory . newSPDYClient ( arg ) . connect ( arg ) ;
Session client = factory . newSPDYClient ( arg ) . connect ( arg ) ;
Session client = factory . newSPDYClient ( arg ) . connect ( arg ) ;
Session client = factory . newSPDYClient ( arg ) . connect ( arg ) ;
Session client = factory . newSPDYClient ( arg ) . connect ( arg ) ;
Session client = factory . newSPDYClient ( arg ) . connect ( arg ) ;
Session client = factory . newSPDYClient ( arg ) . connect ( arg ) ;
Session client = factory . newSPDYClient ( arg ) . connect ( arg ) ;
Session client = factory . newSPDYClient ( arg ) . connect ( arg ) ;
Session client = factory . newSPDYClient ( arg ) . connect ( arg ) ;
AbstractSession s = ( ( SessionIf ) session ) . getSession ( arg ) ;
AbstractSession s = ( ( SessionIf ) session ) . getSession ( arg ) ;
AbstractSession s = ( ( SessionIf ) session ) . getSession ( arg ) ;
AbstractSession s = ( ( SessionIf ) session ) . getSession ( arg ) ;
AbstractSession s = ( ( SessionIf ) session ) . getSession ( arg ) ;
HashedSession session = ( HashedSession ) LazyList . get ( arg ) ;
HashedSession session = ( HashedSession ) entry . getValue ( arg ) ;
HashedSession session = ( HashedSession ) newSession ( arg ) ;
AbstractSession session = ( AbstractSession ) ref . get ( arg ) ;
Session session = wsocket . getSession ( arg ) ;
Session session = client . connect ( arg ) ;
Session session = client . connect ( arg ) ;
Session session = client . connect ( arg ) ;
AbstractSession session = getSession ( arg ) ;
AbstractSession session = newSession ( arg ) ;
HashedSession session = <unk> ( arg ) ;
Session session = <unk> ( arg ) ;
Session session = null ;
SessionPromise result = new SessionPromise ( arg ) ;
SessionPromise sessionPromise = ( SessionPromise ) attachment ;
SessionHandler sessionHandler = ( ( ContextHandler ) contexts [ i ] ) . getChildHandlerByClass ( arg ) ;
SessionHandler sessionHandler = ( ( ContextHandler ) contexts [ i ] ) . getChildHandlerByClass ( arg ) ;
SessionHandler sessionHandler = ( ( ContextHandler ) contexts [ i ] ) . getChildHandlerByClass ( arg ) ;
SessionHandler sessionHandler = ( ( ContextHandler ) contexts [ i ] ) . getChildHandlerByClass ( arg ) ;
SessionManager manager = ( ( SessionHandler ) ( ( ContextHandler ) contexts [ i ] ) . getChildHandlerByClass ( arg ) ) . getSessionManager ( arg ) ;
SessionManager manager = ( ( SessionHandler ) ( ( ContextHandler ) contexts [ i ] ) . getChildHandlerByClass ( arg ) ) . getSessionManager ( arg ) ;
SessionPromise attachment = ( SessionPromise ) <unk> . attachment ( arg ) ;
Set < String > actualJvmArgs = new HashSet <> ( arg ) ;
List < String > <unk> = new ArrayList <> ( arg ) ;
List < String > <unk> = new ArrayList <> ( arg ) ;
List < String > <unk> = new ArrayList <> ( arg ) ;
Set < String > <unk> = new HashSet <> ( arg ) ;
List < String > <unk> = new ArrayList <> ( arg ) ;
List < String > <unk> = new ArrayList <> ( arg ) ;
Set < String > knownRoles = new HashSet <> ( arg ) ;
Set < String > knownRoles = new HashSet <> ( arg ) ;
Set < String > result = Collections . < String > <unk> ( arg ) ;
Set < String > result = new LinkedHashSet <> ( arg ) ;
Set < String > selected_ciphers = new LinkedHashSet < String > ( arg ) ;
Set < String > selected_ciphers = new LinkedHashSet <> ( arg ) ;
Set < String > selected_protocols = new LinkedHashSet < String > ( arg ) ;
Set < String > selected_protocols = new LinkedHashSet <> ( arg ) ;
Set < String > entries = new HashSet <> ( arg ) ;
Set < EndPoint > set = new HashSet < EndPoint > ( arg ) ;
<unk> . getInstance ( arg ) . start ( arg ) ;
if ( getStopAtShutdown ( arg ) ) ShutdownThread . deregister ( arg ) ;
SimpleHttpResponse response = executeRequest ( arg ) ;
SimpleHttpResponse response = executeRequest ( arg ) ;
SimpleHttpResponse response = executeRequest ( arg ) ;
SimpleHttpResponse response = executeRequest ( arg ) ;
SimpleHttpResponse response = executeRequest ( arg ) ;
SimpleHttpResponse response = executeRequest ( arg ) ;
SimpleHttpResponse response = executeRequest ( arg ) ;
SimpleHttpResponse response = executeRequest ( arg ) ;
SimpleHttpResponse response = executeRequest ( arg ) ;
SimpleHttpResponse response = executeRequest ( arg ) ;
SimpleHttpResponse response = executeRequest ( arg ) ;
SimpleHttpResponse response = executeRequest ( arg ) ;
SimpleHttpResponse response = executeRequest ( arg ) ;
SimpleHttpResponse response = executeRequest ( arg ) ;
SimpleHttpResponse response = executeRequest ( arg ) ;
SimpleHttpResponse response = executeRequest ( arg ) ;
SimpleHttpResponse response = executeRequest ( arg ) ;
SimpleHttpResponse response = executeRequest ( arg ) ;
SimpleHttpResponse response = executeRequest ( arg ) ;
SimpleHttpResponse response = executeRequest ( arg ) ;
SimpleHttpResponse response = executeRequest ( arg ) ;
SimpleHttpResponse response = executeRequest ( arg ) ;
SimpleHttpResponse response = executeRequest ( arg ) ;
SimpleHttpResponse response = executeRequest ( arg ) ;
SimpleHttpResponse response = executeRequest ( arg ) ;
SimpleHttpResponse response = executeRequest ( arg ) ;
SimpleHttpResponse response = executeRequest ( arg ) ;
SimpleHttpResponse response = executeRequest ( arg ) ;
SimpleHttpResponse response = executeRequest ( arg ) ;
SimpleHttpResponse response = executeRequest ( arg ) ;
SimpleHttpResponse response = executeRequest ( arg ) ;
SimpleHttpResponse response = executeRequest ( arg ) ;
SimpleHttpResponse response = executeRequest ( arg ) ;
SimpleHttpResponse response = executeRequest ( arg ) ;
SimpleHttpResponse response = executeRequest ( arg ) ;
SimpleHttpResponse response = executeRequest ( arg ) ;
SimpleHttpResponse response = executeRequest ( arg ) ;
SimpleHttpResponse response = executeRequest ( arg ) ;
SimpleHttpResponse response = executeRequest ( arg ) ;
SimpleHttpResponse response = executeRequest ( arg ) ;
SimpleHttpResponse response = executeRequest ( arg ) ;
SimpleHttpResponse response = executeRequest ( arg ) ;
SimpleHttpResponse response = executeRequest ( arg ) ;
SimpleHttpResponse response = executeRequest ( arg ) ;
try ( Socket client = new Socket ( arg ) ) {
try ( Socket client = <unk> ( arg ) ) {
Socket connection = _server . accept ( arg ) ;
Socket s = serverSocket . accept ( arg ) ;
try ( Socket socket = new Socket ( arg ) ) {
try ( Socket socket = new Socket ( arg ) ) {
channel = ( SocketChannel ) key . channel ( arg ) ;
channel = ( SocketChannel ) key . channel ( arg ) ;
channel = SocketChannel . open ( arg ) ;
SocketChannel channel = server . accept ( arg ) ;
SslConnection . AppEndPoint <unk> = ( SslConnection . AppEndPoint ) endpoint ;
SslConnection . DecryptedEndPoint ssl_endp = ( SslConnection . DecryptedEndPoint ) request . getHttpChannel ( arg ) . getEndPoint ( arg ) ;
SslConnection . DecryptedEndPoint ssl_endp = ( SslConnection . DecryptedEndPoint ) request . getHttpChannel ( arg ) . getEndPoint ( arg ) ;
SslConnection sslConnection = newSslConnection ( arg ) ;
SslConnection sslConnection = newSslConnection ( arg ) ;
SslContextFactory cf = connector . getConnectionFactory ( arg ) . getSslContextFactory ( arg ) ;
SslContextFactory cf = connector . getConnectionFactory ( arg ) . getSslContextFactory ( arg ) ;
SslContextFactory cf = connector . getConnectionFactory ( arg ) . getSslContextFactory ( arg ) ;
SslContextFactory cf = connector . getConnectionFactory ( arg ) . getSslContextFactory ( arg ) ;
SslContextFactory cf = connector . getConnectionFactory ( arg ) . getSslContextFactory ( arg ) ;
SslContextFactory cf = connector . getConnectionFactory ( arg ) . getSslContextFactory ( arg ) ;
SslContextFactory cf = connector . getConnectionFactory ( arg ) . getSslContextFactory ( arg ) ;
SslContextFactory cf = ssl_connector . getSslContextFactory ( arg ) ;
SslContextFactory cf = ssl_connector . getConnectionFactory ( arg ) . getSslContextFactory ( arg ) ;
SslContextFactory cf = ssl_connector . getConnectionFactory ( arg ) . getSslContextFactory ( arg ) ;
SslContextFactory cf = ssl_connector . getConnectionFactory ( arg ) . getSslContextFactory ( arg ) ;
SslContextFactory cf = ssl_connector . getConnectionFactory ( arg ) . getSslContextFactory ( arg ) ;
SelectChannelConnector connector = new SelectChannelConnector ( arg ) ;
SelectChannelConnector connector = new SelectChannelConnector ( arg ) ;
SelectChannelConnector connector = new SelectChannelConnector ( arg ) ;
SelectChannelConnector connector = new SelectChannelConnector ( arg ) ;
SelectChannelConnector ssl_connector = new SelectChannelConnector ( arg ) ;
SelectChannelConnector ssl_connector = new SelectChannelConnector ( arg ) ;
SelectChannelConnector ssl_connector = new SelectChannelConnector ( arg ) ;
SslSelectChannelConnector ssl_connector = new SslSelectChannelConnector ( arg ) ;
ByteBufferPool bufferPool = new MappedByteBufferPool ( arg ) ;
ByteBufferPool bufferPool = new MappedByteBufferPool ( arg ) ;
StandardSession . FrameBytes element = queue . <unk> ( arg ) ;
final StandardSession session = new StandardSession ( arg ) ;
IStream stream = createStream ( arg ) ;
IStream stream = new <unk> ( arg ) ;
start_ini = new <unk> ( arg ) ;
StartLog . info ( arg ) ;
StartLog . info ( arg ) ;
StartLog . info ( arg ) ;
HttpOutput . OutputState last = _state . get ( arg ) ;
Next next = process ( arg ) ;
try ( Connection connection = <unk> . getConnection ( arg ) ; <unk> <unk> = connection . <unk> ( arg ) ) {
<unk> status = code < __preprepared . length ? __preprepared [ code ] : null ;
StdErrLog logger = StdErrLog . getLogger ( arg ) ;
Stream pushStream = stream . syn ( arg ) ;
Stream pushStream = stream . syn ( arg ) ;
Stream pushStream = stream . push ( arg ) ;
Stream pushStream = stream . push ( arg ) ;
Stream stream = clientSession . syn ( arg ) ;
Stream stream = clientSession . syn ( arg ) ;
Stream stream = session . syn ( arg ) ;
Stream stream = session . syn ( arg ) ;
Stream stream = session . syn ( arg ) ;
Stream stream = session . syn ( arg ) ;
Stream stream = session . syn ( arg ) ;
Stream stream = session . syn ( arg ) ;
Stream stream = session . syn ( arg ) . get ( arg ) ;
Stream stream = session . syn ( arg ) . get ( arg ) ;
Stream stream = session . syn ( arg ) . get ( arg ) ;
Stream stream1 = session . syn ( arg ) ;
Stream stream1 = session . syn ( arg ) . get ( arg ) ;
Stream stream2 = session . syn ( arg ) ;
Stream stream2 = session . syn ( arg ) . get ( arg ) ;
String [ ] [ ] tests = { { val } , { val } , { val } , { val } , { val } , { val } , { val } , { val } , { val } , { val } , { val } , { val } , { <unk>
String [ ] protocols = new String [ passed . length ] ;
String [ ] protocols = new String [ passed . length ] ;
String [ ] <unk> = <unk> . <unk> ;
String [ ] status = fields . get ( arg ) . getValue ( arg ) . split ( arg ) ;
String [ ] values = value . split ( arg ) ;
String <unk> = origin + url ;
boolean join = Boolean . parseBoolean ( arg ) ;
String addr = <unk> . <unk> ( arg ) ;
String arr [ ] = ArrayUtil . addToArray ( arg ) ;
String arr [ ] = ArrayUtil . addToArray ( arg ) ;
String arr [ ] = ArrayUtil . addToArray ( arg ) ;
String arr [ ] = ArrayUtil . addToArray ( arg ) ;
String arr [ ] = ArrayUtil . removeFromArray ( arg ) ;
String arr [ ] = ArrayUtil . removeFromArray ( arg ) ;
String arr [ ] = ArrayUtil . removeFromArray ( arg ) ;
String arr [ ] = ArrayUtil . removeFromArray ( arg ) ;
body += BufferUtil . toString ( arg ) ;
body += BufferUtil . toString ( arg ) ;
body += BufferUtil . toString ( arg ) ;
body += BufferUtil . toString ( arg ) ;
body += BufferUtil . toString ( arg ) ;
body += BufferUtil . toString ( arg ) ;
body += BufferUtil . toString ( arg ) ;
body += BufferUtil . toString ( arg ) ;
body += BufferUtil . toString ( arg ) ;
body += BufferUtil . toString ( arg ) ;
String <unk> <unk> QuotedStringTokenizer . <unk> ( arg ) ;
String <unk> = System . getProperty ( arg ) ;
String charset = ( mime == null || mime . getCharset ( arg ) == null ) ? MimeTypes . getCharsetFromContentType ( arg ) : mime . getCharset ( arg ) . toString ( arg ) ;
String charset = ( _mimeType != null && _mimeType . getCharset ( arg ) != null ) ? _mimeType . getCharset ( arg ) . toString ( arg ) : null ;
String <unk> = dataInfo . asString ( arg ) ;
String <unk> = dataInfo . asString ( arg ) ;
String className = holder . getClassName ( arg ) ;
String className = holder . getClassName ( arg ) ;
String <unk> = getSessionIdManager ( arg ) . <unk> ( arg ) ;
String connection = _channel . getRequest ( arg ) . getHttpFields ( arg ) . getStringField ( arg ) ;
String connection = _channel . getRequestFields ( arg ) . getStringField ( arg ) ;
String connection = _channel . getRequestFields ( arg ) . getStringField ( arg ) ;
String connector = AbstractHttpConnection . getCurrentHttpChannel ( arg ) . getConnector ( arg ) . getName ( arg ) ;
String connector = HttpChannel . getCurrentHttpChannel ( arg ) . getConnector ( arg ) . getName ( arg ) ;
String connector = HttpChannel . getCurrentHttpChannel ( arg ) . getHttpConnector ( arg ) . getName ( arg ) ;
String connector = HttpChannel . getCurrentHttpChannel ( arg ) . getConnector ( arg ) . getName ( arg ) ;
String connector = AbstractHttpConnection . getCurrentConnection ( arg ) . getConnector ( arg ) . getName ( arg ) ;
String content = ( String ) req . getParameter ( arg ) ;
String content = response . getHeaders ( arg ) . get ( arg ) ;
Charset contentType = _encoding ;
String contentType = header . getValue ( arg ) . toLowerCase ( arg ) ;
String <unk> = app . getContextPath ( arg ) ;
String contextPath = getWebContextPath ( arg ) ;
String contextPath = getWebContextPath ( arg ) ;
contextPath = ( String ) headers . get ( arg ) ;
contextPath = getContextPath ( arg ) ;
contextPath = getContextPath ( arg ) ;
String contextPath = ( String ) dic . get ( arg ) ;
String d = _dateCache . now ( arg ) ;
String d = _dateCache . formatNow ( arg ) ;
String d = DateGenerator . formatDate ( arg ) ;
String d = DateGenerator . formatDate ( arg ) ;
String d = DateGenerator . formatDate ( arg ) ;
String data = StandardCharsets . UTF_8 . decode ( arg ) . toString ( arg ) ;
String <unk> = <unk> ( arg ) ;
String <unk> = encodingHeader . equals ( arg ) ? GzipFilter . DEFLATE : GzipFilter . <unk> ;
String f = dc . formatNow ( arg ) ;
String file = expand ( arg ) ;
String group = Matcher . quoteReplacement ( arg ) ;
String group = Matcher . quoteReplacement ( arg ) ;
out = BufferUtil . toString ( arg ) ;
out = BufferUtil . toString ( arg ) ;
String host = serverAddress ;
String host = <unk> . getValue ( arg ) ;
String hostPort = _fields . getStringField ( arg ) ;
IO . toString ( arg ) ;
IO . toString ( arg ) ;
String in = reader . getResponse ( arg ) . toString ( arg ) ;
String <unk> = stripQuotesIfPresent ( arg ) ;
<unk> . toString ( arg ) ;
String key = name ;
String key = fragFolder . startsWith ( arg ) ? fragFolder . substring ( arg ) : fragFolder ;
File keystore = MavenTestingUtils . getTestResourceFile ( arg ) ;
String <unk> = acceptLanguage . get ( arg ) ;
String <unk> = properties . expand ( arg ) ;
String location = iter . next ( arg ) ;
String location = out . getOutput ( arg ) . toString ( arg ) ;
URI location = URI . create ( arg ) ;
String <unk> = <unk> . stripQuotesIfPresent ( arg ) ;
String method = HttpMethod . GET ;
String mimetype = ( content == null ? null : content . getContentType ( arg ) ) ;
String msg = String . format ( arg ) ;
String msg = String . format ( arg ) ;
String msg = String . format ( arg ) ;
String msg = String . format ( arg ) ;
String name = e . nextElement ( arg ) ;
String name = e . nextElement ( arg ) ;
String name = e . nextElement ( arg ) ;
String name = e . nextElement ( arg ) ;
String name = e . nextElement ( arg ) ;
String name = e . nextElement ( arg ) ;
String name = e . nextElement ( arg ) ;
String name = headers . nextElement ( arg ) ;
name = _acceptorThread [ _acceptor ] . getName ( arg ) ;
String name = field . getName ( arg ) ;
String name = field . getName ( arg ) ;
String name = file . getName ( arg ) ;
String name = header . getName ( arg ) . toLowerCase ( arg ) ;
String name = header . getName ( arg ) ;
String name = names . nextElement ( arg ) ;
String <unk> ;
String <unk> = getSessionIdManager ( arg ) . <unk> ( arg ) ;
in . <unk> ( arg ) ;
Date now = new Date ( arg ) ;
String <unk> = bundle . <unk> ( arg ) +-+ bundle . getVersion ( arg ) . toString ( arg ) +-+ ( contextFile != null ? contextFile : <unk> . getProperty ( arg ) ) ;
for ( String <unk> : context . <unk> ( arg ) ) {
String p = request . getParameter ( arg ) ;
String path = __userURL . toURI ( arg ) . getPath ( arg ) . replace ( arg ) + <unk> ;
String path = _processor . getRequest ( arg ) . getRequestURI ( arg ) ;
String path = _config . getBaseHome ( arg ) . toShortForm ( arg ) ;
String path = _channel . getRequest ( arg ) . getRequestURI ( arg ) ;
String path = _channel . getRequest ( arg ) . getRequestURI ( arg ) ;
String path ;
String path = _config . getHomeBase ( arg ) . toShortForm ( arg ) ;
String path = _config . getHomeBase ( arg ) . toShortForm ( arg ) ;
String path = synInfo . getHeaders ( arg ) . get ( arg ) . getValue ( arg ) ;
String path = uri . <unk> ( arg ) ;
String pathInContext = ( <unk> ?  : StringUtil . nonNull ( arg ) ) + StringUtil . nonNull ( arg ) ;
String pathInContext = _pathInfoOnly ? pathInfo : URIUtil . addPaths ( arg ) ;
String pathInContext = URIUtil . addPaths ( arg ) ;
String pathInfo = target ;
String peerHost = channel . socket ( arg ) . getInetAddress ( arg ) . getHostName ( arg ) ;
String peerHost = channel . socket ( arg ) . getInetAddress ( arg ) . getHostName ( arg ) ;
String peerHost = channel . socket ( arg ) . getInetAddress ( arg ) . getHostName ( arg ) ;
String peerHost = channel . socket ( arg ) . getInetAddress ( arg ) . getHostName ( arg ) ;
String property = <unk> ( arg ) ;
String property = getProperty ( arg ) ;
String <unk> = params . get ( arg ) ;
String query = uri . <unk> ( arg ) ;
String <unk> = response . toString ( arg ) . substring ( arg ) ;
String reason = <unk> ( arg ) ;
String received = listener . getContent ( arg ) ;
String received = listener . getContentAsString ( arg ) ;
String <unk> = <unk> . getValue ( arg ) ;
connection . <unk> ( arg ) ;
String <unk> = ( String ) bundle . getHeaders ( arg ) . get ( arg ) ;
String resp = response . getContentAsString ( arg ) ;
HttpResponse response = <unk> ( arg ) ;
String response = BufferUtil . toString ( arg ) ;
String <unk> = _connectors [ <unk> ] . getResponses ( arg ) ;
String rpath = FS . separators ( arg ) ;
String rpath = FS . separators ( arg ) ;
String scheme = connectPromise . getRequest ( arg ) . getRequestURI ( arg ) . getScheme ( arg ) ;
String scheme = connector . getConnectionFactory ( arg ) != null ? <unk> : http ;
String scheme = request . getScheme ( arg ) . toLowerCase ( arg ) ;
String <unk> = entry . getKey ( arg ) ;
String sessionCookie = response . getHeaders ( arg ) . getStringField ( arg ) ;
String sessionCookie = response . getHeaders ( arg ) . getStringField ( arg ) ;
String <unk> = ( _cookieConfig . getPath ( arg ) == null ) ? contextPath : _cookieConfig . getPath ( arg ) ;
String setCookie = response2 . getHeaders ( arg ) . getStringField ( arg ) ;
String setCookie = response2 . getHeaders ( arg ) . getStringField ( arg ) ;
String status = headers . remove ( arg ) . getValue ( arg ) ;
new String ( arg ) ;
String <unk> = scope . getClass ( arg ) . getName ( arg ) + @ + scope . hashCode ( arg ) ;
String tag = <unk> . get ( arg ) ;
String target = <unk> . getRequestURI ( arg ) ;
String tmp = DEFAULT_JETTYHOME + ( DEFAULT_JETTYHOME . endsWith ( arg ) ?  : / ) + etcFile ;
String tmp = DEFAULT_JETTYHOME + ( DEFAULT_JETTYHOME . endsWith ( arg ) ?  : / ) + etcFile ;
String tmp = _containerIncludeJarPattern ;
String <unk> = t + t <unk> tests [ t ] ;
String u = ( ( _elements . elementAt ( arg ) ) ) . toURL ( arg ) . toString ( arg ) ;
String u = _elements . elementAt ( arg ) . toURI ( arg ) . toURL ( arg ) . toString ( arg ) ;
String uri = __tests [ i ] +/+ name +/+ i ;
String uri = __tests [ i ] +/+ name +/+ i ;
String uri = _exchange . getRequestURI ( arg ) ;
String uri = request . getRequestURI ( arg ) ;
String uri = URIUtil . <unk> ( arg ) ;
String uri = request . getRequestURI ( arg ) ;
String uriHeader = pushInfo . getHeaders ( arg ) . get ( arg ) . getValue ( arg ) ;
String uriHeader = pushInfo . getHeaders ( arg ) . get ( arg ) . getValue ( arg ) ;
String url = requestHeaders . get ( arg ) . getValue ( arg ) ;
System . getProperty ( arg ) ;
String v = e . nextElement ( arg ) ;
String val = field . getValue ( arg ) ;
String val = properties . expand ( arg ) ;
String value = e . nextElement ( arg ) ;
System . getProperty ( arg ) ;
System . getProperty ( arg ) ;
System . getProperty ( arg ) ;
String value = fixPath ( arg ) ;
String value = fixPath ( arg ) ;
String value = fixPath ( arg ) ;
String value = header . getValue ( arg ) ;
String value = header . getValue ( arg ) ;
List < String > values = parameterMap . get ( arg ) ;
StringBuilder b = null ;
StringBuilder buffer = new StringBuilder ( arg ) ;
StringBuilder msg = new StringBuilder ( arg ) ;
final StringBuffer url = new StringBuffer ( arg ) ;
StringBuilder body ;
StringBuilder buf = _processor . getRequest ( arg ) . getRootURL ( arg ) ;
StringBuilder buf = _channel . getRequest ( arg ) . getRootURL ( arg ) ;
StringBuilder buf = _channel . getRequest ( arg ) . getRootURL ( arg ) ;
StringMap < String > map = new StringMap < String > ( arg ) ;
QuotedStringTokenizer <unk> = new QuotedStringTokenizer ( arg ) ;
<unk> <unk> = new <unk> ( arg ) ;
PushInfo pushInfo = new PushInfo ( arg ) ;
ServerHTTPSPDYAsyncConnection <unk> = new ServerHTTPSPDYAsyncConnection ( arg ) ;
buf . put ( arg ) ;
if ( DEBUG ) System . err . printf ( arg ) ;
if ( DEBUG ) System . err . printf ( arg ) ;
StartLog . warn ( arg ) ;
System . out . println ( arg ) ;
System . out . printf ( arg ) ;
System . err . printf ( arg ) ;
System . err . printf ( arg ) ;
System . err . printf ( arg ) ;
System . err . printf ( arg ) ;
System . err . printf ( arg ) ;
System . err . printf ( arg ) ;
System . err . printf ( arg ) ;
System . err . printf ( arg ) ;
if ( DEBUG ) System . err . println ( arg ) ;
T frame = <unk> ( arg ) ;
BaseFrame frame = new BaseFrame ( arg ) ;
E result = poll ( arg ) ;
E result = poll ( arg ) ;
SimpleHttpParser . TestHttpResponse response = executeRequest ( arg ) ;
SimpleHttpParser . TestHttpResponse response = executeRequest ( arg ) ;
SimpleHttpParser . TestHttpResponse response = executeRequest ( arg ) ;
SimpleHttpParser . TestHttpResponse response = executeRequest ( arg ) ;
SimpleHttpParser . TestHttpResponse response = executeRequest ( arg ) ;
SimpleHttpParser . TestHttpResponse response = executeRequest ( arg ) ;
SimpleHttpParser . TestHttpResponse response = executeRequest ( arg ) ;
SimpleHttpParser . TestHttpResponse response = executeRequest ( arg ) ;
SimpleHttpParser . TestHttpResponse response = executeRequest ( arg ) ;
SimpleHttpParser . TestHttpResponse response = executeRequest ( arg ) ;
SimpleHttpParser . TestHttpResponse response = executeRequest ( arg ) ;
SimpleHttpParser . TestHttpResponse response = executeRequest ( arg ) ;
SimpleHttpParser . TestHttpResponse response = executeRequest ( arg ) ;
SimpleHttpParser . TestHttpResponse response = executeRequest ( arg ) ;
SimpleHttpParser . TestHttpResponse response = executeRequest ( arg ) ;
SimpleHttpParser . TestHttpResponse response = executeRequest ( arg ) ;
SimpleHttpParser . TestHttpResponse response = executeRequest ( arg ) ;
SimpleHttpParser . TestHttpResponse response = executeRequest ( arg ) ;
SimpleHttpParser . TestHttpResponse response = executeRequest ( arg ) ;
SimpleHttpParser . TestHttpResponse response = executeRequest ( arg ) ;
SimpleHttpParser . TestHttpResponse response = executeRequest ( arg ) ;
SimpleHttpParser . TestHttpResponse response = executeRequest ( arg ) ;
SimpleHttpParser . TestHttpResponse response = executeRequest ( arg ) ;
SimpleHttpParser . TestHttpResponse response = executeRequest ( arg ) ;
SimpleHttpParser . TestHttpResponse response = executeRequest ( arg ) ;
SimpleHttpParser . TestHttpResponse response = executeRequest ( arg ) ;
SimpleHttpParser . TestHttpResponse response = executeRequest ( arg ) ;
SimpleHttpParser . TestHttpResponse response = executeRequest ( arg ) ;
SimpleHttpParser . TestHttpResponse response = executeRequest ( arg ) ;
SimpleHttpParser . TestHttpResponse response = executeRequest ( arg ) ;
SimpleHttpParser . TestHttpResponse response = executeRequest ( arg ) ;
SimpleHttpParser . TestHttpResponse response = executeRequest ( arg ) ;
SimpleHttpParser . TestHttpResponse response = executeRequest ( arg ) ;
SimpleHttpParser . TestHttpResponse response = executeRequest ( arg ) ;
SimpleHttpParser . TestHttpResponse response = executeRequest ( arg ) ;
SimpleHttpParser . TestHttpResponse response = executeRequest ( arg ) ;
SimpleHttpParser . TestHttpResponse response = executeRequest ( arg ) ;
SimpleHttpParser . TestHttpResponse response = executeRequest ( arg ) ;
SimpleHttpParser . TestHttpResponse response = executeRequest ( arg ) ;
SimpleHttpParser . TestHttpResponse response = executeRequest ( arg ) ;
SimpleHttpParser . TestHttpResponse response = executeRequest ( arg ) ;
SimpleHttpParser . TestHttpResponse response = executeRequest ( arg ) ;
SimpleHttpParser . TestHttpResponse response = executeRequest ( arg ) ;
SimpleHttpParser . TestHttpResponse response = executeRequest ( arg ) ;
TextFrame frame = new TextFrame ( arg ) . setPayload ( arg ) ;
TextFrame frame = new TextFrame ( arg ) . setPayload ( arg ) ;
TextFrame frame = new TextFrame ( arg ) . setPayload ( arg ) ;
ByteBuffer <unk> [ ] = new ByteBuffer [ messages . length ] ;
WebSocketFrame textFrame = FrameBuilder . text ( arg ) . asFrame ( arg ) ;
WebSocketFrame txt = FrameBuilder . text ( arg ) . payload ( arg ) . asFrame ( arg ) ;
TextFrame txt = ( TextFrame ) FrameBuilder . text ( arg ) . payload ( arg ) . asFrame ( arg ) ;
Generator gen = new Generator ( arg ) ;
Generator generator = new Generator ( arg ) ;
Generator generator = new Generator ( arg ) ;
Thread . sleep ( idleTimeout
Thread [ ] acceptors ;
Thread [ ] test = new Thread [ 500 ] ;
ThreadBuffers buffers = _buffers . get ( arg ) ;
ThreadBuffers buffers = _buffers . get ( arg ) ;
ThreadBuffers buffers = _buffers . get ( arg ) ;
ThreadBuffers buffers = _buffers . get ( arg ) ;
<unk> <unk> = <unk> ( arg ) ;
Executor threadPool = findExecutor ( arg ) ;
Throwable cause = th . getCause ( arg ) ;
Throwable cause = x . getCause ( arg ) ;
Throwable exception ;
Throwable th = nested . get ( arg ) ;
Throwable th = nested . get ( arg ) ;
th = e ;
if ( <unk> . get ( arg ) ) TimeUnit . MILLISECONDS . sleep ( arg ) ;
TimeUnit . MILLISECONDS . sleep ( arg ) ;
<unk> composite = createWebappClassLoader ( arg ) ;
JettyTrackingSocket cliSock = new JettyTrackingSocket ( arg ) ;
JettyTrackingSocket cliSock = new JettyTrackingSocket ( arg ) ;
JettyTrackingSocket cliSock = new JettyTrackingSocket ( arg ) ;
JettyTrackingSocket cliSock = new JettyTrackingSocket ( arg ) ;
JettyTrackingSocket tsocket = new JettyTrackingSocket ( arg ) ;
JettyTrackingSocket tsocket = new JettyTrackingSocket ( arg ) ;
JettyTrackingSocket tsocket = new JettyTrackingSocket ( arg ) ;
JettyTrackingSocket wsocket = new JettyTrackingSocket ( arg ) ;
JettyTrackingSocket wsocket = new JettyTrackingSocket ( arg ) ;
JettyTrackingSocket wsocket = new JettyTrackingSocket ( arg ) ;
JettyTrackingSocket wsocket = new JettyTrackingSocket ( arg ) ;
JettyTrackingSocket wsocket = new JettyTrackingSocket ( arg ) ;
JettyTrackingSocket wsocket = new JettyTrackingSocket ( arg ) ;
JettyTrackingSocket wsocket = new JettyTrackingSocket ( arg ) ;
JettyTrackingSocket wsocket = new JettyTrackingSocket ( arg ) ;
JettyTrackingSocket wsocket = new JettyTrackingSocket ( arg ) ;
JettyTrackingSocket wsocket = new JettyTrackingSocket ( arg ) ;
JettyTrackingSocket wsocket = new JettyTrackingSocket ( arg ) ;
JettyTrackingSocket wsocket = new JettyTrackingSocket ( arg ) ;
JettyTrackingSocket wsocket = new JettyTrackingSocket ( arg ) ;
JettyTrackingSocket wsocket = new JettyTrackingSocket ( arg ) ;
JettyTrackingSocket wsocket = new JettyTrackingSocket ( arg ) ;
JettyTrackingSocket wsocket = new JettyTrackingSocket ( arg ) ;
JettyTrackingSocket wsocket = new JettyTrackingSocket ( arg ) ;
JettyTrackingSocket wsocket = new JettyTrackingSocket ( arg ) ;
int t = 0 ;
int t = 0 ;
int t = 0 ;
URI uri = connectPromise . getRequest ( arg ) . getRequestURI ( arg ) ;
buf . append ( arg ) ;
URL url = BundleFileLocatorHelperFactory . getFactory ( arg ) . getHelper ( arg ) . getLocalURL ( arg ) ;
URL url = BundleFileLocatorHelperFactory . getFactory ( arg ) . getHelper ( arg ) . getLocalURL ( arg ) ;
URL url = MavenTestingUtils . getTargetURL ( arg ) ;
URL url = MavenTestingUtils . getTargetURL ( arg ) ;
URL url = new URI ( arg ) . toURL ( arg ) ;
new URLClassLoader ( arg ) ;
URLClassLoader libExtClassLoader = LibExtClassLoaderHelper . <unk> ( arg ) ;
ClientUpgradeRequest request = new ClientUpgradeRequest ( arg ) ;
future . get ( arg ) ;
ClientUpgradeResponse resp = parser . parse ( arg ) ;
UserIdentity . <unk> <unk> = null ;
UserIdentity user = login ( arg ) ;
UserIdentity user = login ( arg ) ;
UserIdentity user = login ( arg ) ;
UserIdentity user = login ( arg ) ;
WebAppClassLoader loader = new <unk> ( arg ) ;
WebAppContext <unk> = new WebAppContext ( arg ) ;
decorator . <unk> ( arg ) ;
BundleWatcher <unk> = new BundleWatcher ( arg ) ;
LOG . ignore ( arg ) ;
WebSocketAsyncConnection connection = new <unk> ( arg ) ;
OldWebSocketClient client = new OldWebSocketClient ( arg ) ;
OldWebSocketClient client = new OldWebSocketClient ( arg ) ;
OldWebSocketClient client = new OldWebSocketClient ( arg ) ;
OldWebSocketClient client = new OldWebSocketClient ( arg ) ;
OldWebSocketClient client = new OldWebSocketClient ( arg ) ;
OldWebSocketClient client = new OldWebSocketClient ( arg ) ;
OldWebSocketClient client = new OldWebSocketClient ( arg ) ;
OldWebSocketClient client = new OldWebSocketClient ( arg ) ;
OldWebSocketClient client = new OldWebSocketClient ( arg ) ;
OldWebSocketClient client = new OldWebSocketClient ( arg ) ;
OldWebSocketClient client = new OldWebSocketClient ( arg ) ;
OldWebSocketClient client = new OldWebSocketClient ( arg ) ;
OldWebSocketClient client = new OldWebSocketClient ( arg ) ;
ClientEndpoint <unk> = <unk> . getAnnotation ( arg ) ;
WebSocketClient fact = new WebSocketClient ( arg ) ;
WebSocketClient <unk> = new WebSocketClient ( arg ) ;
WebSocketClient client = new WebSocketClient ( arg ) ;
<unk> = ( WebSocketConnectionD00 ) <unk> . poll ( arg ) ;
Session conn = wsocket . getSession ( arg ) ;
<unk> = new WebSocketConnectionD00 ( arg ) ;
<unk> = new WebSocketConnectionD11 ( arg ) ;
<unk> = new WebSocketConnectionD12 ( arg ) ;
<unk> = new WebSocketConnectionD13 ( arg ) ;
<unk> = new WebSocketConnectionRFC6455 ( arg ) ;
EventDriver websocket = client . <unk> ( arg ) ;
EventDriver websocket = <unk> . wrap ( arg ) ;
Throwable known = capture . getErrors ( arg ) . get ( arg ) ;
Throwable known = capture . getErrors ( arg ) . get ( arg ) ;
Throwable known = capture . getErrors ( arg ) . get ( arg ) ;
Throwable known = capture . getErrors ( arg ) . get ( arg ) ;
WebSocketFrame actual = capture . getFrames ( arg ) . poll ( arg ) ;
WebSocketFrame actual = capture . getFrames ( arg ) . poll ( arg ) ;
Frame bin = capture . getFrames ( arg ) . get ( arg ) ;
BinaryFrame binFrame = new BinaryFrame ( arg ) ;
WebSocketFrame binaryFrame = WebSocketFrame . binary ( arg ) ;
WebSocketFrame binaryFrame = WebSocketFrame . binary ( arg ) ;
WebSocketFrame binaryFrame = WebSocketFrame . binary ( arg ) ;
WebSocketFrame binaryFrame = WebSocketFrame . binary ( arg ) ;
WebSocketFrame binaryFrame = WebSocketFrame . binary ( arg ) ;
WebSocketFrame binaryFrame = WebSocketFrame . binary ( arg ) ;
WebSocketFrame binaryFrame = WebSocketFrame . binary ( arg ) ;
WebSocketFrame binaryFrame = new BinaryFrame ( arg ) . setPayload ( arg ) ;
WebSocketFrame binaryFrame = new BinaryFrame ( arg ) . setPayload ( arg ) ;
WebSocketFrame binaryFrame = new BinaryFrame ( arg ) . setPayload ( arg ) ;
WebSocketFrame binaryFrame = new BinaryFrame ( arg ) . setPayload ( arg ) ;
WebSocketFrame binaryFrame = new BinaryFrame ( arg ) . setPayload ( arg ) ;
WebSocketFrame binaryFrame = new BinaryFrame ( arg ) . setPayload ( arg ) ;
WebSocketFrame binaryFrame = new BinaryFrame ( arg ) ;
WebSocketFrame binaryFrame = new BinaryFrame ( arg ) . setPayload ( arg ) ;
Frame binmsg = capture . getFrames ( arg ) . get ( arg ) ;
Frame cf = capture . getFrames ( arg ) . get ( arg ) ;
WebSocketFrame close = new <unk> ( arg ) ;
WebSocketFrame closeFrame = new WebSocketFrame ( arg ) ;
WebSocketFrame copy = WebSocketFrame . copy ( arg ) ;
WebSocketFrame copy = WebSocketFrame . copy ( arg ) ;
WebSocketFrame copy = WebSocketFrame . copy ( arg ) ;
WebSocketFrame copy = WebSocketFrame . copy ( arg ) ;
WebSocketFrame copy = WebSocketFrame . copy ( arg ) ;
WebSocketFrame copy = WebSocketFrame . copy ( arg ) ;
WebSocketFrame frame = WebSocketFrame . binary ( arg ) . setPayload ( arg ) ;
WebSocketFrame frame = WebSocketFrame . binary ( arg ) . setPayload ( arg ) ;
WebSocketFrame frame = new WebSocketFrame ( arg ) . setPayload ( arg ) ;
WebSocketFrame frame = WebSocketFrame . text ( arg ) ;
WebSocketFrame frame = WebSocketFrame . text ( arg ) ;
DataFrame frame = null ;
WebSocketFrame frame = new BinaryFrame ( arg ) ;
WebSocketFrame frame = new BinaryFrame ( arg ) ;
WebSocketFrame frame = new BinaryFrame ( arg ) ;
WebSocketFrame frame = new PingFrame ( arg ) ;
WebSocketFrame frame = new PongFrame ( arg ) ;
DataFrame frame = null ;
WebSocketFrame frame = new TextFrame ( arg ) . setPayload ( arg ) ;
WebSocketFrame frame = new TextFrame ( arg ) . setPayload ( arg ) ;
WebSocketFrame frame = new TextFrame ( arg ) . setPayload ( arg ) ;
WebSocketFrame frame = new TextFrame ( arg ) . setPayload ( arg ) ;
WebSocketFrame frame = new TextFrame ( arg ) . setPayload ( arg ) ;
WebSocketFrame frame = new TextFrame ( arg ) . setPayload ( arg ) ;
WebSocketFrame frame = capture . getFrames ( arg ) . poll ( arg ) ;
WebSocketFrame frame = capture . getFrames ( arg ) . poll ( arg ) ;
WebSocketFrame frame = capture . getFrames ( arg ) . poll ( arg ) ;
WebSocketFrame frame = capture . getFrames ( arg ) . poll ( arg ) ;
WebSocketFrame frame = capture . getFrames ( arg ) . poll ( arg ) ;
WebSocketFrame frame = capture . getFrames ( arg ) . poll ( arg ) ;
WebSocketFrame frame = capture . getFrames ( arg ) . poll ( arg ) ;
WebSocketFrame frame = capture . getFrames ( arg ) . poll ( arg ) ;
WebSocketFrame frame = capture . getFrames ( arg ) . poll ( arg ) ;
WebSocketFrame frame = capture . getFrames ( arg ) . poll ( arg ) ;
WebSocketFrame frame = capture . getFrames ( arg ) . poll ( arg ) ;
WebSocketFrame frame = capture . getFrames ( arg ) . poll ( arg ) ;
WebSocketFrame frame = capture . getFrames ( arg ) . poll ( arg ) ;
WebSocketFrame frame = capture . getFrames ( arg ) . poll ( arg ) ;
Frame frame = frames . get ( arg ) ;
Frame frame = frames . get ( arg ) ;
Frame frame = frames . get ( arg ) ;
Frame frame = frames . get ( arg ) ;
Frame frame = frames . get ( arg ) ;
WebSocketFrame frame = capture . getFrames ( arg ) . get ( arg ) ;
WebSocketFrame frame = new BinaryFrame ( arg ) . setPayload ( arg ) ;
WebSocketFrame frame = new BinaryFrame ( arg ) . setPayload ( arg ) ;
WebSocketFrame frame = new TextFrame ( arg ) . setPayload ( arg ) ;
WebSocketFrame frame = new <unk> ( arg ) . setFin ( arg ) ;
TextFrame frame = new TextFrame ( arg ) ;
TextFrame frame = new TextFrame ( arg ) ;
TextFrame frame = new TextFrame ( arg ) ;
WebSocketFrame <unk> = new BinaryFrame ( arg ) ;
Frame pActual = capture . getFrames ( arg ) . get ( arg ) ;
Frame pActual = capture . getFrames ( arg ) . get ( arg ) ;
Frame pActual = capture . getFrames ( arg ) . get ( arg ) ;
Frame pActual = capture . getFrames ( arg ) . get ( arg ) ;
Frame pActual = capture . getFrames ( arg ) . get ( arg ) ;
Frame pActual = capture . getFrames ( arg ) . get ( arg ) ;
Frame pActual = capture . getFrames ( arg ) . get ( arg ) ;
Frame pActual = capture . getFrames ( arg ) . get ( arg ) ;
Frame pActual = capture . getFrames ( arg ) . get ( arg ) ;
Frame pActual = capture . getFrames ( arg ) . get ( arg ) ;
Frame pActual = capture . getFrames ( arg ) . get ( arg ) ;
Frame pActual = capture . getFrames ( arg ) . get ( arg ) ;
Frame pActual = capture . getFrames ( arg ) . get ( arg ) ;
Frame pActual = capture . getFrames ( arg ) . get ( arg ) ;
Frame pActual = capture . getFrames ( arg ) . get ( arg ) ;
Frame pActual = capture . getFrames ( arg ) . get ( arg ) ;
Frame pActual = capture . getFrames ( arg ) . get ( arg ) ;
Frame pActual = capture . getFrames ( arg ) . get ( arg ) ;
Frame pActual = capture . getFrames ( arg ) . get ( arg ) ;
Frame pActual = capture . getFrames ( arg ) . get ( arg ) ;
Frame pActual = capture . getFrames ( arg ) . get ( arg ) ;
Frame pActual = capture . getFrames ( arg ) . get ( arg ) ;
PingFrame ping = new PingFrame ( arg ) ;
WebSocketFrame pingFrame = FrameBuilder . ping ( arg ) . asFrame ( arg ) ;
PingFrame pingFrame = new PingFrame ( arg ) ;
PingFrame pingFrame = new PingFrame ( arg ) ;
WebSocketFrame pingFrame = new PingFrame ( arg ) ;
WebSocketFrame send = new TextFrame ( arg ) . setPayload ( arg ) . <unk> ( arg ) ;
WebSocketFrame text = new TextFrame ( arg ) . setPayload ( arg ) ;
WebSocketFrame text = new TextFrame ( arg ) . setPayload ( arg ) ;
WebSocketFrame <unk> = new TextFrame ( arg ) . setPayload ( arg ) . setFin ( arg ) ;
WebSocketFrame <unk> = new ContinuationFrame ( arg ) . setPayload ( arg ) ;
WebSocketFrame textFrame = WebSocketFrame . text ( arg ) ;
WebSocketFrame textFrame = WebSocketFrame . text ( arg ) ;
WebSocketFrame textFrame = WebSocketFrame . text ( arg ) ;
WebSocketFrame textFrame = WebSocketFrame . text ( arg ) ;
WebSocketFrame textFrame = WebSocketFrame . text ( arg ) ;
WebSocketFrame textFrame = WebSocketFrame . text ( arg ) ;
WebSocketFrame textFrame = WebSocketFrame . text ( arg ) ;
WebSocketFrame textFrame = new TextFrame ( arg ) . setPayload ( arg ) ;
WebSocketFrame textFrame = new TextFrame ( arg ) . setPayload ( arg ) ;
WebSocketFrame textFrame = new TextFrame ( arg ) . setPayload ( arg ) ;
WebSocketFrame textFrame = new TextFrame ( arg ) . setPayload ( arg ) ;
WebSocketFrame textFrame = new TextFrame ( arg ) . setPayload ( arg ) ;
WebSocketFrame textFrame = new TextFrame ( arg ) . setPayload ( arg ) ;
WebSocketFrame tf = capture . getFrames ( arg ) . poll ( arg ) ;
WebSocketFrame tf = capture . getFrames ( arg ) . poll ( arg ) ;
WebSocketFrame tf = capture . getFrames ( arg ) . poll ( arg ) ;
WebSocketFrame tf = capture . getFrames ( arg ) . poll ( arg ) ;
WebSocketFrame tf = capture . getFrames ( arg ) . poll ( arg ) ;
WebSocketFrame tf = capture . getFrames ( arg ) . poll ( arg ) ;
WebSocketFrame tf = capture . getFrames ( arg ) . poll ( arg ) ;
WebSocketFrame tf = capture . getFrames ( arg ) . poll ( arg ) ;
WebSocketFrame tf = capture . getFrames ( arg ) . poll ( arg ) ;
WebSocketFrame tf = capture . getFrames ( arg ) . poll ( arg ) ;
WebSocketFrame tf = capture . getFrames ( arg ) . poll ( arg ) ;
WebSocketFrame frame = WebSocketFrame . text ( arg ) ;
TextFrame txt = ( TextFrame ) capture . getFrames ( arg ) . get ( arg ) ;
TextFrame txt = ( TextFrame ) capture . getFrames ( arg ) . get ( arg ) ;
MaskGen maskGen = new RandomMaskGen ( arg ) ;
MaskGen maskGen = new RandomMaskGen ( arg ) ;
<unk> = new WebSocketGeneratorD10 ( arg ) ;
<unk> = new <unk> ( arg ) ;
<unk> parser = new WebSocketParserD10 ( arg ) ;
<unk> = new WebSocketParserRFC6455 ( arg ) ;
WebSocketPolicy policy = WebSocketPolicy . newClientPolicy ( arg ) ;
WebSocketPolicy policy = WebSocketPolicy . newClientPolicy ( arg ) ;
WebSocketPolicy policy = WebSocketPolicy . newClientPolicy ( arg ) ;
WebSocketPolicy policy = WebSocketPolicy . newClientPolicy ( arg ) ;
WebSocketPolicy policy = WebSocketPolicy . newClientPolicy ( arg ) ;
WebSocketPolicy policy = WebSocketPolicy . newClientPolicy ( arg ) ;
WebSocketPolicy policy = websocket . getPolicy ( arg ) ;
WebSocketPolicy policy = factory . getPolicy ( arg ) ;
WebSocketServerConnection connection = new WebSocketServerConnection ( arg ) ;
connection = new WebSocketServerConnection ( arg ) ;
connection = new WebSocketServerConnection ( arg ) ;
connection = new WebSocketServerConnection ( arg ) ;
WebSocketSession session = <unk> . createSession ( arg ) ;
WebSocketSession session = createSession ( arg ) ;
OSGiWebappClassLoader composite = createWebappClassLoader ( arg ) ;
OSGiWebappClassLoader composite = createWebappClassLoader ( arg ) ;
OSGiWebappClassLoader <unk> = new OSGiWebappClassLoader ( arg ) ;
FrameCompressionExtension ext = new FrameCompressionExtension ( arg ) ;
FrameCompressionExtension ext = new FrameCompressionExtension ( arg ) ;
PrintWriter out = response . getWriter ( arg ) ;
PrintWriter out = response . getWriter ( arg ) ;
try ( Writer <unk> = new <unk> ( arg ) ) {
XmlParser . Node <unk> = itor . next ( arg ) ;
try ( ZipFile <unk> = new ZipFile ( arg ) ) {
__clientFactory . start ( arg ) ;
__clientFactory . stop ( arg ) ;
setCurrentHttpChannel ( arg ) ;
setCurrentHttpChannel ( arg ) ;
DEFAULT . <unk> ( arg ) ;
DEFAULT . append ( arg ) ;
DEFAULT . <unk> ( arg ) ;
DEFAULT . <unk> ( arg ) ;
__endp = ( AsyncEndPoint ) baseRequest . getHttpChannel ( arg ) . getEndPoint ( arg ) ;
__endp = baseRequest . getHttpChannel ( arg ) . getEndPoint ( arg ) ;
__endp = ( AsyncEndPoint ) baseRequest . getConnection ( arg ) . getEndPoint ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . ignore ( arg ) ;
LOG . ignore ( arg ) ;
LOG . ignore ( arg ) ;
LOG . ignore ( arg ) ;
LOG . ignore ( arg ) ;
LOG . ignore ( arg ) ;
LOG . ignore ( arg ) ;
LOG . ignore ( arg ) ;
LOG . ignore ( arg ) ;
LOG . ignore ( arg ) ;
LOG . ignore ( arg ) ;
LOG . ignore ( arg ) ;
LOG . ignore ( arg ) ;
LOG . ignore ( arg ) ;
LOG . ignore ( arg ) ;
LOG . ignore ( arg ) ;
LOG . ignore ( arg ) ;
LOG . ignore ( arg ) ;
LOG . ignore ( arg ) ;
LOG . info ( arg ) ;
LOG . info ( arg ) ;
LOG . info ( arg ) ;
LOG . warn ( arg ) ;
LOG . warn ( arg ) ;
LOG . warn ( arg ) ;
LOG . warn ( arg ) ;
LOG . warn ( arg ) ;
LOG . warn ( arg ) ;
LOG . warn ( arg ) ;
LOG . warn ( arg ) ;
LOG . warn ( arg ) ;
LOG . warn ( arg ) ;
LOG . warn ( arg ) ;
LOG . warn ( arg ) ;
LOG . warn ( arg ) ;
LOG . warn ( arg ) ;
LOG . warn ( arg ) ;
LOG . warn ( arg ) ;
LOG . warn ( arg ) ;
LOG . warn ( arg ) ;
LOG . warn ( arg ) ;
LOG . warn ( arg ) ;
LOG . warn ( arg ) ;
LOG . warn ( arg ) ;
LOG . warn ( arg ) ;
LOG . warn ( arg ) ;
LOG . warn ( arg ) ;
LOG . warn ( arg ) ;
LOG . warn ( arg ) ;
LOG . warn ( arg ) ;
LOG . warn ( arg ) ;
LOG . warn ( arg ) ;
LOG . warn ( arg ) ;
LOG . warn ( arg ) ;
LOG . warn ( arg ) ;
LOG . warn ( arg ) ;
LOG . warn ( arg ) ;
LOG . warn ( arg ) ;
LOG . warn ( arg ) ;
__logger . warn ( arg ) ;
LOG . warn ( arg ) ;
_properties . clear ( arg ) ;
_properties . put ( arg ) ;
<unk> ( arg ) ;
<unk> ( arg ) ;
<unk> ( arg ) ;
throw new OperationNotSupportedException ( arg ) ;
throw new OperationNotSupportedException ( arg ) ;
__serverWebSocket . connection . write ( arg ) ;
__serverWebSocket . connection . write ( arg ) ;
__serverWebSocket . connection . close ( arg ) ;
__serverWebSocket . getConnection ( arg ) . setAllowFrameFragmentation ( arg ) ;
__serverWebSocket . getConnection ( arg ) . setAllowFrameFragmentation ( arg ) ;
__userURL = MavenTestingUtils . getTestResourcesDir ( arg ) . toURI ( arg ) . toURL ( arg ) ;
__userURL = MavenTestingUtils . getTestResourcesDir ( arg ) . toURI ( arg ) . toURL ( arg ) ;
<unk> = new <unk> ( arg ) ;
<unk> ( arg ) ;
<unk> . clear ( arg ) ;
_addr = InetAddress . getLocalHost ( arg ) ;
_addr = InetAddress . getLocalHost ( arg ) ;
_aggregate = _channel . getByteBufferPool ( arg ) . acquire ( arg ) ;
_sslContextFactory . setAllowRenegotiate ( arg ) ;
_sslContextFactory . setAllowRenegotiate ( arg ) ;
Log . debug ( arg ) ;
_context . getMetaData ( arg ) . <unk> ( arg ) ;
<unk> = ( <unk> ) connection ;
if ( _writing . compareAndSet ( arg ) ) _appEndPoint . completeWrite ( arg ) ;
_appReadFuture = new RunnableIOFuture ( arg ) ;
_appReadFuture = new DispatchingIOFuture ( arg ) ;
writeCompleted ( arg ) ;
writeFailed ( arg ) ;
_appWriteFuture . complete ( arg ) ;
_appWriteFuture = new RunnableIOFuture ( arg ) ;
_appWriteFuture = new DispatchingIOFuture ( arg ) ;
_appWriteFuture = new DispatchedIOFuture ( arg ) ;
_state . recycle ( arg ) ;
_async . startAsync ( arg ) ;
_async . startAsync ( arg ) ;
<unk> = <unk> ;
getAsyncEndPoint ( arg ) . setCheckForIdle ( arg ) ;
getAsyncEndPoint ( arg ) . setCheckForIdle ( arg ) ;
_asyncWrite = false ;
_asyncWrite = true ;
_asyncListeners = listeners ;
clearAttributes ( arg ) ;
_authentication = Authentication . NOT_CHECKED ;
setAuthentication ( arg ) ;
_availability = Availability . <unk> ;
_availability = Availability . UNAVAILABLE ;
_availability = Availability . UNAVAILABLE ;
_bad = reason == null ? (  + status ) : reason ;
_bad = reason == null ? (  + status ) : reason ;
_dbAdaptor . <unk> ( arg ) ;
_buffer . append ( arg ) ;
_buffer . append ( arg ) . append ( arg ) ;
_buffer = BufferUtil . toBuffer ( arg ) ;
ByteBuffer buffer = _requestBuffer ;
_buffers = new WebSocketBuffers ( arg ) ;
_buffers = new WebSocketBuffers ( arg ) ;
_websocket = new WebSocketFactory ( arg ) ;
_websocket = new WebSocketFactory ( arg ) ;
_websocket = null ;
_cache . clear ( arg ) ;
_cacheControl = <unk> ;
MimeTypes . Type mime_type = MimeTypes . CACHE . get ( arg ) ;
mime_type = null ;
<unk> ( arg ) . completed ( arg ) ;
failed ( arg ) ;
completed ( arg ) ;
_callback = ( Callback < Object > ) callback ;
( ( LifeCycleCallbackCollection ) _context . getAttribute ( arg ) ) . add ( arg ) ;
( ( LifeCycleCallbackCollection ) _context . getAttribute ( arg ) ) . add ( arg ) ;
callbacks . callPostConstructCallback ( arg ) ;
callbacks . callPreDestroyCallback ( arg ) ;
_changes . offer ( arg ) ;
if ( _channel . isOpen ( arg ) ) _channel . close ( arg ) ;
_channel . commitResponse ( arg ) ;
_channel . sendResponse ( arg ) ;
_out . close ( arg ) ;
_out . flush ( arg ) ;
_channel . failed ( arg ) ;
_channel . failed ( arg ) ;
_channel . getResponse ( arg ) . sendError ( arg ) ;
_out . reset ( arg ) ;
return _channel . getResponse ( arg ) . <unk> ( arg ) ;
_channel . getState ( arg ) . onWritePossible ( arg ) ;
_channel . getState ( arg ) . onWritePossible ( arg ) ;
_channel . getState ( arg ) . onWritePossible ( arg ) ;
_channel . getState ( arg ) . onWritePossible ( arg ) ;
_out . increaseContentBufferSize ( arg ) ;
_processor . onClose ( arg ) ;
_channel . handle ( arg ) ;
_processor . reset ( arg ) ;
_out . resetBuffer ( arg ) ;
_transport . sendError ( arg ) ;
write ( arg ) ;
write ( arg ) ;
write ( arg ) ;
write ( arg ) ;
write ( arg ) ;
write ( arg ) ;
write ( arg ) ;
write ( arg ) ;
write ( arg ) ;
write ( arg ) ;
_characterEncoding = StringUtil . <unk> ( arg ) ;
_chunk = _bufferPool . acquire ( arg ) ;
super . <unk> ( arg ) ;
_handlers . add ( arg ) ;
_classpath . addPath ( arg ) ;
_classpath . addPath ( arg ) ;
<unk> ( arg ) ;
_persistent = isRequest ( arg ) ;
if ( close ) _persistent = false ;
_persistent = true ;
_persistent = true ;
_persistent = false ;
_persistent = false ;
_persistent = false ;
_persistent = persistent ;
_state . set ( arg ) ;
if ( super . isOpen ( arg ) ) super . close ( arg ) ;
if ( super . isOpen ( arg ) ) super . close ( arg ) ;
<unk> = <unk> == null ? libExtClassLoader : new <unk> ( arg ) ;
_done = true ;
_contextsDir = resource ;
_configurations . clear ( arg ) ;
_configurations . get ( arg ) . destroy ( arg ) ;
_connectTimeout = <unk> ;
_httpClient . schedule ( arg ) ;
_contentLength = len ;
connection . close ( arg ) ;
_transport . completeResponse ( arg ) ;
if ( _connection != null ) _connection . disconnect ( arg ) ;
_transport . flushResponse ( arg ) ;
_connection . resetBuffer ( arg ) ;
_connection . getRequest ( arg ) . getAsyncContinuation ( arg ) . cancel ( arg ) ;
_channel . getRequest ( arg ) . removeAttribute ( arg ) ;
_channel . getRequest ( arg ) . setAttribute ( arg ) ;
_fields . put ( arg ) ;
_fields . addSetCookie ( arg ) ;
_fields . addSetCookie ( arg ) ;
_fields . put ( arg ) ;
_fields . put ( arg ) ;
_connection . onIdleExpired ( arg ) ;
_transport . increaseContentBufferSize ( arg ) ;
getAsyncConnection ( arg ) . onIdleExpired ( arg ) ;
getAsyncConnection ( arg ) . onInputShutdown ( arg ) ;
_transport . resetBuffer ( arg ) ;
( ( AsyncEndPoint ) endp ) . <unk> ( arg ) ;
_connection . write ( arg ) ;
_session . getRemote ( arg ) . sendStringByFuture ( arg ) ;
_session . getRemote ( arg ) . sendStringByFuture ( arg ) ;
_channel = connection ;
_connection = new BlockingHttpConnection ( arg ) ;
_connections . clear ( arg ) ;
_connector . getExecutor ( arg ) . execute ( arg ) ;
_bufferPool . release ( arg ) ;
_bufferPool . release ( arg ) ;
String response = _connector . getResponses ( arg ) ;
<unk> . reset ( arg ) ;
_idle . access ( arg ) ;
_idle . access ( arg ) ;
_idle . access ( arg ) ;
_connector . setRequestHeaderSize ( arg ) ;
_connector . setIdleTimeout ( arg ) ;
_connector . setIdleTimeout ( arg ) ;
_connector . setIdleTimeout ( arg ) ;
_connector . setIdleTimeout ( arg ) ;
_connector . setIdleTimeout ( arg ) ;
_connector . <unk> ( arg ) . start ( arg ) ;
connector . start ( arg ) ;
_connector = new SelectChannelConnector ( arg ) ;
_connector = new SelectChannelConnector ( arg ) ;
_connector = new ServerConnector ( arg ) ;
_connector = new LocalHttpConnector ( arg ) ;
_connector = new LocalHttpConnector ( arg ) ;
_connector = new LocalHttpConnector ( arg ) ;
_connector = new LocalHttpConnector ( arg ) ;
_connector = new LocalHttpConnector ( arg ) ;
_connector = new LocalHttpConnector ( arg ) ;
_connector = new LocalHttpConnector ( arg ) ;
_connector = new LocalHttpConnector ( arg ) ;
_connector = new LocalConnector ( arg ) ;
_connector = new LocalConnector ( arg ) ;
_connector = new LocalConnector ( arg ) ;
_connector = new LocalConnector ( arg ) ;
_connector = new LocalConnector ( arg ) ;
_connector = new LocalConnector ( arg ) ;
_connector = new LocalConnector ( arg ) ;
_connector = new LocalConnector ( arg ) ;
_connector = new LocalConnector ( arg ) ;
_connector = new LocalConnector ( arg ) ;
_connector = new ServerConnector ( arg ) ;
_connector = new ServerConnector ( arg ) ;
_connector = new ServerConnector ( arg ) ;
_connector = new ServerConnector ( arg ) ;
_connector = new ServerConnector ( arg ) ;
_connector = new ServerConnector ( arg ) ;
_connector = new ServerConnector ( arg ) ;
_connector = new SelectChannelConnector ( arg ) ;
_connector = new SelectChannelConnector ( arg ) ;
if ( _threadPool instanceof <unk> ) removeBean ( arg ) ;
_connectors = new LocalHttpConnector [ NUM_CONNECTIONS ] ;
_connectors = new LocalConnector [ NUM_CONNECTIONS ] ;
_connector . start ( arg ) ;
_newConstraintMappings . add ( arg ) ;
_newConstraintMappings . add ( arg ) ;
updateBeans ( arg ) ;
_content = ( ! isPersistent ( arg ) || _info . getHttpVersion ( arg ) . ordinal ( arg ) < HttpVersion . HTTP_1_1 . ordinal ( arg ) ) ? EndOfContent . EOF_CONTENT : EndOfContent . CHUNKED_CONTENT ;
_content = EndOfContent . CONTENT_LENGTH ;
_content = EndOfContent . CONTENT_LENGTH ;
_content = EndOfContent . EOF_CONTENT ;
_endOfContent = EndOfContent . UNKNOWN_CONTENT ;
_endOfContent = EndOfContent . UNKNOWN_CONTENT ;
_endOfContent = EndOfContent . UNKNOWN_CONTENT ;
_endOfContent = EndOfContent . CONTENT_LENGTH ;
_endOfContent = EndOfContent . CONTENT_LENGTH ;
_endOfContent = EndOfContent . UNKNOWN_CONTENT ;
_content = _content + BufferUtil . toString ( arg ) ;
content = <unk> ;
_endOfContent = null ;
_contentLength = ( ! _persistent || _version . ordinal ( arg ) < HttpVersion . HTTP_1_1 . ordinal ( arg ) ) ? HttpTokens . EOF_CONTENT : HttpTokens . CHUNKED_CONTENT ;
_contentLength = ( ! _persistent || _version < HttpVersion . <unk> ) ? HttpTokens . EOF_CONTENT : HttpTokens . CHUNKED_CONTENT ;
<unk> = BufferUtil . toInt ( arg ) ;
_content = Content . EOF_CONTENT ;
_content = Content . UNKNOWN_CONTENT ;
_content = Content . UNKNOWN_CONTENT ;
_content = Content . UNKNOWN_CONTENT ;
_contentLength = _contentPrepared + BufferUtil . length ( arg ) ;
_contentPrepared += BufferUtil . append ( arg ) ;
_contentType = _characterEncoding == null ? contentType : contentType + ;charset=+ QuotedStringTokenizer . quote ( arg ) ;
_contentType = _contentType + ;charset=+ QuotedStringTokenizer . quote ( arg ) ;
_contentType = _mimeType + ;charset=+ _characterEncoding ;
_contentType = _mimeType + ;charset=+ _characterEncoding ;
_contentType = contentType . substring ( arg ) + ;charset=+ QuotedStringTokenizer . quote ( arg ) ;
_contentType = contentType . substring ( arg ) + contentType . substring ( arg ) + ;charset=+ QuotedStringTokenizer . quote ( arg ) ;
_contentWritten += content . remaining ( arg ) ;
_contentPrepared = 0 ;
<unk> _buffer . remaining ( arg ) ;
_sslContextFactory . setSslContext ( arg ) ;
_sslContextFactory . setSslContext ( arg ) ;
_scontext . clearAttributes ( arg ) ;
_contextAttributes . clearAttributes ( arg ) ;
if ( _contextHandler != null ) _contextHandler . destroyFilter ( arg ) ;
if ( _contextHandler != null ) _contextHandler . destroyServlet ( arg ) ;
_contextHandler = ( ServletContextHandler ) ( _servletContext == null ? null : _servletContext . getContextHandler ( arg ) ) ;
_contexts = null ;
_context . complete ( arg ) ;
_channel . completeResponse ( arg ) ;
_channel . flushResponse ( arg ) ;
_channel . flushResponse ( arg ) ;
_channel . increaseContentBufferSize ( arg ) ;
_channel . resetBuffer ( arg ) ;
_channel . sendError ( arg ) ;
_cookies = ( Cookie [ ] ) cookies . toArray ( arg ) ;
<unk> . incrementAndGet ( arg ) ;
<unk> = ( int ) <unk> ;
<unk> = <unk> ( arg ) ;
<unk> = ( maxInterval <= 0 ? 0 : ( <unk> + maxInterval * 1000L ) ) ;
_dateField = new HttpGenerator . CachedHttpField ( arg ) ;
_dateField = new HttpGenerator . CachedHttpField ( arg ) ;
_level = LEVEL_DEBUG ;
_level = LEVEL_DEBUG ;
_decryptedEndPoint . getWriteFlusher ( arg ) . completeWrite ( arg ) ;
_decryptedEndPoint . getWriteFlusher ( arg ) . onFail ( arg ) ;
<unk> = true ;
<unk> = Collections . singletonList ( arg ) ;
<unk> = <unk> ;
<unk> = _factory . <unk> ( arg ) ;
_beans . clear ( arg ) ;
_beans . clear ( arg ) ;
getDeploymentManager ( arg ) . addApp ( arg ) ;
getDeploymentManager ( arg ) . addApp ( arg ) ;
getDeploymentManager ( arg ) . addApp ( arg ) ;
getDeploymentManager ( arg ) . addApp ( arg ) ;
getDeploymentManager ( arg ) . <unk> ( arg ) ;
_deploymentManager = deployers . iterator ( arg ) . next ( arg ) ;
_deploymentManager = deployers . iterator ( arg ) . next ( arg ) ;
_deploymentManager = deployers . get ( arg ) ;
_exchange . <unk> ( arg ) ;
connection = switched ;
_dirty = ( <unk> ( arg ) || _dirty ) ;
_dispatch = dispatch == null ? _dispatch : Boolean . getBoolean ( arg ) ;
_dispatch = dispatch == null ? _dispatch : Boolean . valueOf ( arg ) ;
_dispatch = dispatch != null && Boolean . getBoolean ( arg ) ;
_state = <unk> ;
_elements [ 0 ] = _elements [ _capacity - 1 ] ;
_elements [ _capacity ] = _elements [ 0 ] ;
_elements [ _indexes [ TAIL_OFFSET ] ] = null ;
_enableStats = true ;
_endp . close ( arg ) ;
_endp . close ( arg ) ;
boolean flushed = _endPoint . flush ( arg ) ;
boolean flushed = _endPoint . flush ( arg ) ;
( ( AsyncEndPoint ) _endp ) . blockReadable ( arg ) ;
_endPoint . close ( arg ) ;
_endPoint . close ( arg ) ;
fillInterested ( arg ) ;
_endPoint . flush ( arg ) ;
_endp . flush ( arg ) ;
_endp . flush ( arg ) ;
_endp . flush ( arg ) ;
_endp . flush ( arg ) ;
_endp . flush ( arg ) ;
_endp . flush ( arg ) ;
_endp . flush ( arg ) ;
_endp . flush ( arg ) ;
_endp . readable ( arg ) . block ( arg ) ;
endPoint . setIn ( arg ) ;
endPoint . <unk> ( arg ) ;
_endp . close ( arg ) ;
_endp . write ( arg ) . block ( arg ) ;
_endp . write ( arg ) . block ( arg ) ;
_endp = ( SelectableEndPoint ) endpoint ;
_endp = ( AsyncEndPoint ) endpoint ;
_endp = baseRequest . getHttpChannel ( arg ) . getEndPoint ( arg ) ;
_endp = baseRequest . getHttpChannel ( arg ) . getEndPoint ( arg ) ;
_endp = baseRequest . getHttpChannel ( arg ) . getConnection ( arg ) . getEndPoint ( arg ) ;
consumeCRLF ( arg ) ;
consumeCRLF ( arg ) ;
consumeCRLF ( arg ) ;
consumeCRLF ( arg ) ;
consumeCRLF ( arg ) ;
_event . _pathInContext = null ;
_event . _pathInContext = path ;
_event . _pathInContext = path ;
if ( event != null ) event . completed ( arg ) ;
exchange . <unk> ( arg ) . <unk> ( arg ) ;
_excludedUA = <unk> ;
<unk> = new HashSet < String > ( arg ) ;
_excludedUA = new HashSet < String > ( arg ) ;
phaser . <unk> ( arg ) ;
_expect100Continue = false ;
_expect100Continue = _generator instanceof HttpGenerator ;
_expect100Continue = _generator instanceof HttpGenerator ;
_expect102Processing = _generator instanceof HttpGenerator ;
_expect102Processing = _generator instanceof HttpGenerator ;
_fragmentFrames = <unk> ;
<unk> = ( param != null && Boolean . parseBoolean ( arg ) ) ||! ( jetty || _partial || _context . <unk> ( arg ) >= 3 ) ;
_field = _connectionFields == null ? null : _connectionFields . getBest ( arg ) ;
_field = new HttpField ( arg ) ;
_field1 = _value != null ? _value . toString ( arg ) : BufferUtil . toString ( arg ) ;
addSetCookie ( arg ) ;
_fillInterest . onClose ( arg ) ;
_fillInterest . onClose ( arg ) ;
_fillInterest . onFail ( arg ) ;
_fillWrite = true ;
_fillWrite = true ;
<unk> = true ;
setEntityName ( arg ) ;
<unk> = new MultiMap < <unk> > ( arg ) ;
<unk> = new ArrayList <> ( arg ) ;
<unk> = <unk> ;
<unk> = getInitParameter ( arg ) ;
super . _generator . addContent ( arg ) ;
_outbound . addFrame ( arg ) ;
_generator . addFrame ( arg ) ;
_generator . addFrame ( arg ) ;
_generator . addFrame ( arg ) ;
super . _generator . completeUncheckedAddContent ( arg ) ;
super . _generator . completeUncheckedAddContent ( arg ) ;
_outbound . flush ( arg ) ;
while ( arg ) _generator . flushBuffer ( arg ) ;
_generator = new <unk> ( arg ) ;
_generator = new WebSocketGeneratorD10 ( arg ) ;
_generator = new WebSocketGeneratorD10 ( arg ) ;
_generator = new WebSocketGeneratorD10 ( arg ) ;
_generator = new WebSocketGeneratorD10 ( arg ) ;
_generator = new WebSocketGeneratorD10 ( arg ) ;
_generator = new WebSocketGeneratorD10 ( arg ) ;
_headers = 0 ;
_handler . _byteBuffer = BufferUtil . allocate ( arg ) ;
_handler . _byteBuffer = BufferUtil . allocate ( arg ) ;
_handler . _byteBuffer = BufferUtil . allocate ( arg ) ;
_handler . _byteBuffer = BufferUtil . allocate ( arg ) ;
_handler . _byteBuffer = BufferUtil . allocate ( arg ) ;
_handler . _byteBuffer = BufferUtil . allocate ( arg ) ;
_handler . _arrayBuffer = new byte [ 4000 ] ;
_handler . _arrayBuffer = new byte [ 4000 ] ;
_handler . _arrayBuffer = new byte [ 8 ] ;
_handler . _arrayBuffer = new byte [ 8 ] ;
_handler . _arrayBuffer = new byte [ 8192 ] ;
_handler . _arrayBuffer = new byte [ 8192 ] ;
at_next |= _handler . content ( arg ) ;
at_next |= _handler . content ( arg ) ;
if ( ! <unk> ) _handler . earlyEOF ( arg ) ;
return _handler . messageComplete ( arg ) ;
_handler . onFrame ( arg ) ;
_handler . onFrame ( arg ) ;
at_next |= _handler . parsedHeader ( arg ) ;
if ( getServer ( arg ) != null ) getServer ( arg ) . getContainer ( arg ) . update ( arg ) ;
if ( getServer ( arg ) != null ) getServer ( arg ) . getContainer ( arg ) . update ( arg ) ;
_head . set ( arg ) ;
_head = ( head + 1 ) % _elements . length ;
_head = ( head + 1 ) % _elements . length ;
_head = ( head + 1 ) % _elements . length ;
_indexes [ HEAD_OFFSET ] = ( head + 1 ) % _elements . length ;
_indexes [ HEAD_OFFSET ] = ( head + 1 ) % _elements . length ;
_indexes [ HEAD_OFFSET ] = ( head + 1 ) % _elements . length ;
headLock . unlock ( arg ) ;
headLock . unlock ( arg ) ;
headLock . unlock ( arg ) ;
headLock . unlock ( arg ) ;
headLock . unlock ( arg ) ;
headLock . unlock ( arg ) ;
headLock . unlock ( arg ) ;
headLock . unlock ( arg ) ;
headLock . unlock ( arg ) ;
headLock . unlock ( arg ) ;
headLock . unlock ( arg ) ;
headLock . unlock ( arg ) ;
headLock . unlock ( arg ) ;
_header = HttpHeader . CACHE . get ( arg ) ;
_header = HttpHeader . CACHE . get ( arg ) ;
_header = HttpHeader . CACHE . get ( arg ) ;
_header = HttpHeader . CACHE . get ( arg ) ;
_header = _buffers . getHeader ( arg ) ;
_header = _buffers . getHeader ( arg ) ;
_header = _buffers . getHeader ( arg ) ;
getWebBundleDeployerHelp ( arg ) . unregister ( arg ) ;
_history . append ( arg ) . append ( arg ) ;
_history . append ( arg ) . append ( arg ) ;
_history . append ( arg ) . append ( arg ) ;
_history . append ( arg ) . append ( arg ) ;
_history . append ( arg ) . append ( arg ) ;
_history . append ( arg ) . append ( arg ) ;
<unk> = new IndirectNIOBuffer ( arg ) ;
_future . <unk> ( arg ) ;
_future . <unk> ( arg ) ;
_selectorManager . start ( arg ) ;
_httpClient . setKeyStoreInputStream ( arg ) ;
_identityService . disassociate ( arg ) ;
if ( _identityService != null ) _identityService . disassociate ( arg ) ;
_idleConnections . add ( arg ) ;
_idleConnections . remove ( arg ) ;
<unk> = seconds * 1000L ;
<unk> = check ;
throw e ;
_in . <unk> ( arg ) ;
if ( _in != null ) _in . close ( arg ) ;
if ( _in != null ) _in . close ( arg ) ;
_request . getHttpInput ( arg ) . consumeAll ( arg ) ;
_request . getHttpInput ( arg ) . content ( arg ) ;
_input . recycle ( arg ) ;
_request . getHttpInput ( arg ) . shutdownInput ( arg ) ;
_request . getHttpInput ( arg ) . shutdownInput ( arg ) ;
_request . getHttpInput ( arg ) . shutdownInput ( arg ) ;
<unk> = new <unk> ( arg ) ;
_includeCipherSuites = new LinkedHashSet < String > ( arg ) ;
_includeCipherSuites = new LinkedHashSet <> ( arg ) ;
_includeProtocols = new LinkedHashSet < String > ( arg ) ;
_includeProtocols = new LinkedHashSet <> ( arg ) ;
_initOnStartup = order >= 0 ;
_initOnStartup = order > 0 ;
injections . add ( arg ) ;
injections . add ( arg ) ;
lock ( arg ) . <unk> ( arg ) ;
lock ( arg ) . wait ( arg ) ;
_interestOps = ( ( ! _socket . isInputShutdown ( arg ) && ( ! _dispatched || _readBlocked ) ) ? SelectionKey . <unk> : 0 ) | ( ( ! _socket . isOutputShutdown ( arg ) && ( ! _writable || _writeBlocked ) ) ? SelectionKey . <unk> : 0 ) ;
if ( _interestOps . compareAndSet ( arg ) ) {
<unk> = new <unk> ( arg ) ;
_jettyHome = Config . getProperty ( arg ) ;
_jobs = <unk> > 0 ? new <unk> < Runnable > ( arg ) : new BlockingArrayQueue < Runnable > ( arg ) ;
throw new UnsupportedOperationException ( arg ) ;
<unk> ++ ;
_responseWrapped = false ;
_responseWrapped = false ;
_responseWrapped = false ;
if ( _dispatched ) _key . interestOps ( arg ) ;
_sslContextFactory . setKeyManagerPassword ( arg ) ;
_sslContextFactory . setKeyManagerPassword ( arg ) ;
<unk> = <unk> ;
<unk> = <unk> ;
<unk> = <unk> ;
<unk> = <unk> ;
<unk> = Password . <unk> ( arg ) ;
_keystorePath = keystore ;
_keystorePath = keystore ;
_sslContextFactory . setKeystore ( arg ) ;
_sslContextFactory . setKeystore ( arg ) ;
_sslContextFactory . setKeystoreType ( arg ) ;
_sslContextFactory . setKeystoreType ( arg ) ;
_lastEndp . setIdleTimeout ( arg ) ;
_lastEndp . setIdleTimeout ( arg ) ;
_lastEndp . setIdleTimeout ( arg ) ;
_lastEndp . setIdleTimeout ( arg ) ;
_lastEndp . setIdleTimeout ( arg ) ;
_idleTimestamp = System . currentTimeMillis ( arg ) ;
<unk> ( arg ) ;
<unk> = ns ;
wsocket . <unk> . await ( arg ) ;
<unk> . countDown ( arg ) ;
_fieldList . add ( arg ) ;
_fieldList . clear ( arg ) ;
_debug = <unk> ;
_listeners = new ContinuationListener [ <unk> ( arg ) + 1 ] ;
_listeners . add ( arg ) ;
_listeners . remove ( arg ) ;
_listeners . add ( arg ) ;
_listeners . remove ( arg ) ;
_continuationListeners = null ;
_continuationListeners = null ;
if ( ! _lock . tryLock ( arg ) ) throw new IllegalStateException ( arg ) ;
if ( ! _lock . tryLock ( arg ) ) throw new IllegalStateException ( arg ) ;
if ( ! _lock . tryLock ( arg ) ) throw new IllegalStateException ( arg ) ;
_log . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . ignore ( arg ) ;
LOG . info ( arg ) ;
if ( _logger . isLoggable ( arg ) ) _logger . log ( arg ) ;
if ( _logger . isLoggable ( arg ) ) _logger . log ( arg ) ;
if ( _logger . isLoggable ( arg ) ) _logger . log ( arg ) ;
LOG . warn ( arg ) ;
LOG . warn ( arg ) ;
LOG . warn ( arg ) ;
LOG . warn ( arg ) ;
_loops [ thread ] . set ( arg ) ;
_loops [ thread ] . set ( arg ) ;
_loops [ thread ] . set ( arg ) ;
<unk> ( arg ) ;
<unk> = ( int ) <unk> ;
if ( old != null && old != _connection ) _manager . <unk> ( arg ) ;
_manager . accept ( arg ) ;
_manager . accept ( arg ) ;
_manager . accept ( arg ) ;
_manager . accept ( arg ) ;
_manager . accept ( arg ) ;
_manager . accept ( arg ) ;
_manager . accept ( arg ) ;
_manager . accept ( arg ) ;
_manager . accept ( arg ) ;
super . <unk> ( arg ) ;
_mavenService . setRepositoryUrls ( arg ) ;
_mavenService . setRepositoryUrls ( arg ) ;
_mavenService . setRepositoryUrl ( arg ) ;
_mavenService . setRepositoryUrl ( arg ) ;
_maxBinaryMessageSize = size ;
<unk> = ( long ) <unk> * 1000L ;
_maxIdleTime = ( int ) maxIdleTime ;
_idleTimeout = idleTimeout ;
_maxTextMessageSize = size ;
members . remove ( arg ) ;
_metaDataComplete = _webXmlRoot . getMetaDataComplete ( arg ) == WebDescriptor . MetaDataComplete . True ;
_metaDataComplete = _webXmlRoot . getMetaDataComplete ( arg ) == MetaDataComplete . True ;
_metaDataComplete = false ;
_setter . invoke ( arg ) ;
_setter . invoke ( arg ) ;
_setter . invoke ( arg ) ;
_setter . invoke ( arg ) ;
_method = method . getBytes ( arg ) ;
_httpMethodString = method ;
_httpMethodString = null ;
_mimeTypes = new HashSet < String > ( arg ) ;
<unk> = <unk> ;
<unk> ( arg ) ;
_multiPartInputStream = new MultiPartInputStreamParser ( arg ) ;
_multiPartInputStream = new MultiPartInputStreamParser ( arg ) ;
_sslContextFactory . setNeedClientAuth ( arg ) ;
_sslContextFactory . setNeedClientAuth ( arg ) ;
_state . set ( arg ) ;
<unk> ++ ;
_reservedConnections . put ( arg ) ;
_reservedConnections . put ( arg ) ;
<unk> = getChildHandlerByClass ( arg ) ;
_nonceMap . remove ( arg ) ;
_onDone |= <unk> ;
_onDone |= <unk> ;
<unk> . clear ( arg ) ;
<unk> . clear ( arg ) ;
_out . <unk> = new char [ MAX_OUTPUT_CHARS ] ;
if ( ! _out . isClosed ( arg ) ) _out . flush ( arg ) ;
_out . <unk> ( arg ) ;
_response . <unk> ( arg ) . reopen ( arg ) ;
_out = _bout = new <unk> ( arg ) ;
_connection . sendMessage ( arg ) ;
_outputState = Output . NONE ;
_outputState = Output . NONE ;
_outputState = Output . NONE ;
_outputState = OutputState . NONE ;
_outputState = OutputState . NONE ;
_outputState = OutputState . NONE ;
_outputState = OutputState . STREAM ;
_outputState = OutputState . WRITER ;
_outputType = OutputType . NONE ;
_outputType = OutputType . NONE ;
_outputType = OutputType . WRITER ;
_outputState = Output . STREAM ;
_outputState = Output . WRITER ;
parameters . putAll ( arg ) ;
_parser . shutdownInput ( arg ) ;
_parser . shutdownInput ( arg ) ;
_parser . shutdownInput ( arg ) ;
_parser = new WebSocketParserRFC6455 ( arg ) ;
_parser = new WebSocketParserD10 ( arg ) ;
_partial = param != null && Boolean . parseBoolean ( arg ) || ( ContinuationSupport . <unk> &&! jetty ) ;
<unk> = new MultiMap ( arg ) ;
_sslContextFactory . setKeystorePassword ( arg ) ;
_sslContextFactory . setKeystorePassword ( arg ) ;
_persistent = _version . getVerion ( arg ) >= HttpVersion . HTTP_1_1 . getVerion ( arg ) ;
_persistent = _version . getVerion ( arg ) >= HttpVersion . HTTP_1_1 . getVerion ( arg ) ;
_persistent = _version . getVerion ( arg ) >= HttpVersion . HTTP_1_1 . getVerion ( arg ) ;
_persistent = HttpVersion . HTTP_1_1 == v ;
_persistent = HttpVersion . HTTP_1_1 == v ;
_persistent = request != null ;
_persistent = _version . getVersion ( arg ) >= HttpVersion . HTTP_1_1 . getVersion ( arg ) ;
_persistent = _version . getVersion ( arg ) >= HttpVersion . HTTP_1_1 . getVersion ( arg ) ;
_persistent = _version . getVersion ( arg ) >= HttpVersion . HTTP_1_1 . getVersion ( arg ) ;
_persistent = _version . getVersion ( arg ) >= HttpVersion . HTTP_1_1 . getVersion ( arg ) ;
_persistent = persistent ;
_persistent = new Boolean ( arg ) ;
_persistent = null ;
<unk> = new File ( arg ) . getParentFile ( arg ) . toURI ( arg ) . getPath ( arg ) ;
<unk> = StringUtil . toInt ( arg ) ;
print ( arg ) ;
_printWriter = new UncheckedPrintWriter ( arg ) ;
_printWriter = <unk> ? new UncheckedPrintWriter ( arg ) : new PrintWriter ( arg ) ;
_channel . getOutputStream ( arg ) . reset ( arg ) ;
_channel . onClose ( arg ) ;
_channel . reset ( arg ) ;
if ( <unk> ) _progressed . set ( arg ) ;
if ( _promise != null ) _promise . failed ( arg ) ;
if ( _promise != null ) _promise . succeeded ( arg ) ;
__properties . put ( arg ) ;
__properties . put ( arg ) ;
__properties . put ( arg ) ;
propertyUserStore . start ( arg ) ;
propertyUserStore . start ( arg ) ;
_httpVersion = HttpVersion . HTTP_1_1 ;
_protocol = HttpVersion . HTTP_1_1 . toString ( arg ) ;
_protocol = HttpVersion . HTTP_1_1 ;
_sslContextFactory . setProtocol ( arg ) ;
_sslContextFactory . setProtocol ( arg ) ;
_provider . <unk> ( arg ) ;
_sslContextFactory . setProvider ( arg ) ;
if ( _providers . remove ( arg ) ) removeBean ( arg ) ;
if ( exchange . getStatus ( arg ) <= HttpExchange . STATUS_WAITING_FOR_CONNECTION ) _queue . add ( arg ) ;
_queue . add ( arg ) ;
_exchanges . remove ( arg ) ;
rHandler . <unk> ( arg ) ;
else _random . <unk> ( arg ) ;
_random = new <unk> ( arg ) ;
_readBlocked = null ;
_fillInterest . close ( arg ) ;
_fillInterest . close ( arg ) ;
_fillInterest . failed ( arg ) ;
_readInterest . registerInterest ( arg ) ;
_readInterest . registerInterest ( arg ) ;
_fillInterest . register ( arg ) ;
_fillInterest . register ( arg ) ;
_fillInterest . register ( arg ) ;
_readInterest . register ( arg ) ;
_readInterest . register ( arg ) ;
_readInterest . register ( arg ) ;
<unk> = BufferUtil . allocate ( arg ) ;
_scanDepth = recursive ? null : 0 ;
throw new IllegalStateException ( arg ) ;
_delegate . setAttribute ( arg ) ;
_request . getHttpInput ( arg ) . earlyEOF ( arg ) ;
_request . getHttpInput ( arg ) . shutdown ( arg ) ;
_request . getHttpInput ( arg ) . shutdown ( arg ) ;
_request . getHttpInput ( arg ) . shutdown ( arg ) ;
_context . setTimeout ( arg ) ;
_request . setHttpVersion ( arg ) ;
_request . setHttpVersion ( arg ) ;
_requestAttributeListeners . remove ( arg ) ;
<unk> ( arg ) ;
_requestContentSource = stream ;
if ( name != null ) <unk> . add ( arg ) ;
at_next |= _requestHandler . startRequest ( arg ) ;
at_next |= _requestHandler . startRequest ( arg ) ;
at_next |= _requestHandler . startRequest ( arg ) ;
<unk> = _request . getHttpFields ( arg ) ;
long d = _requestStats . decrement ( arg ) ;
now = <unk> . <unk> ( arg ) ;
_requestStats . set ( arg ) ;
<unk> . close ( arg ) ;
List < Resource > resources = new ArrayList <> ( arg ) ;
else _response . closeOutput ( arg ) ;
<unk> ( arg ) ;
_responseBuffer = _bufferPool . acquire ( arg ) ;
_responseBuffer = _bufferPool . acquire ( arg ) ;
_response . getHttpFields ( arg ) . add ( arg ) ;
_response . getHttpFields ( arg ) . putDateField ( arg ) ;
at_next |= _responseHandler . startResponse ( arg ) ;
at_next |= _responseHandler . startResponse ( arg ) ;
at_next |= _responseHandler . startResponse ( arg ) ;
_responseHeader = _bufferPool . acquire ( arg ) ;
_responseHeader = _bufferPool . acquire ( arg ) ;
<unk> ( arg ) ;
_responsesBuffer = endPoint . getOutput ( arg ) ;
<unk> . limit ( arg ) ;
_dispatched = false ;
_dispatched = true ;
_dispatched = true ;
<unk> . add ( arg ) ;
_roles . add ( arg ) ;
_roles . clear ( arg ) ;
_roles . clear ( arg ) ;
_roles . clear ( arg ) ;
_root = new Node < O > ( arg ) ;
_root = null ;
<unk> = ArrayUtil . addToArray ( arg ) ;
<unk> . set ( arg ) ;
_scanDirs . clear ( arg ) ;
_scheduler . stop ( arg ) ;
_scheduler = new TimerScheduler ( arg ) ;
_scheduler = new TimerScheduler ( arg ) ;
Scheduler _scheduler = new TimerScheduler ( arg ) ;
_security . getIdentityService ( arg ) . <unk> ( arg ) ;
SecurityHandler <unk> = context . <unk> ( arg ) ;
_idleTimestamp = 0 ;
_selector . destroyEndPoint ( arg ) ;
_selector . destroyEndPoint ( arg ) ;
_idleTimestamp = System . currentTimeMillis ( arg ) ;
_selector . submit ( arg ) ;
_selector . submit ( arg ) ;
_selecting = null ;
<unk> <unk> = _selector ;
_factory . getSelectorManager ( arg ) . register ( arg ) ;
_maxIdleTime = maxIdleTime ;
_selector . updateKey ( arg ) ;
_semaphore . acquire ( arg ) ;
_semaphore . release ( arg ) ;
_semaphore . release ( arg ) ;
throw new UnsupportedOperationException ( arg ) ;
BufferUtil . flipToFlush ( arg ) ;
_state . set ( arg ) ;
_state . set ( arg ) ;
_server . setHandler ( arg ) ;
_server . setHandler ( arg ) ;
_server . setHandler ( arg ) ;
_handler . handle ( arg ) ;
server . handleAsync ( arg ) ;
<unk> . setHandler ( arg ) ;
getServer ( arg ) . stop ( arg ) ;
Server _server = <unk> . getContextHandler ( arg ) . getServer ( arg ) ;
_serverClasses = new ClasspathPattern ( arg ) ;
_serverClasses = ClasspathPattern . fromArray ( arg ) ;
_serverClasses = ClasspathPattern . fromArray ( arg ) ;
<unk> = hostPort . substring ( arg ) ;
__serverWebSocket . connection . sendMessage ( arg ) ;
__serverWebSocket . connection . sendMessage ( arg ) ;
__serverWebSocket . connection . sendMessage ( arg ) ;
_serverWebSocket . connection . sendMessage ( arg ) ;
_serverWebSocket . connection . sendMessage ( arg ) ;
<unk> . unregister ( arg ) ;
_servletHandler = _contextHandler . getChildHandlerByClass ( arg ) ;
setEntityName ( arg ) ;
SessionHandler _session = new SessionHandler ( arg ) ;
setSessionIdManager ( arg ) ;
if ( _sessionManager == null ) <unk> ( arg ) ;
<unk> = _dbAdaptor . <unk> ( arg ) ;
if ( isRunning ( arg ) ) _sessions . put ( arg ) ;
return _sessions . remove ( arg ) != null ;
_dbSessions . update ( arg ) ;
_dbSessions . update ( arg ) ;
_dbSessions . update ( arg ) ;
_dbSessions = <unk> . <unk> ( arg ) ;
_sessions = new ConcurrentHashMap < String , AbstractSession > ( arg ) ;
_sessions = new ConcurrentHashMap < String , Session > ( arg ) ;
_elements [ _tail ] = null ;
<unk> = 5 ;
setTimeout ( arg ) ;
_sslContextFactory . setKeyStorePath ( arg ) ;
_sslContextFactory . setKeyStorePath ( arg ) ;
_sslContextFactory . setKeyStorePath ( arg ) ;
_sslContextFactory . setKeyStore ( arg ) ;
_sslContextFactory . setKeyStore ( arg ) ;
_sslContextFactory . setKeyStore ( arg ) ;
_sslContextFactory . setKeyStoreInputStream ( arg ) ;
_sslContextFactory . setKeyStorePassword ( arg ) ;
_sslContextFactory . setKeyStorePassword ( arg ) ;
_sslContextFactory . setKeyStorePassword ( arg ) ;
_sslContextFactory . setKeyStoreType ( arg ) ;
_sslContextFactory . setKeyStoreType ( arg ) ;
_sslContextFactory . setKeyStoreType ( arg ) ;
_sslContextFactory . setTrustStore ( arg ) ;
_sslContextFactory . setTrustStore ( arg ) ;
_sslContextFactory . setTrustStore ( arg ) ;
_sslContextFactory . <unk> ( arg ) ;
_sslContextFactory . setTrustStorePassword ( arg ) ;
_sslContextFactory . setTrustStorePassword ( arg ) ;
_sslContextFactory . setTrustStorePassword ( arg ) ;
_sslContextFactory . setTrustStoreType ( arg ) ;
_sslContextFactory . setTrustStoreType ( arg ) ;
_sslContextFactory . setTrustStoreType ( arg ) ;
super . onOpen ( arg ) ;
if ( _state . unhandle ( arg ) == Next . COMPLETE ) _state . completed ( arg ) ;
getAsyncContinuation ( arg ) . recycle ( arg ) ;
_sequence ++ ;
_sequence ++ ;
_state = __FAILED ;
_state = __STARTED ;
_state = __STARTING ;
_state = State . CHUNKED_CONTENT ;
_state = State . CHUNK_SIZE ;
_state = State . END ;
_state = State . <unk> ;
_state = State . HEADER ;
_state = State . HEADER ;
_state = State . HEADER ;
_state = State . HEADER ;
_state = State . HEADER ;
_state = State . HEADER ;
_state = State . HEADER ;
_state = State . HEADER ;
_state = State . <unk> ;
_state = State . <unk> ;
_state = State . HEADER_NAME ;
_state = State . HEADER_NAME ;
_state = State . HEADER_VALUE ;
_state = State . HEADER_VALUE ;
_state = State . HEADER_VALUE ;
_state = State . HEADER_VALUE ;
_state = State . SEEKING_EOF ;
_state = State . SPACE1 ;
_state = State . SPACE1 ;
_state = State . SPACE2 ;
_state = State . SPACE2 ;
_state = _persistent ? <unk> : ( _endp . isInputShutdown ( arg ) ? STATE_END : STATE_SEEKING_EOF ) ;
_state = State . <unk> ;
_state = <unk> ;
_state = __STOPPED ;
_state = __STOPPING ;
setState ( arg ) ;
setState ( arg ) ;
setState ( arg ) ;
setState ( arg ) ;
setState ( arg ) ;
_state = State . COMPLETECALLED ;
_state = State . COMPLETECALLED ;
setState ( arg ) ;
setState ( arg ) ;
setState ( arg ) ;
setState ( arg ) ;
setState ( arg ) ;
setState ( arg ) ;
setState ( arg ) ;
setState ( arg ) ;
setState ( arg ) ;
setState ( arg ) ;
setState ( arg ) ;
setState ( arg ) ;
setState ( arg ) ;
setState ( arg ) ;
setState ( arg ) ;
setState ( arg ) ;
setState ( arg ) ;
setState ( arg ) ;
setState ( arg ) ;
setState ( arg ) ;
setState ( arg ) ;
setState ( arg ) ;
setState ( arg ) ;
setState ( arg ) ;
setState ( arg ) ;
setState ( arg ) ;
setState ( arg ) ;
setState ( arg ) ;
setState ( arg ) ;
setState ( arg ) ;
_state = <unk> ? State . <unk> : State . OPCODE ;
setState ( arg ) ;
setState ( arg ) ;
_state = State . END ;
setState ( arg ) ;
setState ( arg ) ;
setState ( arg ) ;
setState ( arg ) ;
setState ( arg ) ;
setState ( arg ) ;
setState ( arg ) ;
setState ( arg ) ;
_state = State . COMMITTED ;
_state = State . COMPLETING ;
_state = State . COMPLETING ;
setState ( arg ) ;
_state = State . <unk> ;
_state = State . ASYNCWAIT ;
_state = __COMPLETED ;
_state = State . DISPATCHED ;
_state = State . IDLE ;
_state = State . REDISPATCH ;
_state = State . REDISPATCHED ;
_state = State . REDISPATCHED ;
_state = __ASYNCWAIT ;
_state = <unk> ;
_state = State . UNCOMPLETED ;
_state = <unk> ;
_state = <unk> == WebSocketConnectionRFC6455 . <unk> ? State . <unk> : State . OPCODE ;
_state = _persistent ? State . START : _state == State . END ? State . END : State . SEEKING_EOF ;
_state = State . END ;
_state = State . END ;
_state = State . END ;
_state = State . END ;
_state = _persistent ? State . START : State . CLOSED ;
_state = State . START ;
_state = _persistent ? State . START : ( _state == State . END ? State . END : State . SEEKING_EOF ) ;
_state = State . END ;
_state = State . END ;
setState ( arg ) ;
<unk> ( arg ) ;
_statsStartedAt . set ( arg ) ;
_status = HttpStatus . <unk> ;
updateStatus ( arg ) ;
updateStatus ( arg ) ;
updateStatus ( arg ) ;
updateStatus ( arg ) ;
updateStatus ( arg ) ;
updateStatus ( arg ) ;
updateStatus ( arg ) ;
updateStatus ( arg ) ;
updateStatus ( arg ) ;
updateStatus ( arg ) ;
updateStatus ( arg ) ;
updateStatus ( arg ) ;
updateStatus ( arg ) ;
updateStatus ( arg ) ;
updateStatus ( arg ) ;
updateStatus ( arg ) ;
updateStatus ( arg ) ;
updateStatus ( arg ) ;
( _stderr == null ? System . err : _stderr ) . println ( arg ) ;
( _stderr == null ? System . err : _stderr ) . println ( arg ) ;
( _stderr == null ? System . err : _stderr ) . println ( arg ) ;
( _stderr == null ? System . err : _stderr ) . println ( arg ) ;
( _stderr == null ? System . err : _stderr ) . println ( arg ) ;
( _stderr == null ? System . err : _stderr ) . println ( arg ) ;
( _stderr == null ? System . err : _stderr ) . println ( arg ) ;
_storeDir = dir . getCanonicalFile ( arg ) ;
_suspendStats . decrement ( arg ) ;
_systemClasses = new ClasspathPattern ( arg ) ;
_systemClasses = ClasspathPattern . fromArray ( arg ) ;
_systemClasses = ClasspathPattern . fromArray ( arg ) ;
_tail = ( _tail + 1 ) % _capacity ;
_tail = ( _tail + 1 ) % _capacity ;
_tail = ( tail + 1 ) % _elements . length ;
_indexes [ TAIL_OFFSET ] = ( tail + 1 ) % _elements . length ;
_indexes [ TAIL_OFFSET ] = capacity - 1 ;
_tail = newTail ;
_tail = new_tail ;
tailLock . unlock ( arg ) ;
tailLock . unlock ( arg ) ;
tailLock . unlock ( arg ) ;
tailLock . unlock ( arg ) ;
tailLock . unlock ( arg ) ;
tailLock . unlock ( arg ) ;
tailLock . unlock ( arg ) ;
tailLock . unlock ( arg ) ;
<unk> . cancel ( arg ) ;
__threadContext . set ( arg ) ;
_timeout . onClose ( arg ) ;
_timeout = timeout ;
_expireAt = 0 ;
_timeoutMs = <unk> ;
_timer . shutdownNow ( arg ) ;
timer . schedule ( arg ) ;
_scheduler . shutdownNow ( arg ) ;
_scheduler = Executors . <unk> ( arg ) ;
_timer = new <unk> ( arg ) ;
total = null ;
_scheduler . schedule ( arg ) ;
_transport . send ( arg ) ;
_transport . send ( arg ) ;
_controller . completeResponse ( arg ) ;
_controller . flushResponse ( arg ) ;
_controller . flushResponse ( arg ) ;
_transport . completed ( arg ) ;
_controller . increaseContentBufferSize ( arg ) ;
_controller . sendError ( arg ) ;
_transport . send ( arg ) ;
_sslContextFactory . setTruststorePassword ( arg ) ;
_sslContextFactory . setTruststorePassword ( arg ) ;
_trustStoreInputStream = trustStoreInputStream ;
<unk> = <unk> ;
<unk> = <unk> ;
<unk> = <unk> ;
_truststorePath = truststore ;
_truststorePath = truststore ;
_sslContextFactory . setTruststore ( arg ) ;
_sslContextFactory . setTruststore ( arg ) ;
_sslContextFactory . setTruststoreType ( arg ) ;
_sslContextFactory . setTruststoreType ( arg ) ;
setAvailable ( arg ) ;
setAvailable ( arg ) ;
_checked = true ;
_checked = true ;
_uri . parse ( http:
setRequestURI ( arg ) ;
_url = url == null ? null : url . toString ( arg ) ;
_url = url == null ? null : url . toString ( arg ) ;
_value = value ;
_version = HttpVersion . HTTP_1_1 ;
_versionOrReason = reason ;
<unk> = ArrayUtil . addToArray ( arg ) ;
<unk> = wait ;
_sslContextFactory . setWantClientAuth ( arg ) ;
_sslContextFactory . setWantClientAuth ( arg ) ;
_annotations . clear ( arg ) ;
_webSocket . onClose ( arg ) ;
webSocketFactory . stop ( arg ) ;
if ( _verbose ) System . err . printf ( arg ) ;
if ( _verbose ) System . err . printf ( arg ) ;
if ( _webXmlRoot != null ) _webXmlRoot . process ( arg ) ;
_webXmlRoot = new WebDescriptor ( arg ) ;
_webSocket . onConnect ( arg ) ;
_webSocket . <unk> ( arg ) ;
_webSocketFactory = new WebSocketFactory ( arg ) ;
_webSocketFactory = null ;
<unk> ( arg ) ;
<unk> = <unk> ;
_responseWrapped = true ;
_writeBlocked = null ;
<unk> = new FutureCallback ( arg ) ;
getWriteFlusher ( arg ) . completeWrite ( arg ) ;
getWriteFlusher ( arg ) . completeWrite ( arg ) ;
<unk> . failed ( arg ) ;
writeCompleted ( arg ) ;
_writeFuture . complete ( arg ) ;
_writeFuture . complete ( arg ) ;
_writeFuture = new <unk> ( arg ) ;
HttpWriter _writer = new HttpWriter ( arg ) ;
HttpWriter _writer = new HttpWriter ( arg ) ;
HttpWriter _writer = new HttpWriter ( arg ) ;
HttpWriter _writer = new HttpWriter ( arg ) ;
HttpWriter _writer = new HttpWriter ( arg ) ;
HttpWriter _writer = new HttpWriter ( arg ) ;
HttpWriter _writer = new HttpWriter ( arg ) ;
HttpWriter _writer = new HttpWriter ( arg ) ;
buf . append ( arg ) ;
buf . append ( arg ) ;
_writer = _processor . getPrintWriter ( arg ) ;
_writer = _channel . getPrintWriter ( arg ) ;
_writer = _channel . getPrintWriter ( arg ) ;
_writer = new HttpWriter ( arg ) ;
<unk> . close ( arg ) ;
<unk> ( arg ) ;
<unk> . setCheckForIdle ( arg ) ;
if ( aborted . compareAndSet ( arg ) ) {
ret . add ( arg ) ;
<unk> . succeeded ( arg ) ;
activeMessage . appendFrame ( arg ) ;
activeMessage . appendFrame ( arg ) ;
activeMessage . appendFrame ( arg ) ;
actualJvmArgs . add ( arg ) ;
return add ( arg ) ;
return add ( arg ) ;
<unk> ( arg ) ;
TestOSGiUtil . addMoreOSGiContainers ( arg ) ;
TestOSGiUtil . addMoreOSGiContainers ( arg ) ;
TestOSGiUtil . addMoreOSGiContainers ( arg ) ;
TestOSGiUtil . addMoreOSGiContainers ( arg ) ;
TestOSGiUtil . addMoreOSGiContainers ( arg ) ;
add_to_connection_trie = _connectionFields != null && _field == null ;
add_to_connection_trie = _connectionFields != null && _field == null ;
app . setHandler ( arg ) ;
configURLs . add ( arg ) ;
<unk> . put ( arg ) ;
argIndex = i ;
argIndex = i ;
if ( arg != null ) args . add ( arg ) ;
if ( arg != null ) args . add ( arg ) ;
arr = LazyList . removeFromArray ( arg ) ;
arr = LazyList . removeFromArray ( arg ) ;
arr = ArrayUtil . addToArray ( arg ) ;
arr = ArrayUtil . removeFromArray ( arg ) ;
arr = ArrayUtil . removeFromArray ( arg ) ;
TestOSGiUtil . assertAllBundlesActiveOrResolved ( arg ) ;
TestOSGiUtil . assertAllBundlesActiveOrResolved ( arg ) ;
TestOSGiUtil . assertAllBundlesActiveOrResolved ( arg ) ;
TestOSGiUtil . assertAllBundlesActiveOrResolved ( arg ) ;
<unk> ( arg ) ;
Assert . assertEquals ( arg ) ;
Assert . assertEquals ( arg ) ;
Assert . assertEquals ( arg ) ;
Assert . assertEquals ( arg ) ;
Assert . assertEquals ( arg ) ;
Assert . assertEquals ( arg ) ;
Assert . assertEquals ( arg ) ;
Assert . assertEquals ( arg ) ;
Assert . assertEquals ( arg ) ;
Assert . assertEquals ( arg ) ;
Assert . assertEquals ( arg ) ;
Assert . assertEquals ( arg ) ;
Assert . assertEquals ( arg ) ;
Assert . assertEquals ( arg ) ;
Assert . assertEquals ( arg ) ;
Assert . assertEquals ( arg ) ;
Assert . assertEquals ( arg ) ;
Assert . assertEquals ( arg ) ;
Assert . assertEquals ( arg ) ;
Assert . assertEquals ( arg ) ;
Assert . assertEquals ( arg ) ;
Assert . assertEquals ( arg ) ;
Assert . assertEquals ( arg ) ;
Assert . assertEquals ( arg ) ;
Assert . assertEquals ( arg ) ;
Assert . assertEquals ( arg ) ;
Assert . assertEquals ( arg ) ;
Assert . assertEquals ( arg ) ;
Assert . assertEquals ( arg ) ;
Assert . assertEquals ( arg ) ;
Assert . assertEquals ( arg ) ;
Assert . assertEquals ( arg ) ;
Assert . assertEquals ( arg ) ;
Assert . assertEquals ( arg ) ;
<unk> ( arg ) ;
return <unk> ( arg ) ;
<unk> ( arg ) ;
Assert . assertNotNull ( arg ) ;
Assert . assertNotNull ( arg ) ;
Assert . assertNotNull ( arg ) ;
Assert . assertNotNull ( arg ) ;
Assert . assertNotNull ( arg ) ;
Assert . assertNotNull ( arg ) ;
Assert . assertNotNull ( arg ) ;
Assert . assertNotNull ( arg ) ;
Assert . assertNotNull ( arg ) ;
Assert . assertNotNull ( arg ) ;
Assert . assertNotNull ( arg ) ;
Assert . assertNotNull ( arg ) ;
Assert . assertNotNull ( arg ) ;
Assert . assertNotNull ( arg ) ;
Assert . assertNotNull ( arg ) ;
Assert . assertEquals ( arg ) ;
assertResponse ( arg ) ;
assertResponse ( arg ) ;
assertResponse ( arg ) ;
assertResponse ( arg ) ;
if ( ! <unk> ) <unk> ( arg ) ;
assertContainsUnordered ( arg ) ;
assertContainsUnordered ( arg ) ;
assertThatNoExceptionOccurred ( arg ) ;
assertThatNoExceptionOccurred ( arg ) ;
assertThat ( arg ) ;
assertThat ( arg ) ;
assertThat ( arg ) ;
assertThat ( arg ) ;
assertThat ( arg ) ;
assertThat ( arg ) ;
assertThat ( arg ) ;
assertThat ( arg ) ;
assertThat ( arg ) ;
assertThat ( arg ) ;
assertThat ( arg ) ;
assertThat ( arg ) ;
assertThat ( arg ) ;
assertThat ( arg ) ;
assertThat ( arg ) ;
assertThat ( arg ) ;
assertThat ( arg ) ;
assertThat ( arg ) ;
assertThat ( arg ) ;
assertThat ( arg ) ;
assertThat ( arg ) ;
assertThat ( arg ) ;
assertThat ( arg ) ;
assertThat ( arg ) ;
assertThat ( arg ) ;
assertThat ( arg ) ;
assertThat ( arg ) ;
assertThat ( arg ) ;
assertThat ( arg ) ;
assertThat ( arg ) ;
assertThat ( arg ) ;
assertThat ( arg ) ;
assertThat ( arg ) ;
assertThat ( arg ) ;
assertThat ( arg ) ;
assertThat ( arg ) ;
assertThat ( arg ) ;
assertThat ( arg ) ;
assertThat ( arg ) ;
assertThat ( arg ) ;
assertThat ( arg ) ;
assertThat ( arg ) ;
assertThat ( arg ) ;
assertThat ( arg ) ;
assertThat ( arg ) ;
assertThat ( arg ) ;
assertThat ( arg ) ;
assertThat ( arg ) ;
assertThat ( arg ) ;
assertThat ( arg ) ;
assertThat ( arg ) ;
assertThat ( arg ) ;
assertThat ( arg ) ;
assertThat ( arg ) ;
assertThat ( arg ) ;
assertThat ( arg ) ;
assertThat ( arg ) ;
assertThat ( arg ) ;
assertThat ( arg ) ;
assertThat ( arg ) ;
assertThat ( arg ) ;
assertThat ( arg ) ;
assertThat ( arg ) ;
assertThat ( arg ) ;
assertThat ( arg ) ;
assertThat ( arg ) ;
assertValidSignature ( arg ) ;
assertValidSignature ( arg ) ;
assertValidSignature ( arg ) ;
assertValidSignature ( arg ) ;
assertValidSignature ( arg ) ;
<unk> ( arg ) ;
Assume . assumeTrue ( arg ) ;
Assume . assumeTrue ( arg ) ;
if ( complete . <unk> ( arg ) == 0 ) async . complete ( arg ) ;
continuation . <unk> ( arg ) ;
connectionOpened ( arg ) ;
asyncContext . addListener ( arg ) ;
asyncContext . addContinuationListener ( arg ) ;
if ( ( arg ) . getSession ( arg ) . getId ( arg ) != null ) asyncContext . dispatch ( arg ) ;
return_from_parse |= _handler . content ( arg ) ;
return_from_parse |= _handler . headerComplete ( arg ) ;
return_from_parse |= _handler . headerComplete ( arg ) ;
return_from_parse |= _handler . headerComplete ( arg ) ;
return_from_parse |= _handler . headerComplete ( arg ) ;
return_from_parse |= _handler . messageComplete ( arg ) ;
return_from_parse |= _handler . messageComplete ( arg ) ;
return_from_parse |= _handler . messageComplete ( arg ) ;
return_from_parse |= _handler . messageComplete ( arg ) ;
return_from_parse |= _handler . messageComplete ( arg ) ;
return_from_parse |= _handler . messageComplete ( arg ) ;
return_from_parse |= _handler . parsedHeader ( arg ) ;
return_from_parse |= _requestHandler . startRequest ( arg ) ;
return_from_parse |= _requestHandler . startRequest ( arg ) ;
return_from_parse |= _requestHandler . startRequest ( arg ) ;
return_from_parse |= _responseHandler . startResponse ( arg ) ;
return_from_parse |= _responseHandler . startResponse ( arg ) ;
return_from_parse |= _responseHandler . startResponse ( arg ) ;
attributes . add ( arg ) ;
attributes . add ( arg ) ;
if ( authenticator != null ) authenticator . secureResponse ( arg ) ;
if ( authenticator != null ) authenticator . secureResponse ( arg ) ;
b . _managed = managed ;
b . _managed = Managed . <unk> ;
b . _managed = Managed . MANAGED ;
builder . append ( arg ) ;
builder . append ( arg ) ;
builder . append ( arg ) ;
builder . append ( arg ) ;
builder . append ( arg ) ;
builder . append ( arg ) ;
builder . append ( arg ) ;
builder . append ( arg ) ;
builder . append ( arg ) ;
builder . append ( arg ) ;
b = clientInputStream . read ( arg ) ;
b = new StringBuilder ( arg ) ;
b |= ( byte ) ( frame . getOpCode ( arg ) & 0x0F ) ;
b |= ( op . getEncoding ( arg ) & 0x03 ) ;
b |= ( op . getEncoding ( arg ) & 0x03 ) ;
b |= ( op . getEncoding ( arg ) & 0x03 ) ;
b |= ( op . getEncoding ( arg ) & 0x03 ) ;
b |= ( op . getEncoding ( arg ) & 0x03 ) ;
b |= ( op . getEncoding ( arg ) & 0x03 ) ;
wsocket . <unk> ( arg ) ;
throw new BadMessage ( arg ) ;
throw new BadMessage ( arg ) ;
latch . await ( arg ) ;
_baseAppFirst = value ;
baseRequest . getHttpChannel ( arg ) . include ( arg ) ;
baseRequest . getHttpChannel ( arg ) . included ( arg ) ;
baseRequest . getResponse ( arg ) . include ( arg ) ;
baseRequest . getResponse ( arg ) . included ( arg ) ;
throw new IllegalStateException ( arg ) ;
if ( uri . getQuery ( arg ) != null ) baseRequest . <unk> ( arg ) ;
base_request . addEventListener ( arg ) ;
base_request . getHttpChannel ( arg ) . getEndPoint ( arg ) . close ( arg ) ;
baseRequest . setAsyncSupported ( arg ) ;
baseRequest . setAsyncSupported ( arg ) ;
baseRequest . <unk> ( arg ) ;
_identityService . associate ( arg ) ;
bin . getPayload ( arg ) . flip ( arg ) ;
bin = WebSocketFrame . binary ( arg ) . setFin ( arg ) ;
bin = new WebSocketFrame ( arg ) . setPayload ( arg ) . setFin ( arg ) ;
bin = new WebSocketFrame ( arg ) . setPayload ( arg ) . setFin ( arg ) ;
bin = new BinaryFrame ( arg ) . setFin ( arg ) ;
bin = new BinaryFrame ( arg ) . setPayload ( arg ) . setFin ( arg ) ;
bin = new ContinuationFrame ( arg ) . setPayload ( arg ) . setFin ( arg ) ;
bin = new ContinuationFrame ( arg ) . setPayload ( arg ) . setFin ( arg ) ;
bin = new ContinuationFrame ( arg ) . setFin ( arg ) ;
bin = new ContinuationFrame ( arg ) . setFin ( arg ) ;
fillInterested ( arg ) ;
getEndPoint ( arg ) . blockReadable ( arg ) ;
remote . sendString ( arg ) ;
BufferUtil . toString ( arg ) ;
BufferUtil . toString ( arg ) ;
boolean abortable = isBeforeCommit ( arg ) || current == State . COMMIT && contentIterator . hasNext ( arg ) ;
boolean abortable = current == State . IDLE || current == State . BEGIN || current == State . SEND || current == State . COMMIT && contentIterator . hasNext ( arg ) ;
boolean abortable = isBeforeCommit ( arg ) || <unk> ( arg ) ;
boolean actual = <unk> . <unk> ( arg ) ;
boolean allConsumed = true ;
boolean <unk> =! Boolean . getBoolean ( arg ) ;
boolean committed = commitResponse ( arg ) ;
boolean committed = commitResponse ( arg ) ;
boolean committed = sendResponse ( arg ) ;
boolean committed = sendResponse ( arg ) ;
boolean <unk> = complete && <unk> . isEmpty ( arg ) ;
boolean debug = false ;
boolean handle ;
boolean dispatch ;
boolean dispatch ;
boolean endsWithSlash = request . getRequestURI ( arg ) . endsWith ( arg ) ;
boolean endsWithSlash = ( pathInfo == null ? request . getServletPath ( arg ) : pathInfo ) . endsWith ( arg ) ;
Result result = exchange . responseComplete ( arg ) ;
Result result = exchange . responseComplete ( arg ) ;
Result result = exchange . requestComplete ( arg ) ;
boolean <unk> = request . getHeaders ( arg ) . contains ( arg ) ;
Throwable failure ;
Throwable failure ;
boolean first = lockMsg ( arg ) ;
boolean first = lockMsg ( arg ) ;
boolean handle ;
boolean hasContent = BufferUtil . hasContent ( arg ) ;
boolean httpOnly = false ;
boolean isAuthMandatory = isAuthMandatory ( arg ) ;
boolean <unk> = HttpMethod . HEAD . name ( arg ) . equalsIgnoreCase ( arg ) ;
boolean <unk> = HttpScheme . HTTPS . equals ( arg ) ;
boolean <unk> = <unk> . equals ( arg ) ;
boolean <unk> = <unk> ;
boolean <unk> = <unk> ( arg ) ;
boolean progress = true ;
boolean progress = true ;
boolean <unk> = ( arg . indexOf ( arg ) >= 0 ) || ( arg . indexOf ( arg ) >= 0 ) ;
boolean notCommitted = isBeforeCommit ( arg ) ;
boolean notCommitted = current == State . IDLE || current == State . BEGIN || current == State . SEND ;
boolean quote_path = has_path && isQuoteNeededForCookie ( arg ) ;
boolean quote_path = has_path && isQuoteNeededForCookie ( arg ) ;
QuotedStringTokenizer . quoteIfNeeded ( arg ) ;
QuotedStringTokenizer . quoteIfNeeded ( arg ) ;
boolean read_interest = _readBlocked || ( ! _dispatched && getAsyncConnection ( arg ) . isReadInterested ( arg ) ) ;
boolean read_interest = _readBlocked || ( ! _dispatched && _connection . isReadInterested ( arg ) ) ;
boolean result = true ;
boolean <unk> = false ;
boolean ignored = false ;
boolean ssl = HttpScheme . <unk> . equalsIgnoreCase ( arg ) ;
boolean ssl = HttpScheme . HTTPS . is ( arg ) ;
boolean startConnection = false ;
boolean <unk> = module . <unk> ( arg ) && ( module . <unk> ( arg ) . size ( arg ) == 0 ) ;
boolean tunnel = <unk> ( arg ) && HttpScheme . HTTPS . is ( arg ) && client . getSslContextFactory ( arg ) != null ;
boolean <unk> = _key != null && _key . isValid ( arg ) ;
boolean <unk> = isOpen ( arg ) ;
boolean <unk> =! <unk> . <unk> ( arg ) ;
buf . append ( <unk> ( <unk> ) <unk>
BufferUtil . flipToFlush ( arg ) ;
BufferUtil . flipToFlush ( arg ) ;
BufferUtil . flipToFlush ( arg ) ;
buf . compact ( arg ) . put ( arg ) . flip ( arg ) ;
buf . putLong ( arg ) ;
buf . putLong ( arg ) ;
buf = _processor . getRequest ( arg ) . getRootURL ( arg ) ;
buf = _channel . getRequest ( arg ) . getRootURL ( arg ) ;
buf = _channel . getRequest ( arg ) . getRootURL ( arg ) ;
buf [ 0 ] = ( ( byte ) <unk> ) ;
buffer . append ( arg ) . append ( arg ) . append ( arg ) ;
BufferUtil . clearToFill ( arg ) ;
BufferUtil . clearToFill ( arg ) ;
BufferUtil . clearToFill ( arg ) ;
BufferUtil . flipToFlush ( arg ) ;
BufferUtil . flipToFlush ( arg ) ;
BufferUtil . flipToFlush ( arg ) ;
BufferUtil . flipToFlush ( arg ) ;
BufferUtil . flipToFlush ( arg ) ;
<unk> . put ( arg ) ;
BufferUtil . readFrom ( arg ) ;
BufferUtil . readFrom ( arg ) ;
if ( ! buffer . isImmutable ( arg ) ) buffer . skip ( arg ) ;
if ( ! buffer . isImmutable ( arg ) ) buffer . skip ( arg ) ;
if ( ! buffer . isImmutable ( arg ) ) buffer . skip ( arg ) ;
if ( _header != null ) _buffers . <unk> ( arg ) ;
Buffer buffer = buffers . getHeader ( arg ) ;
bufferPool = new MappedByteBufferPool ( arg ) ;
<unk> ( arg ) ;
byte [ ] actual = FrameBuilder . close ( arg ) . asByteArray ( arg ) ;
byte [ ] actual = FrameBuilder . close ( arg ) . fin ( arg ) . asByteArray ( arg ) ;
byte [ ] actual = FrameBuilder . close ( arg ) . asByteArray ( arg ) ;
byte [ ] actual = FrameBuilder . ping ( arg ) . asByteArray ( arg ) ;
byte [ ] actual = FrameBuilder . ping ( arg ) . fin ( arg ) . asByteArray ( arg ) ;
byte [ ] b = StringUtil . <unk> ( arg ) ;
byte [ ] b = StringUtil . getBytes ( arg ) ;
byte [ ] buf = new byte [ 128 * 1024 ] ;
byte [ ] responseContent = response . getContent ( arg ) ;
byte [ ] responseContent = response . getContent ( arg ) ;
byte [ ] result = <unk> . doTheHixieHixieShake ( arg ) ;
byte buf [ ] = serverFrame . array ( arg ) ;
byte buf [ ] = BufferUtil . toArray ( arg ) ;
byte flags = ReplyInfo . FLAG_CLOSE ;
byte flags = ReplyInfo . FLAG_CLOSE ;
byte flags = SynInfo . FLAG_CLOSE ;
byte flags = SynInfo . FLAG_CLOSE ;
byte flags = isClose ( arg ) ? FLAG_CLOSE : 0 ;
byte flags = isClose ( arg ) ? FLAG_CLOSE : 0 ;
byte flags = isClose ( arg ) ? FLAG_CLOSE : 0 ;
byte <unk> = __rfc1421nibbles [ c ] ;
byte op = ( byte ) ( off == 0 ? opcode : <unk> . OP_CONTINUATION ) ;
byte op = ( byte ) ( off == 0 ? opcode : <unk> . OP_CONTINUATION ) ;
byte op = ( byte ) ( off == 0 ? opcode : WebSocketConnectionD11 . OP_CONTINUATION ) ;
byte op = ( byte ) ( off == 0 ? opcode : WebSocketConnectionD12 . OP_CONTINUATION ) ;
byte op = ( byte ) ( off == 0 ? opcode : WebSocketConnectionD13 . OP_CONTINUATION ) ;
byte op = ( byte ) ( off == 0 ? opcode : WebSocketConnectionRFC6455 . OP_CONTINUATION ) ;
boolean continuation = false ;
boolean continuation = false ;
byte opcode = binary ? WebSocketConnectionD11 . OP_BINARY : WebSocketConnectionD11 . OP_TEXT ;
byte opcode = binary ? WebSocketConnectionD12 . OP_BINARY : WebSocketConnectionD12 . OP_TEXT ;
byte opcode = binary ? WebSocketConnectionD13 . OP_BINARY : WebSocketConnectionD13 . OP_TEXT ;
byte opcode = binary ? WebSocketConnectionRFC6455 . OP_BINARY : WebSocketConnectionRFC6455 . OP_TEXT ;
byte opcode = frame . getOpCode ( arg ) ;
byte outbuf [ ] = new byte [ <unk> ] ;
ByteBuffer <unk> ;
bufferPool . release ( arg ) ;
bufferPool . release ( arg ) ;
byte [ ] bytes = ( ( ByteArrayOutputStream ) out ) . <unk> ( arg ) ;
c [ <unk> ++ ] = <unk> [ <unk> & <unk> ] ;
cache . <unk> ( arg ) ;
<unk> ( arg ) ;
( ( ServletContextListener ) LazyList . get ( arg ) ) . <unk> ( arg ) ;
callable . setDecoderClass ( arg ) ;
callable . setDecoderClass ( arg ) ;
callable . setDecoderClass ( arg ) ;
callable . setDecoderClass ( arg ) ;
callable . setDecoderClass ( arg ) ;
callable . setDecoderClass ( arg ) ;
callable . setDecoderClass ( arg ) ;
callable . setDecoderClass ( arg ) ;
callable . setDecoderClass ( arg ) ;
callable . setDecoderClass ( arg ) ;
callable . setDecoderClass ( arg ) ;
callable . setDecoderClass ( arg ) ;
callable . setDecoderClass ( arg ) ;
callable . setDecoderClass ( arg ) ;
callback . callback . succeeded ( arg ) ;
callback . callback . succeeded ( arg ) ;
callback . promise . failed ( arg ) ;
callback . promise . succeeded ( arg ) ;
callback . promise . succeeded ( arg ) ;
if ( callback != null ) callback . completed ( arg ) ;
promise . failed ( arg ) ;
promise . failed ( arg ) ;
callback . failed ( arg ) ;
callback . succeeded ( arg ) ;
callback . succeeded ( arg ) ;
new Thread ( arg ) . run ( arg ) ;
callback . <unk> ( arg ) ;
( ( LifeCycleCallbackCollection ) context . getAttribute ( arg ) ) . add ( arg ) ;
( ( LifeCycleCallbackCollection ) context . getAttribute ( arg ) ) . add ( arg ) ;
( ( LifeCycleCallbackCollection ) context . getAttribute ( arg ) ) . add ( arg ) ;
( ( LifeCycleCallbackCollection ) context . getAttribute ( arg ) ) . add ( arg ) ;
( ( LifeCycleCallbackCollection ) context . getAttribute ( arg ) ) . add ( arg ) ;
( ( LifeCycleCallbackCollection ) context . getAttribute ( arg ) ) . add ( arg ) ;
_callbacks . callPostConstructCallback ( arg ) ;
_callbacks . callPreDestroyCallback ( arg ) ;
return false ;
if ( connectors . length > 0 ) {
cec = new <unk> ( arg ) ;
cf . setSessionCachingEnabled ( arg ) ;
cf . setSessionCachingEnabled ( arg ) ;
cf . setKeyStorePath ( arg ) ;
cf . setKeyStorePath ( arg ) ;
cf . setKeyStorePath ( arg ) ;
cf . setKeyStorePath ( arg ) ;
cf . setKeyStorePath ( arg ) ;
cf . setKeyStorePath ( arg ) ;
cf . setKeyStorePath ( arg ) ;
cf . setKeyStorePath ( arg ) ;
cf . setKeyStorePath ( arg ) ;
cf . setKeyStorePath ( arg ) ;
cf . setKeyStorePath ( arg ) ;
cf . setKeyStorePath ( arg ) ;
cf . setKeyStorePath ( arg ) ;
cf . setKeyStorePath ( arg ) ;
cf . setKeyStorePath ( arg ) ;
cf . setKeyStorePath ( arg ) ;
cf . setKeyStorePath ( arg ) ;
cf . setKeyStorePath ( arg ) ;
cf . setKeyStorePath ( arg ) ;
cf . setKeyStorePath ( arg ) ;
cf . setTrustStorePath ( arg ) ;
cf . setTrustStorePath ( arg ) ;
if ( ch != null ) ch . close ( arg ) ;
channel . requestStart ( arg ) ;
if ( channel != null ) channel . close ( arg ) ;
channel . content ( arg ) ;
key = channel . register ( arg ) ;
channel . socket ( arg ) . connect ( arg ) ;
configure ( arg ) ;
char [ ] big = _bigIndex == null || t >= _bigIndex . length ? null : _bigIndex [ t ] ;
char [ ] big = _bigIndex == null ? null : _bigIndex [ t ] ;
char [ ] big = _bigIndex == null ? null : _bigIndex [ t ] ;
char [ ] big = _bigIndex == null ? null : _bigIndex [ t ] ;
char [ ] big = _bigIndex == null ? null : _bigIndex [ t ] ;
char [ ] big = _bigIndex == null ? null : _bigIndex [ t ] ;
char [ ] big = _bigIndex == null ? null : _bigIndex [ t ] ;
closeIfAllContentWritten ( arg ) ;
checkKeyStore ( arg ) ;
checkKeyStore ( arg ) ;
if ( <unk> > 0 ) <unk> ( arg ) ;
checkNotStarted ( arg ) ;
checkNotStarted ( arg ) ;
checkNotStarted ( arg ) ;
checkNotStarted ( arg ) ;
checkNotStarted ( arg ) ;
checkNotStarted ( arg ) ;
checkNotStarted ( arg ) ;
checkNotStarted ( arg ) ;
checkNotStarted ( arg ) ;
checkNotStarted ( arg ) ;
checkNotStarted ( arg ) ;
checkNotStarted ( arg ) ;
checkNotStarted ( arg ) ;
checkNotStarted ( arg ) ;
checkNotStarted ( arg ) ;
checkNotStarted ( arg ) ;
checkNotStarted ( arg ) ;
checkNotStarted ( arg ) ;
checkNotStarted ( arg ) ;
checkNotStarted ( arg ) ;
checkNotStarted ( arg ) ;
checkNotStarted ( arg ) ;
checkNotStarted ( arg ) ;
checkNotStarted ( arg ) ;
checkNotStarted ( arg ) ;
checkNotStarted ( arg ) ;
checkNotStarted ( arg ) ;
checkNotStarted ( arg ) ;
checkNotStarted ( arg ) ;
checkNotStarted ( arg ) ;
checkNotStarted ( arg ) ;
checkNotStarted ( arg ) ;
child = _beans . get ( arg ) ;
chunk = bufferPool . acquire ( arg ) ;
_classes = dir ;
cleanClose = true ;
if ( ! isImmutable ( arg ) ) clear ( arg ) ;
if ( ! isImmutable ( arg ) ) clear ( arg ) ;
if ( ! isImmutable ( arg ) ) clear ( arg ) ;
parser . <unk> ( arg ) ;
cliSock . getSession ( arg ) . getRemote ( arg ) . sendStringByFuture ( arg ) ;
cliSock . getSession ( arg ) . getRemote ( arg ) . sendString ( arg ) ;
client . newRequest ( arg ) . followRedirects ( arg ) . send ( arg ) . get ( arg ) . status ( arg ) ;
client . disconnect ( arg ) ;
client . disconnect ( arg ) ;
client . disconnect ( arg ) ;
client . disconnect ( arg ) ;
client . disconnect ( arg ) ;
fuzzer . close ( arg ) ;
fuzzer . close ( arg ) ;
fuzzer . close ( arg ) ;
connectPromise . failed ( arg ) ;
connectPromise . failed ( arg ) ;
connectPromise . failed ( arg ) ;
session . getConnection ( arg ) . close ( arg ) ;
client . getCookieStore ( arg ) . add ( URI . create ( http:
out . flush ( arg ) ;
client . getPolicy ( arg ) . setIdleTimeout ( arg ) ;
client . getPolicy ( arg ) . setIdleTimeout ( arg ) ;
client . getPolicy ( arg ) . setIdleTimeout ( arg ) ;
client . getPolicy ( arg ) . setIdleTimeout ( arg ) ;
client . getPolicy ( arg ) . setIdleTimeout ( arg ) ;
client . getProxyConfiguration ( arg ) . getExcludedOrigins ( arg ) . add ( arg ) ;
client . getProxyConfiguration ( arg ) . getProxies ( arg ) . get ( arg ) . getExcludedOrigins ( arg ) . add ( arg ) ;
client . getProxyConfiguration ( arg ) . getProxies ( arg ) . get ( arg ) . <unk> ( arg ) . add ( arg ) ;
client . goAway ( arg ) ;
client . goAway ( arg ) ;
client . goAway ( arg ) ;
client . goAway ( arg ) ;
client . goAway ( arg ) ;
<unk> ( arg ) ;
client . newRequest ( arg ) . followRedirects ( arg ) . send ( arg ) . get ( arg ) . getStatus ( arg ) ;
client . newRequest ( arg ) . scheme ( arg ) . method ( arg ) . path ( arg ) . send ( arg ) . get ( arg ) ;
client . newRequest ( arg ) . scheme ( arg ) . path ( arg ) . send ( arg ) . get ( arg ) ;
client . newRequest ( arg ) . scheme ( arg ) . idleTimeout ( arg ) . timeout ( arg ) . send ( arg ) ;
client . newRequest ( arg ) . scheme ( arg ) . method ( arg ) . path ( arg ) . timeout ( arg ) . send ( arg ) ;
client . newRequest ( arg ) . scheme ( arg ) . path ( arg ) . timeout ( arg ) . send ( arg ) ;
client . newRequest ( arg ) . scheme ( arg ) . path ( arg ) . timeout ( arg ) . send ( arg ) ;
client . newRequest ( arg ) . scheme ( arg ) . timeout ( arg ) . send ( arg ) ;
client . newRequest ( arg ) . timeout ( arg ) . send ( arg ) ;
client . newRequest ( arg ) . timeout ( arg ) . send ( arg ) ;
client . ping ( arg ) ;
if ( listener == null ) client . removeConversation ( arg ) ;
_client . send ( arg ) ;
client . setMaxConnectionsPerDestination ( arg ) ;
client . setMaxConnectionsPerDestination ( arg ) ;
client . setMaxConnectionsPerDestination ( arg ) ;
client . setMaxConnectionsPerDestination ( arg ) ;
client . setIdleTimeout ( arg ) ;
client . getUpgradeRequest ( arg ) . <unk> ( arg ) ;
client . getProxyConfiguration ( arg ) . getProxies ( arg ) . add ( arg ) ;
client . getProxyConfiguration ( arg ) . getProxies ( arg ) . add ( arg ) ;
connectPromise . <unk> ( arg ) ;
clientFactory = <unk> ( arg ) ;
<unk> . push ( arg ) ;
<unk> . onOpen ( arg ) ;
<unk> . clear ( arg ) ;
clone . autoFragment = this . autoFragment ;
clone . idleTimeout = this . idleTimeout ;
FS . close ( arg ) ;
FS . close ( arg ) ;
FS . close ( arg ) ;
FS . close ( arg ) ;
FS . close ( arg ) ;
FS . close ( arg ) ;
<unk> = <unk> ;
closed_out = _closedOut ;
closeAllConnections ( arg ) ;
closeAllConnections ( arg ) ;
closeOutput ( arg ) ;
close = _closedOut ;
cmd . addRawArg ( arg ) ;
cmd . addRawArg ( arg ) ;
cmd . addRawArg ( arg ) ;
cmd . append ( arg ) . append ( arg ) ;
cmd . append ( arg ) . append ( arg ) ;
cmd . append ( arg ) . append ( arg ) ;
cmd . append ( arg ) . append ( arg ) ;
cmd . append ( arg ) . append ( arg ) ;
cmd . addArg ( arg ) ;
cmd . addArg ( arg ) ;
cmd . append ( arg ) . append ( arg ) . append ( arg ) ;
code = ( ( 0xff & buf [ 2 ] ) * 0x100 ) + ( 0xff & buf [ 3 ] ) ;
code = ( 0xff & buffer . array ( arg ) [ buffer . getIndex ( arg ) ] ) * 0x100 + ( 0xff & buffer . array ( arg ) [ buffer . getIndex ( arg ) + 1 ] ) ;
code = buffer . array ( arg ) [ buffer . getIndex ( arg ) ] * 0x100 + buffer . array ( arg ) [ buffer . getIndex ( arg ) + 1 ] ;
comment = comment . replace ( arg ) . trim ( arg ) ;
comment = comment . replace ( arg ) . trim ( arg ) ;
commitResponse ( arg ) ;
commitResponse ( arg ) ;
commitResponse ( arg ) ;
_response . sendError ( arg ) ;
_response . sendError ( arg ) ;
_response . sendError ( arg ) ;
sendResponse ( arg ) ;
closeOutput ( arg ) ;
closeOutput ( arg ) ;
_expired = false ;
complete = fc == null || ( fc ) . <unk> ( arg ) ;
_state = State . REDISPATCH ;
plusProcessor . bindEnvEntry ( arg ) ;
plusProcessor . bindEnvEntry ( arg ) ;
plusProcessor . bindEnvEntry ( arg ) ;
plusProcessor . bindEnvEntry ( arg ) ;
plusProcessor . bindEnvEntry ( arg ) ;
plusProcessor . bindEnvEntry ( arg ) ;
plusProcessor . bindEnvEntry ( arg ) ;
_log . info ( arg ) ;
configuration . getProperties ( arg ) . putAll ( arg ) ;
configuration . getProperties ( arg ) . putAll ( arg ) ;
configuration . getProperties ( arg ) . putAll ( arg ) ;
configure ( arg ) ;
<unk> . configureContext ( arg ) ;
<unk> ( arg ) ;
session . getRemote ( arg ) . <unk> ( arg ) ;
session . getRemote ( arg ) . sendStringByFuture ( arg ) ;
<unk> ( arg ) ;
connectPromise . succeeded ( arg ) ;
connection . getIOState ( arg ) . assertOutputOpen ( arg ) ;
connection . getIOState ( arg ) . assertOutputOpen ( arg ) ;
session . close ( arg ) ;
session . close ( arg ) ;
connection . onClose ( arg ) ;
statement . executeUpdate ( arg ) ;
statement . executeUpdate ( arg ) ;
fillInterested ( arg ) ;
connection . sendMessage ( arg ) ;
connection . getAppEndPoint ( arg ) . setAsyncConnection ( arg ) ;
connection . close ( arg ) ;
getHttpDestination ( arg ) . getHttpClient ( arg ) . <unk> ( arg ) . put ( arg ) ;
connection . getParser ( arg ) . setListener ( arg ) ;
connection . setIncoming ( arg ) ;
connection . setIncoming ( arg ) ;
connection . setIncoming ( arg ) ;
connection . getParser ( arg ) . setIncomingFramesHandler ( arg ) ;
connection . getSslEndPoint ( arg ) . setAsyncConnection ( arg ) ;
connectionOpened ( arg ) ;
session . output ( arg ) ;
httpConnection . send ( arg ) ;
httpConnection . send ( arg ) ;
connection . write ( arg ) ;
connection . write ( arg ) ;
connection . write ( arg ) ;
connection . getAppEndPoint ( arg ) . setAsyncConnection ( arg ) ;
connection . getSslEndPoint ( arg ) . setConnection ( arg ) ;
connection . getSslEndPoint ( arg ) . setConnection ( arg ) ;
connection . getSslEndPoint ( arg ) . setConnection ( arg ) ;
connection . getSslEndPoint ( arg ) . setConnection ( arg ) ;
connection . associate ( arg ) ;
<unk> ( arg ) ;
connection . setIdleTimeout ( arg ) ;
session . getRemote ( arg ) . sendStringByFuture ( arg ) ;
session . getRemote ( arg ) . sendStringByFuture ( arg ) ;
connection = ( HttpConnectionOverHTTP ) connectionPool . getIdleConnections ( arg ) . peek ( arg ) ;
connection = destination . getConnectionPool ( arg ) . getIdleConnections ( arg ) . poll ( arg ) ;
connection = destination . getConnectionPool ( arg ) . getIdleConnections ( arg ) . poll ( arg ) ;
connection = destination . <unk> ( arg ) . getIdleConnections ( arg ) . poll ( arg ) ;
connection = destination . getIdleConnections ( arg ) . poll ( arg ) ;
connection = destination . getIdleConnections ( arg ) . poll ( arg ) ;
connection = new <unk> ( arg ) ;
connection = new <unk> ( arg ) ;
connection = new <unk> ( arg ) ;
connection = new <unk> ( arg ) ;
connection1 = ( HttpConnectionOverHTTP ) destination . getConnectionPool ( arg ) . getIdleConnections ( arg ) . peek ( arg ) ;
connection1 = destination . getConnectionPool ( arg ) . getIdleConnections ( arg ) . peek ( arg ) ;
connection1 = destination . getConnectionPool ( arg ) . getIdleConnections ( arg ) . peek ( arg ) ;
connection1 = destination . getConnectionPool ( arg ) . getIdleConnections ( arg ) . poll ( arg ) ;
connection1 = destination . getIdleConnections ( arg ) . peek ( arg ) ;
connection1 = destination . getIdleConnections ( arg ) . peek ( arg ) ;
connection1 = destination . getIdleConnections ( arg ) . poll ( arg ) ;
SelectChannelConnector . this . connectionClosed ( arg ) ;
SelectChannelConnector . this . connectionOpened ( arg ) ;
connectionState = ConnectionState . CLOSED ;
ioState . setState ( arg ) ;
if ( getConnection ( arg ) != null && connection != getConnection ( arg ) ) connectionUpgraded ( arg ) ;
connector . <unk> ( arg ) ;
connector . getConnectionFactory ( arg ) . getHttpConfig ( arg ) . setConfidentialPort ( arg ) ;
connector . getConnectionFactory ( arg ) . getHttpConfig ( arg ) . <unk> ( arg ) ;
String response = connector . getResponses ( arg ) ;
connector . addConnectionFactory ( arg ) ;
connector . addConnectionFactory ( arg ) ;
connector . <unk> ( arg ) ;
connector . getHttpConfig ( arg ) . setConfidentialPort ( arg ) ;
connector . setDefaultConnectionFactory ( arg ) ;
connector . setDefaultConnectionFactory ( arg ) ;
connector . setIdleTimeout ( arg ) ;
connector . setIdleTimeout ( arg ) ;
connector . setIdleTimeout ( arg ) ;
connector . setIdleTimeout ( arg ) ;
connector . setIdleTimeout ( arg ) ;
connector . setIdleTimeout ( arg ) ;
connector . setIdleTimeout ( arg ) ;
connector = new SelectChannelConnector ( arg ) ;
connector = new ServerConnector ( arg ) ;
connector = new ServerConnector ( arg ) ;
connector = new LocalHttpConnector ( arg ) ;
connector = new LocalHttpConnector ( arg ) ;
connector = new LocalHttpConnector ( arg ) ;
connector = new LocalHttpConnector ( arg ) ;
connector = new LocalHttpConnector ( arg ) ;
connector = new LocalConnector ( arg ) ;
connector = new LocalConnector ( arg ) ;
connector = new LocalConnector ( arg ) ;
connector = new ServerConnector ( arg ) ;
connector = new ServerConnector ( arg ) ;
connector = new ServerConnector ( arg ) ;
connector = new ServerConnector ( arg ) ;
connector = new ServerConnector ( arg ) ;
connector = new ServerConnector ( arg ) ;
connector = new SelectChannelConnector ( arg ) ;
connector = new SelectChannelConnector ( arg ) ;
( ( HttpServerConnectionFactory ) connector0 . getDefaultConnectionFactory ( arg ) ) . getHttpConfiguration ( arg ) . setConfidentialPort ( arg ) ;
connector0 . setIdleTimeout ( arg ) ;
( ( HttpServerConnectionFactory ) connector0 . getDefaultConnectionFactory ( arg ) ) . getHttpConfiguration ( arg ) . setConfidentialPort ( arg ) ;
connector1 . <unk> ( arg ) ;
connectors [ i ] . start ( arg ) ;
( ( AbstractConnector ) connectors [ <unk> ] ) . addBean ( arg ) ;
container . <unk> ( arg ) ;
_containerIncludeJarPattern = pattern ;
context . getMetaData ( arg ) . <unk> ( arg ) ;
content = _cache . lookup ( arg ) ;
content = _cache . lookup ( arg ) ;
content = _channel . <unk> ( arg ) ? <unk> . getDirectBuffer ( arg ) : null ;
content = new HttpContent . ResourceAsHttpContent ( arg ) ;
<unk> . await ( arg ) ;
context . addBean ( arg ) ;
context . addServlet ( new ServletHolder ( arg ) ,
frameBytes . complete ( arg ) ;
context . getMetaData ( arg ) . addContainerResource ( arg ) ;
context . getMetaData ( arg ) . addContainerResource ( arg ) ;
context . getMetaData ( arg ) . addContainerResource ( arg ) ;
context . <unk> ( arg ) ;
context . setDefaultsDescriptor ( arg ) ;
context . <unk> ( arg ) ;
if ( welcome != null && welcome . trim ( arg ) . length ( arg ) > 0 ) context . <unk> ( arg ) ;
_provider . addContext ( arg ) ;
_provider . addContext ( arg ) ;
_contextAttributes . removeAttribute ( arg ) ;
_contextAttributes . setAttribute ( arg ) ;
context_provider . setMonitoredDirName ( arg ) ;
async . complete ( arg ) ;
async . dispatch ( arg ) ;
asyncHolder . get ( arg ) . complete ( arg ) ;
asyncHolder . get ( arg ) . dispatch ( arg ) ;
<unk> ( arg ) ;
close ( arg ) ;
close ( arg ) ;
if ( controller != null ) controller . write ( arg ) ;
conversation . exchanges ( arg ) . offer ( arg ) ;
conversation . exchanges ( arg ) . offer ( arg ) ;
if ( exchangeComplete ) notifyComplete ( arg ) ;
connection . getEndPoint ( arg ) . shutdownOutput ( arg ) ;
conversation . getExchanges ( arg ) . offer ( arg ) ;
conversation . getExchanges ( arg ) . offer ( arg ) ;
exchange . get ( arg ) . response ( arg ) . status ( arg ) . reason ( arg ) ;
exchange . <unk> ( arg ) ;
convertor = _convertors . get ( arg ) ;
if ( cookie != null ) cookie . <unk> ( arg ) ;
if ( cookie != null ) cookie . <unk> ( arg ) ;
<unk> = <unk> ( arg ) ;
<unk> = new <unk> . <unk> ( arg ) ;
cookies . add ( arg ) ;
cookies . add ( arg ) ;
return <unk> . get ( arg ) ;
BufferUtil . put ( arg ) ;
IO . copy ( arg ) ;
int <unk> = ( int ) 10 + count . incrementAndGet ( arg ) % <unk> ;
count = count == null ? 0 : 1 + count ;
count . incrementAndGet ( arg ) ;
count . incrementAndGet ( arg ) ;
count . incrementAndGet ( arg ) ;
System . out . println ( arg ) ;
<unk> = 0 ;
if ( server . getStopAtShutdown ( arg ) ) <unk> ( arg ) ;
ctx = ( Context ) __contextMap . get ( arg ) ;
ctx = ( Context ) __contextMap . get ( arg ) ;
cursor = 8 ;
_transport . customize ( arg ) ;
engine . <unk> ( arg ) ;
session . <unk> ( arg ) ;
data = ByteBuffer . wrap ( arg ) ;
session = <unk> ( arg ) ;
session = <unk> ;
dataInfo . asByteBuffer ( arg ) ;
dataInfo . asByteBuffer ( arg ) ;
dataInfo . asByteBuffer ( arg ) ;
dataInfo . asByteBuffer ( arg ) ;
dataInfo . asByteBuffer ( arg ) ;
dataInfo . asByteBuffer ( arg ) ;
dataInfo . getContent ( arg ) ;
dataInfo . asByteBuffer ( arg ) ;
dataInfo . asByteBuffer ( arg ) ;
LOG . debug ( arg ) ;
socket . shutdownOutput ( arg ) ;
state = State . <unk> ;
size = decrementAndGetSize ( arg ) ;
if ( delegate instanceof Response . BeginListener ) ( arg ) . onBegin ( arg ) ;
if ( delegate instanceof Response . <unk> ) ( arg ) . <unk> ( arg ) ;
if ( delegate instanceof Response . FailureListener ) ( arg ) . onFailure ( arg ) ;
if ( delegate instanceof Response . HeadersListener ) ( arg ) . onHeaders ( arg ) ;
if ( delegate instanceof Response . SuccessListener ) ( arg ) . onSuccess ( arg ) ;
<unk> = e . getValue ( arg ) . <unk> ( arg ) ;
( ( WebDescriptor ) descriptor ) . addClassName ( arg ) ;
( ( WebDescriptor ) descriptor ) . addClassName ( arg ) ;
( ( WebDescriptor ) descriptor ) . addClassName ( arg ) ;
( ( WebDescriptor ) descriptor ) . <unk> ( arg ) ;
destination . getConnectionPool ( arg ) . getActiveConnections ( arg ) . peek ( arg ) . close ( arg ) ;
destination = <unk> . <unk> ( arg ) ;
if ( dir != null ) dir = dir . getCanonicalFile ( arg ) ;
direct = false ;
close ( arg ) ;
<unk> ( arg ) ;
dispatch =! _expired ;
dispatch =! _expired ;
handle =! _expired ;
select ( arg ) ;
_selectSet . submit ( arg ) ;
Assert . assertTrue ( arg ) ;
done . add ( arg ) ;
completeBuf . put ( arg ) ;
<unk> ( arg ) ;
files = new ArrayList <> ( arg ) ;
abort ( arg ) ;
abort ( arg ) ;
driver . getPolicy ( arg ) . assertValidMessageSize ( arg ) ;
driver . getPolicy ( arg ) . assertValidBinaryMessageSize ( arg ) ;
driver . getPolicy ( arg ) . assertValidMessageSize ( arg ) ;
driver . incoming ( arg ) ;
driver . setSession ( arg ) ;
driver . setSession ( arg ) ;
driver . setSession ( arg ) ;
driver . setSession ( arg ) ;
driver . setSession ( arg ) ;
driver . <unk> ( arg ) ;
<unk> = ( myDS == null ? <span class="fail">FAIL</span> : <span <unk> myDS . toString ( arg ) +</span> ) ;
<unk> . add ( arg ) ;
LOG . warn ( arg ) ;
LOG . warn ( arg ) ;
LOG . warn ( arg ) ;
LOG . warn ( arg ) ;
LOG . warn ( arg ) ;
LOG . warn ( arg ) ;
LOG . warn ( arg ) ;
LOG . warn ( arg ) ;
LOG . warn ( arg ) ;
LOG . warn ( arg ) ;
LOG . warn ( arg ) ;
try ( StacklessLogging scope = new StacklessLogging ( arg ) ) {
try ( StacklessLogging scope = new StacklessLogging ( arg ) ) {
<unk> = enabledCSList . toArray ( arg ) ;
_encoding = <unk> ;
throw new RuntimeIOException ( arg ) ;
connectionClosed ( arg ) ;
closeNoExceptions ( arg ) ;
closeNoExceptions ( arg ) ;
endPoint . setConnection ( arg ) ;
endPoint . setConnection ( arg ) ;
endPoint . setAsyncConnection ( arg ) ;
endPoint . setAsyncConnection ( arg ) ;
endPoint . setAsyncConnection ( arg ) ;
endPoint . setAsyncConnection ( arg ) ;
endPoint . setAsyncConnection ( arg ) ;
endPoint . setAsyncConnection ( arg ) ;
endPoint . setAsyncConnection ( arg ) ;
endPoint . setAsyncConnection ( arg ) ;
endPoint . setAsyncConnection ( arg ) ;
endPoint . setAsyncConnection ( arg ) ;
_endPoint . setIn ( arg ) ;
endPoint . <unk> ( arg ) ;
endPoint . setAsyncConnection ( arg ) ;
endp . checkForIdleOrReadWriteTimeout ( arg ) ;
endp . fillInterested ( arg ) ;
endp . fillInterested ( arg ) ;
endp . fillInterested ( arg ) ;
endp . fillInterested ( arg ) ;
endp . fillInterested ( arg ) ;
endp . fillInterested ( arg ) ;
endp . fillInterested ( arg ) ;
request . setAttribute ( arg ) ;
endp . shutdownOutput ( arg ) ;
endp . <unk> ( arg ) ;
endp . setIdleTimeout ( arg ) ;
endp . setAsyncConnection ( arg ) ;
super . close ( arg ) ;
exchanger . exchange ( arg ) ;
exchanger . exchange ( arg ) ;
exchanger . exchange ( arg ) ;
endpoint . getConnection ( arg ) . onClose ( arg ) ;
( ( SelectChannelEndPoint ) endpoint ) . onSelected ( arg ) ;
endpoint . selected ( arg ) ;
endpoint . selected ( arg ) ;
endpoint . selected ( arg ) ;
endpoint . onSelected ( arg ) ;
engine = _sslContextFactory . getSslContext ( arg ) . <unk> ( arg ) ;
engine = _sslContextFactory . newSslEngine ( arg ) ;
engine = _sslContextFactory . newSslEngine ( arg ) ;
close ( arg ) ;
close ( arg ) ;
enqueueFirst ( arg ) ;
enqueueFirst ( arg ) ;
<unk> ( arg ) ;
append ( arg ) ;
append ( arg ) ;
entries = new HashSet <> ( arg ) ;
entries = new HashSet <> ( arg ) ;
entries = new HashSet <> ( arg ) ;
entry . <unk> ( arg ) ;
callbacks . add ( arg ) ;
entry = suffix_map . get ( arg ) ;
entry = suffix_map . get ( arg ) ;
<unk> = ( maxAmount == null ? <unk> : <span <unk> maxAmount . toString ( arg ) +</span> ) ;
<unk> = ( minAmount == null ? <span class="fail">FAIL</span> : <span <unk> minAmount . toString ( arg ) +</span> ) ;
<unk> = ( minAmount == null ? <span class="fail">FAIL</span> : <span <unk> <unk> . toString ( arg ) +</span> ) ;
_eof = true ;
_eof = true ;
AsyncEndPoint ep = scep ;
FutureCallback . rethrow ( arg ) ;
FutureCallback . rethrow ( arg ) ;
FutureCallback . rethrow ( arg ) ;
async_exception = e ;
async_exception = e ;
<unk> = _parser . parseNext ( arg ) ;
progress = true ;
progress = true ;
progress = true ;
progress = true ;
events . callBinary ( arg ) ;
events . callBinary ( arg ) ;
events . <unk> ( arg ) ;
events . <unk> ( arg ) ;
events . <unk> ( arg ) ;
events . <unk> ( arg ) ;
ex . setURL ( _scheme + :
<unk> . set ( arg ) ;
exchange . request ( arg ) . abort ( arg ) ;
connection . receive ( arg ) ;
connection . receive ( arg ) ;
connection . receive ( arg ) ;
connection . receive ( arg ) ;
connection . receive ( arg ) ;
connection . receive ( arg ) ;
connection . receive ( arg ) ;
connection . receive ( arg ) ;
connection . receive ( arg ) ;
boolean <unk> = exchange . requestComplete ( arg ) ;
exchange . requestComplete ( arg ) ;
exchange . requestComplete ( arg ) ;
exchange . getResponse ( arg ) . getHeaders ( arg ) . add ( arg ) ;
exchange . response ( arg ) . headers ( arg ) . add ( arg ) ;
exchange . setRequestURI ( arg ) ;
exchange . setRequestURI ( arg ) ;
exchange . setRequestURI ( arg ) ;
exchange . setRequestURI ( arg ) ;
exchange . setRequestURI ( arg ) ;
exchange . setRequestURI ( arg ) ;
exchange . setRequestURI ( arg ) ;
exchange . setRequestURI ( arg ) ;
exchange . setRequestURI ( arg ) ;
exchange . setRequestURI ( arg ) ;
exchange . setRequestURI ( arg ) ;
exchange . setRequestURI ( arg ) ;
exchange . setRequestURI ( arg ) ;
exchange . setRequestURI ( arg ) ;
exchange . setRequestURI ( arg ) ;
exchange . setRequestURI ( arg ) ;
exchange . setRequestURI ( arg ) ;
exchange . terminateResponse ( arg ) ;
exchange . terminateResponse ( arg ) ;
exchange . terminateResponse ( arg ) ;
exchanges . offer ( arg ) ;
_classpath . <unk> ( arg ) ;
BufferUtil . flipToFlush ( arg ) ;
Classpath expected = new Classpath ( arg ) ;
<unk> . countDown ( arg ) ;
extensionsRequested . add ( arg ) ;
extensionsRequested . add ( arg ) ;
IO . delete ( arg ) ;
if ( ! f . <unk> ( arg ) ) System . out . println ( arg ) ;
setClientMask ( arg ) ;
setClientMask ( arg ) ;
f = stuff . getFile ( arg ) ;
f = dc . formatNow ( arg ) ;
f0 . complete ( arg ) ;
f1 . complete ( arg ) ;
_versionOrReason = null ;
_versionOrReason = null ;
<unk> = reason == null ? null : reason . toString ( arg ) ;
<unk> . add ( arg ) ;
factory . selector . register ( arg ) ;
connection . onOpen ( arg ) ;
factory . selector . connect ( arg ) ;
factory . selector . connect ( arg ) ;
client . stop ( arg ) ;
Assert . fail ( arg ) ;
Assert . fail ( arg ) ;
Assert . fail ( arg ) ;
Assert . fail ( arg ) ;
onFail ( arg ) ;
Assert . assertFalse ( arg ) ;
Assert . assertFalse ( arg ) ;
Assert . assertFalse ( arg ) ;
exchange . failed ( arg ) ;
<unk> ( arg ) ;
Throwable failure = this . failure ;
Throwable failure = this . failure ;
Assert . assertTrue ( arg ) ;
fcb . succeeded ( arg ) ;
fcb . succeeded ( arg ) ;
fcb . succeeded ( arg ) ;
_fields . remove ( arg ) ;
field . putTo ( arg ) ;
field . putTo ( arg ) ;
field . putTo ( arg ) ;
field . putTo ( arg ) ;
field . putTo ( arg ) ;
putTo ( arg ) ;
putTo ( arg ) ;
putTo ( arg ) ;
return new HttpField ( arg ) ;
p . delete ( arg ) ;
mp . getFile ( arg ) . deleteOnExit ( arg ) ;
files = new ArrayList <> ( arg ) ;
return _endp . fill ( arg ) ;
int filled = endPoint . fill ( arg ) ;
filter . addFilter ( arg ) ;
fin = true ;
scanList = new ArrayList < File > ( arg ) ;
final ArrayList < Object > dump = new ArrayList <> ( arg ) ;
final ArrayList < Cookie > cookies = new ArrayList < Cookie > ( arg ) ;
final ArrayList < String > results = new ArrayList < String > ( arg ) ;
continuation . suspend ( arg ) ;
final AsyncContinuation async = connection . getRequest ( arg ) . getAsyncContinuation ( arg ) ;
final AsyncEndPoint sslEndPoint = sslConnection . getDecryptedEndPoint ( arg ) ;
final AsyncContextEvent event = _event ;
AsyncWebSocketConnection connection = new AsyncWebSocketConnection ( arg ) ;
final AtomicInteger totalLength = new AtomicInteger ( arg ) ;
final AtomicInteger totalLength = new AtomicInteger ( arg ) ;
final AtomicReference < CountDownLatch > requests = new AtomicReference <> ( arg ) ;
final AtomicReference < CountDownLatch > requests = new AtomicReference <> ( arg ) ;
final AtomicReference < AsyncContext > asyncHolder = new AtomicReference <> ( arg ) ;
final AtomicReference < AsyncContext > asyncHolder = new AtomicReference <> ( arg ) ;
final AtomicReference < AsyncContext > asyncHolder = new AtomicReference <> ( arg ) ;
final AtomicReference < GoAwayReceivedInfo > goAwayRef = new AtomicReference <> ( arg ) ;
final AtomicReference < GoAwayReceivedInfo > ref = new AtomicReference <> ( arg ) ;
final AtomicReference < GoAwayResultInfo > goAwayRef = new AtomicReference <> ( arg ) ;
final AtomicReference < GoAwayResultInfo > ref = new AtomicReference <> ( arg ) ;
final AtomicReference < PingResultInfo > ref = new AtomicReference <> ( arg ) ;
final AtomicReference < Session > _reference = new AtomicReference < Session > ( arg ) ;
final AtomicReference < Throwable > exception = new AtomicReference <> ( arg ) ;
final BlockingArrayQueue < String > queue = new BlockingArrayQueue <> ( arg ) ;
final BlockingQueue < Connection > activeConnections = destination . getActiveConnections ( arg ) ;
final BlockingQueue < Connection > activeConnections = destination . getActiveConnections ( arg ) ;
final BlockingQueue < Connection > activeConnections = destination . getActiveConnections ( arg ) ;
final BlockingQueue < Connection > activeConnections = destination . getActiveConnections ( arg ) ;
final BlockingQueue < Connection > activeConnections = connectionPool . getActiveConnections ( arg ) ;
final BlockingQueue < Connection > activeConnections = connectionPool . getActiveConnections ( arg ) ;
final BlockingQueue < Connection > activeConnections = connectionPool . getActiveConnections ( arg ) ;
final BlockingQueue < Connection > activeConnections = connectionPool . getActiveConnections ( arg ) ;
final BlockingQueue < Connection > activeConnections = connectionPool . getActiveConnections ( arg ) ;
final BlockingQueue < Connection > activeConnections = connectionPool . getActiveConnections ( arg ) ;
final BlockingQueue < Connection > activeConnections = connectionPool . getActiveConnections ( arg ) ;
final BlockingQueue < Connection > activeConnections = connectionPool . getActiveConnections ( arg ) ;
final BlockingQueue < Connection > idleConnections = destination . getIdleConnections ( arg ) ;
final BlockingQueue < Connection > idleConnections = destination . getIdleConnections ( arg ) ;
final BlockingQueue < Connection > idleConnections = destination . getIdleConnections ( arg ) ;
final BlockingQueue < Connection > idleConnections = destination . getIdleConnections ( arg ) ;
final ByteBufferPool bufferPool = new MappedByteBufferPool ( arg ) ;
final AsyncConnection next = ( AsyncConnection ) _connection . handle ( arg ) ;
final CountDownLatch committed = new CountDownLatch ( arg ) ;
final CountDownLatch beginLatch = new CountDownLatch ( arg ) ;
final CountDownLatch latch1 = new CountDownLatch ( arg ) ;
final CountDownLatch failureLatch = new CountDownLatch ( arg ) ;
final CountDownLatch pingReceived = new CountDownLatch ( arg ) ;
final CountDownLatch pingReceived = new CountDownLatch ( arg ) ;
final DispatchingIOFuture f0 = future ;
final DispatchingIOFuture f0 = future ;
final DispatchingIOFuture f1 = future ;
final DispatchingIOFuture f1 = future ;
DispatchedIOFuture future = new DispatchedIOFuture ( arg ) ;
DispatchedIOFuture future = new DispatchedIOFuture ( arg ) ;
final Exchanger < EndPoint > exchanger = new Exchanger <> ( arg ) ;
final Exchanger < EndPoint > exchanger = new Exchanger <> ( arg ) ;
final Exchanger < EndPoint > exchanger = new Exchanger <> ( arg ) ;
final Fields <unk> = new Fields ( arg ) ;
final StreamFrameListener listener = this . listener ;
final StreamFrameListener listener = this . listener ;
final StreamFrameListener listener = this . listener ;
final FutureCallback < ContentResponse > callback = new FutureCallback <> ( arg ) ;
final FutureCallback < ContentResponse > result = new FutureCallback <> ( arg ) ;
final FutureCallback callback = new FutureCallback ( arg ) ;
final FutureCallback fcb = new FutureCallback ( arg ) ;
final FutureCallback fcb = new FutureCallback ( arg ) ;
final FutureCallback fcb = new FutureCallback ( arg ) ;
final GzipResponseWrapper wrappedResponse = newGzipResponseWrapper ( arg ) ;
final GzipResponseWrapper wrappedResponse = newGzipResponseWrapper ( arg ) ;
CompressedResponseWrapper wrappedResponse = <unk> ( arg ) ;
final CompressedResponseWrapper wrappedResponse = newGzipResponseWrapper ( arg ) ;
final Fields headers = new Fields ( arg ) ;
final HttpChannelState async = connection . getRequest ( arg ) . getHttpChannelState ( arg ) ;
final AbstractHttpConnection connection = new BlockingHttpConnection ( arg ) ;
final DateGenerator date = new DateGenerator ( arg ) ;
final HttpFields fields = _fields ;
final HttpFields fields = _fields ;
IStream stream = createStream ( arg ) ;
final IStream stream = newStream ( arg ) ;
IStream stream = newStream ( arg ) ;
IStream stream = streams . get ( arg ) ;
IStream stream = streams . get ( arg ) ;
IStream stream = streams . get ( arg ) ;
IStream stream = streams . get ( arg ) ;
final int id = i ;
final List < String > list = new ArrayList <> ( arg ) ;
final List < String > list = new ArrayList <> ( arg ) ;
final ManagedSelector set = chooseSelector ( arg ) ;
final Queue < Map < String , String >> <unk> = new <unk> <> ( arg ) ;
final DispatchedIOFuture future = new DispatchedIOFuture ( arg ) ;
final DispatchedIOFuture future = new DispatchedIOFuture ( arg ) ;
final Request baseRequest = ( request instanceof Request ) ? ( ( Request ) request ) : HttpChannel . getCurrentHttpChannel ( arg ) . getRequest ( arg ) ;
final Request baseRequest = ( request instanceof Request ) ? ( ( Request ) request ) : HttpChannel . getCurrentHttpChannel ( arg ) . getRequest ( arg ) ;
final Request baseRequest = ( request instanceof Request ) ? ( ( Request ) request ) : AbstractHttpConnection . getCurrentConnection ( arg ) . getRequest ( arg ) ;
final Request baseRequest = ( request instanceof Request ) ? ( ( Request ) request ) : AbstractHttpConnection . getCurrentConnection ( arg ) . getRequest ( arg ) ;
final Request baseRequest = ( request instanceof Request ) ? ( ( Request ) request ) : AbstractHttpConnection . getCurrentConnection ( arg ) . getRequest ( arg ) ;
final Request baseRequest = connection . getRequest ( arg ) ;
final Request request = _processor . getRequest ( arg ) ;
final Request request = _channel . getRequest ( arg ) ;
final Request request = _channel . getRequest ( arg ) ;
final Request request = exchange . request ( arg ) ;
RequestPair requestPair = requests . poll ( arg ) ;
final Runnable task = tasks . poll ( arg ) ;
final ManagedSelector set = chooseSelectSet ( arg ) ;
final String d = <unk> . formatNow ( arg ) ;
final String path = event . getPath ( arg ) ;
final String target = baseRequest . <unk> ( arg ) ;
final URI uri = request . getURI ( arg ) ;
final String uri = request . getURI ( arg ) ;
URI uri = <unk> ( arg ) ;
final WebSocketFuture holder = new WebSocketFuture ( arg ) ;
final boolean closed_out ;
final boolean closed_out ;
final String <unk> = request . getParameter ( arg ) ;
final int <unk> = <unk> ;
final AtomicIntegerArray count = new AtomicIntegerArray ( arg ) ;
final AtomicInteger length = new AtomicInteger ( arg ) ;
final int capacity = _elements . length ;
final int debug = _log . isDebugEnabled ( arg ) ? req . hashCode ( arg ) : 0 ;
final int head = _indexes [ HEAD_OFFSET ] ;
final int head = _indexes [ HEAD_OFFSET ] ;
final int iterations = 500 ;
final int iterations = <unk> ;
final int loops = 10 ;
final int maxConnections = client . <unk> ( arg ) ;
final int messages = 200000 ;
final Enumeration < ? > buffers = Collections . enumeration ( arg ) ;
final int new_tail ;
final long date = <unk> . <unk> ( arg ) ;
final org . eclipse . jetty . client . AbstractHttpConnection [ ] <unk> = new org . eclipse . jetty . client . AbstractHttpConnection [ <unk> ] ;
getExecutor ( arg ) . execute ( arg ) ;
closed . set ( arg ) ;
flusher . flush ( arg ) ;
int result = flushBuffer ( arg ) ;
shrinkCache ( arg ) ;
shrinkCache ( arg ) ;
flushed += BufferUtil . flipPutFlip ( arg ) ;
flushed <unk> super . flush ( arg ) ;
flush ( arg ) ;
flush ( arg ) ;
callback . iterate ( arg ) ;
foo . shutdown ( arg ) . get ( arg ) ;
for ( Bean b : _beans ) if ( b . <unk> == bean ) return b . _managed == Managed . MANAGED ;
for ( Decorator decorator : _decorators ) decorator . destroy ( arg ) ;
for ( Decorator decorator : _decorators ) decorator . destroy ( arg ) ;
for ( <unk> h : <unk> ) context . getMetaData ( arg ) . addDiscoveredAnnotations ( arg ) ;
for ( HttpConfiguration . Customizer customizer : _configuration . getCustomizers ( arg ) ) customizer . customize ( arg ) ;
for ( HttpSessionListener listener : <unk> ) listener . <unk> ( arg ) ;
for ( Filter filter : _filters ) filter . closed ( arg ) ;
for ( Filter filter : _filters ) filter . incoming ( arg ) ;
for ( Filter filter : _filters ) filter . <unk> ( arg ) ;
for ( Filter filter : _filters ) filter . outgoing ( arg ) ;
for ( LoginService service : list ) if ( service . getName ( arg ) != null && service . getName ( arg ) . equals ( arg ) ) return service ;
for ( ManagedSelector selector : _selectSets ) if ( selector != null ) selector . timeoutCheck ( arg ) ;
for ( ManagedSelector selector : _selectors ) if ( selector != null ) selector . timeoutCheck ( arg ) ;
for ( ManagedSelector set : _selectors ) set . stop ( arg ) ;
for ( ManagedSelector selector : _selectors ) selector . stop ( arg ) ;
for ( Request . BeginListener listener : request . getRequestListeners ( arg ) ) notifyBegin ( arg ) ;
for ( Request . FailureListener listener : request . getRequestListeners ( arg ) ) notifyFailure ( arg ) ;
for ( Request . HeadersListener listener : request . getRequestListeners ( arg ) ) notifyHeaders ( arg ) ;
for ( Request . BeginListener listener : request . getListeners ( arg ) ) notifyBegin ( arg ) ;
for ( Request . FailureListener listener : request . getListeners ( arg ) ) notifyFailure ( arg ) ;
for ( Request . HeadersListener listener : request . getListeners ( arg ) ) notifyHeaders ( arg ) ;
for ( Request . QueuedListener listener : request . getListeners ( arg ) ) notifyQueued ( arg ) ;
for ( Request . SuccessListener listener : request . getListeners ( arg ) ) notifySuccess ( arg ) ;
for ( Request . Listener listener : request . getListeners ( arg ) ) notifyBegin ( arg ) ;
for ( Request . Listener listener : request . getListeners ( arg ) ) notifyFailure ( arg ) ;
for ( Request . Listener listener : request . getListeners ( arg ) ) notifyHeaders ( arg ) ;
for ( Request . Listener listener : request . getListeners ( arg ) ) notifyQueued ( arg ) ;
for ( Request . Listener listener : request . getListeners ( arg ) ) notifySuccess ( arg ) ;
for ( Request . QueuedListener listener : request . getRequestListeners ( arg ) ) notifyQueued ( arg ) ;
for ( Request . SuccessListener listener : request . getRequestListeners ( arg ) ) notifySuccess ( arg ) ;
for ( <unk> listener : requestListeners ) if ( type . isInstance ( arg ) ) result . add ( arg ) ;
for ( Resource <unk> : <unk> ( arg ) ) <unk> . add ( arg ) ;
for ( ManagedSelector selectSet : _selectSets ) selectSet . timeoutCheck ( arg ) ;
for ( ManagedSelector set : _selectSets ) set . stop ( arg ) ;
for ( Selectable endPoint : <unk> . keySet ( arg ) ) endPoint . <unk> ( arg ) ;
for ( int i = <unk> . size ( arg ) ; i--> 0 ; ) callContextDestroyed ( arg ) ;
for ( String <unk> : _includeCipherSuites ) if ( Arrays . asList ( arg ) . contains ( arg ) ) selected_ciphers . add ( arg ) ;
for ( Entry < String , String > ext : <unk> . entrySet ( arg ) ) <unk> . put ( arg ) ;
for ( String id : <unk> . <unk> ( arg ) ) <unk> . put ( arg ) ;
if ( module != null ) for ( String parent : module . <unk> ( arg ) ) <unk> ( arg ) ;
for ( String protocol : _includeProtocols ) if ( Arrays . asList ( arg ) . contains ( arg ) ) selected_protocols . add ( arg ) ;
for ( String pushResource : resources ) pushResource ( arg ) ;
for ( String r : <unk> . _roles ) _roles . add ( arg ) ;
for ( String t : times ) System . err . println ( arg ) ;
for ( String t : times ) System . err . println ( arg ) ;
for ( String value : header . getValues ( arg ) ) headers . add ( arg ) ;
for ( String x : _jvmArgs ) cmd . append ( arg ) . append ( arg ) ;
join ( arg ) ;
join ( arg ) ;
for ( byte <unk> : data ) Assert . assertEquals ( arg ) ;
for ( byte <unk> : <unk> ) Assert . assertEquals ( arg ) ;
for ( int i = 0 ; i < 1024 * 1024 ; ++ i ) body . append ( arg ) ;
System . arraycopy ( arg ) ;
for ( int i = 0 ; i < <unk> ; i ++ ) Assert . assertEquals ( arg ) ;
nested . addAll ( arg ) ;
for ( int i = 0 ; i < _acceptorThread . length ; i ++ ) if ( ! _threadPool . dispatch ( arg ) ) throw new IllegalStateException ( arg ) ;
for ( int i = 0 ; i < _acceptors . length ; i ++ ) getExecutor ( arg ) . execute ( arg ) ;
configure ( arg ) ;
<unk> ( arg ) ;
for ( FilterHolder filter : _filters ) filter . start ( arg ) ;
for ( byte aByte : bytes ) buffer . append ( arg ) ;
for ( byte aByte : bytes ) buffer . append ( arg ) ;
for ( byte aByte : bytes ) buffer . append ( arg ) ;
System . arraycopy ( arg ) ;
for ( int i = LazyList . size ( arg ) ; i--> 0 ; ) ( ( ServletRequestListener ) LazyList . get ( arg ) ) . <unk> ( arg ) ;
for ( ServletRequestListener l : <unk> ) l . <unk> ( arg ) ;
for ( int i = 0 ; i < tasks . length ; i ++ ) if ( ( arg ) % 2 == 0 ) tasks [ i ] . cancel ( arg ) ;
for ( int i = len ; i--> 0 ; ) read . append ( arg ) ;
for ( int i = _configurations . size ( arg ) ; i--> 0 ; ) _configurations . get ( arg ) . deconfigure ( arg ) ;
for ( int i = _configurations . length ; i--> 0 ; ) _configurations [ i ] . deconfigure ( arg ) ;
for ( int i = _threadsIdle . get ( arg ) ; i--> 0 ; ) jobs . offer ( arg ) ;
System . arraycopy ( arg ) ;
for ( int p = 0 ; p < _queue . length ; p ++ ) _queue [ p ] = new ArrayQueue < Continuation > ( arg ) ;
notifier . forwardFailureComplete ( arg ) ;
notifier . forwardFailureComplete ( arg ) ;
notifier . forwardSuccessComplete ( arg ) ;
notifier . forwardSuccessComplete ( arg ) ;
Assert . assertEquals ( arg ) ;
Assert . assertEquals ( arg ) ;
frags . put ( arg ) ;
frags = new HashMap < Resource , Resource > ( arg ) ;
frame . <unk> ( arg ) ;
frame = new ContinuationFrame ( arg ) ;
frame = new ContinuationFrame ( arg ) ;
frame . setPayload ( arg ) ;
frame . setPayload ( arg ) ;
frame . setIsContinuation ( arg ) ;
frame . setIsContinuation ( arg ) ;
frame = frames . remove ( arg ) ;
frame = frames . remove ( arg ) ;
frame = capture . getFrames ( arg ) . poll ( arg ) ;
frame = capture . getFrames ( arg ) . poll ( arg ) ;
frame = capture . getFrames ( arg ) . get ( arg ) ;
frame = capture . getFrames ( arg ) . get ( arg ) ;
frame = capture . getFrames ( arg ) . get ( arg ) ;
frame = new BinaryFrame ( arg ) . setPayload ( arg ) ;
frame = new ContinuationFrame ( arg ) . setPayload ( arg ) ;
frame = new ContinuationFrame ( arg ) . setPayload ( arg ) ;
frame = new TextFrame ( arg ) . setPayload ( arg ) ;
frameBytes = queue . peek ( arg ) ;
listener . <unk> ( arg ) ;
listener . onPing ( arg ) ;
listener . <unk> ( arg ) ;
listener . <unk> ( arg ) ;
frames [ i ] = new PingFrame ( arg ) . setPayload ( arg ) ;
f0 . fail ( arg ) ;
future . isComplete ( arg ) ;
future . isComplete ( arg ) ;
future . isComplete ( arg ) ;
f0 . ready ( arg ) ;
future = new DispatchedIOFuture ( arg ) ;
future = new <unk> ( arg ) ;
future = new DispatchingIOFuture ( arg ) ;
future = new DispatchingIOFuture ( arg ) ;
future = new <unk> ( arg ) ;
<unk> = <unk> . send ( arg ) ;
fuzzer . <unk> ( arg ) ;
fuzzer . sendAndIgnoreBrokenPipe ( arg ) ;
fuzzer . sendAndIgnoreBrokenPipe ( arg ) ;
fuzzer . sendAndIgnoreBrokenPipe ( arg ) ;
fuzzer . sendAndIgnoreBrokenPipe ( arg ) ;
out = gen . generate ( arg ) ;
<unk> = HttpVersion . HTTP_1_1 ;
getConnection ( arg ) . onIdleExpired ( arg ) ;
getHttpChannelState ( arg ) . recycle ( arg ) ;
getEndPoint ( arg ) . shutdownOutput ( arg ) ;
getRemote ( arg ) . sendString ( arg ) ;
getRemote ( arg ) . sendString ( arg ) ;
getRemote ( arg ) . sendString ( arg ) ;
close ( arg ) ;
close ( arg ) ;
close ( arg ) ;
getRemote ( arg ) . sendBytes ( arg ) ;
getHttpConnector ( arg ) . customize ( arg ) ;
<unk> . dispatch ( arg ) ;
getDecryptedEndPoint ( arg ) . getConnection ( arg ) . onOpen ( arg ) ;
<unk> ( arg ) . send ( arg ) ;
getEndPoint ( arg ) . read ( arg ) . block ( arg ) ;
ProxyHTTPSPDYConnection . this . close ( arg ) ;
ProxyHTTPSPDYConnection . this . close ( arg ) ;
block ( arg ) ;
getEndPoint ( arg ) . readable ( arg ) . block ( arg ) ;
getEndPoint ( arg ) . fillInterested ( arg ) ;
getEndPoint ( arg ) . setConnection ( arg ) ;
getSelectableEndPoint ( arg ) . setCheckForIdle ( arg ) ;
getSelectableEndPoint ( arg ) . setCheckForIdle ( arg ) ;
terminate ( arg ) ;
terminate ( arg ) ;
endpoint . write ( arg ) ;
headerComplete ( arg ) ;
parsedHeader ( arg ) ;
startRequest ( arg ) ;
extraScanTargets . add ( arg ) ;
assertSanePayloadLength ( arg ) ;
assertSanePayloadLength ( arg ) ;
for ( <unk> . Customizer customizer : _configuration . getCustomizers ( arg ) ) customizer . customize ( arg ) ;
getHttpConfiguration ( arg ) . customize ( arg ) ;
getHttpDestination ( arg ) . close ( arg ) ;
getHttpDestination ( arg ) . close ( arg ) ;
getConnection ( arg ) . sendMessage ( arg ) ;
getConnection ( arg ) . sendMessage ( arg ) ;
getPolicy ( arg ) . assertValidTextMessageSize ( arg ) ;
getRemote ( arg ) . sendBytes ( arg ) ;
getRemote ( arg ) . sendString ( arg ) ;
_response . getHttpFields ( arg ) . put ( arg ) ;
scanner . <unk> ( arg ) ;
getAsyncConnection ( arg ) . onInputShutdown ( arg ) ;
this . server . addBean ( arg ) ;
updateBean ( arg ) ;
getServletHandler ( arg ) . destroyFilter ( arg ) ;
getServletHandler ( arg ) . destroyServlet ( arg ) ;
findExecutor ( arg ) . execute ( arg ) ;
<unk> . shutdown ( arg ) ;
<unk> ( arg ) ;
<unk> ( arg ) ;
handler . <unk> ( <unk> . class ,
notifyHandlerCompleted ( arg ) ;
notifyHandlerCompleted ( arg ) ;
fail ( arg ) ;
handling =! _state . unhandle ( arg ) ;
handling =! _request . _async . unhandle ( arg ) && server . isRunning ( arg ) && _server != null ;
_headLock . lock ( arg ) ;
_headLock . lock ( arg ) ;
_headLock . unlock ( arg ) ;
_headLock . unlock ( arg ) ;
_headLock . unlock ( arg ) ;
_headLock . unlock ( arg ) ;
_headLock . unlock ( arg ) ;
_headLock . unlock ( arg ) ;
_headLock . unlock ( arg ) ;
_headLock . unlock ( arg ) ;
_headLock . unlock ( arg ) ;
_headLock . unlock ( arg ) ;
_headLock . unlock ( arg ) ;
_headLock . unlock ( arg ) ;
_headLock . unlock ( arg ) ;
_headLock . unlock ( arg ) ;
_headLock . unlock ( arg ) ;
header . putTo ( arg ) ;
HttpGenerator . putTo ( arg ) ;
HttpGenerator . putTo ( arg ) ;
HttpGenerator . putTo ( arg ) ;
chunk = BufferUtil . allocate ( arg ) ;
chunk = BufferUtil . allocate ( arg ) ;
header = bufferPool . acquire ( arg ) ;
<unk> = true ;
headers . add ( arg ) ;
headers . countDown ( arg ) ;
headers = new Fields ( arg ) ;
beginLatch . countDown ( arg ) ;
if ( ! System . getProperty ( arg ) . toLowerCase ( arg ) . contains ( arg ) ) holder . setInitParameter ( arg ) ;
ShutdownThread . deregister ( arg ) ;
hosts = new HashMap < String , Object > ( arg ) ;
http . getHttpConfiguration ( arg ) . addCustomizer ( arg ) ;
http . getHttpConfiguration ( arg ) . setRequestHeaderSize ( arg ) ;
http . getHttpConfiguration ( arg ) . setSecurePort ( arg ) ;
_httpClient . send ( arg ) ;
_httpClient . send ( arg ) ;
_httpClient . send ( arg ) ;
httpClient . setConnectBlocking ( arg ) ;
httpClient . setConnectBlocking ( arg ) ;
httpClient . setMaxConnectionsPerDestination ( arg ) ;
httpClient . getProxyConfiguration ( arg ) . getProxies ( arg ) . add ( arg ) ;
httpClient . getProxyConfiguration ( arg ) . getProxies ( arg ) . add ( arg ) ;
httpClient . getProxyConfiguration ( arg ) . getProxies ( arg ) . add ( arg ) ;
httpClient . getProxyConfiguration ( arg ) . getProxies ( arg ) . add ( arg ) ;
httpClient . getProxyConfiguration ( arg ) . getProxies ( arg ) . add ( arg ) ;
httpClient . getProxyConfiguration ( arg ) . getProxies ( arg ) . add ( arg ) ;
httpClient . getProxyConfiguration ( arg ) . getProxies ( arg ) . add ( arg ) ;
httpExchange . setRequestURI ( arg ) ;
httpExchange . setURL ( _scheme + :
httpExchange . setURL ( _scheme + :
httpExchange . setURL ( _scheme + :
httpExchange . setURL ( _scheme + :
httpExchange . setURL ( _scheme + :
httpExchange [ n ] . setURL ( _scheme + :
<unk> . getHttpConfiguration ( arg ) . addCustomizer ( arg ) ;
request . content ( arg ) ;
request . content ( arg ) ;
httpOnly = true ;
chain . doFilter ( arg ) ;
i += 2 ;
id = ( id . indexOf ( arg ) > 0 ? id . substring ( arg ) : id ) ;
idle . onClose ( arg ) ;
if ( ! ( arg ) &&! ( arg ) ) LOG . warn ( arg ) ;
if ( ! mandatory ) return _deferred ;
if ( ! HttpScheme . <unk> . is ( arg ) &&! HttpScheme . HTTPS . is ( arg ) ) throw new IllegalArgumentException ( arg ) ;
if ( ! BufferUtil . isFull ( arg ) && ( arg ) > 0 ) progress = true ;
if ( ! BufferUtil . isFull ( arg ) && _endp . fill ( arg ) > 0 ) progress = true ;
if ( ! <unk> . <unk> ( arg ) <unk> . indexOf ( arg ) < 0 ) <unk> . <unk> ( arg ) ;
if ( ! websocket . equalsIgnoreCase ( arg ) ) throw new IllegalStateException ( arg ) ;
if ( _appReadFuture != null &&! _appReadFuture . isComplete ( arg ) && _netReadFuture == null &&! BufferUtil . isFull ( arg ) ) _netReadFuture = scheduleOnReadable ( arg ) ;
if ( ! _appReadFuture . isComplete ( arg ) && _netReadFuture == null &&! BufferUtil . isFull ( arg ) ) _netReadFuture = scheduleOnReadable ( arg ) ;
if ( ! _appReadFuture . isDone ( arg ) ) _appReadFuture . fail ( arg ) ;
_appEndPoint . <unk> ( arg ) ;
if ( ! _appWriteFuture . isDone ( arg ) ) throw new IllegalStateException ( arg ) ;
if ( ! _processor . isIncluding ( arg ) ) _fields . addDateField ( arg ) ;
if ( ! _processor . isIncluding ( arg ) ) _fields . putDateField ( arg ) ;
if ( ! _closed ) _channel . completeResponse ( arg ) ;
if ( ! _done ) <unk> . await ( arg ) ;
if ( ! _complete ) return Action . SUCCEEDED ;
if ( ! _complete ) return Action . SUCCEEDED ;
if ( ! _complete ) return Next . SUCCEEDED ;
if ( ! _complete ) return Next . SUCCEEDED ;
if ( ! _connection . isIncluding ( arg ) ) _fields . addDateField ( arg ) ;
if ( ! _connection . isIncluding ( arg ) ) _fields . putDateField ( arg ) ;
if ( ! _channel . isIncluding ( arg ) ) _fields . addDateField ( arg ) ;
if ( ! _channel . isIncluding ( arg ) ) _fields . putDateField ( arg ) ;
if ( _level <= LEVEL_DEBUG ) {
if ( _level <= LEVEL_DEBUG ) {
if ( _level <= LEVEL_DEBUG ) {
if ( _level <= LEVEL_DEBUG ) {
if ( _state < STATE_DISPATCHED ) updateKey ( arg ) ;
if ( _state < STATE_DISPATCHED ) updateKey ( arg ) ;
if ( _state < STATE_DISPATCHED ) updateKey ( arg ) ;
if ( ! _endp . isOpen ( arg ) ) throw new IOException ( arg ) ;
if ( _endp . isOutputShutdown ( arg ) ) throw new EofException ( arg ) ;
if ( ! _endp . isOpen ( arg ) ) throw new EofException ( arg ) ;
checkWriteable ( arg ) ;
checkWriteable ( arg ) ;
checkWriteable ( arg ) ;
checkWriteable ( arg ) ;
checkWriteable ( arg ) ;
if ( ! super . _generator . isCommitted ( arg ) ) commitResponse ( arg ) ;
if ( _handshake == null || _handshake . length ( arg ) > 0 ) if ( _handshake == null || _handshake . length ( arg ) > 0 ) return this ;
if ( ! _persistent && ( arg ) ) _state = State . SEEKING_EOF ;
if ( ! _persistent && isResponse ( arg ) && _content == EndOfContent . UNKNOWN_CONTENT ) _content = EndOfContent . EOF_CONTENT ;
if ( ! _persistent && isResponse ( arg ) && _content == Content . UNKNOWN_CONTENT ) _content = Content . EOF_CONTENT ;
if ( ! Boolean . TRUE . equals ( arg ) ) result = Result . SHUTDOWN_OUT ;
if ( ! Boolean . TRUE . equals ( arg ) ) result = Result . SHUTDOWN_OUT ;
if ( ! _channel . isIncluding ( arg ) ) _fields . addDateField ( arg ) ;
if ( ! _channel . isIncluding ( arg ) ) _fields . putDateField ( arg ) ;
if ( ! _exchanges . isEmpty ( arg ) && _client . isStarted ( arg ) ) startConnection = true ;
if ( ! _exchanges . isEmpty ( arg ) && _client . isStarted ( arg ) ) startConnection = true ;
if ( ! _queue . isEmpty ( arg ) && _client . isStarted ( arg ) ) startConnection = true ;
if ( ! _queue . isEmpty ( arg ) && _client . isStarted ( arg ) ) startConnection = true ;
if ( ! _exchanges . isEmpty ( arg ) ) startConnection = true ;
<unk> . setCheckForIdle ( arg ) ;
sendError ( arg ) ;
if ( ! _response . isCommitted ( arg ) ) _response . addHeader ( arg ) ;
<unk> ( arg ) ;
if ( ! _state . compareAndSet ( arg ) &&! _state . compareAndSet ( arg ) ) throw new IllegalStateException ( arg ) ;
if ( _state . <unk> ( arg ) ) {
if ( ! _storeDir . exists ( arg ) ) _storeDir . <unk> ( arg ) ;
if ( ! _writeFuture . isDone ( arg ) ) _writeFuture . fail ( arg ) ;
if ( ! _writeFuture . isDone ( arg ) ) _writeFuture . fail ( arg ) ;
if ( _writeFuture != null &&! _writeFuture . isComplete ( arg ) ) throw new IllegalStateException ( arg ) ;
if ( _writeFuture != null &&! _writeFuture . isComplete ( arg ) ) throw new IllegalStateException ( arg ) ;
if ( ! _writing . compareAndSet ( arg ) ) return false ;
updateState ( arg ) ;
updateState ( arg ) ;
if ( ! _writing . get ( arg ) ) return false ;
if ( ! isWriting ( arg ) ) return false ;
if ( ! active . compareAndSet ( arg ) ) throw new IllegalStateException ( arg ) ;
if ( ! active . compareAndSet ( arg ) ) throw new IllegalStateException ( arg ) ;
throw new UnsupportedOperationException ( arg ) ;
if ( ! baseRequest . getHttpChannelState ( arg ) . isAsync ( arg ) ) commitResponse ( arg ) ;
buffer . clear ( arg ) ;
buffer . skip ( arg ) ;
if ( ! closeIfAllContentWritten ( arg ) && BufferUtil . isFull ( arg ) ) _channel . write ( arg ) ;
onSyn ( arg ) ;
if ( ! commit ( arg ) ) return ;
if ( ! commit ( arg ) ) return ;
if ( filled == len &&! BufferUtil . isFull ( arg ) ) return ;
if ( ! dir . isDirectory ( arg ) ||! dir . exists ( arg ) || dir . getName ( arg ) . startsWith ( arg ) ) return ;
if ( ! _response . isCommitted ( arg ) &&! _request . <unk> ( arg ) ) _response . sendError ( arg ) ;
flush ( arg ) ;
if ( ! getChannel ( arg ) . isOpen ( arg ) || idleTimestamp != 0 && _maxIdleTime > 0 && now > ( arg ) ) idleExpired ( arg ) ;
if ( ! getChannel ( arg ) . isOpen ( arg ) || idleTimestamp != 0 && _maxIdleTime > 0 && now > ( arg ) ) onIdleExpired ( arg ) ;
if ( ! has_server && _status > 199 && getSendServerVersion ( arg ) ) _header . put ( arg ) ;
if ( ! has_server && status > 199 && getSendServerVersion ( arg ) ) header . put ( arg ) ;
if ( status > 199 ) header . put ( arg ) ;
if ( ! headers . isEmpty ( arg ) ) updateState ( arg ) ;
if ( ( arg ) &&! holder . getInitParameter ( arg ) . equals ( arg ) ) throw new IllegalStateException ( arg ) ;
if ( ! getHost ( arg ) . equals ( arg ) ) throw new IllegalArgumentException ( arg ) ;
if ( ! idle ) ContainerLifeCycle . dump ( arg ) ;
if ( ! isComplete ( arg ) &&! isIdle ( arg ) ) throw new EofException ( arg ) ;
if ( ! isComplete ( arg ) &&! isIdle ( arg ) ) throw new EofException ( arg ) ;
if ( ! isComplete ( arg ) &&! <unk> ( arg ) ) throw new EofException ( arg ) ;
clear ( arg ) ;
if ( ! isIncluding ( arg ) &&! super . _generator . isCommitted ( arg ) ) commitResponse ( arg ) ;
if ( isOutputShutdown ( arg ) ) throw new EofException ( arg ) ;
if ( ! _factory . isStarted ( arg ) ) throw new IllegalStateException ( arg ) ;
if ( ! <unk> ( arg ) ) throw new NotUtf8Exception ( arg ) ;
if ( ! isWriting ( arg ) ) return ;
if ( ! l . isRunning ( arg ) ) start ( arg ) ;
if ( ! l . isRunning ( arg ) ) start ( arg ) ;
if ( ! <unk> || content == null ||! content . hasArray ( arg ) ||! header . hasArray ( arg ) || content . array ( arg ) != header . array ( arg ) ) _bufferPool . release ( arg ) ;
if ( mandatory ) {
if ( mandatory ) {
if ( mandatory ) {
if ( ! mandatory ) return Authentication . NOT_CHECKED ;
if ( ! mandatory ) return new DeferredAuthentication ( arg ) ;
if ( ! mandatory ) return new DeferredAuthentication ( arg ) ;
if ( ! mandatory ) return new DeferredAuthentication ( arg ) ;
if ( ! mandatory ) return new DeferredAuthentication ( arg ) ;
if ( ! mandatory ) return new DeferredAuthentication ( arg ) ;
if ( ! mandatory ) return new DeferredAuthentication ( arg ) ;
if ( ! match || <unk> &&! <unk> ) return false ;
member . _async . set ( arg ) ;
member . _async . set ( arg ) ;
if ( ! HttpMethod . GET . is ( arg ) &&! HttpMethod . POST . is ( arg ) &&! HttpMethod . HEAD . is ( arg ) ) return ;
if ( ! method . equals ( arg ) &&! method . equals ( arg ) &&! method . equals ( arg ) ) return ;
if ( hasContent ) <unk> ( arg ) ;
if ( ! org . eclipse . jetty . plus . jndi . NamingEntryUtil . bindToENC ( arg ) ) if ( ! org . eclipse . jetty . plus . jndi . NamingEntryUtil . bindToENC ( arg ) ) LOG . warn ( arg ) ;
if ( ! holder . getInitParameter ( arg ) . equals ( arg ) ) throw new IllegalStateException ( arg ) ;
if ( ! holder . <unk> ( arg ) . equals ( arg ) ) throw new IllegalStateException ( arg ) ;
if ( ! request . <unk> ( arg ) . equalsIgnoreCase ( arg ) || request . <unk> ( arg ) != port ||! path . startsWith ( arg ) ) return url ;
if ( ! request . getURI ( arg ) . toString ( arg ) . startsWith ( arg ) ) return ;
if ( ! request . getURI ( arg ) . startsWith ( arg ) ) return ;
<unk> ( arg ) ;
if ( ! result . isAbsolute ( arg ) &&! result . isOpaque ( arg ) ) result = URI . create ( arg ) ;
if ( ! result . isAbsolute ( arg ) &&! result . isOpaque ( arg ) ) result = URI . create ( arg ) ;
if ( ! result . <unk> ( arg ) && result . getResponse ( arg ) . getStatus ( arg ) == 200 ) latch1 . countDown ( arg ) ;
if ( ! getScheme ( arg ) . equals ( arg ) ) throw new IllegalArgumentException ( arg ) ;
if ( ! set &&! ignored ) throw new IllegalStateException ( arg ) ;
if ( ! _socket . isClosed ( arg ) ) close ( arg ) ;
if ( ! _socket . isClosed ( arg ) ) close ( arg ) ;
if ( ! socket . isClosed ( arg ) ) close ( arg ) ;
if ( ! someToContent ( arg ) ) return Action . IDLE ;
if ( ! someToContent ( arg ) ) return Next . IDLE ;
if ( ! someToContent ( arg ) ) return State . IDLE ;
if ( BufferUtil . isEmpty ( arg ) && _endp . isInputShutdown ( arg ) ) _endp . shutdownOutput ( arg ) ;
_listeners = LazyList . add ( arg ) ;
return ( arg ) . booleanValue ( arg ) ;
return ( arg ) . booleanValue ( arg ) ;
asyncContext . dispatch ( arg ) ;
asyncContext . dispatch ( arg ) ;
if ( ( arg ) == <unk> ) break ;
if ( ( arg ) || ( arg ) ) return ;
if ( ( arg ) || _expect100Continue ) handleRequest ( arg ) ;
if ( BufferUtil . compact ( arg ) &&! _appReadFuture . isDone ( arg ) && _netReadFuture == null ) _netReadFuture = scheduleOnReadable ( arg ) ;
if ( BufferUtil . compact ( arg ) && _appEndPoint . <unk> != null ) scheduleOnReadable ( arg ) ;
if ( BufferUtil . hasContent ( arg ) && BufferUtil . flipPutFlip ( arg ) > 0 ) progress = true ;
if ( BufferUtil . hasContent ( arg ) && BufferUtil . flipPutFlip ( arg ) > 0 ) progress = true ;
if ( BufferUtil . hasContent ( arg ) && _parser . parseNext ( arg ) ) _processor . handleRequest ( arg ) ;
if ( BufferUtil . hasContent ( arg ) && _parser . parseNext ( arg ) ) _channel . handleRequest ( arg ) ;
if ( BufferUtil . hasContent ( arg ) ) BufferUtil . append ( arg ) ;
if ( BufferUtil . hasContent ( arg ) ) return BufferUtil . flipPutFlip ( arg ) ;
if ( BufferUtil . hasContent ( arg ) ) return DoneIOFuture . COMPLETE ;
if ( BufferUtil . hasContent ( arg ) ) return getEndPoint ( arg ) . write ( arg ) ;
if ( BufferUtil . hasContent ( arg ) ) return false ;
if ( _endp . isInputShutdown ( arg ) ) _endp . shutdownOutput ( arg ) ;
Config . debug ( arg ) ;
Config . debug ( arg ) ;
if ( DEBUG ) LOG . debug ( arg ) ;
if ( ENCODING . equals ( arg ) ) <unk> ( arg ) ;
if ( ! HTTP/1.0 . equals ( arg ) ) assertHeader ( arg ) ;
if ( ! HTTP/1.0 . equals ( arg ) ) assertHeader ( arg ) ;
if ( ! HTTP/1.0 . equals ( arg ) ) assertHeader ( arg ) ;
if ( ! HTTP/1.0 . equals ( arg ) ) assertHeader ( arg ) ;
if ( ! HTTP/1.0 . equals ( arg ) ) assertHeader ( arg ) ;
if ( ! HTTP/1.0 . equals ( arg ) ) assertHeader ( arg ) ;
if ( ! HTTP/1.0 . equals ( arg ) ) assertHeader ( arg ) ;
if ( ! HTTP/1.0 . equals ( arg ) ) assertHeader ( arg ) ;
if ( HttpHeader . CONTENT_LENGTH . is ( arg ) ) _connection . _generator . setContentLength ( arg ) ;
if ( HttpHeader . CONTENT_LENGTH . is ( arg ) ) _connection . _generator . setContentLength ( arg ) ;
if ( HttpHeader . CONTENT_LENGTH . is ( arg ) ) _connection . _generator . setContentLength ( arg ) ;
if ( HttpHeader . CONTENT_TYPE . is ( arg ) ) setContentType ( arg ) ;
if ( HttpHeader . <unk> . is ( arg ) || HttpHeader . <unk> . is ( arg ) || HttpHeader . <unk> . is ( arg ) || HttpHeader . <unk> . is ( arg ) || HttpHeader . <unk> . is ( arg ) || HttpHeader . <unk> . is ( arg ) ) return false ;
if ( HttpHeader . CONTENT_LENGTH . equalsIgnoreCase ( arg ) ) _connection . _generator . setContentLength ( arg ) ;
if ( HttpHeader . CONTENT_LENGTH . equalsIgnoreCase ( arg ) ) _connection . _generator . setContentLength ( arg ) ;
if ( HttpHeader . CONTENT_LENGTH . equalsIgnoreCase ( arg ) ) _connection . _generator . setContentLength ( arg ) ;
if ( HttpHeader . CONTENT_TYPE . equalsIgnoreCase ( arg ) ) setContentType ( arg ) ;
if ( HttpVersion . HTTP_1_0 . is ( arg ) ) _fields . put ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
start = System . <unk> ( arg ) ;
if ( <unk> . contains ( arg ) ) this . getServletContext ( arg ) . setEnabled ( arg ) ;
if ( langs . size ( arg ) == 0 ) return Collections . enumeration ( arg ) ;
if ( filters . size ( arg ) > 0 ) chain = new <unk> ( arg ) ;
if ( LOG . isDebugEnabled ( arg ) ) LOG . debug ( arg ) ;
if ( LOG . isDebugEnabled ( arg ) ) LOG . debug ( arg ) ;
if ( LOG . isDebugEnabled ( arg ) ) LOG . debug ( arg ) ;
if ( LOG . isDebugEnabled ( arg ) ) LOG . debug ( arg ) ;
if ( LOG . isDebugEnabled ( arg ) ) LOG . debug ( arg ) ;
if ( LOG . isDebugEnabled ( arg ) ) LOG . debug ( arg ) ;
if ( LOG . isDebugEnabled ( arg ) ) LOG . debug ( arg ) ;
if ( LOG . isDebugEnabled ( arg ) ) LOG . debug ( arg ) ;
if ( LOG . isDebugEnabled ( arg ) ) LOG . debug ( arg ) ;
if ( LOG . isDebugEnabled ( arg ) ) LOG . debug ( arg ) ;
if ( LOG . isDebugEnabled ( arg ) ) LOG . debug ( arg ) ;
if ( LOG . isDebugEnabled ( arg ) ) LOG . debug ( arg ) ;
if ( LOG . isDebugEnabled ( arg ) ) LOG . debug ( arg ) ;
if ( LOG . isDebugEnabled ( arg ) ) LOG . debug ( arg ) ;
if ( LOG . isDebugEnabled ( arg ) ) LOG . debug ( arg ) ;
if ( LOG . isDebugEnabled ( arg ) ) LOG . debug ( arg ) ;
if ( LOG . isDebugEnabled ( arg ) ) LOG . debug ( arg ) ;
if ( LOG . isDebugEnabled ( arg ) ) LOG . debug ( arg ) ;
if ( LOG . isDebugEnabled ( arg ) ) LOG . debug ( arg ) ;
if ( LOG . isDebugEnabled ( arg ) ) LOG . debug ( arg ) ;
if ( LOG . isDebugEnabled ( arg ) ) LOG . debug ( arg ) ;
if ( LOG . isDebugEnabled ( arg ) ) LOG . debug ( arg ) ;
if ( LOG . isDebugEnabled ( arg ) ) LOG . debug ( arg ) ;
if ( LOG . isDebugEnabled ( arg ) ) LOG . debug ( arg ) ;
if ( LOG . isDebugEnabled ( arg ) ) LOG . debug ( arg ) ;
if ( LOG . isDebugEnabled ( arg ) ) LOG . debug ( arg ) ;
if ( LOG . isDebugEnabled ( arg ) ) LOG . debug ( arg ) ;
if ( LOG . isDebugEnabled ( arg ) ) LOG . debug ( arg ) ;
if ( LOG . isDebugEnabled ( arg ) ) LOG . debug ( arg ) ;
if ( LOG . isDebugEnabled ( arg ) ) LOG . debug ( arg ) ;
if ( LOG . isDebugEnabled ( arg ) ) LOG . debug ( arg ) ;
if ( LOG . isDebugEnabled ( arg ) ) LOG . debug ( arg ) ;
if ( LOG . isDebugEnabled ( arg ) ) LOG . debug ( arg ) ;
if ( LOG . isDebugEnabled ( arg ) ) LOG . debug ( arg ) ;
if ( LOG . isDebugEnabled ( arg ) ) LOG . debug ( arg ) ;
if ( LOG . isDebugEnabled ( arg ) ) LOG . debug ( arg ) ;
if ( LOG . isDebugEnabled ( arg ) ) LOG . debug ( arg ) ;
if ( LOG . isDebugEnabled ( arg ) ) LOG . debug ( arg ) ;
if ( LOG . isDebugEnabled ( arg ) ) LOG . debug ( arg ) ;
if ( LOG . isDebugEnabled ( arg ) ) LOG . debug ( arg ) ;
if ( LOG . isDebugEnabled ( arg ) ) LOG . debug ( arg ) ;
if ( LOG . isDebugEnabled ( arg ) ) LOG . debug ( arg ) ;
if ( LOG . isDebugEnabled ( arg ) ) LOG . debug ( arg ) ;
if ( LOG . isDebugEnabled ( arg ) ) LOG . debug ( arg ) ;
if ( LOG . isDebugEnabled ( arg ) ) LOG . debug ( arg ) ;
if ( LOG . isDebugEnabled ( arg ) ) LOG . debug ( arg ) ;
if ( LOG . isDebugEnabled ( arg ) ) LOG . debug ( arg ) ;
if ( LOG . isDebugEnabled ( arg ) ) LOG . debug ( arg ) ;
if ( LOG . isDebugEnabled ( arg ) ) LOG . debug ( arg ) ;
if ( LOG . isDebugEnabled ( arg ) ) LOG . debug ( arg ) ;
if ( LOG . isDebugEnabled ( arg ) ) LOG . debug ( arg ) ;
if ( LOG . isDebugEnabled ( arg ) ) LOG . debug ( arg ) ;
if ( LOG . isDebugEnabled ( arg ) ) LOG . debug ( arg ) ;
if ( LOG . isDebugEnabled ( arg ) ) LOG . debug ( arg ) ;
if ( LOG . isDebugEnabled ( arg ) ) LOG . debug ( arg ) ;
if ( LOG . isDebugEnabled ( arg ) ) LOG . debug ( arg ) ;
if ( LOG . isDebugEnabled ( arg ) ) LOG . debug ( arg ) ;
if ( LOG . isDebugEnabled ( arg ) ) LOG . debug ( arg ) ;
if ( LOG . isDebugEnabled ( arg ) ) LOG . debug ( arg ) ;
if ( LOG . isDebugEnabled ( arg ) ) LOG . debug ( arg ) ;
if ( LOG . isDebugEnabled ( arg ) ) LOG . debug ( arg ) ;
if ( LOG . isDebugEnabled ( arg ) ) LOG . debug ( arg ) ;
if ( LOG . isDebugEnabled ( arg ) ) LOG . debug ( arg ) ;
if ( LOG . isDebugEnabled ( arg ) ) LOG . debug ( arg ) ;
if ( LOG . isDebugEnabled ( arg ) ) LOG . debug ( arg ) ;
if ( LOG . isDebugEnabled ( arg ) ) LOG . debug ( arg ) ;
if ( LOG . isDebugEnabled ( arg ) ) LOG . debug ( arg ) ;
if ( LOG . isDebugEnabled ( arg ) ) LOG . debug ( arg ) ;
if ( LOG . isDebugEnabled ( arg ) ) LOG . debug ( arg ) ;
if ( LOG . isDebugEnabled ( arg ) ) LOG . debug ( arg ) ;
if ( LOG . isDebugEnabled ( arg ) ) LOG . debug ( arg ) ;
if ( LOG . isDebugEnabled ( arg ) ) LOG . debug ( arg ) ;
if ( LOG . isDebugEnabled ( arg ) ) LOG . debug ( arg ) ;
if ( LOG . isDebugEnabled ( arg ) ) LOG . debug ( arg ) ;
if ( LOG . isDebugEnabled ( arg ) ) LOG . debug ( arg ) ;
if ( LOG . isDebugEnabled ( arg ) ) LOG . debug ( arg ) ;
if ( LOG . isDebugEnabled ( arg ) ) LOG . debug ( arg ) ;
if ( LOG . isDebugEnabled ( arg ) ) LOG . debug ( arg ) ;
if ( LOG . isDebugEnabled ( arg ) ) LOG . debug ( arg ) ;
if ( LOG . isDebugEnabled ( arg ) ) LOG . debug ( arg ) ;
if ( LOG . isDebugEnabled ( arg ) ) LOG . debug ( arg ) ;
if ( LOG . isDebugEnabled ( arg ) ) LOG . debug ( arg ) ;
if ( LOG . isDebugEnabled ( arg ) ) LOG . debug ( arg ) ;
if ( LOG . isDebugEnabled ( arg ) ) LOG . debug ( arg ) ;
if ( LOG . isDebugEnabled ( arg ) ) LOG . debug ( arg ) ;
if ( LOG . isDebugEnabled ( arg ) ) LOG . debug ( arg ) ;
if ( LOG . isDebugEnabled ( arg ) ) LOG . debug ( arg ) ;
if ( LOG . isDebugEnabled ( arg ) ) LOG . debug ( arg ) ;
if ( LOG . isDebugEnabled ( arg ) ) LOG . debug ( arg ) ;
if ( LOG . isDebugEnabled ( arg ) ) LOG . debug ( arg ) ;
if ( LOG . isDebugEnabled ( arg ) ) LOG . debug ( arg ) ;
if ( LOG . isDebugEnabled ( arg ) ) LOG . debug ( arg ) ;
if ( LOG . isDebugEnabled ( arg ) ) LOG . debug ( arg ) ;
if ( LOG . isDebugEnabled ( arg ) ) LOG . debug ( arg ) ;
if ( LOG . isDebugEnabled ( arg ) ) LOG . debug ( arg ) ;
if ( LOG . isDebugEnabled ( arg ) ) LOG . debug ( arg ) ;
if ( LOG . isDebugEnabled ( arg ) ) LOG . debug ( arg ) ;
if ( LOG . isDebugEnabled ( arg ) ) LOG . debug ( arg ) ;
if ( LOG . isDebugEnabled ( arg ) ) LOG . debug ( arg ) ;
if ( LOG . isDebugEnabled ( arg ) ) LOG . debug ( arg ) ;
if ( LOG . isDebugEnabled ( arg ) ) LOG . debug ( arg ) ;
if ( LOG . isDebugEnabled ( arg ) ) LOG . debug ( arg ) ;
if ( LOG . isDebugEnabled ( arg ) ) LOG . debug ( arg ) ;
if ( LOG . isDebugEnabled ( arg ) ) LOG . debug ( arg ) ;
if ( LOG . isDebugEnabled ( arg ) ) LOG . debug ( arg ) ;
if ( LOG . isDebugEnabled ( arg ) ) LOG . debug ( arg ) ;
if ( LOG . isDebugEnabled ( arg ) ) LOG . debug ( arg ) ;
if ( LOG . isDebugEnabled ( arg ) ) LOG . debug ( arg ) ;
if ( LOG . isDebugEnabled ( arg ) ) LOG . debug ( arg ) ;
if ( LOG . isDebugEnabled ( arg ) ) LOG . debug ( arg ) ;
if ( LOG . isDebugEnabled ( arg ) ) LOG . debug ( arg ) ;
if ( LOG . isDebugEnabled ( arg ) ) LOG . debug ( arg ) ;
if ( LOG . isDebugEnabled ( arg ) ) LOG . debug ( arg ) ;
if ( LOG . isDebugEnabled ( arg ) ) LOG . debug ( arg ) ;
if ( LOG . isDebugEnabled ( arg ) ) LOG . debug ( arg ) ;
if ( LOG . isDebugEnabled ( arg ) ) LOG . debug ( arg ) ;
if ( <unk> ( arg ) ) <unk> ( arg ) ;
if ( LOG . isDebugEnabled ( arg ) ) throw new <unk> ( arg ) ;
Config . debug ( arg ) ;
if ( Main . DEBUG ) System . err . println ( arg ) ;
if ( Main . DEBUG ) e . printStackTrace ( arg ) ;
if ( MultiPartInputStream . this . _config . getMaxFileSize ( arg ) > 0 && _size + 1 > MultiPartInputStream . this . _config . getMaxFileSize ( arg ) ) throw new IllegalStateException ( arg ) ;
if ( MultiPartInputStream . this . _config . getMaxFileSize ( arg ) > 0 && _size + length > MultiPartInputStream . this . _config . getMaxFileSize ( arg ) ) throw new IllegalStateException ( arg ) ;
if ( <unk> ) errorClose ( arg ) ;
errorClose ( arg ) ;
if ( <unk> ( arg ) ) return value . toString ( arg ) ;
if ( Thread . currentThread ( arg ) . getName ( arg ) . contains ( arg ) ) new Throwable ( arg ) . printStackTrace ( arg ) ;
if ( Thread . currentThread ( arg ) . getName ( arg ) . contains ( arg ) ) new Throwable ( arg ) . printStackTrace ( arg ) ;
if ( <unk> ) return LOG != null ;
if ( LOG != null ) return true ;
if ( LOG . isDebugEnabled ( arg ) ) LOG . debug ( arg ) ;
if ( LOG . isDebugEnabled ( arg ) ) LOG . debug ( arg ) ;
if ( LOG . isDebugEnabled ( arg ) ) LOG . debug ( arg ) ;
if ( LOG . isDebugEnabled ( arg ) ) LOG . debug ( arg ) ;
if ( LOG . isDebugEnabled ( arg ) ) LOG . debug ( arg ) ;
if ( LOG . isDebugEnabled ( arg ) ) LOG . debug ( arg ) ;
if ( LOG . isDebugEnabled ( arg ) ) LOG . debug ( arg ) ;
if ( LOG . isDebugEnabled ( arg ) ) LOG . debug ( arg ) ;
if ( LOG . isDebugEnabled ( arg ) ) LOG . debug ( arg ) ;
if ( LOG . isDebugEnabled ( arg ) ) LOG . debug ( arg ) ;
if ( _properties . containsKey ( arg ) ) return _properties . get ( arg ) ;
if ( _acceptorThreads != null ) _acceptorThreads [ _acceptor ] = null ;
_acceptors [ _acceptor ] = null ;
if ( _aggregate == null ) _aggregate = _channel . getByteBufferPool ( arg ) . acquire ( arg ) ;
if ( _allowLazyAuthentication &&! info . isAuthMandatory ( arg ) && a == Authentication . UNAUTHENTICATED ) a = new DeferredAuthentication ( arg ) ;
if ( _allowLazyAuthentication &&! mandatory ) return _deferred ;
if ( _allowLazyAuthentication &&! mandatory ) return new DeferredAuthenticator . DeferredAuthentication ( arg ) ;
if ( _appReadFuture != null &&! _appReadFuture . isDone ( arg ) && _netReadFuture == null &&! BufferUtil . isFull ( arg ) ) _netReadFuture = scheduleOnReadable ( arg ) ;
if ( _async . <unk> ( arg ) &&! _async . isAsyncStarted ( arg ) ) throw new IllegalStateException ( arg ) ;
if ( _asyncListeners == null ) _asyncListeners = new ArrayList <> ( arg ) ;
if ( _asyncListeners == null ) _asyncListeners = new ArrayList <> ( arg ) ;
if ( _authentication == null ) throw new Authentication . Failed ( arg ) ;
if ( _authentication instanceof Authentication . Deferred ) setAuthentication ( arg ) ;
if ( _authentication instanceof Authentication . Deferred ) setAuthentication ( arg ) ;
if ( _authentication instanceof Authentication . Deferred ) setAuthentication ( arg ) ;
if ( _authentication instanceof Authentication . Deferred ) setAuthentication ( arg ) ;
if ( _authentication instanceof Authentication . Deferred ) _authentication = ( ( Authentication . Deferred ) _authentication ) . <unk> ( arg ) ;
if ( _baseParameters == null ) _baseParameters = new MultiMap < String > ( arg ) ;
if ( _baseParameters == null ) _baseParameters = new MultiMap ( arg ) ;
if ( _buffer != null ) _cachedSize = _cachedSize - _buffer . length ( arg ) ;
if ( _buffer != null && _buffer . hasContent ( arg ) ) return _endp . flush ( arg ) ;
if ( _buffer . length ( arg ) < <unk> ) return total_filled ;
if ( _buffer . length ( arg ) < 4 ) return total_filled ;
if ( _buffer == null ) _buffer = _buffers . getData ( arg ) ;
if ( _buffer == null ) _buffer = _buffers . getData ( arg ) ;
if ( _buffer == null ) _buffer = mask ? _buffers . getData ( arg ) : _buffers . getDirectBuffer ( arg ) ;
if ( _content != null && _content . length ( arg ) > 0 ) return _content ;
if ( _content != null && _content . length ( arg ) > 0 ) return _content ;
Log . debug ( arg ) ;
if ( _cache == null ) Log . debug ( arg ) ;
<unk> ( arg ) ;
if ( _callback != null ) _callback . succeeded ( arg ) ;
if ( _callback != null ) <unk> ( arg ) ;
if ( _callback != null ) <unk> ( arg ) ;
if ( <unk> ) return false ;
if ( _cause == COMPLETED ) return null ;
if ( _cause == COMPLETED ) return null ;
if ( _channel != null ) getResponse ( arg ) . sendError ( arg ) ;
if ( _channel != null ) _channel . <unk> ( arg ) ;
if ( _processor != null ) _transport . sendError ( arg ) ;
LOG . warn ( arg ) ;
if ( _channel . isExpecting100Continue ( arg ) ) _channel . <unk> ( arg ) ;
if ( _channel . isExpecting102Processing ( arg ) &&! isCommitted ( arg ) ) _channel . commitResponse ( arg ) ;
if ( _channel . isExpecting102Processing ( arg ) &&! isCommitted ( arg ) ) _channel . commit ( arg ) ;
if ( _processor . isExpecting102Processing ( arg ) &&! isCommitted ( arg ) ) _controller . send1xx ( arg ) ;
if ( isIncluding ( arg ) ) return ;
if ( isIncluding ( arg ) ) return ;
if ( isIncluding ( arg ) ) return ;
if ( isIncluding ( arg ) ) return ;
if ( isIncluding ( arg ) ) return ;
if ( _chunk != null ) _bufferPool . release ( arg ) ;
if ( <unk> != null && current_thread != null ) current_thread . <unk> ( arg ) ;
if ( ! _persistent && isResponse ( arg ) && _contentLength == HttpTokens . UNKNOWN_CONTENT ) _contentLength = HttpTokens . EOF_CONTENT ;
if ( isClosed ( arg ) ) return ;
if ( isClosed ( arg ) ) throw new EOFException ( arg ) ;
if ( isClosed ( arg ) ) throw new EOFException ( arg ) ;
if ( isClosed ( arg ) ) return ;
if ( _closed ) throw new EofException ( arg ) ;
if ( _closed ) throw new EofException ( arg ) ;
if ( <unk> && _closedOut && _outbound . isBufferEmpty ( arg ) ) _endp . close ( arg ) ;
if ( isInputShutdown ( arg ) ) inBBuf . clear ( arg ) ;
if ( <unk> && inBBuf . hasRemaining ( arg ) ) inBBuf . clear ( arg ) ;
if ( _done ) throw new IllegalStateException ( arg ) ;
if ( _compressedStream != null ) _compressedStream . flush ( arg ) ;
if ( _config . getMaxRequestSize ( arg ) > 0 && total > _config . getMaxRequestSize ( arg ) ) throw new IllegalStateException ( arg ) ;
if ( _config . getMaxRequestSize ( arg ) > 0 && total > _config . getMaxRequestSize ( arg ) ) throw new IllegalStateException ( arg ) ;
if ( _contextsDir == null ) throw new IllegalStateException ( arg ) ;
if ( _connection != connection && _connection != null ) connectionUpgraded ( arg ) ;
if ( _connection != null ) _connection . sendError ( arg ) ;
if ( _channel != null ) _transport . sendError ( arg ) ;
if ( _connection . isExpecting102Processing ( arg ) &&! isCommitted ( arg ) ) _connection . send1xx ( arg ) ;
if ( _channel . isExpecting102Processing ( arg ) &&! isCommitted ( arg ) ) _transport . send1xx ( arg ) ;
if ( _channel . isIncluding ( arg ) ) return ;
if ( _channel . isIncluding ( arg ) ) return ;
if ( _channel . isIncluding ( arg ) ) return ;
if ( _channel . isIncluding ( arg ) ) return ;
if ( _connection instanceof AbstractHttpConnection ) ( arg ) . getRequest ( arg ) . getAsyncContinuation ( arg ) . cancel ( arg ) ;
if ( _connectors . remove ( arg ) ) removeBean ( arg ) ;
if ( _connectors [ i ] instanceof NetworkConnector ) ( arg ) . close ( arg ) ;
if ( _connectors [ i ] instanceof NetworkConnector ) ( arg ) . close ( arg ) ;
if ( _content != null && _content . remaining ( arg ) == 0 ) _content = null ;
if ( _content != null && _content . hasRemaining ( arg ) || _bufferChunked ) throw new IllegalStateException ( arg ) ;
if ( _content . remaining ( arg ) == 0 ) _content = null ;
if ( _endOfContent == EndOfContent . UNKNOWN_CONTENT ) _endOfContent = EndOfContent . EOF_CONTENT ;
if ( _contentPrepared == 0 && _response != null && ( arg ) ) _endOfContent = EndOfContent . NO_CONTENT ;
if ( _contentPrepared == 0 && response != null && ( arg ) ) _endOfContent = EndOfContent . NO_CONTENT ;
if ( _contentPrepared == 0 && isResponse ( arg ) && ( arg ) ) _content = EndOfContent . NO_CONTENT ;
if ( _contentWritten == 0 && isResponse ( arg ) && ( arg ) ) _contentLength = HttpTokens . NO_CONTENT ;
if ( _context != null ) _context . addListener ( arg ) ;
if ( _contextHandler == null ) initialize ( arg ) ;
if ( _contexts . isStarted ( arg ) ) <unk> . start ( arg ) ;
if ( _continuationListeners == null ) _continuationListeners = new ArrayList <> ( arg ) ;
if ( DEBUG ) System . err . println ( arg ) ;
if ( DEBUG ) System . err . println ( arg ) ;
if ( DEBUG ) System . err . println ( arg ) ;
if ( DEBUG ) System . err . println ( arg ) ;
if ( DEBUG ) System . err . println ( arg ) ;
if ( DEBUG ) System . err . println ( arg ) ;
if ( DEBUG ) System . err . println ( arg ) ;
if ( DEBUG ) System . err . println ( arg ) ;
if ( DEBUG ) System . err . println ( arg ) ;
if ( DEBUG ) System . err . println ( arg ) ;
if ( DEBUG ) System . err . println ( arg ) ;
if ( _debug ) LOG . debug ( arg ) ;
if ( _debug ) LOG . debug ( arg ) ;
if ( _debug ) LOG . debug ( arg ) ;
if ( _debug ) LOG . debug ( arg ) ;
if ( DEBUG ) e . printStackTrace ( arg ) ;
for ( Decorator decorator : _decorators ) decorator . <unk> ( arg ) ;
for ( Decorator decorator : _decorators ) decorator . <unk> ( arg ) ;
for ( Decorator decorator : _decorators ) f = decorator . <unk> ( arg ) ;
for ( Decorator decorator : _decorators ) l = decorator . <unk> ( arg ) ;
for ( Decorator decorator : _decorators ) s = decorator . <unk> ( arg ) ;
if ( _decryptedEndPoint . _fillInterest . isInterested ( arg ) ) _decryptedEndPoint . _fillInterest . onFail ( arg ) ;
_decryptedEndPoint . getFillInterest ( arg ) . fillable ( arg ) ;
_decryptedEndPoint . getFillInterest ( arg ) . onFail ( arg ) ;
if ( _decryptedEndPoint . _fillInterest . isInterested ( arg ) ) _decryptedEndPoint . _fillInterest . fillable ( arg ) ;
if ( _decryptedEndPoint . _fillInterest . isInterested ( arg ) ) _decryptedEndPoint . _fillInterest . failed ( arg ) ;
if ( _decryptedEndPoint . _fillInterest . isInterested ( arg ) ) _decryptedEndPoint . _fillInterest . readable ( arg ) ;
if ( DeferredAuthentication . isDeferred ( arg ) ) return Authentication . UNAUTHENTICATED ;
if ( DeferredAuthentication . isDeferred ( arg ) ) return Authentication . UNAUTHENTICATED ;
if ( DeferredAuthentication . isDeferred ( arg ) ) return Authentication . UNAUTHENTICATED ;
if ( _state >= STATE_DISPATCHED ) _key . interestOps ( arg ) ;
if ( _in . hasContent ( arg ) && _in . skip ( arg ) > 0 ) progress = true ;
if ( _enableStats ) connector . addBean ( arg ) ;
if ( parseNext ( arg ) > 0 ) continue ;
if ( parseNext ( arg ) > 0 ) continue ;
_endp . flush ( arg ) ;
_endp . flush ( arg ) ;
_endp . flush ( arg ) ;
_endp . flush ( arg ) ;
if ( _endp . isOpen ( arg ) && _eofIn && BufferUtil . isEmpty ( arg ) ) _engine . closeInbound ( arg ) ;
if ( _endp . isOpen ( arg ) && _endp . isInputShutdown ( arg ) &&! _inbound . hasContent ( arg ) ) closeInbound ( arg ) ;
if ( _endp . isOpen ( arg ) && _endp . isInputShutdown ( arg ) && BufferUtil . isEmpty ( arg ) ) _engine . closeInbound ( arg ) ;
if ( _endp . isOpen ( arg ) ) _idle . access ( arg ) ;
if ( _endp . isOpen ( arg ) ) readInterested ( arg ) ;
if ( _endp . isInputShutdown ( arg ) ) <unk> . clear ( arg ) . limit ( arg ) ;
if ( _event != null ) _event . <unk> ( arg ) ;
if ( _event != null ) return _event . getSuppliedRequest ( arg ) ;
if ( _responseWrapped && _event != null && _event . getSuppliedResponse ( arg ) != null ) return _event . getSuppliedResponse ( arg ) ;
if ( _event != null ) return _event . getRequest ( arg ) ;
if ( _event == null || request != _event . getSuppliedRequest ( arg ) || response != _event . getSuppliedResponse ( arg ) || context != _event . getServletContext ( arg ) ) _event = new AsyncEventState ( arg ) ;
if ( _event == null || request != _event . getRequest ( arg ) || response != _event . getResponse ( arg ) || context != _event . getServletContext ( arg ) ) _event = new AsyncEventState ( arg ) ;
selected_ciphers . removeAll ( arg ) ;
selected_protocols . removeAll ( arg ) ;
checkState ( arg ) ;
checkState ( arg ) ;
checkState ( arg ) ;
checkState ( arg ) ;
if ( _field1 . endsWith ( arg ) ) _endOfContent = EndOfContent . CHUNKED_CONTENT ;
if ( _field1 . endsWith ( arg ) ) _content = Content . CHUNKED_CONTENT ;
if ( _file != null && _file . exists ( arg ) ) _file . delete ( arg ) ;
if ( <unk> [ 0 ] == <unk> ) return consumed ;
if ( buffer == __FLUSH_CALLED_FILL ) return 0 ;
if ( buffer == __FLUSH_CALLED_FILL ) return null ;
if ( _writing ) return 0 ;
if ( _generator . addContent ( arg ) ) _connection . commitResponse ( arg ) ;
if ( super . _generator . getContentWritten ( arg ) > 0 ) throw new IllegalStateException ( arg ) ;
if ( _generator . isCommitted ( arg ) &&! _generator . isComplete ( arg ) &&! _endp . isOutputShutdown ( arg ) &&! _request . getAsyncContinuation ( arg ) . isAsyncStarted ( arg ) ) if ( _generator . isCommitted ( arg ) &&! _generator . isComplete ( arg ) &&! _endp . isOutputShutdown ( arg ) &&! _request . getAsyncContinuation ( arg ) . isAsyncStarted ( arg ) ) progress = true ;
if ( _generator . isCommitted ( arg ) &&! _generator . isComplete ( arg ) && _endp . isOpen ( arg ) ) ( arg ) . scheduleWrite ( arg ) ;
if ( <unk> != null ) _response . <unk> ( arg ) ;
buffer = _header ;
if ( _header . remaining ( arg ) > 0 ) throw new IllegalStateException ( arg ) ;
if ( _header . remaining ( arg ) > 0 ) throw new IllegalStateException ( arg ) ;
if ( _header == null ) _header = _buffers . getHeader ( arg ) ;
if ( _header == null ) _header = _buffers . getHeader ( arg ) ;
if ( _identityService != null && _runAsToken != null ) _identityService . unsetRunAs ( arg ) ;
if ( _identityService != null && _runAsToken != null ) _identityService . unsetRunAs ( arg ) ;
if ( _identityService != null && _runAsToken != null ) _identityService . unsetRunAs ( arg ) ;
if ( _identityService != null ) _identityService . unsetRunAs ( arg ) ;
if ( _identityService != null ) _identityService . unsetRunAs ( arg ) ;
if ( _identityService != null ) _identityService . unsetRunAs ( arg ) ;
if ( _identityService != null && _runAsToken != null ) old_run_as = _identityService . setRunAs ( arg ) ;
if ( _identityService != null && _runAsToken != null ) old_run_as = _identityService . setRunAs ( arg ) ;
if ( _identityService != null ) old_run_as = _identityService . setRunAs ( arg ) ;
if ( _identityService != null ) old_run_as = _identityService . setRunAs ( arg ) ;
if ( _identityService != null ) _previousAssociation = _identityService . associate ( arg ) ;
if ( identity_service != null ) _previousAssociation = identity_service . associate ( arg ) ;
if ( identity_service != null ) _previousAssociation = identity_service . associate ( arg ) ;
if ( _identityService == null && _realmName != null ) _identityService = new DefaultIdentityService ( arg ) ;
if ( _identityService == null && <unk> != null ) _identityService = new DefaultIdentityService ( arg ) ;
if ( _identityService == null && _realmName != null ) _identityService = new DefaultIdentityService ( arg ) ;
if ( _idleConnections . contains ( arg ) ) b . append ( arg ) ;
if ( _idleConnections . size ( arg ) > 0 ) connection = _idleConnections . remove ( arg ) ;
if ( _idleTimestamp != null ) scheduleIdle ( arg ) ;
if ( idleTimeout > 0 && isOpen ( arg ) ) <unk> . run ( arg ) ;
activate ( arg ) ;
_idleTimestamp = System . currentTimeMillis ( arg ) ;
setCheckForIdle ( arg ) ;
if ( _oshut && _in != null ) _in . close ( arg ) ;
if ( _in != null ) return BufferUtil . append ( arg ) ;
if ( _in != null ) return BufferUtil . flipPutFlip ( arg ) ;
if ( _in == null ) shutdownInput ( arg ) ;
if ( _info . getContentLength ( arg ) >= 0 ) _content = EndOfContent . CONTENT_LENGTH ;
if ( _info . getContentLength ( arg ) >= 0 ) _endOfContent = EndOfContent . CONTENT_LENGTH ;
if ( <unk> == null &&! <unk> ) throw new IllegalArgumentException ( arg ) ;
if ( isNotAvailable ( arg ) ) throw new IllegalStateException ( arg ) ;
if ( isNotAvailable ( arg ) ) throw new IllegalStateException ( arg ) ;
if ( isNotAvailable ( arg ) ) throw new IllegalStateException ( arg ) ;
if ( isNotAvailable ( arg ) ) throw new IllegalStateException ( arg ) ;
if ( isNotAvailable ( arg ) ) throw new IllegalStateException ( arg ) ;
if ( _key . isReadable ( arg ) ) _fillInterest . fillable ( arg ) ;
if ( _key . isReadable ( arg ) ) _fillInterest . readable ( arg ) ;
if ( _key != null && _key . isValid ( arg ) ) _key . interestOps ( arg ) ;
if ( _lastCookies != null && _fields == _fieldList . size ( arg ) ) _cookies = _lastCookies ;
if ( _list == null ) _list = new ArrayList < Object > ( arg ) ;
if ( <unk> <= 0 ) throw new IOException ( arg ) ;
_metadata . <unk> ( arg ) ;
if ( isRequest ( arg ) ) field . put ( arg ) ;
if ( isResponse ( arg ) && _status == 0 ) throw new EofException ( arg ) ;
if ( isResponse ( arg ) ) _persistent = true ;
if ( isResponse ( arg ) ) _persistent = true ;
if ( isResponse ( arg ) ) _persistent = false ;
if ( _mimeType != null && _mimeType . getCharset ( arg ) != null &&! _mimeType . <unk> ( arg ) ) charset = _mimeType . getCharset ( arg ) . toString ( arg ) ;
if ( <unk> != null ) encoding = MimeTypes . getCharsetFromContentType ( arg ) ;
if ( _more != 0 ) throw new NotUtf8Exception ( arg ) ;
if ( _more != 0 ) throw new NotUtf8Exception ( arg ) ;
if ( _more != 0 ) throw new NotUtf8Exception ( arg ) ;
if ( _more != 0 ) throw new NotUtf8Exception ( arg ) ;
if ( _expectedContinuationBytes != 0 ) throw new NotUtf8Exception ( arg ) ;
if ( _expectedContinuationBytes != 0 ) throw new NotUtf8Exception ( arg ) ;
if ( _expectedContinuationBytes != 0 ) throw new NotUtf8Exception ( arg ) ;
if ( _expectedContinuationBytes != 0 ) throw new NotUtf8Exception ( arg ) ;
if ( _name == null ) _name = held . getName ( arg ) +-+ Integer . toHexString ( arg ) ;
if ( _name == null ) _name = held . getName ( arg ) +-+ Integer . toHexString ( arg ) ;
if ( _netWriteFuture != null &&! _netWriteFuture . isDone ( arg ) ) return false ;
if ( _writing . get ( arg ) ) return false ;
if ( _noContent || _state != State . HEADER || _content != null && _content . hasRemaining ( arg ) || _bufferChunked || _head ) throw new IllegalStateException ( arg ) ;
if ( _open ) {
if ( _ordering == null && descriptor . <unk> ( arg ) ) _ordering = new Ordering . RelativeOrdering ( arg ) ;
if ( _ordering == null ) _ordering = new Ordering . AbsoluteOrdering ( arg ) ;
if ( _ordering == null ) _ordering = new Ordering . AbsoluteOrdering ( arg ) ;
if ( _ordering == null ) _ordering = new Ordering . AbsoluteOrdering ( arg ) ;
if ( <unk> != <unk> . <unk> ) throw new IllegalStateException ( arg ) ;
if ( _ishut && _out != null ) _out . close ( arg ) ;
_out . reopen ( arg ) ;
_out . reset ( arg ) ;
<unk> ( arg ) ;
if ( _outputState == Output . WRITER ) throw new IllegalStateException ( arg ) ;
if ( _outputState == Output . STREAM ) throw new IllegalStateException ( arg ) ;
if ( _outputState != OutputState . NONE ) return ;
if ( _outputType != OutputType . NONE ) return ;
if ( _outputState == OutputState . STREAM ) throw new IllegalStateException ( arg ) ;
if ( _outputState == OutputState . WRITER ) throw new IllegalStateException ( arg ) ;
if ( _outputType == OutputType . STREAM ) throw new IllegalStateException ( arg ) ;
if ( _parser . isIdle ( arg ) ) LOG . debug ( arg ) ;
if ( _parser . isComplete ( arg ) || _parser . isClosed ( arg ) ) return ;
if ( _parser . isIdle ( arg ) && ( arg ) ) throw new EofException ( arg ) ;
if ( _parser . isIdle ( arg ) && ( arg ) ) throw new EOFException ( arg ) ;
if ( _parser . <unk> ( arg ) && _generator . isPersistent ( arg ) &&! _channel . isExpecting100Continue ( arg ) ) _channel . getRequest ( arg ) . getHttpInput ( arg ) . consumeAll ( arg ) ;
if ( _parser . isInContent ( arg ) && _generator . isPersistent ( arg ) &&! _channel . isExpecting100Continue ( arg ) ) _channel . getRequest ( arg ) . getHttpInput ( arg ) . consumeAll ( arg ) ;
if ( _parser . isState ( arg ) || _parser . isState ( arg ) ) return false ;
if ( _parser . <unk> ( arg ) ) progress = true ;
if ( _parser == null ) <unk> ( arg ) ;
if ( _persistent == null ) _persistent = ( _info . getHttpVersion ( arg ) . ordinal ( arg ) > HttpVersion . HTTP_1_0 . ordinal ( arg ) ) ;
if ( _persistent == null ) _persistent = ( _version > HttpVersion . HTTP_1_0_ORDINAL ) ;
_writer = null ;
if ( _privateThreadPool ) server . getContainer ( arg ) . update ( arg ) ;
if ( _channel != null ) _channel . sendError ( arg ) ;
if ( _channel . isExpecting102Processing ( arg ) &&! isCommitted ( arg ) ) _channel . send1xx ( arg ) ;
if ( _channel . isIncluding ( arg ) ) return ;
if ( _channel . isIncluding ( arg ) ) return ;
if ( _channel . isIncluding ( arg ) ) return ;
if ( _channel . isIncluding ( arg ) ) return ;
if ( __properties . containsKey ( arg ) ) return __properties . get ( arg ) ;
if ( __properties . containsKey ( arg ) ) return __properties . get ( arg ) ;
<unk> . remove ( arg ) ;
if ( _rawString == null ) _rawString = new String ( arg ) ;
if ( _readBlocked != null ) _readable . signal ( arg ) ;
if ( _readBlocked && timeoutMs > 0 && now >= end ) return false ;
if ( _readBlocked != null ) _readable . <unk> ( arg ) ;
if ( _readFuture != null &&! _readFuture . isDone ( arg ) ) throw new IllegalStateException ( arg ) ;
if ( _readFuture != null &&! _readFuture . isDone ( arg ) ) throw new IllegalStateException ( arg ) ;
if ( _registration == null ) _registration = new Registration ( arg ) ;
if ( _registration == null ) _registration = new FilterHolder . Registration ( arg ) ;
if ( request != null ) field . putTo ( arg ) ;
if ( _wrapper . getRequest ( arg ) . getAttribute ( arg ) != null ) flush ( arg ) ;
if ( _requestBuffer != null ) _bufferPool . release ( arg ) ;
if ( _requestBuffer == null ) _requestBuffer = _bufferPool . acquire ( arg ) ;
if ( _requestBuffer == null ) _requestBuffer = _parser . isInContent ( arg ) ? _bufferPool . acquire ( arg ) : _bufferPool . acquire ( arg ) ;
if ( _requestBuffer == null ) fillInterested ( arg ) ;
if ( _requestBuffer == null ) readInterested ( arg ) ;
if ( _requestContentSource != null && _requestContentSource . <unk> ( arg ) ) _requestContentSource . <unk> ( arg ) ;
_requestLog . start ( arg ) ;
_requestLog . stop ( arg ) ;
if ( _requests <= 0 ) do_invalidate = true ;
if ( _requests <= 0 ) do_invalidate = true ;
if ( _resourceAliases == null ) _resourceAliases = new HashMap < String , String > ( arg ) ;
if ( <unk> == null ) return  ;
if ( response != null && status >= 200 && status != 204 && status != 304 ) header . put ( arg ) ;
if ( response != null ) _persistent = true ;
if ( _response . isCommitted ( arg ) || <unk> != null ) throw new IllegalStateException ( arg ) ;
if ( _responseBuffer != null ) _bufferPool . release ( arg ) ;
if ( _responseBuffer == null && _httpConfig . getResponseBufferSize ( arg ) >= size ) return ;
if ( _responseHeader != null ) _bufferPool . release ( arg ) ;
if ( _responseWrapped && _event != null && _event . getSuppliedResponse ( arg ) != null ) return _event . getSuppliedResponse ( arg ) ;
if ( _event != null && _event . getSuppliedResponse ( arg ) != null ) return _event . getSuppliedResponse ( arg ) ;
if ( <unk> ( arg ) ) this . getServletContext ( arg ) . setEnabled ( arg ) ;
if ( idx < _rowIndex . length && _rowIndex [ idx ] != 0 ) keySet ( arg ) ;
if ( _state . get ( arg ) == SelectorState . CHANGING ) _changes . offer ( arg ) ;
if ( _savedNewSessions == null ) _savedNewSessions = new HashMap <> ( arg ) ;
if ( _securityHandler == null && ( arg ) != 0 &&! isStarted ( arg ) ) <unk> ( arg ) ;
if ( _securityHandler == null && ( arg ) != 0 &&! isStarted ( arg ) ) _securityHandler = <unk> ( arg ) ;
if ( getServer ( arg ) . getSendDateHeader ( arg ) ) _response . getHttpFields ( arg ) . putDateField ( arg ) ;
if ( getServer ( arg ) . getSendDateHeader ( arg ) ) _response . getHttpFields ( arg ) . putDateField ( arg ) ;
if ( _server . getSendDateHeader ( arg ) ) _generator . <unk> ( arg ) ;
if ( _serverClasses == null ) _serverClasses = new ClasspathPattern ( arg ) ;
if ( _servlet == null ) _servlet = newInstance ( arg ) ;
if ( _servletHandler . <unk> ( arg ) ) LOG . ignore ( arg ) ;
if ( _servletHandler == null &&! isStarted ( arg ) ) <unk> ( arg ) ;
if ( _servletHandler == null &&! isStarted ( arg ) ) _servletHandler = <unk> ( arg ) ;
if ( _sessionHandler == null && ( arg ) != 0 &&! isStarted ( arg ) ) setSessionHandler ( arg ) ;
if ( _sessionHandler == null && ( arg ) != 0 &&! isStarted ( arg ) ) _sessionHandler = <unk> ( arg ) ;
if ( _size . get ( arg ) > 0 ) e = ( E ) _elements [ _indexes [ HEAD_OFFSET ] ] ;
if ( ( arg ) &&! _socket . isClosed ( arg ) ) close ( arg ) ;
if ( <unk> == HandshakeStatus . NEED_WRAP ) continue ;
if ( _sslEngine . getUseClientMode ( arg ) ) _decryptedEndPoint . write ( arg ) ;
if ( _sslEngine . getUseClientMode ( arg ) ) getExecutor ( arg ) . execute ( arg ) ;
if ( _state != State . HEADER ) return ;
if ( _state != State . END && _state != State . CLOSED ) LOG . warn ( arg ) ;
if ( _state != State . START ) throw new IllegalStateException ( arg ) ;
if ( _state != State . START ) throw new IllegalStateException ( arg ) ;
if ( _state != State . START ) throw new IllegalStateException ( arg ) ;
if ( _state != State . START ) throw new IllegalStateException ( arg ) ;
if ( _state . get ( arg ) == SelectorState . CHANGING ) _changes . offer ( arg ) ;
if ( _state . get ( arg ) == SelectorState . CHANGING ) _changes . offer ( arg ) ;
if ( _state . compareAndSet ( arg ) || _state . compareAndSet ( arg ) ) return ;
if ( <unk> ) _changes . offer ( arg ) ;
if ( _state . handling ( arg ) == Action . <unk> ) sendResponse ( arg ) ;
if ( _state == __STARTED || _state == __STARTING ) return ;
if ( _state == STATE_END &&! _persistent && _status != 100 ) _endp . close ( arg ) ;
if ( _state == STATE_END && _persistent != null &&! _persistent && _status != 100 && _method == null ) _endp . shutdownOutput ( arg ) ;
if ( _state == STATE_END &&! _persistent && _status != 100 && _method == null ) _endp . shutdownOutput ( arg ) ;
if ( ! _persistent && ( arg ) ) _state = STATE_SEEKING_EOF ;
if ( _state == __STOPPING || _state == __STOPPED ) return ;
if ( _state == State . ASYNCWAIT ) return Next . WAIT ;
if ( _state == __ASYNCWAIT ) return true ;
if ( getStatus ( arg ) < HttpExchange . <unk> ) throw new IllegalStateException ( arg ) ;
if ( getStatus ( arg ) < HttpExchange . <unk> ) throw new IllegalStateException ( arg ) ;
if ( ! _roles . contains ( arg ) ) throw new IllegalArgumentException ( arg ) ;
if ( _systemClasses == null ) _systemClasses = new ClasspathPattern ( arg ) ;
if ( _threadPool . <unk> ( arg ) ) LOG . warn ( arg ) ;
if ( <unk> ) throw new <unk> ( arg ) ;
if ( _timer != null && _timerStop ) _timer . stop ( arg ) ;
if ( _timer != null && _timerStop ) _timer . cancel ( arg ) ;
if ( _toFlush > 0 ) <unk> ( arg ) ;
if ( _toFlush > 0 ) _endp . blockWritable ( arg ) ;
_unwrapBuf . compact ( arg ) ;
if ( <unk> && resource . getFile ( arg ) != null ) return BufferUtil . toBuffer ( arg ) ;
if ( _value == HttpHeaderValue . CHUNKED ) _endOfContent = EndOfContent . CHUNKED_CONTENT ;
if ( _value == HttpHeaderValue . CHUNKED ) _content = Content . CHUNKED_CONTENT ;
if ( _value == HttpHeaderValue . CHUNKED ) _contentLength = HttpTokens . CHUNKED_CONTENT ;
if ( t < _value . length && _value [ t ] != null ) set . add ( arg ) ;
if ( _verbose && LOG . isDebugEnabled ( arg ) ) LOG . debug ( arg ) ;
if ( _verbose ) LOG . debug ( arg ) ;
if ( _info . getHttpVersion ( arg ) == HttpVersion . HTTP_1_1 ) transfer_encoding = field ;
if ( _version == HttpVersion . HTTP_0_9_ORDINAL && _method != null ) _noContent = true ;
if ( _version == HttpVersion . HTTP_0_9_ORDINAL ) _noContent = true ;
if ( _persistent == null ) _persistent = ( _version > HttpVersions . HTTP_1_0_ORDINAL ) ;
if ( _persistent == null ) _persistent = ( _version > HttpVersions . HTTP_1_0_ORDINAL ) ;
if ( _webSocketFactory != null ) _webSocketFactory . setMaxIdleTime ( arg ) ;
if ( _writable ) LOG . debug ( arg ) ;
if ( _writeBlocked && timeoutMs > 0 && now >= end ) return false ;
if ( _writeBlocked != null ) <unk> . signal ( arg ) ;
if ( _writeFuture != null &&! _writeFuture . isDone ( arg ) ) _writeFuture . block ( arg ) ;
if ( _writeFuture != null &&! _writeFuture . isDone ( arg ) ) throw new IllegalStateException ( arg ) ;
if ( _writeFuture != null &&! _writeFuture . isDone ( arg ) ) throw new IllegalStateException ( arg ) ;
if ( _writeFuture != null &&! _writeFuture . isDone ( arg ) ) _writeFuture . get ( arg ) ;
if ( _writer != null &&! <unk> . _closed ) _writer . flush ( arg ) ;
if ( <unk> ) return 0 ;
if ( _jvmArgs . size ( arg ) > 0 || <unk> . size ( arg ) > 0 ) System . err . println ( arg ) ;
if ( abs . length ( arg ) != <unk> . length ( arg ) ||! abs . equals ( arg ) ) <unk> = Resource . toURL ( arg ) ;
if ( acceptors > 2 * <unk> . <unk> ( arg ) . <unk> ( arg ) ) LOG . warn ( arg ) ;
if ( active . size ( arg ) == 0 ) return Action . IDLE ;
if ( active . size ( arg ) == 0 ) return Next . IDLE ;
if ( allowedHeadersConfig == null ) allowedHeadersConfig = <unk> ;
if ( attr == null && Continuation . ATTRIBUTE . equals ( arg ) ) return _state ;
if ( attr == null && Continuation . ATTRIBUTE . equals ( arg ) ) return getAsyncContinuation ( arg ) ;
if ( <unk> == AuthStatus . SEND_FAILURE ) return Authentication . FAILURE ;
if ( authentication == null || authentication == Authentication . NOT_CHECKED ) authentication = authenticator == null ? Authentication . UNAUTHENTICATED : authenticator . <unk> ( arg ) ;
if ( authentication instanceof Authentication . User && _identityService != null ) _previousAssociation = _identityService . associate ( arg ) ;
if ( authentication instanceof Authentication . User && identity_service != null ) _previousAssociation = identity_service . associate ( arg ) ;
if ( authentication instanceof Authentication . User && identity_service != null ) _previousAssociation = identity_service . associate ( arg ) ;
if ( b < 0 || b > 15 ) throw new <unk> ( arg ) ;
if ( this instanceof Buffer . CaseInsensitve || b instanceof Buffer . CaseInsensitve ) return new ByteArrayBuffer . CaseInsensitive ( arg ) ;
if ( big == null ) big = _bigIndex [ t ] = new char [ 128 ] ;
if ( <unk> != null ) <unk> ( arg ) . addAll ( arg ) ;
<unk> ( arg ) ;
if ( buffer != null && buffer . length ( arg ) > 0 ) content ( arg ) ;
if ( buffer == null ) return 0 ;
if ( buffer == null ) return <unk> ? null * number : number ;
if ( buffer2 == null ) LOG . warn ( arg ) ;
if ( buffer2 == null ) LOG . warn ( arg ) ;
if ( buffers . size ( arg ) == 0 ) return Action . IDLE ;
if ( buffers . size ( arg ) == 0 ) return Next . IDLE ;
if ( c . endsWith ( arg ) ) transfer_encoding . putTo ( arg ) ;
if ( c . endsWith ( arg ) ) putTo ( arg ) ;
if ( <unk> ( arg ) && c < 128 ) c = StringUtil . <unk> [ c ] ;
if ( c == null ||! ( arg ) || ( arg ) . <unk> ( arg ) ) chain . doFilter ( arg ) ;
if ( c == <unk> ) break ;
if ( _cache == null ) resource = <unk> ( arg ) ;
if ( registerFlushInterest ( arg ) ) completeWrite ( arg ) ;
if ( registerFlushInterest ( arg ) ) continue retry ;
if ( can_read &&! _readFuture . isDone ( arg ) ) _readFuture . ready ( arg ) ;
if ( can_read &&! _readFuture . isDone ( arg ) ) _readFuture . complete ( arg ) ;
if ( can_read &&! _readFuture . isComplete ( arg ) ) _readFuture . ready ( arg ) ;
if ( can_read ) _readInterest . readable ( arg ) ;
if ( ch < 0 ) throw new BadMessage ( arg ) ;
if ( charset != null && charset . length ( arg ) > 0 &&! <unk> ) <unk> ( arg ) ;
if ( charset == null ) charset = ENCODING ;
if ( charset == null ) charset = ENCODING ;
if ( charset == null ) charset = ENCODING ;
if ( check ) LOG . debug ( arg ) ;
if ( cl != null && cl instanceof WebAppClassLoader && <unk> != null ) ( arg ) . setName ( arg ) ;
if ( classLoader != null && classLoader instanceof WebAppClassLoader && <unk> ( arg ) != null ) ( arg ) . setName ( arg ) ;
if ( classpath != null ) holder . setInitParameter ( arg ) ;
if ( clazz . isInstance ( arg ) ) return clazz . <unk> ( arg ) ;
if ( content != null ) {
if ( tell_app ) _webSocket . onClose ( arg ) ;
if ( tell_app ) _webSocket . onClose ( arg ) ;
if ( ! closed ) {
if ( close ) _endp . close ( arg ) ;
if ( code != <unk> ) LOG . warn ( arg ) ;
if ( exchangeComplete ) notifyComplete ( arg ) ;
if ( configuration . <unk> ( arg ) && authenticator != null ) authenticator = new DeferredAuthenticator ( arg ) ;
if ( connection . getEndPoint ( arg ) . <unk> ( arg ) != null ) <unk> = new Address ( arg ) ;
if ( connection1 == null ) connection1 = destination . getIdleConnections ( arg ) . poll ( arg ) ;
if ( connectionHdr . indexOf ( arg ) < 0 && connectionHdr . indexOf ( arg ) < 0 ) connectionHdr = null ;
if ( connectors [ i ] . getServer ( arg ) != this ) throw new IllegalArgumentException ( arg ) ;
if ( content != AFTER ) content = buffer = AFTER ;
if ( content . getContentType ( arg ) != null && response . getContentType ( arg ) == null ) response . setContentType ( arg ) ;
if ( content . <unk> ( arg ) . equals ( arg ) ) match = true ;
if ( content == null ) content = new HttpContent . ResourceAsHttpContent ( arg ) ;
if ( contentType != null &&! response . getHttpFields ( arg ) . containsKey ( arg ) ) response . getHttpFields ( arg ) . put ( arg ) ;
if ( <unk> == null && isResponse ( arg ) && _status >= 200 && _status != 204 && _status != 304 ) _header . put ( arg ) ;
if ( context != null ) basis = getContextName ( arg ) ;
if ( context != null ) basis = getContextName ( arg ) ;
if ( <unk> != null ) context . <unk> ( arg ) ;
if ( contextVhost . startsWith ( arg ) ) match = match || contextVhost . <unk> ( arg ) ;
if ( <unk> == WebSocketConnectionRFC6455 . <unk> ) System . err . println ( arg ) ;
close ( arg ) ;
if ( cookie != null ) _processor . getResponse ( arg ) . addCookie ( arg ) ;
if ( cookie != null ) _channel . getResponse ( arg ) . addCookie ( arg ) ;
if ( cookie != null ) _channel . getResponse ( arg ) . addCookie ( arg ) ;
if ( cookies == null || cookies . length == 0 ) buf . append ( arg ) ;
if ( count > 1 && LOG . isDebugEnabled ( arg ) ) LOG . debug ( arg ) ;
if ( count > 1 ) LOG . debug ( arg ) ;
if ( ctx == null ) LOG . info ( arg ) ;
if ( <unk> == null ) return ;
if ( cursor == 0 ) state = State . ID_FLAGS ;
if ( date == null ) throw new IllegalArgumentException ( arg ) ;
if ( debug != 0 ) _log . debug ( arg ) ;
if ( debug != 0 ) _log . debug ( arg ) ;
if ( debug != 0 ) _log . debug ( arg ) ;
if ( debug != 0 ) _log . debug ( arg ) ;
if ( debug != 0 ) _log . debug ( arg ) ;
if ( debug != 0 ) _log . debug ( arg ) ;
if ( debug != 0 ) _log . debug ( arg ) ;
if ( decoded . hasRemaining ( arg ) ) result += StandardCharsets . UTF_8 . decode ( arg ) . toString ( arg ) ;
if ( decoded . hasRemaining ( arg ) ) result += StandardCharsets . UTF_8 . decode ( arg ) . toString ( arg ) ;
if ( decoder . <unk> ( arg ) ) break ;
if ( <unk> . equals ( arg ) ) return new <unk> ( arg ) ;
if ( <unk> ) LOG . debug ( arg ) ;
if ( destroys == null ) destroys = new ArrayList <> ( arg ) ;
if ( e instanceof <unk> ) LOG . ignore ( arg ) ;
if ( protocol . startsWith ( arg ) ) client . ping ( arg ) ;
if ( encoding == null ) return getContentAsString ( arg ) ;
else if ( encodingHeader . toLowerCase ( arg ) . contains ( arg ) ) return DEFLATE ;
if ( endp . isOpen ( arg ) ) readInterested ( arg ) ;
if ( endp instanceof SslConnection . ApplicationEndPoint ) endp = ( ( SslConnection . ApplicationEndPoint ) endp ) . getEndpoint ( arg ) ;
if ( endp instanceof SslConnection . SslEndPoint ) endp = ( ( SslConnection . SslEndPoint ) endp ) . getAsyncConnection ( arg ) . getEndPoint ( arg ) ;
if ( endp instanceof SslConnection . SslEndPoint ) endp = ( ( SslConnection . SslEndPoint ) endp ) . getAsyncConnection ( arg ) . getEndPoint ( arg ) ;
if ( endp instanceof SslConnection . ApplicationEndPoint ) endp = ( ( SslConnection . ApplicationEndPoint ) endp ) . getAsyncConnection ( arg ) . getEndPoint ( arg ) ;
if ( endp instanceof SslConnection . DecryptedEndPoint ) endp = ( ( SslConnection . DecryptedEndPoint ) endp ) . getConnection ( arg ) . getEndPoint ( arg ) ;
if ( endp instanceof SslConnection . DecryptedEndPoint ) endp = ( ( SslConnection . DecryptedEndPoint ) endp ) . getConnection ( arg ) . getEndPoint ( arg ) ;
if ( endp instanceof SslConnection . DecryptedEndPoint ) endp = ( ( SslConnection . DecryptedEndPoint ) endp ) . getAsyncConnection ( arg ) . getEndPoint ( arg ) ;
if ( endp instanceof SslConnection . DecryptedEndPoint ) endp = ( ( SslConnection . DecryptedEndPoint ) endp ) . getAsyncConnection ( arg ) . getEndPoint ( arg ) ;
if ( endp instanceof SslConnection . AppEndPoint ) endp = ( ( SslConnection . AppEndPoint ) endp ) . getEndpoint ( arg ) ;
if ( entry != null && entry . getValue ( arg ) != <unk> && ( arg ) ) welcome_servlet = welcome_in_context ;
if ( entry != null && ( arg ) ) welcome_servlet = welcome_in_context ;
if ( entry != null ) return entry ;
if ( entry . getKey ( arg ) != null && entry . getKey ( arg ) . endsWith ( arg ) &&! entry . getKey ( arg ) . contains ( arg ) ) applicableConstraints . add ( arg ) ;
if ( entry . getKey ( arg ) != null && entry . getKey ( arg ) . endsWith ( arg ) &&! entry . getKey ( arg ) . contains ( arg ) ) applicableConstraints . add ( arg ) ;
if ( error ) _endp . shutdownOutput ( arg ) ;
if ( error ) _transport . setPersistent ( arg ) ;
if ( error_handler == null ) error_handler = _processor . getServer ( arg ) . getBean ( arg ) ;
if ( error_handler == null ) error_handler = _connection . getServer ( arg ) . getBean ( arg ) ;
if ( error_handler == null ) error_handler = _channel . getServer ( arg ) . getBean ( arg ) ;
if ( error_handler == null ) error_handler = _channel . getServer ( arg ) . getBean ( arg ) ;
if ( <unk> != null ) _state . <unk> ( arg ) . <unk> ( arg ) ;
if ( ! <unk> && <unk> . equalsIgnoreCase ( arg ) && <unk> != null ) return true ;
if ( eventListeners != null ) for ( EventListener listener : eventListeners ) addEventListener ( arg ) ;
if ( exchange != null &&! failed ) success ( arg ) ;
if ( exchange != null && state == State . <unk> ) success ( arg ) ;
if ( exchange . getStatus ( arg ) <= HttpExchange . STATUS_WAITING_FOR_CONNECTION ) _exchanges . add ( arg ) ;
if ( exchange == null ) return Action . IDLE ;
if ( exchange == null ) return Next . IDLE ;
if ( exchange == null ) return State . IDLE ;
if ( <unk> . exists ( arg ) ) IO . delete ( arg ) ;
if ( f . getHeader ( arg ) == header && contains ( arg ) ) return true ;
if ( f . getHeader ( arg ) == name ) return _fields . remove ( arg ) ;
if ( f . getName ( arg ) . equalsIgnoreCase ( arg ) && contains ( arg ) ) return true ;
if ( f . getName ( arg ) . equalsIgnoreCase ( arg ) ) return _fields . remove ( arg ) ;
if ( failure != null ) frameBytes . fail ( arg ) ;
if ( failure != null ) frameBytes . fail ( arg ) ;
if ( length . get ( arg ) >= <unk> && failure == null &&! closed ) wait ( arg ) ;
if ( failure == null ) flush ( arg ) ;
if ( failure == null ) flush ( arg ) ;
if ( never ( arg ) ) nextHandle ( arg ) ;
if ( never ( arg ) ) nextHandle ( arg ) ;
if ( never ( arg ) ) nextScope ( arg ) ;
if ( never ( arg ) ) nextScope ( arg ) ;
if ( field . getName ( arg ) . equalsIgnoreCase ( arg ) && field . getValue ( arg ) != null ) return true ;
if ( field . getValue ( arg ) . startsWith ( arg ) ) _content = EndOfContent . SELF_DEFINING_CONTENT ;
if ( field . getValue ( arg ) . startsWith ( arg ) ) _endOfContent = EndOfContent . SELF_DEFINING_CONTENT ;
if ( field . getValue ( arg ) . startsWith ( arg ) ) _content = Content . SELF_DEFINING_CONTENT ;
if ( field == null ) field = CACHE . getBest ( arg ) ;
if ( <unk> . endsWith ( arg ) ) _webInfJarMap . put ( arg ) ;
if ( filled <= 0 || completed ) break ;
if ( filled <= 0 || completed ) break ;
if ( filled <= 0 ) return total_filled > 0 ? total_filled : filled ;
if ( filled <= 0 ) return ( arg ) > 0 ? ( total_filled + events ) : filled ;
if ( filled <= 0 ) return total_filled ;
if ( filled == 0 && _endp . isInputShutdown ( arg ) ) return null ;
if ( filled == 0 && _eofIn ) return null ;
if ( filled > 0 ) progress ++ ;
if ( <unk> != null ) addFilterMapping ( arg ) ;
if ( <unk> . appliesTo ( arg ) ) filters . add ( arg ) ;
if ( filters . isEmpty ( arg ) ) return null ;
if ( <unk> ) result = write ( arg ) ;
if ( <unk> ) LOG . debug ( arg ) ;
if ( ! isLengthFrame ( arg ) ) _buffer . put ( arg ) ;
if ( ! isLengthFrame ( arg ) ) _buffer . put ( arg ) ;
if ( frameBytes instanceof StandardSession . ControlFrameBytes ) queue . add ( arg ) ;
if ( generator . isEnd ( arg ) ) success ( arg ) ;
if ( generator . isEnd ( arg ) &&! failed ) success ( arg ) ;
if ( <unk> != null ) webApp . <unk> ( arg ) ;
if ( getContentType ( arg ) == null ||! getContentType ( arg ) . startsWith ( arg ) ) throw new ServletException ( arg ) ;
if ( getContentType ( arg ) == null ||! getContentType ( arg ) . startsWith ( arg ) ) throw new ServletException ( arg ) ;
if ( getEndPoint ( arg ) . getConnection ( arg ) != this ) return ;
if ( <unk> <= 0 ) return ;
updateBeans ( arg ) ;
updateBeans ( arg ) ;
if ( _configuration . getSendDateHeader ( arg ) ) _response . getHttpFields ( arg ) . put ( arg ) ;
if ( _configuration . getSendDateHeader ( arg ) ) _response . getHttpFields ( arg ) . put ( arg ) ;
if ( getState ( arg ) <= STATE_END || isState ( arg ) ) return null ;
if ( getStopAtShutdown ( arg ) ) ShutdownThread . register ( arg ) ;
if ( group != null ) tag = tag == null ? group : tag + group ;
if ( h != null && Log . isDebugEnabled ( arg ) ) out . append ( arg ) ;
if ( handle ) _channel . execute ( arg ) ;
if ( handle ) _channel . execute ( arg ) ;
if ( byClass == null || byClass . isAssignableFrom ( arg ) ) list = LazyList . add ( arg ) ;
handler . completed ( arg ) ;
if ( handler instanceof WebAppContext ) return handler ;
if ( handler instanceof WebAppContext ) return ( arg ) handler ;
if ( handlers != null ) for ( Handler handler : handlers ) if ( handlers != null ) handler . <unk> ( arg ) ;
if ( hasContent ) write ( arg ) . get ( arg ) ;
if ( header == null || header . capacity ( arg ) <= CHUNK_SIZE ) return Result . NEED_HEADER ;
if ( header == null || header . capacity ( arg ) <= CHUNK_SIZE ) return Result . NEED_HEADER ;
if ( BufferUtil . space ( arg ) < CHUNK_SIZE ) return Result . NEED_CHUNK ;
if ( holder . getClassName ( arg ) != null && holder . getClassName ( arg ) . equals ( arg ) ) results . add ( arg ) ;
if ( holders != null ) holders = holders . clone ( arg ) ;
if ( holders != null ) holders = holders . clone ( arg ) ;
if ( i == 0 ) _lastEndp . setIdleTimeout ( arg ) ;
if ( i == null ) return Collections . <unk> ( arg ) ;
if ( i > 0 && <unk> > 0 ) Thread . sleep ( arg ) ;
if ( i > 0 ) <unk> ( arg ) ;
if ( i >= _capacity ) i-= _capacity ;
if ( i >= _capacity ) i-= _capacity ;
if ( i >= _capacity ) i-= _capacity ;
if ( i >= _capacity ) i-= _capacity ;
if ( id != null ) _configuration . getIdMap ( arg ) . put ( arg ) ;
if ( id != null ) _configuration . getIdMap ( arg ) . put ( arg ) ;
if ( id != null ) _configuration . getIdMap ( arg ) . put ( arg ) ;
if ( id != null ) _configuration . getIdMap ( arg ) . put ( arg ) ;
if ( id != null ) _configuration . getIdMap ( arg ) . put ( arg ) ;
if ( id != null ) _configuration . getIdMap ( arg ) . put ( arg ) ;
if ( id != null ) _configuration . getIdMap ( arg ) . put ( arg ) ;
if ( idle ) goAway ( arg ) ;
if ( isOpen ( arg ) ) activate ( arg ) ;
if ( idleTimestamp != 0 && _maxIdleTime > 0 && now > ( arg ) ) idleExpired ( arg ) ;
if ( ! getChannel ( arg ) . isOpen ( arg ) || idleTimestamp != 0 && _maxIdleTime != 0 && now > ( arg ) ) idleExpired ( arg ) ;
if ( in == null || BufferUtil . hasContent ( arg ) ) getFillInterest ( arg ) . fillable ( arg ) ;
if ( in == null || BufferUtil . hasContent ( arg ) ) _fillInterest . fillable ( arg ) ;
if ( in == null || BufferUtil . hasContent ( arg ) ) _fillInterest . readable ( arg ) ;
if ( index < bytes . length ) return bytes [ index ++ ] & <unk> ;
if ( indirect != null && indirect . hasArray ( arg ) ) return new <unk> ( arg ) ;
if ( info == null ) throw new <unk> ( arg ) ;
if ( info == null ) return Result . <unk> ;
if ( info == null &&! _request . getMethod ( arg ) . equals ( arg ) ) throw new <unk> ( arg ) ;
if ( <unk> ( arg ) && BufferUtil . space ( arg ) < CHUNK_SIZE ) return Result . NEED_CHUNK ;
if ( isClosed ( arg ) ) throw new EofException ( arg ) ;
final <unk> callback = _channel . <unk> ( arg ) ;
if ( isCommitted ( arg ) ) LOG . warn ( arg ) ;
if ( isCommitted ( arg ) || <unk> ( arg ) > 0 ) throw new IllegalStateException ( arg ) ;
if ( isCommitted ( arg ) || _processor . isIncluding ( arg ) ) return ;
if ( isCommitted ( arg ) || _processor . isIncluding ( arg ) ) return ;
if ( isCommitted ( arg ) || _processor . isIncluding ( arg ) ) return ;
if ( isCommitted ( arg ) || _channel . isIncluding ( arg ) ) return ;
if ( isCommitted ( arg ) || _channel . isIncluding ( arg ) ) return ;
if ( isCommitted ( arg ) || _channel . isIncluding ( arg ) ) return ;
if ( isCommitted ( arg ) || _channel . isIncluding ( arg ) ) return ;
if ( isCommitted ( arg ) || _channel . isIncluding ( arg ) ) return ;
if ( isCommitted ( arg ) || _channel . isIncluding ( arg ) ) return ;
if ( _size == 0 ) return null ;
if ( isIncluding ( arg ) || isWriting ( arg ) ) return ;
if ( <unk> ( arg ) &&! DeferredAuthentication . isDeferred ( arg ) ) return _deferred ;
if ( <unk> ) close ( arg ) ;
if ( _transport . isPersistent ( arg ) ) _transport . <unk> ( arg ) ;
if ( isRequest ( arg ) ) field . putTo ( arg ) ;
if ( isStarted ( arg ) ) throw new IllegalStateException ( arg ) ;
if ( isStarted ( arg ) ) throw new IllegalStateException ( arg ) ;
l . start ( arg ) ;
if ( _contextHandler != null && _contextHandler . isStarted ( arg ) || _contextHandler == null && isStarted ( arg ) ) initialize ( arg ) ;
if ( isRunning ( arg ) ) throw new IllegalStateException ( arg ) ;
if ( isRunning ( arg ) ) throw new IllegalStateException ( arg ) ;
if ( javax . servlet . Servlet . class . isAssignableFrom ( arg ) || javax . servlet . Filter . class . isAssignableFrom ( arg ) || javax . servlet . ServletContextListener . class . isAssignableFrom ( arg ) || javax . servlet . ServletContextAttributeListener . class . isAssignableFrom ( arg ) || javax . servlet . ServletRequestListener . class . isAssignableFrom ( arg ) || javax . servlet . ServletRequestAttributeListener . class . isAssignableFrom ( arg ) || javax . servlet . http . HttpSessionListener . class . isAssignableFrom ( arg ) || javax . servlet . http . HttpSessionAttributeListener . class . isAssignableFrom ( arg ) || javax . servlet . AsyncListener . class . isAssignableFrom ( arg ) ) isServlet = true ;
if ( javax . servlet . Servlet . class . isAssignableFrom ( arg ) || javax . servlet . Filter . class . isAssignableFrom ( arg ) || javax . servlet . ServletContextListener . class . isAssignableFrom ( arg ) || javax . servlet . ServletContextAttributeListener . class . isAssignableFrom ( arg ) || javax . servlet . ServletRequestListener . class . isAssignableFrom ( arg ) || javax . servlet . ServletRequestAttributeListener . class . isAssignableFrom ( arg ) || javax . servlet . http . HttpSessionListener . class . isAssignableFrom ( arg ) || javax . servlet . http . HttpSessionAttributeListener . class . isAssignableFrom ( arg ) ) isServlet = true ;
if ( javax . servlet . Servlet . class . isAssignableFrom ( arg ) || javax . servlet . Filter . class . isAssignableFrom ( arg ) || javax . servlet . ServletContextListener . class . isAssignableFrom ( arg ) || javax . servlet . ServletContextAttributeListener . class . isAssignableFrom ( arg ) || javax . servlet . ServletRequestListener . class . isAssignableFrom ( arg ) || javax . servlet . ServletRequestAttributeListener . class . isAssignableFrom ( arg ) || javax . servlet . http . HttpSessionListener . class . isAssignableFrom ( arg ) || javax . servlet . http . HttpSessionAttributeListener . class . isAssignableFrom ( arg ) ) isServlet = true ;
if ( javax . servlet . Servlet . class . isAssignableFrom ( arg ) || javax . servlet . Filter . class . isAssignableFrom ( arg ) || javax . servlet . ServletContextListener . class . isAssignableFrom ( arg ) || javax . servlet . ServletContextAttributeListener . class . isAssignableFrom ( arg ) || javax . servlet . ServletRequestListener . class . isAssignableFrom ( arg ) || javax . servlet . ServletRequestAttributeListener . class . isAssignableFrom ( arg ) || javax . servlet . http . HttpSessionListener . class . isAssignableFrom ( arg ) || javax . servlet . http . HttpSessionAttributeListener . class . isAssignableFrom ( arg ) || javax . servlet . http . HttpSessionIdListener . class . isAssignableFrom ( arg ) || javax . servlet . AsyncListener . class . isAssignableFrom ( arg ) || javax . servlet . http . HttpUpgradeHandler . class . isAssignableFrom ( arg ) ) return true ;
if ( javax . servlet . Servlet . class . isAssignableFrom ( arg ) || javax . servlet . Filter . class . isAssignableFrom ( arg ) || javax . servlet . ServletContextListener . class . isAssignableFrom ( arg ) || javax . servlet . ServletContextAttributeListener . class . isAssignableFrom ( arg ) || javax . servlet . ServletRequestListener . class . isAssignableFrom ( arg ) || javax . servlet . ServletRequestAttributeListener . class . isAssignableFrom ( arg ) || javax . servlet . http . HttpSessionListener . class . isAssignableFrom ( arg ) || javax . servlet . http . HttpSessionAttributeListener . class . isAssignableFrom ( arg ) || javax . servlet . http . HttpSessionIdListener . class . isAssignableFrom ( arg ) || javax . servlet . AsyncListener . class . isAssignableFrom ( arg ) || javax . servlet . http . HttpUpgradeHandler . class . isAssignableFrom ( arg ) ) return true ;
if ( key . isReadable ( arg ) ) endpoint . selected ( arg ) ;
if ( key . isReadable ( arg ) ) endpoint . onSelected ( arg ) ;
if ( key . isReadable ( arg ) || key . isWritable ( arg ) ) ( arg ) . selected ( arg ) ;
if ( key . isReadable ( arg ) || key . isWritable ( arg ) ) ( arg ) . onSelected ( arg ) ;
if ( key == null ) return false ;
if ( key == null ) throw new IllegalArgumentException ( arg ) ;
if ( key == null ) throw new IllegalArgumentException ( arg ) ;
if ( key == null ) throw new IllegalArgumentException ( arg ) ;
if ( key == null ) throw new IllegalArgumentException ( arg ) ;
if ( key == null ) throw new IllegalArgumentException ( arg ) ;
if ( key == null ) throw new IllegalArgumentException ( arg ) ;
<unk> . close ( arg ) ;
if ( l . isRunning ( arg ) ) stop ( arg ) ;
if ( l > 0 ) flushed += l ;
if ( <unk> % 1000 == 0 ) Thread . sleep ( arg ) ;
if ( len < 0 ) close ( arg ) ;
if ( len < 0 ) _channel . close ( arg ) ;
if ( len > _arrayBuffer . length ) len = _arrayBuffer . length ;
if ( len2 < 0 ) _eof = true ;
if ( len2 < 0 ) _eof = true ;
while ( arg ) wait ( arg ) ;
if ( length == 0 ) _out . closeIfAllContentWritten ( arg ) ;
if ( length == 0 ) out . closeIfAllContentWritten ( arg ) ;
if ( length == 0 ) out . closeIfAllContentWritten ( arg ) ;
if ( length >= 0 && length < _wrapper . getMinCompressSize ( arg ) ) doNotCompress ( arg ) ;
if ( length > 0 ) ( arg ) . <unk> ( arg ) ;
if ( length < 0 && <unk> == null || length >= 0 && length < _wrapper . getMinCompressSize ( arg ) ) doNotCompress ( arg ) ;
listener . onBegin ( arg ) ;
listener . <unk> ( arg ) ;
connection . setSession ( arg ) ;
listener . onFailure ( arg ) ;
listener . onHeaders ( arg ) ;
listener . <unk> ( arg ) ;
listener . onSuccess ( arg ) ;
if ( complete ) client . removeConversation ( arg ) ;
if ( listener instanceof ContinuationListener ) throw new IllegalArgumentException ( arg ) ;
if ( listener instanceof Schedulable ) ( arg ) . schedule ( arg ) ;
if ( listener instanceof Schedulable ) ( arg ) . schedule ( arg ) ;
if ( listener instanceof ServletRequestAttributeListener ) _requestAttributeListeners . add ( arg ) ;
if ( <unk> != null ) _response . getHttpFields ( arg ) . put ( arg ) ;
if ( <unk> != null ) _response . getHttpFields ( arg ) . putDateField ( arg ) ;
if ( lo != ln ) put ( arg ) ;
if ( lo != ln ) put ( arg ) ;
if ( lo != ln ) put ( arg ) ;
if ( local ) close ( arg ) ;
<unk> ( arg ) ;
if ( locale == null || isCommitted ( arg ) || _processor . isIncluding ( arg ) ) return ;
if ( locale == null || isCommitted ( arg ) || _channel . isIncluding ( arg ) ) return ;
if ( locale == null || isCommitted ( arg ) || _channel . isIncluding ( arg ) ) return ;
if ( log . getName ( arg ) . startsWith ( arg ) && log instanceof StdErrLog ) ( arg ) . setLevel ( arg ) ;
if ( log . getName ( arg ) . startsWith ( arg ) && log instanceof StdErrLog ) ( arg ) . setLevel ( arg ) ;
if ( log . getName ( arg ) . startsWith ( arg ) && log instanceof StdErrLog ) ( arg ) . setLevel ( arg ) ;
if ( log . getName ( arg ) . startsWith ( arg ) && log instanceof StdErrLog ) ( arg ) . setLevel ( arg ) ;
( ( StdErrLog ) Log . getLogger ( arg ) ) . setHideStacks ( arg ) ;
if ( async != null & m . _async . compareAndSet ( arg ) ) async . dispatch ( arg ) ;
if ( ! mandatory ) return _deferred ;
if ( mapping . appliesTo ( arg ) ) filters . add ( arg ) ;
if ( mapping . appliesTo ( arg ) ) filters . add ( arg ) ;
if ( max > 0 && <unk> > max ) throw new IllegalStateException ( arg ) ;
if ( maxIdleTime < 0 ) maxIdleTime = ( int ) _factory . getSelectorManager ( arg ) . getMaxIdleTime ( arg ) ;
if ( max_cache_size != null || max_cached_file_size != null || max_cached_files != null ) LOG . debug ( arg ) ;
if ( max_cache_size != null || max_cached_file_size != null || max_cached_files != null ) Log . debug ( arg ) ;
write ( arg ) ;
if ( message == null ) message = HttpStatus . getMessage ( arg ) ;
if ( message == null ) message = HttpStatus . getMessage ( arg ) ;
if ( message == null ) message = HttpStatus . getMessage ( arg ) ;
if ( method != null &&! <unk> ) <unk> = method . asString ( arg ) ;
if ( method == HttpMethod . POST && request . getContent ( arg ) != null ) method = HttpMethod . GET ;
if ( <unk> . size ( arg ) > 0 && httpConstraintMapping != null ) httpConstraintMapping . <unk> ( arg ) ;
if ( <unk> != null ) _webSocketFactory . setMaxIdleTime ( arg ) ;
if ( <unk> != null ) <unk> = Long . valueOf ( arg ) ;
if ( ! last ) throw new UnsupportedOperationException ( arg ) ;
if ( <unk> ) throw new IllegalStateException ( arg ) ;
if ( n == null ) break ;
if ( n == null ) break ;
if ( name != null ) _request . getHttpFields ( arg ) . add ( arg ) ;
if ( name . endsWith ( arg ) ) return true ;
if ( name . toLowerCase ( arg ) . startsWith ( arg ) ) return Collections . < String > enumeration ( arg ) ;
if ( h == null ) field . putTo ( arg ) ;
if ( needsFill ( arg ) ) fillable ( arg ) ;
if ( <unk> > 0 ) _underFlown = false ;
<unk> : while ( arg ) {
if ( <unk> != <unk> ) <unk> ( arg ) ;
if ( newLength > maxLength ) throw new IllegalStateException ( arg ) ;
if ( newLength > maxLength ) response . abort ( arg ) ;
if ( <unk> != null ) _configuration . getIdMap ( arg ) . put ( arg ) ;
if ( o == null ) o = super . getAttribute ( arg ) ;
if ( obj == null && node . size ( arg ) > 0 ) throw new IllegalStateException ( arg ) ;
if ( old != null && old != connection ) _selector . getSelectorManager ( arg ) . connectionUpgraded ( arg ) ;
if ( old <= idleTimeout ) return ;
if ( sessionManager != null ) sessionManager . setSessionHandler ( arg ) ;
if ( <unk> && _statsStartedAt . get ( arg ) != null ) return ;
if ( _endp . <unk> ( arg ) && parseNext ( arg ) > 0 ) continue ;
if ( path != null &&!  . equals ( arg ) ) <unk> . put ( arg ) ;
if ( pattern . equals ( arg ) ) <unk> = m ;
if ( <unk> ( arg ) ) return ;
if ( request . port ( arg ) > 0 && port != request . port ( arg ) ) throw new IllegalArgumentException ( arg ) ;
if ( port < 0 ) port = HttpScheme . HTTPS . toString ( arg ) . equalsIgnoreCase ( arg ) ? 443 : 80 ;
if ( port < 0 ) port = HttpScheme . HTTPS . asString ( arg ) . equalsIgnoreCase ( arg ) ? 443 : 80 ;
if ( port < 0 ) port = HttpScheme . HTTPS . equalsIgnoreCase ( arg ) ? 443 : 80 ;
port = <unk> ( arg ) ;
if ( port >= 0 && getPort ( arg ) != port ) throw new IllegalArgumentException ( arg ) ;
if ( prev . compareAndSet ( arg ) ) next . _prev = prev ;
if ( prev . compareAndSet ( arg ) ) next . _prev = prev ;
if ( prev_next == this && prev . <unk> ( arg ) ) return prev ;
if ( protocol != null && protocol . startsWith ( arg ) ) client . ping ( arg ) ;
if ( <unk> != null ) _cache . <unk> ( arg ) ;
if ( needsFill ( arg ) ) readable ( arg ) ;
if ( remote == null ) remote = _transport . getRemoteAddress ( arg ) ;
if ( remote == null ) remote = _transport . getRemoteAddress ( arg ) ;
if ( remote == null ) remote = _transport . getRemoteAddress ( arg ) ;
if ( remote == null ) remote = _channel . getRemoteAddress ( arg ) ;
if ( remote == null ) remote = _channel . getRemoteAddress ( arg ) ;
if ( remote == null ) remote = _channel . getRemoteAddress ( arg ) ;
if ( remote == null ) remote = _processor . getRemoteAddress ( arg ) ;
if ( remote == null ) remote = _processor . getRemoteAddress ( arg ) ;
if ( remote == null ) remote = _processor . getRemoteAddress ( arg ) ;
removeBean ( arg ) ;
if ( <unk> ) LOG . warn ( arg ) ;
if ( request != null ) putTo ( arg ) ;
if ( request . <unk> ( arg ) ) redirect . abort ( arg ) ;
if ( request . getContentLength ( arg ) > 0 &&! MimeTypes . FORM_ENCODED . equals ( arg ) &&! request . getContentType ( arg ) . startsWith ( arg ) ) _content = IO . toString ( arg ) ;
if ( request . getContentLength ( arg ) > 0 &&! MimeTypes . FORM_ENCODED . equals ( arg ) ) _content = IO . toString ( arg ) ;
if ( request . method ( arg ) == null ) request . method ( arg ) ;
if ( <unk> || request . <unk> ( arg ) == null ) request . <unk> ( arg ) ;
if ( request . getURI ( arg ) . toString ( arg ) . startsWith ( arg ) ) request . header ( arg ) ;
request . header ( arg ) ;
if ( request . getMethod ( arg ) == HttpMethod . GET || request . getMethod ( arg ) == HttpMethod . HEAD ) redirect ( arg ) ;
if ( request . getURI ( arg ) . startsWith ( arg ) ) request . header ( arg ) ;
if ( resource . exists ( arg ) ) LOG . warn ( arg ) ;
if ( result != null && decrementAndGetSize ( arg ) > 0 ) signalProducer ( arg ) ;
if ( result && decrementAndGetSize ( arg ) > 0 ) <unk> ( arg ) ;
if ( result && <unk> ) indexes . incrementAndGet ( arg ) ;
if ( result ) indexes . incrementAndGet ( arg ) ;
if ( result && decrementAndGetSize ( arg ) > 0 ) signalProducer ( arg ) ;
if ( result . bytesProduced ( arg ) > 0 &&! _appReadFuture . isDone ( arg ) ) _appReadFuture . ready ( arg ) ;
if ( result . bytesProduced ( arg ) > 0 ) _appEndPoint . <unk> ( arg ) ;
if ( result . bytesProduced ( arg ) > 0 &&! _appReadFuture . isDone ( arg ) ) _appReadFuture . complete ( arg ) ;
if ( <unk> instanceof <unk> . <unk> ) ( arg ) . <unk> ( arg ) ;
if ( sc < 200 || sc == 204 || sc == 205 || sc >= 300 ) noGzip ( arg ) ;
if ( sc < 200 || sc == 204 || sc == 205 || sc >= 300 ) noGzip ( arg ) ;
if ( scheduler != null && _timeoutMs > 0 ) _event . <unk> ( arg ) ;
if ( scheduler != null && _timeoutMs > 0 ) _event . _timeout = scheduler . schedule ( arg ) ;
if ( scheduler == null ) scheduler = new TimerScheduler ( arg ) ;
if ( scheduler == null ) scheduler = new ScheduledExecutorScheduler ( arg ) ;
if ( <unk> != null ) unsatisfied_options . removeAll ( arg ) ;
if ( security_handler != null ) _identityService = security_handler . getIdentityService ( arg ) ;
if ( <unk> ) addHeader ( arg ) ;
if ( serverClasses != null || serverClasses instanceof String [ ] ) _serverClasses = new ClasspathPattern ( arg ) ;
String protocol = <unk> version ;
if ( session != null &&! getEndPoint ( arg ) . isOutputShutdown ( arg ) ) session . shutdown ( arg ) ;
if ( session == null ) return Authentication . NOT_CHECKED ;
set = setStatusExpired ( arg ) ;
set = setStatusExpired ( arg ) ;
set = setStatusExpired ( arg ) ;
set = setStatusExpired ( arg ) ;
set = setStatusExpired ( arg ) ;
set = setStatusExpired ( arg ) ;
if ( getSize ( arg ) != that . getSize ( arg ) ) return false ;
if ( <unk> < 0 || resource . exists ( arg ) ) return false ;
if ( _socket . isInputShutdown ( arg ) &&! _socket . isClosed ( arg ) ) close ( arg ) ;
if ( _socket . isOutputShutdown ( arg ) &&! _socket . isClosed ( arg ) ) close ( arg ) ;
<unk> . addAll ( arg ) ;
boolean <unk> =! start_ini . exists ( arg ) ;
if ( stream != null ) stream . process ( arg ) ;
if ( streamId % 2 != <unk> . get ( arg ) % 2 ) <unk> . <unk> ( arg ) ;
<unk> ( arg ) ;
if ( super . _generator . isContentWritten ( arg ) ) throw new IllegalStateException ( arg ) ;
if ( svr == null ||! svr . getStopAtShutdown ( arg ) ) continue ;
if ( systemClasses != null && systemClasses instanceof String [ ] ) _systemClasses = new ClasspathPattern ( arg ) ;
if ( t . _nextIndex [ index ] == null ) break ;
if ( t . _nextIndex [ index ] == null ) break ;
if ( th != null && request . isAsyncStarted ( arg ) ) baseRequest . getHttpChannelState ( arg ) . <unk> ( arg ) ;
if ( this . _jettyEnvXml != null ) <unk> . <unk> ( arg ) ;
if ( this . <unk> != null ) this . server . <unk> ( arg ) ;
if ( _privateThreadPool && _threadPool != null && threadPool instanceof LifeCycle ) ( arg ) . stop ( arg ) ;
if ( threads != null ) for ( Thread thread : threads ) if ( threads != null ) thread . join ( arg ) ;
if ( <unk> ) throw new <unk> ( arg ) ;
if ( tmpDir . exists ( arg ) ) IO . delete ( arg ) ;
if ( tmpDir . exists ( arg ) ) IO . delete ( arg ) ;
if ( toFill == _unwrapBuf && _unwrapBuf . hasContent ( arg ) ) _aEndp . asyncDispatch ( arg ) ;
if ( toFill == _unwrapBuf && _unwrapBuf . hasContent ( arg ) &&! _connection . isSuspended ( arg ) ) _aEndp . dispatch ( arg ) ;
if ( toFill == _unwrapBuf && _unwrapBuf . hasContent ( arg ) &&! _connection . isSuspended ( arg ) ) _aEndp . asyncDispatch ( arg ) ;
if ( toFill == _unwrapBuf && BufferUtil . hasContent ( arg ) ) _aEndp . asyncDispatch ( arg ) ;
if ( tr [ r ] . _body != null ) assertEquals ( arg ) ;
if ( tr [ r ] . body != null ) throw new Exception ( arg ) ;
if ( tr [ r ] . _body != null ) throw new Exception ( arg ) ;
if ( type . equals ( arg ) || type . equals ( arg ) ) return value . <unk> ( arg ) ;
if ( type == null && item != null ) type = item . getClass ( arg ) ;
if ( <unk> . getStatus ( arg ) == <unk> . <unk> ) _underFlown = true ;
if ( updateState ( arg ) == null ) fail ( arg ) ;
if ( <unk> == null || _contextHandler == null ) return null ;
if ( url != null ) if ( url != null ) LOG . debug ( arg ) ;
if ( url == null && resource . startsWith ( arg ) ) url = <unk> . <unk> ( arg ) ;
if ( user != null ) return new <unk> ( arg ) ;
if ( v != null && v . length ( arg ) > 0 ) cmd . append ( arg ) . append ( arg ) ;
if ( validateHeader ( arg ) && validateHeader ( arg ) && validateUriHeader ( arg ) ) pushSynHeadersValid . countDown ( arg ) ;
if ( validateUriHeader ( arg ) ) pushSynHeadersValid . countDown ( arg ) ;
if ( value != null && value . length ( arg ) > 0 ) QuotedStringTokenizer . quoteIfNeeded ( arg ) ;
if ( value instanceof String ) return ( arg ) . trim ( arg ) ;
if ( value == null ) _setter . invoke ( arg ) ;
if ( value == null ) value =  ;
if ( value == null ) return ;
if ( value == null ) value = <unk> ;
if ( version > 0 ) buf . append ( arg ) . append ( arg ) ;
if ( version != SPDY . <unk> && version != SPDY . <unk> ) throw new SessionException ( arg ) ;
if ( web . exists ( arg ) &&! web . isDirectory ( arg ) ) return web ;
if ( web . exists ( arg ) ) return web ;
if ( websocket != null ) _webSocketFactory . <unk> ( arg ) ;
if ( welcome != null && welcome . exists ( arg ) ) return <unk> [ i ] ;
if ( <unk> != null ) <unk> ( arg ) . addAll ( arg ) ;
if ( write . isDone ( arg ) ) return true ;
incomingFrames . incoming ( arg ) ;
incomingFrames . incoming ( arg ) ;
incomingFramesHandler . <unk> ( arg ) ;
ext . incomingFrame ( arg ) ;
ext . incomingFrame ( arg ) ;
assertTrue ( arg ) ;
assertTrue ( arg ) ;
assertTrue ( arg ) ;
assertTrue ( arg ) ;
assertTrue ( arg ) ;
assertTrue ( arg ) ;
<unk> ( arg ) ;
initBuffer ( arg ) ;
initBuffer ( arg ) ;
<unk> = new <unk> ( arg ) ;
injection . setTarget ( arg ) ;
injection . setTarget ( arg ) ;
( ( InjectionCollection ) context . getAttribute ( arg ) ) . add ( arg ) ;
<unk> . put ( arg ) ;
inputAvailable = false ;
int argIndex = node . size ( arg ) ;
int argIndex = node . size ( arg ) ;
int available = header == null ? 0 : header . length ( arg ) ;
int b = clientInputStream . read ( arg ) ;
int b = clientInputStream . read ( arg ) ;
int b = clientInputStream . read ( arg ) ;
int b = clientInputStream . read ( arg ) ;
final int <unk> = <unk> ;
int capacity = _elements . length ;
int capacity = _elements . length ;
int capacity = _elements . length ;
int capacity = _elements . length ;
int <unk> = length > MAX_OUTPUT_CHARS ? MAX_OUTPUT_CHARS : length ;
int <unk> = elements . size ( arg ) ;
int code = ( ( 0xff & buf [ 2 ] ) * 0x100 ) + ( 0xff & buf [ 3 ] ) ;
int code = <unk> . <unk> ;
int <unk> = serverAddress . indexOf ( arg ) ;
int contentLength = headers . get ( arg ) . <unk> ( arg ) ;
int current = volatileGetInt ( arg ) ;
final boolean <unk> ;
long d = Long . <unk> ( arg ) ;
int filesize = tester . getOutputBufferSize ( arg ) * 4 ;
int filesize = tester . getOutputBufferSize ( arg ) * 4 ;
int filesize = tester . getOutputBufferSize ( arg ) * 4 ;
int filesize = tester . getOutputBufferSize ( arg ) * 4 ;
int filesize = CompressedResponseWrapper . DEFAULT_BUFFER_SIZE * 4 ;
int filesize = CompressedResponseWrapper . DEFAULT_BUFFER_SIZE * 4 ;
int filesize = CompressedResponseWrapper . DEFAULT_BUFFER_SIZE * 4 ;
int filesize = CompressedResponseWrapper . DEFAULT_BUFFER_SIZE * 4 ;
int filesize = CompressedResponseWrapper . DEFAULT_BUFFER_SIZE * 4 ;
int filesize = CompressedResponseWrapper . DEFAULT_BUFFER_SIZE * 4 ;
int filled = BufferUtil . flipPutFlip ( arg ) ;
filled = _endp . fill ( arg ) ;
filled = endPoint . fill ( arg ) ;
int filled = getEndPoint ( arg ) . fill ( arg ) ;
filled = getEndPoint ( arg ) . fill ( arg ) ;
int flushed = _buffer . hasContent ( arg ) ? _endp . flush ( arg ) : 0 ;
int flushed = _generator . flushBuffer ( arg ) ;
int head = _indexes [ HEAD_OFFSET ] ;
int <unk> = 0 ;
int i = _indexes [ HEAD_OFFSET ] + index ;
int i = _indexes [ HEAD_OFFSET ] + index ;
int i = _indexes [ HEAD_OFFSET ] + index ;
int <unk> = msg == null ? null : msg . indexOf ( arg ) ;
int index = _config . size ( arg ) ;
int index = 0 ;
int index = __lookup [ c & 0x7f ] ;
int index = __lookup [ c & 0x7f ] ;
int index = __lookup [ c & 0x7f ] ;
int index = __lookup [ c & 0x7f ] ;
int index = __lookup [ c & 0x7f ] ;
int iterations = 100 ;
int iterations = 200 ;
int iterations = 10000 ;
int l = _loops [ i ] . get ( arg ) ;
int <unk> = _next == 0 ? ( <unk> . length - 1 ) : ( _next - 1 ) ;
int <unk> = name . <unk> ( arg ) ;
int len = null ;
len = _endp . flush ( arg ) ;
int len = _channel . read ( arg ) ;
int len = <unk> . length ;
int length = <unk> . read ( arg ) ;
int loops = 10000 ;
int lrmit = getLowResourcesMaxIdleTime ( arg ) ;
int lrmit = getLowResourcesMaxIdleTime ( arg ) ;
final int maxConnections = client . <unk> ( arg ) ;
boolean progress = true ;
int node = t ;
int p = view . position ( arg ) ;
long period = ( seconds * 1000L ) ;
long period = _manager . <unk> ( arg ) * 1000L ;
phaser . register ( arg ) ;
int pingCount = 1000 ;
int pingCount = 10 ;
int port = <unk> ;
int port = ( ( NetworkConnector ) _server . getConnectors ( arg ) [ 0 ] ) . getLocalPort ( arg ) ;
int port = connector . getLocalPort ( arg ) ;
int port = connector . getLocalPort ( arg ) ;
int port = request . getPort ( arg ) ;
int pos = flipToFill ( arg ) ;
int pos = flipToFill ( arg ) ;
continuation . addContinuationListener ( arg ) ;
process ( arg ) ;
int proxyPort = connector . getLocalPort ( arg ) ;
int proxyPort = proxyPort ( arg ) ;
int <unk> = <unk> ;
int read = read ( arg ) ;
int read = read ( arg ) ;
int read = _endPoint . fill ( arg ) ;
int read = _endPoint . fill ( arg ) ;
int requests = ( connection instanceof AbstractHttpConnection ) ? ( ( AbstractHttpConnection ) connection ) . <unk> ( arg ) : 0 ;
int result = name . toLowerCase ( arg ) . hashCode ( arg ) ;
int result = name . toLowerCase ( arg ) . hashCode ( arg ) ;
int result = name . hashCode ( arg ) ;
int <unk> = <unk> . get ( arg ) + ( 2 * _providers ) ;
serverPort = connector . getLocalPort ( arg ) ;
serverPort = connector . getLocalPort ( arg ) ;
int size = _buffer . remaining ( arg ) ;
int size = getBufferSize ( arg ) ;
int size = frame . getPayloadLength ( arg ) ;
int specifiedTimeout = 400 ;
int specifiedTimeout = 1000 ;
int specifiedTimeout = SslConnection . LOG . isDebugEnabled ( arg ) ? 2000 : 400 ;
int specifiedTimeout = 2000 ;
int <unk> = incomingFrames . size ( arg ) ;
getExchange . <unk> ( arg ) ;
int status = response != null ? response . getStatus ( arg ) : null ;
int streamId = stream . getId ( arg ) ;
int tail = _indexes [ TAIL_OFFSET ] ;
int tail = _indexes [ TAIL_OFFSET ] ;
int timeout = __tests [ i ] [ 1 ] . equals ( arg ) ? 0 : ( _random . nextInt ( arg ) * _random . nextInt ( arg ) + 1 ) ;
int to_flush = flushMask ( arg ) ;
int progress = 0 ;
int <unk> = 0 ;
@ SuppressWarnings ( arg ) int val = client . read ( arg ) ;
int version = request . getHeaderInt ( arg ) ;
int <unk> ;
int windowSize = connection . <unk> ( arg ) ;
int writes = 10000 ;
int writes = 1000 ;
final int writes = 200000 ;
int writes = 100000 ;
int writes = 100000 ;
boolean flushed = true ;
int x = session . getMaxInactiveInterval ( arg ) ;
if ( this == _cache . remove ( arg ) ) invalidate ( arg ) ;
if ( this == _cache . remove ( arg ) ) invalidate ( arg ) ;
<unk> ( arg ) ;
<unk> ( arg ) ;
callback . succeeded ( arg ) ;
progress |= ( flushed > 0 ) ;
ioState . onOpened ( arg ) ;
isComplete ( arg ) ;
item = getNextContent ( arg ) ;
item = getNextContent ( arg ) ;
queue . remove ( arg ) ;
<unk> . iterate ( arg ) ;
<unk> . match ( arg ) ;
<unk> . add ( arg ) ;
X509Certificate [ ] <unk> = ( X509Certificate [ ] ) request . getAttribute ( arg ) ;
java . util . EventListener listener = ( java . util . EventListener ) _context . getServletContext ( arg ) . createInstance ( arg ) ;
java . util . EventListener listener = ( java . util . EventListener ) _context . getServletContext ( arg ) . createListener ( arg ) ;
Certificate [ ] <unk> = <unk> . <unk> ( arg ) ;
jetty . copyWebapp ( arg ) ;
jetty . copyWebapp ( arg ) ;
jetty . copyWebapp ( arg ) ;
jetty . copyWebapp ( arg ) ;
jetty . copyWebapp ( arg ) ;
jetty . copyWebapp ( arg ) ;
jetty . <unk> ( arg ) ;
waitForDirectoryScan ( arg ) ;
waitForDirectoryScan ( arg ) ;
waitForDirectoryScan ( arg ) ;
waitForDirectoryScan ( arg ) ;
<unk> = <unk> . <unk> ( arg ) ;
jettyRemote . uncheckedSendFrame ( arg ) ;
jettyRemote . uncheckedSendFrame ( arg ) ;
close ( arg ) ;
getPolicy ( arg ) . setIdleTimeout ( arg ) ;
getPolicy ( arg ) . <unk> ( arg ) ;
getPolicy ( arg ) . <unk> ( arg ) ;
job = new RunningJob ( arg ) ;
if ( timeout <= 0 ) jobs . clear ( arg ) ;
jobs = new RunningJob [ 15 ] ;
jobs [ i ] = new RunningJob ( arg ) ;
jobs [ i ] = new RunningJob ( arg ) ;
closeNoExceptions ( arg ) ;
SelectionKey key = channel . register ( arg ) ;
SelectionKey key = channel . register ( arg ) ;
<unk> = 0 ;
super . callContextDestroyed ( arg ) ;
start ( arg ) ;
start ( arg ) ;
lastMessage = remote . sendStringByFuture ( arg ) ;
assertTrue ( arg ) ;
latch1 . countDown ( arg ) ;
flushed += BufferUtil . append ( arg ) ;
len = ssocket . getInputStream ( arg ) . read ( arg ) ;
length += ( ( i > 0 ) ? 2 : 0 ) + 2 + <unk> . <unk> ( arg ) . length ( arg ) + 2 + ( mimetype == null ? 0 : HttpHeaders . CONTENT_TYPE . length ( arg ) + 2 + mimetype . length ( arg ) ) + 2 + HttpHeaders . <unk> . length ( arg ) + 2 + header [ i ] . length ( arg ) + 2 + 2 + ( ibr . <unk> ( arg ) - ibr . <unk> ( arg ) ) + 1 ;
totalLength . addAndGet ( arg ) ;
totalLength . addAndGet ( arg ) ;
libExtClassLoader = LibExtClassLoaderHelper . <unk> ( arg ) ;
_lifecycle . <unk> ( arg ) ;
_lifecycle . <unk> ( arg ) ;
_lifecycle . <unk> ( arg ) ;
GraphOutputDot . write ( arg ) ;
GraphOutputDot . write ( arg ) ;
GraphOutputDot . write ( arg ) ;
reader . <unk> ( arg ) ;
output . append ( arg ) ;
output . <unk> ( arg ) ;
listener . get ( arg ) ;
listener . get ( arg ) ;
listener . get ( arg ) ;
if ( listener != null ) listener . onConnect ( arg ) ;
listener . onFailure ( arg ) ;
incomingFramesHandler . incoming ( arg ) ;
listener . <unk> ( arg ) ;
listener . onHeaders ( arg ) ;
incomingFramesHandler . incoming ( arg ) ;
listeners = _continuationListeners ;
listeners = _continuationListeners ;
List < Response . ResponseListener > listeners = new ArrayList <> ( arg ) ;
<unk> = <unk> ( arg ) ? ( request . getRemoteAddr ( arg ) + request . <unk> ( arg ) ) : request . getRemoteAddr ( arg ) ;
<unk> ( arg ) ;
location = URIUtil . addPaths ( arg ) ;
log . setLevel ( arg ) ;
log . setLevel ( arg ) ;
Class log_class = Loader . loadClass ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . debug ( arg ) ;
LOG . ignore ( arg ) ;
LOG . info ( arg ) ;
LOG . info ( arg ) ;
LOG . info ( arg ) ;
LOG . info ( arg ) ;
LOG . info ( arg ) ;
LOG . info ( arg ) ;
LOG . info ( arg ) ;
LOG . info ( arg ) ;
LOG . info ( arg ) ;
LOG . info ( arg ) ;
LOG . info ( arg ) ;
LOG . info ( arg ) ;
LOG . info ( arg ) ;
LOG . info ( arg ) ;
LOG . info ( arg ) ;
LOG . info ( arg ) ;
LOG . info ( arg ) ;
LOG . info ( arg ) ;
LOG . info ( arg ) ;
LOG . info ( arg ) ;
LOG . info ( arg ) ;
LOG . info ( arg ) ;
LOG . info ( arg ) ;
LOG . info ( arg ) ;
LOG . info ( arg ) ;
LOG . info ( arg ) ;
LOG . info ( arg ) ;
LOG . info ( arg ) ;
_logger . log ( arg ) ;
_logger . log ( arg ) ;
_logger . log ( arg ) ;
_logger . log ( arg ) ;
_logger . log ( arg ) ;
_logger . log ( arg ) ;
_logger . log ( arg ) ;
_logger . log ( arg ) ;
_logger . setLevel ( arg ) ;
logger . ignore ( arg ) ;
LOG . warn ( arg ) ;
LOG . warn ( arg ) ;
LOG . warn ( arg ) ;
long canwait = TimeUnit . NANOSECONDS . toMillis ( arg ) ;
long canwait = TimeUnit . NANOSECONDS . toMillis ( arg ) ;
long contentLength = content . getLength ( arg ) ;
long <unk> = ( _client . getTimeout ( arg ) > exchange . getTimeout ( arg ) ) ? _client . getTimeout ( arg ) : exchange . getTimeout ( arg ) ;
long current = <unk> ( arg ) ;
long duration = System . currentTimeMillis ( arg ) - connection . getEndPoint ( arg ) . getCreatedTimeStamp ( arg ) ;
long duration = System . currentTimeMillis ( arg ) - connection . getCreatedTimeStamp ( arg ) ;
long expected = System . currentTimeMillis ( arg ) + 1000 ;
long expected = System . currentTimeMillis ( arg ) + 1000 ;
long expected = System . currentTimeMillis ( arg ) + 1000 ;
long expected = System . currentTimeMillis ( arg ) + 1000 ;
long expected1 = System . currentTimeMillis ( arg ) + 1000 ;
long expected1 = System . currentTimeMillis ( arg ) + 1000 ;
_expireAt = System . currentTimeMillis ( arg ) + _timeoutMs ;
long filled = null ;
int filled = null ;
long idleForMs = connection . getEndPoint ( arg ) != null ? connection . getEndPoint ( arg ) . getMaxIdleTime ( arg ) : null ;
final long idleForMs = now - idleTimestamp ;
long <unk> = session . getMaxInactiveInterval ( arg ) * 1000L ;
long idleTimestamp = <unk> ( arg ) ;
long idleTimestamp = getIdleTimestamp ( arg ) ;
long idleTimestamp = getIdleTimestamp ( arg ) ;
long next = System . currentTimeMillis ( arg ) + <unk> ;
long now = _client . getNow ( arg ) ;
long period = <unk> * 1000L ;
long <unk> = _contentPrepared + BufferUtil . length ( arg ) ;
long <unk> = response . <unk> ( arg ) ;
start = System . currentTimeMillis ( arg ) ;
int total_filled = 0 ;
long wait = _changes . size ( arg ) == 0 ? <unk> : 0L ;
long wait = _changes . size ( arg ) == 0 ? <unk> : 0L ;
<unk> = new StringMap < String > ( arg ) ;
<unk> = new StringMap < String > ( arg ) ;
manager . setSessionIdManager ( arg ) ;
manager . setSessionIdManager ( arg ) ;
manager . setSessionIdManager ( arg ) ;
mandatory |= <unk> ( arg ) ;
mappings = new StringMap <> ( arg ) ;
mappings = new HashMap < String , RoleInfo > ( arg ) ;
if ( masker != null ) masker . <unk> ( arg ) ;
match = match || contextVhost . equalsIgnoreCase ( arg ) ;
server . addBean ( arg ) ;
member . _connection . write ( arg ) ;
member . connection . write ( arg ) ;
member . session . getRemote ( arg ) . sendStringByFuture ( arg ) ;
member . remote . sendString ( arg ) ;
member . remote . sendStringByFuture ( arg ) ;
<unk> [ 0 ] = ( byte ) ( 0x80 + OpCode . TEXT . <unk> ( arg ) ) ;
message . append ( arg ) . append ( arg ) ;
message . append ( arg ) . append ( arg ) ;
message . append ( arg ) . append ( arg ) ;
<unk> = true ;
this . messageHandlers . add ( arg ) ;
<unk> . offer ( arg ) ;
metaData . _ordering = new RelativeOrdering ( arg ) ;
context . getMetaData ( arg ) . addDiscoveredAnnotations ( arg ) ;
context . getMetaData ( arg ) . addDiscoveredAnnotations ( arg ) ;
context . getMetaData ( arg ) . <unk> ( arg ) ;
context . getMetaData ( arg ) . <unk> ( arg ) ;
context . getMetaData ( arg ) . <unk> ( arg ) ;
<unk> . setRequestURI ( arg ) ;
mm . <unk> ( arg ) ;
<unk> . addAll ( arg ) ;
_monitoredDir = Resource . newResource ( arg ) ;
progress = flushed > 0 || filled > 0 ;
<unk> = flushed > 0 || filled > 0 ||! _parser . isBufferEmpty ( arg ) ;
file . deleteOnExit ( arg ) ;
parts = mpis . getParts ( arg ) ;
parts = mpis . getParts ( arg ) ;
muxframe . setIsContinuation ( arg ) ;
muxframe . setIsContinuation ( arg ) ;
muxframe . <unk> ( arg ) ;
n = n - d * decDivisor ;
n = n - d * decDivisor ;
n = n - d * aDecDivisorsL ;
n = n - d * aDecDivisorsL ;
n = n - d * hexDivisor ;
n = n - d * hexDivisor ;
NIOBuffer <unk> = ( NIOBuffer ) buffer . buffer ( arg ) ;
return sessionIdSuffix . length ( arg ) > 0 ? sessionIdSuffix : null ;
name = context . evaluate ( arg ) ;
name = getContextName ( arg ) ;
<unk> = ( ( <unk> ) <unk> ) . <unk> ( arg ) ;
<unk> = true ;
new <unk> ( arg ) . iterate ( arg ) ;
new <unk> ( arg ) . iterate ( arg ) ;
Arrays . fill ( arg ) ;
FrameBuilder . ping ( arg ) . payload ( arg ) ;
ThreadLocalRandom . current ( arg ) . nextBytes ( arg ) ;
ThreadLocalRandom . current ( arg ) . nextBytes ( arg ) ;
ThreadLocalRandom . current ( arg ) . nextBytes ( arg ) ;
ThreadLocalRandom . current ( arg ) . nextBytes ( arg ) ;
ThreadLocalRandom . current ( arg ) . nextBytes ( arg ) ;
new <unk> ( arg ) . iterate ( arg ) ;
new Socket ( arg ) . close ( arg ) ;
new Socket ( arg ) . close ( arg ) ;
new Socket ( arg ) . close ( arg ) ;
new Thread ( arg ) . start ( arg ) ;
callback . run ( arg ) ;
newRequest . method ( arg ) . version ( arg ) . content ( arg ) . idleTimeout ( arg ) . timeout ( arg ) . followRedirects ( arg ) ;
newTail = 0 ;
action = Action . RECYCLE ;
action = _state . unhandle ( arg ) ;
nextIncoming ( arg ) ;
nextIncoming ( arg ) ;
<unk> ( arg ) ;
<unk> = protocol != null ? protocol : <unk> ;
<unk> [ s ++ ] = __rfc1421nibbles [ c ] ;
progress = true ;
node = ( node . _children == null ) ? null : node . _children [ c % __HASH_WIDTH ] ;
node = ( node . _children == null ) ? null : node . _children [ c % __HASH_WIDTH ] ;
node = ( node . _children == null ) ? null : node . _children [ c % __HASH_WIDTH ] ;
node = ( node . _children == null ) ? null : node . _children [ c % __HASH_WIDTH ] ;
node = ( node . _children == null ) ? null : node . _children [ c % __HASH_WIDTH ] ;
node = ( node . _children == null ) ? null : node . _children [ c % __HASH_WIDTH ] ;
<unk> = _nonceMap . get ( arg ) ;
forwardFailureComplete ( arg ) ;
forwardFailureComplete ( arg ) ;
forwardSuccessComplete ( arg ) ;
forwardSuccessComplete ( arg ) ;
responseNotifier . notifyHeaders ( arg ) ;
<unk> ( arg ) ;
for ( Request . Listener listener : request . listeners ( arg ) ) notifyBegin ( arg ) ;
responseNotifier . notifyComplete ( arg ) ;
responseNotifier . notifyComplete ( arg ) ;
notifier . <unk> ( arg ) ;
<unk> . notifyFailure ( arg ) ;
return true ;
return true ;
return true ;
return true ;
return true ;
complete ( arg ) ;
complete ( arg ) ;
fail ( arg ) ;
for ( Request . Listener listener : request . listeners ( arg ) ) notifyHeaders ( arg ) ;
notifyOnFailure ( arg ) ;
notifyOnFailure ( arg ) ;
for ( Request . Listener listener : request . listeners ( arg ) ) notifyQueued ( arg ) ;
requestNotifier . notifyBegin ( arg ) ;
requestNotifier . notifyFailure ( arg ) ;
if ( ! committed ) committed ( arg ) ;
notifyRequestHeaders ( arg ) ;
notifyRequestHeaders ( arg ) ;
requestNotifier . notifyQueued ( arg ) ;
requestNotifier . notifySuccess ( arg ) ;
notifySessionException ( arg ) ;
notifySessionException ( arg ) ;
for ( Request . Listener listener : request . listeners ( arg ) ) notifySuccess ( arg ) ;
obj = _configuration . getIdMap ( arg ) . get ( arg ) ;
offset += __tests [ i ] . length ( arg ) + 5 ;
checkContains ( arg ) ;
checkContains ( arg ) ;
checkContains ( arg ) ;
checkContains ( arg ) ;
checkContains ( arg ) ;
checkContains ( arg ) ;
old_run_as = _identityService . setRunAs ( arg ) ;
<unk> ( arg ) ;
<unk> ( arg ) ;
onEvent . getPolicy ( arg ) . assertValidMessageSize ( arg ) ;
onEvent . getPolicy ( arg ) . assertValidBinaryMessageSize ( arg ) ;
onEvent . getPolicy ( arg ) . assertValidMessageSize ( arg ) ;
<unk> ( arg ) ;
failureLatch . countDown ( arg ) ;
onPing ( arg ) ;
if ( <unk> . compareAndSet ( arg ) ) <unk> ( arg ) ;
<unk> ( arg ) ;
responseContent ( arg ) ;
responseFailure ( arg ) ;
<unk> ( arg ) ;
responseHeaders ( arg ) ;
<unk> ( arg ) ;
out . writeInt ( arg ) ;
out . writeInt ( arg ) ;
op . setEncoding ( arg ) ;
op . setEncoding ( arg ) ;
op . setEncoding ( arg ) ;
op . setEncoding ( arg ) ;
op . setEncoding ( arg ) ;
op . setEncoding ( arg ) ;
opcode = ( byte ) ( opcode & 0x7F ) ;
byte <unk> = opcode ;
continuation = true ;
continuation = true ;
opcode = <unk> ;
LOG . debug ( arg ) ;
ioState . onOpened ( arg ) ;
<unk> = <unk> . <unk> ;
<unk> . add ( arg ) ;
<unk> = ( ( _key != null && _key . isValid ( arg ) ) ? _key . interestOps ( arg ) : null ) ;
options . addAll ( arg ) ;
AbstractConnection c = destination . reserveConnection ( arg ) ;
WebSocketSession <unk> = ( WebSocketSession ) <unk> . get ( arg ) ;
out . append ( arg ) . append ( arg ) . append ( arg ) . append ( arg ) ;
super . dump ( arg ) ;
out . append ( arg ) . append ( arg ) . append ( arg ) . append ( arg ) ;
AggregateLifeCycle . dumpObject ( arg ) ;
AggregateLifeCycle . dumpObject ( arg ) ;
AggregateLifeCycle . dumpObject ( arg ) ;
if ( Log . isDebugEnabled ( arg ) ) out . append ( arg ) ;
if ( Log . isDebugEnabled ( arg ) ) out . append ( arg ) ;
out . println ( arg ) ;
accumulator . addBuffer ( arg ) ;
accumulator . addBuffer ( arg ) ;
out . setBufferPool ( arg ) ;
out . setBufferPool ( arg ) ;
<unk> . incrementAndGet ( arg ) ;
out [ <unk> ++ ] = ( byte ) ( length >> 8 ) ;
outbound . getRemote ( arg ) . sendString ( arg ) ;
outbound . getRemote ( arg ) . sendStringByFuture ( arg ) ;
<unk> ( arg ) ;
output ( arg ) ;
output ( arg ) ;
output ( arg ) ;
output ( arg ) ;
ioState . <unk> ( arg ) ;
outgoingFrame ( arg ) ;
output . write ( GET <unk> <unk> N + <unk> <unk> R N + <unk> websocket R N + <unk> <unk> R N + <unk> <unk> R N + <unk> http:
outputAvailable = false ;
<unk> . append ( arg ) . append ( arg ) . append ( arg ) . append ( arg ) ;
( ( MultiPartInputStream . MultiPart ) p ) . <unk> ( arg ) ;
for ( WebDescriptor <unk> : <unk> ( arg ) ) p . process ( arg ) ;
params . add ( arg ) ;
parent = _beans . get ( arg ) ;
parser . parseQuietly ( arg ) ;
parser . parseQuietly ( arg ) ;
parser . parseQuietly ( arg ) ;
return null ;
parser . setListener ( arg ) ;
parser . setListener ( arg ) ;
parser . setListener ( arg ) ;
parser . setListener ( arg ) ;
parser . setListener ( arg ) ;
parser . setListener ( arg ) ;
parser . setListener ( arg ) ;
parser . setListener ( arg ) ;
parser . setListener ( arg ) ;
parser . setListener ( arg ) ;
parser . setListener ( arg ) ;
parser . setListener ( arg ) ;
parser . setListener ( arg ) ;
parser . setListener ( arg ) ;
parser . setListener ( arg ) ;
parser . setListener ( arg ) ;
parser . setListener ( arg ) ;
parser . setListener ( arg ) ;
parser . setListener ( arg ) ;
parser . setListener ( arg ) ;
parser . setListener ( arg ) ;
parser . setListener ( arg ) ;
parser . setListener ( arg ) ;
parser . setListener ( arg ) ;
parser . setListener ( arg ) ;
parser . setListener ( arg ) ;
parser . setListener ( arg ) ;
parser . setListener ( arg ) ;
parser . setListener ( arg ) ;
parser . setListener ( arg ) ;
parser . setListener ( arg ) ;
parser . setListener ( arg ) ;
parser . setListener ( arg ) ;
parser . setListener ( arg ) ;
parser . setListener ( arg ) ;
parser . setListener ( arg ) ;
parser . setListener ( arg ) ;
parser . setListener ( arg ) ;
parser . setListener ( arg ) ;
parser . setListener ( arg ) ;
parser . setListener ( arg ) ;
parser . setListener ( arg ) ;
parser . setListener ( arg ) ;
parser . setListener ( arg ) ;
parser . setListener ( arg ) ;
parser . setListener ( arg ) ;
parser . shutdownInput ( arg ) ;
parser . shutdownInput ( arg ) ;
parser . inputShutdown ( arg ) ;
parser . inputShutdown ( arg ) ;
parser . parseAll ( arg ) ;
parser . parseAll ( arg ) ;
parser . parseAll ( arg ) ;
parser . parseAll ( arg ) ;
parser . parseAll ( arg ) ;
parser . parseAll ( arg ) ;
parser . parseAll ( arg ) ;
parser . parseAll ( arg ) ;
parseAll ( arg ) ;
while ( arg ) parser . parseNext ( arg ) ;
parser . registerHandler ( arg ) ;
parser . registerHandler ( arg ) ;
parser . registerHandler ( arg ) ;
parser . registerHandler ( arg ) ;
parser . registerHandler ( arg ) ;
parser . setIncomingFramesHandler ( arg ) ;
parser . setIncomingFramesHandler ( arg ) ;
parser . setIncomingFramesHandler ( arg ) ;
parser . setIncomingFramesHandler ( arg ) ;
parser . setIncomingFramesHandler ( arg ) ;
parser . setIncomingFramesHandler ( arg ) ;
parser . setIncomingFramesHandler ( arg ) ;
parser . setIncomingFramesHandler ( arg ) ;
parser . setIncomingFramesHandler ( arg ) ;
parser . setIncomingFramesHandler ( arg ) ;
parser . setIncomingFramesHandler ( arg ) ;
parser . setIncomingFramesHandler ( arg ) ;
parser . setIncomingFramesHandler ( arg ) ;
parser . setIncomingFramesHandler ( arg ) ;
parser . setIncomingFramesHandler ( arg ) ;
parser . setIncomingFramesHandler ( arg ) ;
parser . setIncomingFramesHandler ( arg ) ;
parser . setIncomingFramesHandler ( arg ) ;
parser . setIncomingFramesHandler ( arg ) ;
parser . setIncomingFramesHandler ( arg ) ;
parser . setIncomingFramesHandler ( arg ) ;
parser . setIncomingFramesHandler ( arg ) ;
parser . setIncomingFramesHandler ( arg ) ;
parser . setIncomingFramesHandler ( arg ) ;
parser . setIncomingFramesHandler ( arg ) ;
parser . setIncomingFramesHandler ( arg ) ;
parser . setIncomingFramesHandler ( arg ) ;
parser . setIncomingFramesHandler ( arg ) ;
parser . setIncomingFramesHandler ( arg ) ;
parser . setIncomingFramesHandler ( arg ) ;
parser . setIncomingFramesHandler ( arg ) ;
parser . setIncomingFramesHandler ( arg ) ;
parser . setIncomingFramesHandler ( arg ) ;
parser . setIncomingFramesHandler ( arg ) ;
parser . setIncomingFramesHandler ( arg ) ;
parser . setIncomingFramesHandler ( arg ) ;
parser . setIncomingFramesHandler ( arg ) ;
parser . setIncomingFramesHandler ( arg ) ;
parser . setIncomingFramesHandler ( arg ) ;
parser . setIncomingFramesHandler ( arg ) ;
parser . setIncomingFramesHandler ( arg ) ;
parser . setIncomingFramesHandler ( arg ) ;
parser . setIncomingFramesHandler ( arg ) ;
parser . setIncomingFramesHandler ( arg ) ;
parser . setIncomingFramesHandler ( arg ) ;
parser . setIncomingFramesHandler ( arg ) ;
parser . atEOF ( arg ) ;
parser . atEOF ( arg ) ;
HttpParser parser = new HttpParser ( arg ) ;
<unk> . put ( arg ) ;
path = request . getURI ( arg ) . toString ( arg ) ;
<unk> . reset ( arg ) ;
allPaths . add ( arg ) ;
allPaths . addAll ( arg ) ;
payload . putChar ( arg ) ;
payload . putChar ( arg ) ;
payload = bufferPool . acquire ( arg ) ;
data = null ;
data = null ;
data = null ;
payload = null ;
payloadLength = data . remaining ( arg ) ;
payloadLength = 0 ;
<unk> = _cache . get ( arg ) ;
pe . <unk> ( arg ) ;
pe . <unk> ( arg ) ;
pe . setName ( arg ) ;
pe . <unk> ( arg ) ;
PendingState < ? > pending = ( PendingState < ? > ) previous ;
<unk> ( arg ) ;
physical . open ( arg ) ;
physical . open ( arg ) ;
physical . setNextIncomingFrames ( arg ) ;
conn . ping ( arg ) ;
policies . add ( arg ) ;
driver . getPolicy ( arg ) . assertValidBinaryMessageSize ( arg ) ;
policy . assertValidMessageSize ( arg ) ;
driver . getPolicy ( arg ) . assertValidTextMessageSize ( arg ) ;
policy . <unk> ( arg ) ;
policy . setIdleTimeout ( arg ) ;
policy . setMaxTextMessageSize ( arg ) ;
policy . setMaxTextMessageSize ( arg ) ;
policy . setMaxTextMessageSize ( arg ) ;
policy . setMaxTextMessageSize ( arg ) ;
policy . setMaxMessageSize ( arg ) ;
policy . setMaxMessageSize ( arg ) ;
policy . setMaxMessageSize ( arg ) ;
policy . setMaxMessageSize ( arg ) ;
policy . setMaxMessageSize ( arg ) ;
policy . setMaxMessageSize ( arg ) ;
policy . setMaxMessageSize ( arg ) ;
<unk> <unk> <unk> ;
<unk> = ( JDBCSessionIdManager ) <unk> ;
prepared_after = _generator . <unk> ( arg ) ;
if ( _identityService != null ) previousIdentity = _identityService . associate ( arg ) ;
if ( _identityService != null ) previousIdentity = _identityService . associate ( arg ) ;
assertTrue ( arg ) ;
runChanges ( arg ) ;
runChanges ( arg ) ;
processConstraintMapping ( arg ) ;
processConstraintMapping ( arg ) ;
for ( <unk> d : <unk> ) _processor . process ( arg ) ;
progress = filled > 0 ;
if ( <unk> ( arg ) . exists ( arg ) ) properties . <unk> ( arg ) ;
setProperty ( arg ) ;
<unk> . setRequestURI ( arg ) ;
props = new HashMap < String , String > ( arg ) ;
_providers . add ( arg ) ;
_providers . remove ( arg ) ;
<unk> ( arg ) ;
proxyConnector . addConnectionFactory ( arg ) ;
proxyConnector . addConnectionFactory ( arg ) ;
proxyConnector . addConnectionFactory ( arg ) ;
proxyConnector . addConnectionFactory ( arg ) ;
proxyConnector . addConnectionFactory ( arg ) ;
proxyConnector = new SelectChannelConnector ( arg ) ;
proxyConnector = new <unk> ( arg ) ;
proxyConnector = new ChannelHttpConnector ( arg ) ;
stream . <unk> ( arg ) . <unk> ( arg ) ;
<unk> . complete ( arg ) ;
<unk> . requestStart ( arg ) ;
Set < String > pushResources = referrerPushStrategy . <unk> ( arg ) ;
<unk> ( arg ) ;
return failure ;
queue . fail ( arg ) ;
writeBytes . <unk> ( arg ) ;
tasks . offer ( arg ) ;
queue . append ( arg ) ;
iter . remove ( arg ) ;
if ( <unk> ( arg ) ) return true ;
<unk> . <unk> ( arg ) ;
BufferUtil . flipToFlush ( arg ) ;
readMore = read ( arg ) == 0 ;
fillInterested ( arg ) ;
fillInterested ( arg ) ;
fillInterested ( arg ) ;
readMore = ( read ( arg ) != null ) ;
_ready . await ( arg ) ;
_ready . countDown ( arg ) ;
exchange . receive ( arg ) ;
exchange . receive ( arg ) ;
exchange . receive ( arg ) ;
exchange . receive ( arg ) ;
session . syn ( arg ) ;
_reference . set ( arg ) ;
referrerPushStrategy . <unk> ( arg ) ;
configure ( arg ) ;
configure ( arg ) ;
holder . setInitParameter ( arg ) ;
holder . setInitParameter ( arg ) ;
holder . setInitParameter ( arg ) ;
holder . setInitOrder ( arg ) ;
holder . setInitOrder ( arg ) ;
holder . setRunAsRole ( arg ) ;
holder . setRunAsRole ( arg ) ;
if ( <unk> . compareAndSet ( arg ) ) {
close ( arg ) ;
remote . sendString ( arg ) ;
remote . sendString ( arg ) ;
remote . sendString ( arg ) ;
<unk> = Boolean . parseBoolean ( arg ) ;
close ( arg ) ;
flusher . <unk> ( arg ) ;
renewSession ( arg ) ;
renewSession ( arg ) ;
renewSession ( arg ) ;
req . append ( arg ) . append ( arg ) . append ( arg ) ;
req . append ( arg ) . append ( arg ) . append ( arg ) ;
if ( request . abort ( arg ) ) aborted . countDown ( arg ) ;
if ( request . abort ( arg ) ) aborted . countDown ( arg ) ;
base_request . <unk> ( arg ) . complete ( arg ) ;
request . getHttpChannel ( arg ) . getEndPoint ( arg ) . close ( arg ) ;
request . getHttpChannel ( arg ) . getConnection ( arg ) . getEndPoint ( arg ) . close ( arg ) ;
request . getServletContext ( arg ) . <unk> ( arg ) . <unk> ( arg ) ;
buf . append ( arg ) ;
if ( request . uri ( arg ) . startsWith ( arg ) ) request . header ( arg ) ;
request . <unk> ( arg ) ;
response . getHttpChannel ( arg ) . getRequest ( arg ) . <unk> ( arg ) ;
request . <unk> ( arg ) ;
request . put ( arg ) ;
destination . getRequestNotifier ( arg ) . notifyFailure ( arg ) ;
requestNotifier . <unk> ( arg ) ;
destination . getRequestNotifier ( arg ) . notifySuccess ( arg ) ;
task . cancel ( arg ) ;
_requests . add ( arg ) ;
_requests . add ( arg ) ;
requests . countDown ( arg ) ;
requests . countDown ( arg ) ;
assertTrue ( arg ) ;
assertTrue ( arg ) ;
assertTrue ( arg ) ;
assertTrue ( arg ) ;
assertTrue ( arg ) ;
assertTrue ( arg ) ;
<unk> = new HashSet < Resource > ( arg ) ;
if ( super . <unk> ( arg ) == null ) return null ;
resp . getWriter ( arg ) . write ( arg ) ;
resp . getWriter ( arg ) . print ( arg ) ;
if ( origin != null ) response . addHeader ( arg ) ;
assertTrue ( arg ) ;
assertEquals ( arg ) ;
assertEquals ( arg ) ;
assertTrue ( arg ) ;
assertTrue ( arg ) ;
assertTrue ( arg ) ;
assertEquals ( arg ) ;
response . closeOutput ( arg ) ;
response . getOutputStream ( arg ) . println ( arg ) ;
response . getOutputStream ( arg ) . println ( arg ) ;
response . getOutputStream ( arg ) . println ( arg ) ;
response . getOutputStream ( arg ) . println ( arg ) ;
response . getOutputStream ( arg ) . println ( arg ) ;
response . getOutputStream ( arg ) . println ( arg ) ;
response . getOutputStream ( arg ) . print ( arg ) ;
response . getOutputStream ( arg ) . print ( arg ) ;
IO . copy ( arg ) ;
response = HttpTester . parseResponse ( arg ) ;
response = HttpTester . parseResponse ( arg ) ;
response . addHeader ( arg ) ;
return IO . toString ( arg ) ;
response = client . newRequest ( arg ) . scheme ( arg ) . timeout ( arg ) . send ( arg ) ;
response = client . newRequest ( arg ) . timeout ( arg ) . send ( arg ) ;
response = client . newRequest ( arg ) . timeout ( arg ) . send ( arg ) ;
response = client . newRequest ( arg ) . timeout ( arg ) . send ( arg ) ;
response = client . newRequest ( arg ) . timeout ( arg ) . send ( arg ) ;
String response = connector . getResponses ( arg ) ;
String response = connector . getResponses ( arg ) ;
String response = connector . getResponses ( arg ) ;
String response = connector . getResponses ( arg ) ;
String response = connector . getResponses ( arg ) ;
HttpTester . Response response = http . request ( arg ) ;
HttpTester . Response response = http . request ( arg ) ;
HttpTester . Response response = http . request ( arg ) ;
HttpTester . Response response = http . request ( arg ) ;
HttpTester . Response response = http . request ( arg ) ;
HttpTester . Response response = http . request ( arg ) ;
HttpTester . Response response = http . request ( arg ) ;
HttpTester . Response response = http . request ( arg ) ;
HttpTester . Response response = http . request ( arg ) ;
HttpTester . Response response = http . request ( arg ) ;
HttpTester . Response response = http . request ( arg ) ;
HttpTester . Response response = http . request ( arg ) ;
HttpTester . Response response = http . request ( arg ) ;
HttpTester . Response response = http . request ( arg ) ;
response = BufferUtil . toString ( arg ) ;
response = BufferUtil . toString ( arg ) ;
response = request . timeout ( arg ) . send ( arg ) ;
response = request . timeout ( arg ) . send ( arg ) ;
response = request . timeout ( arg ) . send ( arg ) ;
response = request . timeout ( arg ) . send ( arg ) ;
HttpTester . Response response = responses . get ( arg ) ;
destination . getResponseNotifier ( arg ) . notifyComplete ( arg ) ;
destination . getResponseNotifier ( arg ) . notifyComplete ( arg ) ;
_fields . put ( arg ) ;
_fields . put ( arg ) ;
List < HttpTester . Response > responses = http . requests ( arg ) ;
List < HttpTester . Response > responses = http . requests ( arg ) ;
List < HttpTester . Response > responses = http . requests ( arg ) ;
List < HttpTester . Response > responses = http . requests ( arg ) ;
List < HttpTester . Response > responses = http . requests ( arg ) ;
List < HttpTester . Response > responses = http . requests ( arg ) ;
List < HttpTester . Response > responses = http . requests ( arg ) ;
List < HttpTester . Response > responses = http . requests ( arg ) ;
result += StandardCharsets . UTF_8 . decode ( arg ) . toString ( arg ) ;
result . setAsyncConnection ( arg ) ;
result . getProxyConfiguration ( arg ) . getProxies ( arg ) . add ( arg ) ;
result . getProxyConfiguration ( arg ) . getProxies ( arg ) . add ( arg ) ;
if ( session != null ) result = ( String ) session . getAttribute ( arg ) ;
result = ( prime * result ) + finRsvOp ;
result = <unk> * result + values . hashCode ( arg ) ;
result = WebSocketConnectionD00 . doTheHixieHixieShake ( arg ) ;
result = WebSocketConnectionD00 . doTheHixieHixieShake ( arg ) ;
result = WebSocketConnectionD00 . doTheHixieHixieShake ( arg ) ;
result = direct ? BufferUtil . allocateDirect ( arg ) : BufferUtil . allocate ( arg ) ;
result = gen . generate ( arg ) ;
result = gen . generate ( arg ) ;
result = gen . generate ( arg ) ;
result = gen . generate ( arg ) ;
result = gen . generate ( arg ) ;
result = gen . generate ( arg ) ;
result = gen . generate ( arg ) ;
result = gen . generate ( arg ) ;
result = gen . generate ( arg ) ;
result = gen . generate ( arg ) ;
result = gen . generate ( arg ) ;
result = gen . generate ( arg ) ;
result = gen . generate ( arg ) ;
result = gen . generate ( arg ) ;
result = gen . generate ( arg ) ;
result = gen . generate ( arg ) ;
result = gen . generate ( arg ) ;
result = gen . generate ( arg ) ;
result = gen . generate ( arg ) ;
result = gen . generate ( arg ) ;
result = gen . generate ( arg ) ;
result = gen . generate ( arg ) ;
result = gen . <unk> ( arg ) ;
result = gen . generate ( arg ) ;
result = gen . generate ( arg ) ;
result = gen . generate ( arg ) ;
result = gen . generate ( arg ) ;
result = gen . generate ( arg ) ;
result = gen . generate ( arg ) ;
result = gen . generate ( arg ) ;
result = gen . generate ( arg ) ;
result = gen . generate ( arg ) ;
result = gen . generate ( arg ) ;
result = gen . generate ( arg ) ;
result = gen . generate ( arg ) ;
result = gen . generate ( arg ) ;
result = gen . generate ( arg ) ;
result = gen . generate ( arg ) ;
result = gen . generate ( arg ) ;
result = gen . generate ( arg ) ;
result = gen . generate ( arg ) ;
result = gen . generate ( arg ) ;
result = gen . generate ( arg ) ;
result = gen . generate ( arg ) ;
result = gen . generate ( arg ) ;
result = gen . generate ( arg ) ;
result = gen . generate ( arg ) ;
result = gen . generate ( arg ) ;
result = gen . generate ( arg ) ;
result = gen . generate ( arg ) ;
try ( ResultSet result = metaData . getTables ( arg ) ) {
try ( ResultSet result = metaData . getTables ( arg ) ) {
try ( ResultSet result = metaData . getTables ( arg ) ) {
result = ( prime * result ) + ( ( name == null ) ? 0 : name . hashCode ( arg ) ) ;
try ( ResultSet result = selectExpiredSessions . executeQuery ( arg ) ) {
try ( ResultSet result = selectExpiredSessions . executeQuery ( arg ) ) {
return ( arg ) . <unk> ( arg ) ;
return ! _processor . getAsyncContinuation ( arg ) . isSuspended ( arg ) &&! _parser . isComplete ( arg ) ;
return _ishut ;
return ! _channel . isOpen ( arg ) || _ishut || _socket != null && _socket . isInputShutdown ( arg ) ;
return _oshut ;
return _persistent != null ? _persistent . booleanValue ( arg ) : ( isRequest ( arg ) ? true : _version > HttpVersions . HTTP_1_0_ORDINAL ) ;
return true ;
return ! getExcludedOrigins ( arg ) . contains ( arg ) ;
return _ishut ;
return _ishut ;
return ! isOpen ( arg ) || super . isInputShutdown ( arg ) ;
return ! isOpen ( arg ) || super . isInputShutdown ( arg ) ;
return ! isOpen ( arg ) || super . isOutputShutdown ( arg ) ;
return ! isOpen ( arg ) || super . isOutputShutdown ( arg ) ;
return ( arg ) ;
return ( arg ) && ( _buffer == null || _buffer . remaining ( arg ) == 0 ) && ( _content == null || _content . remaining ( arg ) == 0 ) ;
return ( arg ) && ( session . isOpen ( arg ) ) ;
return getIOState ( arg ) . isOpen ( arg ) && getEndPoint ( arg ) . isOpen ( arg ) ;
return ( arg ) ( _webSocketFactory == null ? _maxIdleTime : _webSocketFactory . getMaxIdleTime ( arg ) ) ;
return ( arg ) ( prepared_after - <unk> ) ;
return ( arg ) + ( _buffer == null ? 0 : _buffer . remaining ( arg ) ) + ( _content == null ? 0 : _content . remaining ( arg ) ) ;
return context . getServletContext ( arg ) . createListener ( arg ) ;
return server . getURI ( arg ) . getPort ( arg ) ;
return ( arg ) . createContextHandler ( arg ) ;
return true ;
return ( arg ) == <unk> . FLAG_CLOSE ;
return ( arg ) == <unk> . FLAG_CLOSE ;
return ( arg ) == ReplyInfo . FLAG_CLOSE ;
return ( arg ) == SynInfo . FLAG_CLOSE ;
return ( arg ) == <unk> . <unk> ;
return ( arg ) == WebSocketConnectionD00 . <unk> ;
return nested . get ( arg ) ;
return <unk> . get ( arg ) ;
return <unk> . get ( arg ) ;
return _bufferMap . get ( arg ) ;
return _bufferMap . get ( arg ) ;
return _compressedStream ;
return ( arg ) _fields . getLongField ( arg ) ;
return ( arg ) _fields . getLongField ( arg ) ;
return _connectors . toArray ( arg ) ;
return _elements . toArray ( arg ) ;
return <unk> ( arg ) ;
return <unk> . get ( arg ) ;
return <unk> . get ( arg ) ;
return _parameters . getValue ( arg ) ;
return _resourceAliases . get ( arg ) ;
return _resourceAliases . remove ( arg ) ;
return _savedNewSessions . get ( arg ) ;
return _maxIdleTime ;
return _servletNameMap . get ( arg ) ;
return <unk> . get ( arg ) ;
return <unk> . values ( arg ) . toArray ( arg ) ;
return _endp ;
return StringUtil . toInt ( arg ) ;
return <unk> . get ( arg ) ;
return postConstructCallbacksMap . get ( arg ) ;
return preDestroyCallbacksMap . get ( arg ) ;
return properties . get ( arg ) ;
return vals . toArray ( arg ) ;
return ( arg ) | ( ( _buffer != null && _buffer . remaining ( arg ) > 0 ) ? 2 : 0 ) | ( ( <unk> && _content != null && _content . remaining ( arg ) > 0 ) ? 1 : 0 ) ;
return ( arg ) || ( ! session . isOpen ( arg ) ) ;
return ( arg ) || ( elements . isEmpty ( arg ) ) ;
return client . <unk> ( arg ) ;
return total_filled ;
return 3 ;
return 2 ;
return 2 ;
return 0 ;
return windowSize ;
return Action . SCHEDULED ;
return Action . SCHEDULED ;
return Action . SCHEDULED ;
return Action . SCHEDULED ;
return Action . SCHEDULED ;
return Action . SCHEDULED ;
return Action . SCHEDULED ;
return Action . SCHEDULED ;
return Action . SCHEDULED ;
return Action . SCHEDULED ;
return Action . SCHEDULED ;
return Action . SCHEDULED ;
return Action . SCHEDULED ;
return Action . SCHEDULED ;
return Action . SCHEDULED ;
return Action . SCHEDULED ;
return Action . SCHEDULED ;
return Action . SCHEDULED ;
return Action . SCHEDULED ;
return Action . SCHEDULED ;
return Action . SCHEDULED ;
return Action . SCHEDULED ;
return Action . SCHEDULED ;
return Action . SCHEDULED ;
return Action . SCHEDULED ;
return Action . SCHEDULED ;
return ContainerLifeCycle . dump ( arg ) ;
return ContainerLifeCycle . dump ( arg ) ;
return ContainerLifeCycle . dump ( arg ) ;
return ContainerLifeCycle . dump ( arg ) ;
return ContainerLifeCycle . dump ( arg ) ;
return ContainerLifeCycle . dump ( arg ) ;
return ContainerLifeCycle . dump ( arg ) ;
return ContainerLifeCycle . dump ( arg ) ;
return ContainerLifeCycle . dump ( arg ) ;
return String . format ( arg ) ;
return AuthStatus . SEND_FAILURE ;
return AuthStatus . <unk> ;
return Authentication . SEND_CONTINUE ;
return Authentication . SEND_CONTINUE ;
return Authentication . SEND_CONTINUE ;
return Authentication . FAILURE ;
return Authentication . FAILURE ;
return Authentication . SEND_FAILURE ;
return Authentication . SEND_FAILURE ;
return true ;
return true ;
return true ;
return true ;
return this ;
return this ;
return Boolean . valueOf ( arg ) ;
return onRead ( arg ) ;
return onRead ( arg ) ;
return BufferUtil . flipPutFlip ( arg ) ;
return _name ;
return payload ;
return StringUtil . <unk> ( arg ) ;
return <unk> ( arg ) ;
return onRead ( arg ) ;
return Primitives . <unk> ( arg ) ;
return DoneIOFuture . COMPLETE ;
return DoneIOFuture . COMPLETE ;
return new HashSet < <unk> > ( arg ) ;
return CompletedIOFuture . COMPLETE ;
return DoneIOFuture . COMPLETE ;
return <unk> ;
return super . dump ( arg ) ;
return Authentication . CHALLENGE ;
return Authentication . CHALLENGE ;
return Authentication . CHALLENGE ;
return Authentication . <unk> ;
return Authentication . NOT_CHECKED ;
return <unk> ;
return WriteResultFinishedFuture . INSTANCE ;
return WriteResultFinishedFuture . INSTANCE ;
return WriteResultFinishedFuture . INSTANCE ;
return WebSocketFrame . binary ( arg ) . setFin ( arg ) . setPayload ( arg ) ;
return AbstractHttpConnection . getCurrentConnection ( arg ) . getRequest ( arg ) ;
return generate ( arg ) ;
return getEndPoint ( arg ) . getMaxIdleTime ( arg ) ;
HttpConnection . this . send ( arg ) ;
return HttpConnection . this . generate ( arg ) ;
return HttpMethod . HEAD == <unk> ;
return HttpMethod . HEAD == HttpMethod . fromString ( arg ) ;
return readResponses ( arg ) ;
return Holder . <unk> ;
return <unk> . toString ( arg ) ;
return <unk> ( arg ) ;
return ( arg ) ? 0 : nested . size ( arg ) ;
return _blocks . compareAndSet ( arg ) ;
return _blocks . compareAndSet ( arg ) ;
return MemoryUtils . volatileGetInt ( arg ) ;
return MemoryUtils . volatileGetInt ( arg ) ;
return MemoryUtils . volatileGetObject ( arg ) ;
return MemoryUtils . volatileGetObject ( arg ) ;
return indexes . get ( arg ) ;
return indexes . get ( arg ) ;
return _blocks . get ( arg ) ;
return _blocks . get ( arg ) ;
return new <unk> ( arg ) ;
return CentralMDCAdapter . class . getName ( arg ) ;
return Action . COMPLETE ;
return Action . COMPLETE ;
return Action . COMPLETE ;
return Action . COMPLETE ;
return _expired ? Action . <unk> : Action . <unk> ;
return Action . IDLE ;
return Action . IDLE ;
return Action . RECYCLE ;
return Action . EXECUTING ;
return Action . EXECUTING ;
return Action . EXECUTING ;
return Action . EXECUTING ;
return Action . EXECUTING ;
return Action . EXECUTING ;
return Action . EXECUTING ;
return Action . EXECUTING ;
return Action . EXECUTING ;
return Action . EXECUTING ;
return Action . EXECUTING ;
return Action . EXECUTING ;
return Action . EXECUTING ;
return Action . EXECUTING ;
return Action . EXECUTING ;
return Action . EXECUTING ;
return Action . EXECUTING ;
return Action . EXECUTING ;
return Action . EXECUTING ;
return Action . EXECUTING ;
return Action . EXECUTING ;
return Action . EXECUTING ;
return Action . EXECUTING ;
return Action . EXECUTING ;
return Action . EXECUTING ;
return Action . EXECUTING ;
return Action . SUCCEEDED ;
return Action . SUCCEEDED ;
return Action . SUCCEEDED ;
return Action . SUCCEEDED ;
return Action . SUCCEEDED ;
return Action . SUCCEEDED ;
return Action . SUCCEEDED ;
return Action . SUCCEEDED ;
return Action . SUCCEEDED ;
return Action . SUCCEEDED ;
return Action . SUCCEEDED ;
return Action . SUCCEEDED ;
return Action . SUCCEEDED ;
return Action . SUCCEEDED ;
return Action . SUCCEEDED ;
return Action . WAIT ;
return Action . WAIT ;
return Primitives . <unk> ( arg ) ;
return Primitives . <unk> ( arg ) ;
return filename . toLowerCase ( arg ) . endsWith ( arg ) ;
return filename . toLowerCase ( arg ) . endsWith ( arg ) ;
return file . toURI ( arg ) . toURL ( arg ) ;
return Result . <unk> ;
return <unk> + _name + <unk> _debug ;
return SelectChannelConnector . this . getIdleTimeout ( arg ) ;
return getConnectionFactory ( arg ) . newConnection ( arg ) ;
return _httpClient . _threadPool . dispatch ( arg ) ;
return String . format ( arg ) ;
return _done . get ( arg ) && <unk> . <unk> ( arg ) == 0 ;
return Next . IDLE ;
return Next . IDLE ;
return Next . SCHEDULED ;
return Next . SCHEDULED ;
return Next . SCHEDULED ;
return Next . SCHEDULED ;
return Next . SCHEDULED ;
return Next . SCHEDULED ;
return Next . SCHEDULED ;
return Next . SCHEDULED ;
return Next . SCHEDULED ;
return Next . SCHEDULED ;
return Next . SCHEDULED ;
return Next . SCHEDULED ;
return Next . SCHEDULED ;
return Next . SCHEDULED ;
return Next . SCHEDULED ;
return Next . SCHEDULED ;
return Next . SCHEDULED ;
return Next . SCHEDULED ;
return Next . SCHEDULED ;
return Next . SCHEDULED ;
return Next . SCHEDULED ;
return Next . SCHEDULED ;
return Next . SCHEDULED ;
return Next . SCHEDULED ;
return Next . SCHEDULED ;
return Next . SCHEDULED ;
return Next . SUCCEEDED ;
return Next . SUCCEEDED ;
return Next . SUCCEEDED ;
return Next . SUCCEEDED ;
return Next . SUCCEEDED ;
return Next . SUCCEEDED ;
return Next . SUCCEEDED ;
return Next . SUCCEEDED ;
return Next . SUCCEEDED ;
return Next . SUCCEEDED ;
return Next . SUCCEEDED ;
return Next . SUCCEEDED ;
return Next . SUCCEEDED ;
return Next . SUCCEEDED ;
return Next . SUCCEEDED ;
return getPayloadLength ( arg ) > 2 ;
return BufferUtil . <unk> ( arg ) ;
return System . currentTimeMillis ( arg ) - _statsStartedAt . get ( arg ) ;
return Integer . toString ( arg ) ;
return null ;
return String . format ( arg ) ;
return String . format ( arg ) ;
return new BinaryFrame ( arg ) . setFin ( arg ) ;
return __UTF8 . equalsIgnoreCase ( arg ) || __UTF8 . equalsIgnoreCase ( arg ) ;
return DEFAULT . parse ( arg ) ;
return DEFAULT . parse ( arg ) ;
return DEFAULT . parse ( arg ) ;
return DEFAULT . parse ( arg ) ;
return DEFAULT . parse ( arg ) ;
return DEFAULT . parse ( arg ) ;
return DEFAULT ;
return <unk> ;
return null ;
return LOG != null ;
return LOG . isDebugEnabled ( arg ) ;
return LOG ;
return LOG ;
return Collections . unmodifiableMap ( arg ) ;
return <unk> ( arg ) ;
return list ( arg ) ;
return <unk> ( arg ) ;
return lookup ( arg ) ;
return <unk> ( arg ) ;
return Jetty . VERSION ;
return Jetty . VERSION ;
return _progressed . <unk> ( arg ) ;
return _acceptors . length ;
return _sslContextFactory . isAllowRenegotiate ( arg ) ;
return _sslContextFactory . isAllowRenegotiate ( arg ) ;
return Collections . unmodifiableSet ( arg ) ;
return _decryptedEndPoint ;
return Collections . unmodifiableSet ( arg ) ;
return _state . isAsyncStarted ( arg ) ;
return _state . isIdle ( arg ) ;
return _state ;
return _state ;
return _async == Async . <unk> || _async != null && _state == State . DISPATCHED ;
return <unk> . <unk> ( arg ) ;
return true ;
return _method ;
return getMonitoredDirResource ( arg ) != null && _autoInstallOSGiBundles ;
return <unk> ( arg ) . position ( arg ) > 0 ;
return bindAddress ;
return _dbAdaptor . <unk> ( arg ) ;
return _names . get ( arg ) ;
return _names . get ( arg ) ;
return copyOf ( arg ) ;
return copyOf ( arg ) ;
return _cacheControl ;
return <unk> . get ( arg ) ;
return _cachedSize . get ( arg ) ;
return _elements . length ;
return _channel . getHttpConnector ( arg ) . isConfidential ( arg ) ;
return _out . getContentBufferSize ( arg ) ;
return <unk> ;
return _channel . getHttpConfiguration ( arg ) . isConfidential ( arg ) ;
return _processor . getInputStream ( arg ) ;
return _out . <unk> ( arg ) ;
return _processor . getResponse ( arg ) ;
return _processor . getResponse ( arg ) ;
return ! _channel . isOpen ( arg ) || _socket != null && _socket . isInputShutdown ( arg ) ;
return ! _channel . isOpen ( arg ) || _socket != null && _socket . isOutputShutdown ( arg ) ;
return <unk> . get ( arg ) ;
return _processor ;
return _processor ;
return _child . get ( arg ) ;
return _state . get ( arg ) == State . CLOSED ;
return _map . toString ( arg ) ;
return _channel . isCommitted ( arg ) ;
return _done ;
return _config . getBaseHome ( arg ) . toShortForm ( arg ) ;
return _config . getBaseHome ( arg ) . toShortForm ( arg ) ;
return <unk> . toArray ( arg ) ;
return _contextsDir ;
return _configurations . toArray ( arg ) ;
return connectTimeout ;
return _channel . getResponse ( arg ) ;
return _channel . available ( arg ) ;
return _transport . getContentBufferSize ( arg ) ;
return _transport . getContentWritten ( arg ) > 0 ;
return _endPoint . getLocalAddress ( arg ) ;
return _endPoint . getRemoteAddress ( arg ) ;
return _connection . getContentBufferSize ( arg ) ;
return _channel . getInputStream ( arg ) ;
return out ;
return _channel . getRequest ( arg ) . getAttribute ( arg ) ;
return _channel . getRequest ( arg ) ;
return _channel . getRequest ( arg ) ;
return _fields . <unk> ( arg ) ;
return _fields . getFieldNames ( arg ) ;
return _fields . getStringField ( arg ) ;
return _fields . getStringField ( arg ) ;
return _channel . getResponse ( arg ) ;
return _channel . getResponse ( arg ) ;
return _channel . getResponse ( arg ) ;
return _fields . containsKey ( arg ) ;
return _fields . getStringField ( arg ) ;
return _fields ;
return _transport . getConnector ( arg ) . isConfidential ( arg ) ;
return _transport . isResponseCommitted ( arg ) ;
return _channel . read ( arg ) ;
return _channel ;
return ( arg ) _connectionStats . getTotal ( arg ) ;
return _connections . get ( arg ) ;
return _connectionDurationStats . getMax ( arg ) ;
return <unk> . get ( arg ) ;
return _connectionDurationStats . getTotal ( arg ) ;
return <unk> . get ( arg ) ;
return ( arg ) _connectionStats . getCurrent ( arg ) ;
return <unk> . get ( arg ) ;
return ( arg ) _connectionStats . getMax ( arg ) ;
return <unk> . get ( arg ) ;
return ( arg ) _requestStats . getMax ( arg ) ;
return <unk> . get ( arg ) ;
return _httpConfig . getResponseBufferSize ( arg ) ;
return _endOfContent != EndOfContent . NO_CONTENT && _endOfContent != EndOfContent . UNKNOWN_CONTENT ;
return _content == EndOfContent . CHUNKED_CONTENT ;
return _content == EndOfContent . CONTENT_LENGTH && _contentPrepared >= _info . getContentLength ( arg ) ;
return _endOfContent == EndOfContent . CHUNKED_CONTENT ;
return _content == Content . CHUNKED_CONTENT ;
return _content == Content . CHUNKED_CONTENT ;
return _content == Content . CONTENT_LENGTH && _contentPrepared >= _info . getContentLength ( arg ) ;
return _contentLength >= 0 && _contentPrepared >= _contentLength ;
return BufferUtil . toString ( arg ) ;
return _contentPrepared ;
return _contentPrepared > 0 ;
return _channel . getContentBufferSize ( arg ) ;
return _channel . isResponseCommitted ( arg ) ;
return _client . <unk> ( arg ) ;
return _ctxtCollection ;
return _ctxtCollection ;
return ( arg ) ;
return ( arg ) ;
return new DeferredAuthentication ( arg ) ;
return new DeferredAuthentication ( arg ) ;
return _delegate . hasNext ( arg ) ;
return _delegate . hasNext ( arg ) ;
return _delegate . hasNext ( arg ) ;
return _delegate . hasNext ( arg ) ;
return <unk> ( arg ) . <unk> ( arg ) ;
return getBeans ( arg ) ;
return ( arg ) _dispatchedStats . getTotal ( arg ) ;
return ( arg ) _dispatchedStats . getCurrent ( arg ) ;
return ( arg ) _dispatchedStats . getMax ( arg ) ;
return _dispatchedTimeStats . getMax ( arg ) ;
return _dispatchedTimeStats . getTotal ( arg ) ;
return _capacity ;
return elements . size ( arg ) ;
return elements ;
return _state . ordinal ( arg ) > State . END . ordinal ( arg ) && _state . ordinal ( arg ) < State . CLOSED . ordinal ( arg ) ;
return _aEndp . blockWritable ( arg ) ;
return _connection . getEndPoint ( arg ) . getLocalAddress ( arg ) ;
return _connection . getEndPoint ( arg ) . getRemoteAddress ( arg ) ;
return _endp . isInputShutdown ( arg ) &&! ( _unwrapBuf != null &&! BufferUtil . isEmpty ( arg ) ) &&! ( _inbound != null &&! BufferUtil . isEmpty ( arg ) ) ;
return _endp . isInputShutdown ( arg ) &&! ( _unwrapBuf != null && BufferUtil . hasContent ( arg ) ) &&! ( _inbound != null && BufferUtil . hasContent ( arg ) ) ;
return _endPoint ;
return _ishut || ( _engine != null && _engine . isInboundDone ( arg ) ) || super . isInputShutdown ( arg ) ;
return _oshut || ( _engine != null && _engine . isOutboundDone ( arg ) ) || super . isOutputShutdown ( arg ) ;
return _map . isEmpty ( arg ) ;
return _map . size ( arg ) ;
return _event != null && _event . get ( arg ) == State . <unk> ;
return _event == null && get ( arg ) == null ;
return <unk> . toArray ( arg ) ;
return _sslContextFactory . getExcludeCipherSuites ( arg ) ;
return _sslContextFactory . getExcludeCipherSuites ( arg ) ;
return _excludedUA ;
return true ;
return _async == Async . <unk> ;
return extensionClasses ;
return extensionClasses ;
return _fragmentFrames ;
return _file . exists ( arg ) && _file . isDirectory ( arg ) || _uri . endsWith ( arg ) ;
return new URL ( arg ) ;
return getEntityName ( arg ) ;
return _connection . getContentWritten ( arg ) > 0 ;
return _generator . getContentWritten ( arg ) > 0 ;
return null ;
return System . getProperty ( arg ) ;
return _delegate . <unk> ( arg ) ;
return _delegate . <unk> ( arg ) ;
return _idleConnections . size ( arg ) ;
return _timeout . getNow ( arg ) ;
return idleTimeout ;
return <unk> ;
return false ;
return <unk> ;
return _input ;
return null ;
return _sslContextFactory . getIncludeCipherSuites ( arg ) ;
return _sslContextFactory . getIncludeCipherSuites ( arg ) ;
return <unk> . get ( arg ) != null ;
return _delegate . <unk> ( arg ) ;
return _sslEngine . isInboundDone ( arg ) ;
return _ishut ||! _channel . isOpen ( arg ) || _socket . isInputShutdown ( arg ) ;
return __javaNameParser ;
return __javaNameParser ;
return _sslContextFactory . <unk> ( arg ) ;
return _keyStore != null ? _keyStore : CertificateUtils . getKeyStore ( arg ) ;
return _sslContextFactory . <unk> ( arg ) ;
return _sslContextFactory . getKeystore ( arg ) ;
return _keystorePath ;
return _keystorePath ;
return _sslContextFactory . getKeystore ( arg ) ;
return _sslContextFactory . getKeystore ( arg ) ;
return BufferUtil . toString ( arg ) ;
return _dbAdaptor . <unk> ( arg ) ;
return getLowResourcesMaxIdleTime ( arg ) ;
return put ( arg ) ;
return put ( arg ) ;
return _client . <unk> ( arg ) ;
return _maxBinaryMessageSize ;
return 1 ;
return _idleTimeout ;
return <unk> ( arg ) ;
return _maxTextMessageSize ;
return _request != null ;
return _httpMethodString ;
return _response != null ;
return 0 ;
return String . format ( arg ) ;
return <unk> ;
return _sslContextFactory . getNeedClientAuth ( arg ) ;
return _sslContextFactory . getNeedClientAuth ( arg ) ;
return _orderedResources == null ? new ArrayList < Resource > ( arg ) : _orderedResources ;
return _client . <unk> ( arg ) ;
return _delegate . <unk> ( arg ) ;
return _oshut ||! _channel . isOpen ( arg ) || _socket != null && _socket . isOutputShutdown ( arg ) ;
return _oshut ||! _channel . isOpen ( arg ) || _socket . isOutputShutdown ( arg ) ;
return _out . getBufferSize ( arg ) ;
return _outbound != null && _outbound . hasContent ( arg ) || _engine . <unk> ( arg ) == HandshakeStatus . NEED_WRAP ;
return <unk> . <unk> ( arg ) || <unk> . HTTPS . equals ( arg ) ;
return _outputState != Output . NONE ;
return _outputState != OutputState . NONE ;
return _outputType != OutputType . NONE ;
return _outputState == OutputState . WRITER ;
return _outputType == OutputType . WRITER ;
return _outputState == Output . WRITER ;
return _parent . get ( arg ) ;
return _parser . isBufferEmpty ( arg ) && _outbound . isBufferEmpty ( arg ) ;
return _pathInContext ;
return <unk> ;
return _persistent ;
return _persistent != null ? _persistent . booleanValue ( arg ) : ( isRequest ( arg ) ? true : _info . getHttpVersion ( arg ) . ordinal ( arg ) > HttpVersion . HTTP_1_0 . ordinal ( arg ) ) ;
return _persistent != null ? _persistent . booleanValue ( arg ) : ( isRequest ( arg ) ? true : _version > HttpVersion . HTTP_1_0_ORDINAL ) ;
return Boolean . TRUE . equals ( arg ) ;
return Integer . <unk> ( arg ) ;
return _channel . getInputStream ( arg ) ;
return _channel . getResponse ( arg ) ;
return _channel . getResponse ( arg ) ;
return _channel ;
return _channel ;
return __properties . get ( arg ) ;
return _map ;
return _httpVersion . toString ( arg ) ;
return _provider != null ? _provider . getContextXmlDirAsFile ( arg ) : null ;
return _sslContextFactory . getProvider ( arg ) ;
return _sslContextFactory . getProvider ( arg ) ;
return _sslContextFactory . getProvider ( arg ) ;
return Collections . unmodifiableList ( arg ) ;
return rHandler . <unk> ( arg ) ;
return _scanDepth == null ;
return _delegate . getAttribute ( arg ) ;
return _delegate . <unk> ( arg ) ;
return _delegate . <unk> ( arg ) ;
return _request . getAsyncContinuation ( arg ) . isSuspended ( arg ) ;
return <unk> ;
return <unk> ;
return <unk> ;
return <unk> . get ( arg ) ;
return _requestTimeStats . getMax ( arg ) ;
return _requestTimeStats . getTotal ( arg ) ;
return <unk> . get ( arg ) ;
return ( arg ) _requestStats . getTotal ( arg ) ;
return ( arg ) _requestStats . getTotal ( arg ) ;
return _requests . get ( arg ) ;
return _requests . get ( arg ) ;
return _requests . get ( arg ) ;
return ( arg ) _requestStats . getCurrent ( arg ) ;
return <unk> . get ( arg ) ;
return ( arg ) _requestStats . getMax ( arg ) ;
return <unk> . get ( arg ) ;
return <unk> . get ( arg ) ;
return <unk> . get ( arg ) ;
return <unk> . get ( arg ) ;
return <unk> ;
return <unk> ;
return _delegate . <unk> ( arg ) ;
return _delegate . <unk> ( arg ) ;
return <unk> . get ( arg ) ;
return <unk> . get ( arg ) ;
return <unk> . get ( arg ) ;
return <unk> . get ( arg ) ;
return <unk> . get ( arg ) ;
return <unk> . get ( arg ) ;
return __root . composeName ( arg ) ;
return __root . composeName ( arg ) ;
return __root . getNameParser ( arg ) ;
return __root . getNameParser ( arg ) ;
return Collections . unmodifiableList ( arg ) ;
return _sslContextFactory . <unk> ( arg ) ;
return _selector ;
return _selectSets . length ;
return ( arg ) != 0 ;
return ( arg ) . getLocalPort ( arg ) ;
return ( arg ) . getLocalPort ( arg ) ;
return ( arg ) . getLocalPort ( arg ) ;
return _connector . getServer ( arg ) ;
return _connector . getServer ( arg ) ;
return getEntityName ( arg ) ;
return getSessionIdManager ( arg ) ;
return _dbSessions . <unk> ( arg ) . count ( arg ) ;
return Long . valueOf ( arg ) . <unk> ( arg ) ;
return _sslContextFactory . getKeyStorePath ( arg ) ;
return _sslContextFactory . getKeyStorePath ( arg ) ;
return _sslContextFactory . getKeyStorePath ( arg ) ;
return _sslContextFactory . getKeyStore ( arg ) ;
return _sslContextFactory . getKeyStore ( arg ) ;
return _sslContextFactory . getKeyStore ( arg ) ;
return _sslContextFactory . <unk> ( arg ) ;
return _sslContextFactory . getKeyStoreType ( arg ) ;
return _sslContextFactory . getKeyStoreType ( arg ) ;
return _sslContextFactory . getKeyStoreType ( arg ) ;
return _sslContextFactory . getTrustStore ( arg ) ;
return _sslContextFactory . getTrustStore ( arg ) ;
return _sslContextFactory . getTrustStore ( arg ) ;
return _sslContextFactory . <unk> ( arg ) ;
return _sslContextFactory . getTrustStoreType ( arg ) ;
return _sslContextFactory . getTrustStoreType ( arg ) ;
return _sslContextFactory . getTrustStoreType ( arg ) ;
return _sslEngine . isOutboundDone ( arg ) || getEndPoint ( arg ) . isOutputShutdown ( arg ) ;
return <unk> ;
return _state != State . START ;
return _state . ordinal ( arg ) >= State . COMMITTED . ordinal ( arg ) ;
return _state . get ( arg ) == OutputState . CLOSED ;
return _state . get ( arg ) == State . <unk> ;
return get ( arg ) == State . SCHEDULED ;
return getAsyncContinuation ( arg ) . isAsyncStarted ( arg ) ;
return _state . ordinal ( arg ) < State . CONTENT . ordinal ( arg ) ;
return _state . ordinal ( arg ) >= State . CONTENT . ordinal ( arg ) && _state . ordinal ( arg ) < State . END . ordinal ( arg ) ;
return _channel . getState ( arg ) ;
return _state . ordinal ( arg ) < State . END . ordinal ( arg ) ;
return _state == __FAILED ;
return _state == __STARTED ;
return _state == __STARTED || _state == __STARTING ;
return _state == __STARTING ;
return _state == __STOPPED ;
return _state == __STOPPING ;
return _state == State . START && _method == null && _status == 0 ;
return _state == __COMPLETED ;
return _state == State . COMPLETED ;
return _state == State . COMPLETING ;
return _state == State . UNCOMPLETED ;
return _state . ordinal ( arg ) > State . END . ordinal ( arg ) ;
return _statsStartedAt . get ( arg ) != null ;
return b . toString ( arg ) ;
return ( arg ) _suspendStats . getTotal ( arg ) ;
return ( arg ) _suspendStats . getCurrent ( arg ) ;
return ( arg ) _suspendStats . getMax ( arg ) ;
return _thread . getId ( arg ) ;
return _thread . getName ( arg ) ;
return _thread . getState ( arg ) . toString ( arg ) ;
return <unk> . get ( arg ) == <unk> && _jobs . size ( arg ) >= _threadsIdle . get ( arg ) ;
return formatNow ( arg ) ;
return _channel . getConnector ( arg ) . isConfidential ( arg ) ;
return _controller . getContentBufferSize ( arg ) ;
return <unk> > 0 ;
return _controller . isResponseCommitted ( arg ) ;
return _sslContextFactory . <unk> ( arg ) ;
return _trustStore != null ? _trustStore : CertificateUtils . getKeyStore ( arg ) ;
return _sslContextFactory . <unk> ( arg ) ;
return _sslContextFactory . getTruststore ( arg ) ;
return _truststorePath ;
return _truststorePath ;
return _sslContextFactory . getTruststore ( arg ) ;
return _sslContextFactory . getTruststore ( arg ) ;
return _sslContextFactory . getTruststoreType ( arg ) ;
return _sslContextFactory . getTruststoreType ( arg ) ;
return type ;
return Collections . unmodifiableSet ( arg ) ;
return getRequestURI ( arg ) ;
return _urlString . hashCode ( arg ) ;
return <unk> ( arg ) == Type . <unk> ;
return __version ;
return __version ;
return _sslContextFactory . getWantClientAuth ( arg ) ;
return _sslContextFactory . getWantClientAuth ( arg ) ;
return webSocketFactory ;
return <unk> . bytesConsumed ( arg ) ;
return aborted . get ( arg ) ;
return host ;
return origin . getAddress ( arg ) . getPort ( arg ) ;
return headers . get ( arg ) ;
return allConsumed && BufferUtil . isEmpty ( arg ) ;
return allConsumed && BufferUtil . isEmpty ( arg ) ;
return allConsumed ;
return _appEndPoint ;
return _apps ;
return return_from_parse ;
return _baseAppFirst ;
return <unk> ;
return binary . getPayload ( arg ) ;
return buffer . slice ( arg ) ;
return buffer . slice ( arg ) ;
return buffer == null ? 0 : buffer . length ( arg ) ;
return buffer . <unk> ( arg ) ;
return <unk> ( arg ) ;
return length ;
return length ;
return getCacheLineBytes ( arg ) >> 2 ;
return getCacheLineBytes ( arg ) >> 3 ;
return listener ;
return <unk> . toArray ( arg ) ;
return Authentication . UNAUTHENTICATED ;
return __UTF8 . equalsIgnoreCase ( arg ) || <unk> . equalsIgnoreCase ( arg ) ;
return _classes ;
return createInstance ( arg ) ;
return cleanClose ;
return origin . asString ( arg ) ;
return destination . getHttpClient ( arg ) ;
return clientFactory . newSPDYClient ( arg ) . connect ( arg ) ;
return clientFactory . newSPDYClient ( arg ) . connect ( arg ) ;
return closeHandshakeSource == CloseHandshakeSource . <unk> ;
return closeHandshakeSource == CloseHandshakeSource . LOCAL ;
return closeHandshakeSource == CloseHandshakeSource . REMOTE ;
return <unk> ;
return closeState == CloseState . <unk> || closeState == CloseState . <unk> || closeState == CloseState . CLOSED ;
return closeState == CloseState . CLOSED ;
return cmd ;
return o instanceof ServletHolder && <unk> ( arg ) == 0 ;
return complete ( arg ) ;
return _config ;
return _configurationManager ;
return <unk> ;
return _connectTimeout ;
return baseConnection . getRemoteAddress ( arg ) ;
return baseConnection . isOpen ( arg ) ;
return configure ( arg ) ;
return protocol ;
return factory . connectionFactory ;
return protocols ;
return all_consumed && BufferUtil . isEmpty ( arg ) ;
return all_consumed && BufferUtil . isEmpty ( arg ) ;
return _containerIncludeJarPattern ;
return BufferUtil . toString ( arg ) ;
return ( arg ) . createListener ( arg ) ;
return _contextAttributes . getAttribute ( arg ) ;
return _contextAttributes ;
return _contexts . getServer ( arg ) ;
return _contexts ;
return ByteBuffer . wrap ( arg ) ;
return Authentication . UNAUTHENTICATED ;
return payloadLength ;
return data ;
return _defaultLifeCycleGoal ;
return _defaultsDescriptor ;
return _defaultsDescriptor ;
return System . getProperty ( arg ) ;
return FS . <unk> ( arg ) ;
return <unk> ( arg ) ;
return holder . getRegistration ( arg ) ;
return holder . getRegistration ( arg ) ;
return holder . getRegistration ( arg ) ;
return _edges ;
return <unk> ( arg ) ;
return obj instanceof Buffer && equalsIgnoreCase ( arg ) ;
return exchange . abort ( arg ) ;
return request . conversation ( arg ) ;
return response . contentAsString ( arg ) ;
return response . contentAsString ( arg ) ;
return exchanges . peek ( arg ) ;
return <unk> . toString ( arg ) . <unk> ( arg ) ;
return _extensionClasses ;
return _extractWars ;
return _extractWars ;
return <unk> ( arg ) ;
return State . SCHEDULED ;
return State . SCHEDULED ;
return State . SCHEDULED ;
return State . SCHEDULED ;
return State . SCHEDULED ;
return State . SCHEDULED ;
return State . SCHEDULED ;
return State . SCHEDULED ;
return State . SCHEDULED ;
return State . SCHEDULED ;
return isFin ( arg ) ;
return isFin ( arg ) ;
return <unk> . newInstance ( arg ) ;
return priority ;
return priority ;
return id ;
return id ;
return listener . onSyn ( arg ) ;
return <unk> ;
return l ;
return getHttpChannelState ( arg ) . isAsync ( arg ) ;
return buffers . toArray ( arg ) ;
return _endp . getLocalAddress ( arg ) ;
return _endp . getRemoteAddress ( arg ) ;
return _endPoint ;
return SelectChannelConnector . this . newConnection ( arg ) ;
return SelectChannelConnector . this . newConnection ( arg ) ;
return this . delegate . getDefaultConnectionFactory ( arg ) ;
return ( arg ) && getEndPoint ( arg ) . isOpen ( arg ) ;
return _filterName ;
return ! <unk> ( arg ) ;
return host ;
return getHttpChannelState ( arg ) . isAsyncStarted ( arg ) ;
return getSessionIdManager ( arg ) ;
return _autoInstallOSGiBundles ;
return getName ( arg ) . equals ( arg ) && getInt1 ( arg ) == foo . getInt1 ( arg ) && <unk> ( arg ) . equals ( arg ) && getLong1 ( arg ) == foo . getLong1 ( arg ) && <unk> ( arg ) . equals ( arg ) && getFloat1 ( arg ) == foo . getFloat1 ( arg ) && <unk> ( arg ) . equals ( arg ) && getDouble1 ( arg ) == foo . getDouble1 ( arg ) && <unk> ( arg ) . equals ( arg ) && getChar1 ( arg ) == foo . getChar1 ( arg ) && <unk> ( arg ) . equals ( arg ) ;
return <unk> . getAcceptedSubProtocol ( arg ) ;
throw new UnsupportedOperationException ( arg ) ;
return that . getStream ( arg ) . getPriority ( arg ) - getStream ( arg ) . getPriority ( arg ) ;
return String . format ( arg ) ;
return dynamicHolderAdded ( arg ) ;
return dynamicHolderAdded ( arg ) ;
return dynamicHolderAdded ( arg ) ;
return <unk> ;
return origin . getAddress ( arg ) . getHost ( arg ) ;
return conversation ;
return false ;
return in != null && in . hasContent ( arg ) ;
return incomingFrames ;
return inputAvailable ;
return active ;
throw new FailedLoginException ( arg ) ;
throw new FailedLoginException ( arg ) ;
return isClose ( arg ) ? FLAG_CLOSE : 0 ;
return proxy == null ? origin . getAddress ( arg ) : proxy . getAddress ( arg ) ;
return isComplete ( arg ) ;
return isState ( arg ) || isState ( arg ) ;
return false ;
return false ;
return _jettyHome ;
return getPolicy ( arg ) . getIdleTimeout ( arg ) ;
return getPolicy ( arg ) . getMaxBinaryMessageSize ( arg ) ;
return getPolicy ( arg ) . getMaxTextMessageSize ( arg ) ;
return <unk> ( arg ) ;
return getUpgradeRequest ( arg ) . getParameterMap ( arg ) ;
return getUpgradeRequest ( arg ) . getRequestURI ( arg ) . getQuery ( arg ) ;
return getUpgradeRequest ( arg ) . getRequestURI ( arg ) ;
return <unk> ( arg ) . getAcceptedSubProtocol ( arg ) ;
return _jndiName ;
return connected . await ( arg ) ;
return connected . await ( arg ) ;
return request . abort ( arg ) ;
return Result . <unk> ;
return length - index + offset ;
return length - index + offset ;
return _lifecycle ;
return content ;
return listener ;
return listener . get ( arg ) ;
return closeHandshakeSource . get ( arg ) == CloseHandshakeSource . LOCAL ;
return _logger . isDebugEnabled ( arg ) ;
return _logger . isLoggable ( arg ) ;
return _logger . toString ( arg ) ;
return Collections . unmodifiableMap ( arg ) ;
return masker ;
return Collections . unmodifiableSet ( arg ) ;
return messageHandlers . <unk> ( arg ) ;
return HttpMethod . fromString ( arg ) ;
return method . invoke ( arg ) ;
return _monitoredDir ;
return n +/+ result +/+ len +/+ super . toString ( arg ) ;
return name . equals ( arg ) && values . equals ( arg ) ;
return name . equals ( arg ) && Arrays . equals ( arg ) ;
return config . getName ( arg ) ;
return name == null ? LOG : LOG . getLogger ( arg ) ;
return new ArrayList <> ( arg ) ;
return new ArrayList < <unk> > ( arg ) ;
return new BinaryFrame ( arg ) . setPayload ( arg ) . setFin ( arg ) ;
return new <unk> ( arg ) ;
return new CompletedIOFuture ( arg ) ;
return new CompletedIOFuture ( arg ) ;
return new DoneIOFuture ( arg ) ;
return new DoneIOFuture ( arg ) ;
return new DoneIOFuture ( arg ) ;
return new Wrapper ( arg ) ;
return new <unk> . <unk> ( arg ) ;
return new FormAuthentication ( arg ) ;
return new <unk> ( arg ) ;
return BufferUtil . allocateDirect ( arg ) ;
return BufferUtil . allocateDirect ( arg ) ;
return BufferUtil . allocateDirect ( arg ) ;
return <unk> ;
return new <unk> ( arg ) ;
return new FileResource ( arg ) . getFile ( arg ) . getParentFile ( arg ) . getParentFile ( arg ) ;
return new File ( arg ) . toURI ( arg ) ;
return new PassthruFrameHandler ( arg ) ;
return new <unk> ( arg ) ;
return new <unk> ( arg ) ;
return new HashMap < String , Object > ( arg ) ;
return new BlockingHttpConnection ( arg ) ;
return new DefaultWebSocketClient ( arg ) ;
return new PassthruFrameHandler ( arg ) ;
return new PassthruFrameHandler ( arg ) ;
return BufferUtil . allocate ( arg ) ;
return BufferUtil . allocate ( arg ) ;
return BufferUtil . allocate ( arg ) ;
return _delegate . getLocalAddress ( arg ) ;
return new <unk> ( arg ) ;
return new LocalHttpConnector ( arg ) ;
return new LocalConnector ( arg ) ;
return new <unk> ( arg ) ;
return <unk> ? new <unk> ( arg ) : new <unk> ( arg ) ;
return new CentralMDCAdapter ( arg ) ;
return configure ( arg ) ;
return new Path ( arg ) ;
return new Path ( arg ) ;
return configure ( arg ) ;
return new <unk> ( arg ) ;
return new ServerConnector ( arg ) ;
return new AsyncHttpConnection ( arg ) ;
return new ManagedSelector ( arg ) ;
return new HashedSession ( arg ) ;
return new HashedSession ( arg ) ;
return new StringBuffer ( arg ) . append ( arg ) . append ( arg ) . append ( arg ) . append ( arg ) . append ( arg ) . append ( arg ) . append ( arg ) . append ( arg ) . append ( arg ) . append ( arg ) . append ( arg ) . append ( arg ) . append ( arg ) . append ( arg ) . append ( arg ) . append ( arg ) . append ( arg ) . append ( arg ) . append ( arg ) . append ( arg ) . append ( arg ) . append ( arg ) . append ( arg ) . append ( arg ) . append ( arg ) . toString ( arg ) ;
return new StringBuffer ( arg ) . append ( arg ) . append ( arg ) . append ( arg ) . append ( arg ) . append ( arg ) . append ( arg ) . append ( arg ) . append ( arg ) . append ( arg ) . append ( arg ) . append ( arg ) . append ( arg ) . append ( arg ) . toString ( arg ) ;
return new StringBuffer ( arg ) . append ( arg ) . append ( arg ) . append ( arg ) . append ( arg ) . append ( arg ) . append ( arg ) . append ( arg ) . append ( arg ) . append ( arg ) . append ( arg ) . append ( arg ) . append ( arg ) . append ( arg ) . toString ( arg ) ;
return buffer . asReadOnlyBuffer ( arg ) ;
return buffer . asReadOnlyBuffer ( arg ) ;
return new ByteArrayBuffer . CaseInsensitive ( arg ) ;
return new BinaryFrame ( arg ) ;
return new BinaryFrame ( arg ) ;
future . writeFailed ( arg ) ;
return newRequest ( arg ) . send ( arg ) ;
return action != Action . WAIT ;
return ( arg ) . getLocalPort ( arg ) ;
return _nodes ;
return not managed  + ( ( Managed ) _managed ) . bad ( arg ) ;
return not  + ( ( <unk> ) _managed ) . bad ( arg ) ;
return ( arg ) _value [ node ] ;
return ( arg ) _value [ node ] ;
return ( arg ) _value [ node ] ;
return o instanceof <unk> && _urlString . equals ( arg ) ;
return <unk> ;
return true ;
return responseFailure ( arg ) ;
return ( arg ) ( finRsvOp & 0x0F ) ;
return getIOState ( arg ) . isOpen ( arg ) ;
return _out ;
outgoing . outgoingFrame ( arg ) ;
return <unk> ( arg ) ;
return outputAvailable ;
return new Fields ( arg ) ;
return _parentLoaderPriority ;
return _parentLoaderPriority ;
return path . isFile ( arg ) && pattern . matcher ( arg ) . matches ( arg ) ;
return path . isFile ( arg ) && pattern . matcher ( arg ) . matches ( arg ) ;
return ( arg ) ;
return data . remaining ( arg ) ;
return data . slice ( arg ) ;
return data . remaining ( arg ) ;
return copyOf ( arg ) ;
return copyOf ( arg ) ;
return <unk> ;
return address . getPort ( arg ) ;
return port > 0 ? port : HttpScheme . HTTPS . is ( arg ) ? 443 : 80 ;
return position < getLength ( arg ) ;
return at_next ;
return promise . get ( arg ) ;
return destinationFor ( arg ) ;
return _providers ;
result = pushResources ( arg ) ;
return pushSynInfo . <unk> ( arg ) == <unk> && pushSynInfo . isClose ( arg ) == pushInfo . isClose ( arg ) ;
return r . _parent . get ( arg ) == _parent . get ( arg ) && r . _child . get ( arg ) == _child . get ( arg ) && r . <unk> . equals ( arg ) ;
return _recursive ;
return remote . sendBytesByFuture ( arg ) ;
return remote . sendBytesByFuture ( arg ) ;
return remote . sendStringByFuture ( arg ) ;
return closeHandshakeSource . get ( arg ) == CloseHandshakeSource . REMOTE ;
return request . <unk> ( arg ) ;
return request . followRedirects ( arg ) ;
return resource . toString ( arg ) . endsWith ( arg ) ;
return resource . toString ( arg ) . endsWith ( arg ) ;
return response ;
return response . getContentAsString ( arg ) ;
return response . getStatus ( arg ) == <unk> ;
return <unk> ;
return _responsesBuffer ;
return getResult ( arg ) ;
return getResult ( arg ) ;
return <unk> . bytesConsumed ( arg ) ;
return result == null ? null : result . toString ( arg ) ;
return callback ;
return handle ;
return handle ;
return ( arg ) ( finRsvOp & 0x40 ) != 0 ;
return ( arg ) != 0 ;
return ( arg ) != 0 ;
return ( arg ) ( finRsvOp & 0x20 ) != 0 ;
return ( arg ) != 0 ;
return ( arg ) != 0 ;
return ( arg ) ( finRsvOp & 0x10 ) != 0 ;
return ( arg ) != 0 ;
return ( arg ) != 0 ;
return _scanInterval ;
return origin . getScheme ( arg ) ;
return _server . getBean ( arg ) ;
return _server ;
return _serverPort ;
return _serverPort ;
return session ;
return <unk> . equals ( arg ) ;
return _sslEngine ;
return state . get ( arg ) == State . SUCCEEDED ;
return <unk> val } ;
return String . format ( arg ) ;
return <unk> ( arg ) ;
return true ;
return null ;
return super . isOpen ( arg ) && _socket != null &&! _socket . isClosed ( arg ) ;
return String . format ( arg ) ;
return String . format ( arg ) ;
return String . format ( arg ) ;
return String . format ( arg ) ;
return String . format ( arg ) ;
return String . format ( arg ) ;
return String . format ( arg ) ;
return String . format ( arg ) ;
return String . format ( arg ) ;
connection = switched ;
return ( arg ) _value [ t ] ;
return ( arg ) _value [ t ] ;
return _testClasses ;
return _sslContextFactory . <unk> ( arg ) ;
return _sslContextFactory . getTruststoreType ( arg ) ;
return this . <unk> ;
return this . <unk> ;
return this . _connection != null ;
return _credential . check ( arg ) ;
return _credential ;
return this . modules ;
return this . _context . getContextPath ( arg ) ;
return this . _jettyEnvXml ;
return _jndiName ;
return this . <unk> ;
return <unk> ;
return _servers . contains ( arg ) ;
return _servers . remove ( arg ) ;
return this . <unk> ;
return new <unk> ( arg ) ;
return this == obj || ( ( obj instanceof Buffer ) && obj . equals ( arg ) ) || super . equals ( arg ) ;
return _threadPool . dispatch ( arg ) ;
return connection . getIdleTimeout ( arg ) ;
return _timestamp ;
return _timestamp ;
return <unk> ;
return toString ( arg ) +  <unk> _exchange +  idle for  + _idleTimeout . <unk> ( arg ) ;
return new String ( arg ) ;
return new String ( arg ) ;
return new String ( arg ) ;
return new String ( arg ) ;
return new String ( arg ) ;
return new String ( arg ) ;
return new String ( arg ) ;
return new String ( arg ) ;
return new String ( arg ) ;
return progress ;
return progress ;
return 1 ;
return 1 ;
return 1 ;
return 1 ;
return 1 ;
return 1 ;
return 1 ;
return 1 ;
return 1 ;
return 1 ;
return 1 ;
return 1 ;
return 1 ;
return ( arg ) > 0 ? ( total_filled + events ) : null ;
return tpe . <unk> ( arg ) >= ( tpe . <unk> ( arg ) ) ;
return State . SUCCEEDED ;
return State . SUCCEEDED ;
return State . SUCCEEDED ;
return State . SUCCEEDED ;
return State . SUCCEEDED ;
return State . SUCCEEDED ;
return Type . <unk> ( arg ) ;
return _useStandardBindings ;
return config . <unk> ( arg ) ;
return this . role != null ;
return values . size ( arg ) > 1 ;
return webAppContext ;
return webAppContext ;
return _webInfIncludeJarPattern ;
return _webInfJars ;
return webSocketServerFactory . getPolicy ( arg ) . getMaxBinaryMessageSize ( arg ) ;
return webSocketServerFactory . getPolicy ( arg ) . getMaxTextMessageSize ( arg ) ;
return wrapper != null ? wrapper . getWebBundleDeployerHelp ( arg ) : null ;
return _writeTimeout ;
return flushed ;
handle = _handler . headerComplete ( arg ) || handle ;
handle = _handler . headerComplete ( arg ) || handle ;
handle = _handler . headerComplete ( arg ) || handle ;
handle = _handler . headerComplete ( arg ) || handle ;
handle = _handler . messageComplete ( arg ) || handle ;
handle = _handler . parsedHeader ( arg ) || handle ;
handle = _requestHandler . startRequest ( arg ) || handle ;
handle = _requestHandler . startRequest ( arg ) || handle ;
handle = _requestHandler . startRequest ( arg ) || handle ;
handle = _responseHandler . startResponse ( arg ) || handle ;
handle = _responseHandler . startResponse ( arg ) || handle ;
handle = _responseHandler . startResponse ( arg ) || handle ;
if ( _handler . content ( arg ) ) return true ;
if ( _handler . content ( arg ) ) return true ;
if ( _handler . content ( arg ) ) return true ;
return_from_parse = _handler . headerComplete ( arg ) || return_from_parse ;
return_from_parse = _handler . headerComplete ( arg ) || return_from_parse ;
return_from_parse = _handler . headerComplete ( arg ) || return_from_parse ;
return_from_parse = _handler . headerComplete ( arg ) || return_from_parse ;
return_from_parse = _handler . messageComplete ( arg ) || return_from_parse ;
return_from_parse = _handler . parsedHeader ( arg ) || return_from_parse ;
return_from_parse = _requestHandler . startRequest ( arg ) || return_from_parse ;
return_from_parse = _requestHandler . startRequest ( arg ) || return_from_parse ;
return_from_parse = _requestHandler . startRequest ( arg ) || return_from_parse ;
return_from_parse = _responseHandler . startResponse ( arg ) || return_from_parse ;
return_from_parse = _responseHandler . startResponse ( arg ) || return_from_parse ;
return_from_parse = _responseHandler . startResponse ( arg ) || return_from_parse ;
role = ( role <unk> 8 ) + <unk> ;
roles = new HashSet <> ( arg ) ;
assertTrue ( arg ) ;
( ( <unk> ) _context . getAttribute ( arg ) ) . add ( arg ) ;
<unk> ( arg ) ;
executor . execute ( arg ) ;
sClass = <unk> [ t ] ;
sb . append ( arg ) . append ( arg ) . append ( arg ) ;
sb . append ( arg ) . append ( arg ) . append ( arg ) ;
if ( webApp . <unk> ( arg ) != null ) scanList . add ( arg ) ;
scep . asyncDispatch ( arg ) ;
if ( <unk> ( arg ) ) continue retry ;
if ( dispatch ) <unk> ( arg ) ;
readInterested ( arg ) ;
readInterested ( arg ) ;
readInterested ( arg ) ;
readInterested ( arg ) ;
<unk> ( arg ) ;
scheduler = new TimerScheduler ( arg ) ;
scheduler = new TimerScheduler ( arg ) ;
scheduler = new ScheduledExecutorScheduler ( arg ) ;
<unk> = _identityService . scope ( arg ) ;
options = <unk> ;
assertTrue ( arg ) ;
sel . setLevel ( arg ) ;
sel . setLevel ( arg ) ;
sel . <unk> ( arg ) ;
selector . select ( arg ) ;
selector . select ( arg ) ;
selected = selector . select ( arg ) ;
selected = selector . select ( arg ) ;
selected = selector . select ( arg ) ;
selected = selector . select ( arg ) ;
selected = selector . select ( arg ) ;
<unk> ( arg ) ;
selecting = _selecting != null ;
selecting = _selecting != null ;
selecting = _selecting != null ;
_selectorManager . <unk> ( arg ) ;
client . send ( arg ) ;
expect . add ( arg ) ;
expect . add ( arg ) ;
_transport . sendError ( arg ) ;
_transport . sendError ( arg ) ;
_transport . sendError ( arg ) ;
uncheckedSendFrame ( arg ) ;
uncheckedSendFrame ( arg ) ;
uncheckedSendFrame ( arg ) ;
uncheckedSendFrame ( arg ) ;
<unk> ( arg ) ;
<unk> . <unk> ( arg ) ;
server . setHandler ( arg ) ;
server . setHandler ( arg ) ;
server . stop ( arg ) ;
getServer ( arg ) . handle ( arg ) ;
getServer ( arg ) . handleAsync ( arg ) ;
if ( ! <unk> ) server . join ( arg ) ;
server . addConnector ( arg ) ;
server . addConnector ( arg ) ;
server . addConnector ( arg ) ;
server . addConnector ( arg ) ;
_server . setHandler ( arg ) ;
_server . setHandler ( arg ) ;
_server . stop ( arg ) ;
_server . stop ( arg ) ;
if ( server == null ) server = new Server ( arg ) ;
<unk> . addConnectionFactory ( arg ) ;
ssocket . write ( arg ) ;
<unk> = _pathInfoOnly ? / : request . getServletPath ( arg ) ;
servlet_holder = _servletNameMap . get ( arg ) ;
servlet_holder = entry . getValue ( arg ) ;
servlet . <unk> ( arg ) ;
servlet . start ( arg ) ;
session . goAway ( arg ) ;
remote . <unk> ( arg ) ;
remote . sendObject ( arg ) ;
remote . <unk> ( arg ) ;
session . getConnection ( arg ) . getIOState ( arg ) . <unk> ( arg ) ;
session . getRemote ( arg ) . sendBytes ( arg ) ;
session . getRemote ( arg ) . sendBytes ( arg ) ;
session . <unk> ( arg ) . sendObject ( arg ) ;
session . getRemote ( arg ) . sendString ( arg ) ;
session . getRemote ( arg ) . sendString ( arg ) ;
session . getRemote ( arg ) . sendString ( arg ) ;
session . getRemote ( arg ) . sendString ( arg ) ;
session . getRemote ( arg ) . sendString ( arg ) ;
session . getRemote ( arg ) . sendString ( arg ) ;
session . getRemote ( arg ) . sendString ( arg ) ;
session . getRemote ( arg ) . sendString ( arg ) ;
session . getRemote ( arg ) . sendString ( arg ) ;
session . goAway ( arg ) ;
session . goAway ( arg ) ;
session . goAway ( arg ) ;
session . goAway ( arg ) ;
session . goAway ( arg ) ;
session . goAway ( arg ) ;
session . goAway ( arg ) ;
session . goAway ( arg ) ;
session . notifyError ( arg ) ;
session . notifyError ( arg ) ;
session . open ( arg ) ;
session . open ( arg ) ;
session . open ( arg ) ;
System . err . println ( arg ) ;
if ( session != null ) session . setAttribute ( arg ) ;
session . <unk> ( arg ) ;
session = client . connect ( arg ) ;
session = renewSession ( arg ) ;
sessionPromise . completed ( arg ) ;
sessionHandler . checkRequestedSessionId ( arg ) ;
sessionHandler . checkRequestedSessionId ( arg ) ;
sessionManager . setSessionIdManager ( arg ) ;
sessionManager . setSessionIdManager ( arg ) ;
sessionPromise . succeeded ( arg ) ;
context . failed ( arg ) ;
set . addAll ( arg ) ;
ignored = true ;
ignored = true ;
ignored = true ;
ignored = true ;
basePath = new File ( arg ) ;
<unk> . cancel ( arg ) ;
if ( _connectors . add ( arg ) ) <unk> . update ( arg ) ;
setControllerWriteExpectation ( arg ) ;
setControllerWriteExpectation ( arg ) ;
setControllerWriteExpectation ( arg ) ;
setControllerWriteExpectation ( arg ) ;
setControllerWriteExpectation ( arg ) ;
setControllerWriteExpectation ( arg ) ;
setControllerWriteExpectation ( arg ) ;
setControllerWriteExpectation ( arg ) ;
setControllerWriteExpectation ( arg ) ;
setControllerWriteExpectation ( arg ) ;
setControllerWriteExpectation ( arg ) ;
setControllerWriteExpectation ( arg ) ;
setControllerWriteExpectation ( arg ) ;
setControllerWriteExpectation ( arg ) ;
setControllerWriteExpectation ( arg ) ;
setControllerWriteExpectation ( arg ) ;
setControllerWriteExpectation ( arg ) ;
setControllerWriteExpectation ( arg ) ;
final HttpConnection last = setCurrentConnection ( arg ) ;
final HttpChannel < ? > last = setCurrentHttpChannel ( arg ) ;
_filterName = <unk> ;
extraScanTargets = new ArrayList < File > ( arg ) ;
addFilterMapping ( arg ) ;
addFilterMapping ( arg ) ;
addHeader ( arg ) ;
<unk> = new File ( arg ) ;
setSessionIdManager ( arg ) ;
checkManagedAttribute ( arg ) ;
checkManagedAttribute ( arg ) ;
checkManagedAttribute ( arg ) ;
checkManagedAttribute ( arg ) ;
checkManagedAttribute ( arg ) ;
checkManagedAttribute ( arg ) ;
checkManagedAttribute ( arg ) ;
checkManagedAttribute ( arg ) ;
checkManagedAttribute ( arg ) ;
<unk> = null ;
setMonitoredDirName ( arg ) ;
_properties . put ( arg ) ;
_sslContextFactory . setProvider ( arg ) ;
stickySessions = false ;
stickySessions = false ;
context . setTempDirectory ( arg ) ;
context . setTempDirectory ( arg ) ;
final <unk> version = stream . getSession ( arg ) . getVersion ( arg ) ;
<unk> ( arg ) ;
System . out . println ( arg ) ;
decrementAndGetSize ( arg ) ;
<unk> . get ( arg ) ;
sock . session . getRemote ( arg ) . sendBytesByFuture ( arg ) ;
sock . session . getRemote ( arg ) . sendBytes ( arg ) ;
sock . session . getRemote ( arg ) . sendString ( arg ) ;
this . serverSocket = new <unk> ( arg ) ;
<unk> . setKeyStorePath ( arg ) ;
close ( arg ) ;
sslConnection . setConnection ( arg ) ;
sslConnection . getSslEndPoint ( arg ) . setConnection ( arg ) ;
sslConnection . getSslEndPoint ( arg ) . setConnection ( arg ) ;
sslContext = sslContextFactory . getSslContext ( arg ) ;
sslContext = sslContextFactory . getSslContext ( arg ) ;
clientSslContextFactory . <unk> ( arg ) ;
sslContextFactory . setKeyStorePath ( arg ) ;
sslContextFactory . <unk> ( arg ) ;
clientSslContextFactory . <unk> ( arg ) ;
sslContextFactory . setTrustStorePath ( arg ) ;
sslContextFactory . setTrustStorePath ( arg ) ;
sslContextFactory . setTrustStorePath ( arg ) ;
sslContextFactory . setTrustStorePath ( arg ) ;
sslContextFactory . setTrustStorePath ( arg ) ;
sslContextFactory . setTrustStorePath ( arg ) ;
sslContextFactory . setTrustStorePath ( arg ) ;
sslEndPoint . setConnection ( arg ) ;
sslEndPoint . setConnection ( arg ) ;
sslEndPoint . setConnection ( arg ) ;
sslEndPoint . setConnection ( arg ) ;
sslEndPoint . setAsyncConnection ( arg ) ;
sslEndPoint . setAsyncConnection ( arg ) ;
sslEndPoint . setAsyncConnection ( arg ) ;
sslEndPoint . setAsyncConnection ( arg ) ;
sslEndPoint . setAsyncConnection ( arg ) ;
sslEndPoint . setAsyncConnection ( arg ) ;
sslEndPoint . setAsyncConnection ( arg ) ;
sslEndPoint . setAsyncConnection ( arg ) ;
sslEndPoint . setAsyncConnection ( arg ) ;
sslEndPoint . setAsyncConnection ( arg ) ;
sslEndPoint . setAsyncConnection ( arg ) ;
sslEndPoint . setAsyncConnection ( arg ) ;
NextProtoNego . remove ( arg ) ;
NextProtoNego . remove ( arg ) ;
sslEngine = sslContextFactory . newSslEngine ( arg ) ;
sslEngine = sslContextFactory . newSslEngine ( arg ) ;
if ( stream != null ) <unk> . add ( arg ) ;
updateState ( arg ) ;
updateState ( arg ) ;
updateState ( arg ) ;
updateState ( arg ) ;
updateState ( arg ) ;
state = State . ID_FLAGS ;
state = State . <unk> ;
state = State . LAST_GOOD_STREAM_ID ;
state = State . LAST_GOOD_STREAM_ID ;
if ( updateState ( arg ) ) {
updateState ( arg ) ;
updateState ( arg ) ;
server . stop ( arg ) ;
stream . appendFrame ( arg ) ;
stream . appendFrame ( arg ) ;
stream . appendFrame ( arg ) ;
stream . appendFrame ( arg ) ;
stream . appendFrame ( arg ) ;
stream . data ( arg ) ;
flush ( arg ) ;
flush ( arg ) ;
<unk> ( arg ) ;
stream . push ( arg ) ;
stream . push ( arg ) ;
flowControlStrategy . <unk> ( arg ) ;
<unk> = <unk> . INSTANCE ;
<unk> . incomingFrame ( arg ) ;
if ( ! failed ) success ( arg ) ;
setSuccess ( arg ) ;
setSuccess ( arg ) ;
successNotifiers . add ( arg ) ;
<unk> entry = active ;
if ( super . access ( arg ) ) {
return super . call ( arg ) ;
return super . call ( arg ) ;
return super . call ( arg ) ;
return super . call ( arg ) ;
return super . call ( arg ) ;
l . <unk> ( arg ) ;
onClose ( arg ) ;
super . <unk> ( arg ) ;
boolean set = super . <unk> ( arg ) ;
if ( t != null ) t . start ( arg ) ;
tester . stop ( arg ) ;
TestOSGiUtil . testHttpServiceGreetings ( arg ) ;
<unk> . setRequestURI ( arg ) ;
suspend = baseRequest . getHttpChannelState ( arg ) . isSuspended ( arg ) ;
LOG . warn ( arg ) ;
t = _tree [ row + hilo ( arg ) ] ;
t = _tree [ row + hilo ( arg ) ] ;
t = _tree [ row + hilo ( arg ) ] ;
t = _tree [ row + hilo ( arg ) ] ;
t = _tree [ row + hilo ( arg ) ] ;
<unk> . setPayload ( arg ) ;
_tailLock . lock ( arg ) ;
_tailLock . unlock ( arg ) ;
_tailLock . unlock ( arg ) ;
_tailLock . unlock ( arg ) ;
_tailLock . unlock ( arg ) ;
_tailLock . unlock ( arg ) ;
_tailLock . unlock ( arg ) ;
_tailLock . unlock ( arg ) ;
_tailLock . unlock ( arg ) ;
_tailLock . unlock ( arg ) ;
_tailLock . unlock ( arg ) ;
enqueClose ( arg ) ;
enqueClose ( arg ) ;
enqueClose ( arg ) ;
_testClasses = dir ;
TestOSGiUtil . testHttpServiceGreetings ( arg ) ;
TestOSGiUtil . testHttpServiceGreetings ( arg ) ;
assertTrue ( arg ) ;
File testfile = tester . prepareServerFile ( arg ) ;
File testfile = tester . prepareServerFile ( arg ) ;
tf = capture . getFrames ( arg ) . poll ( arg ) ;
tf = capture . getFrames ( arg ) . poll ( arg ) ;
tf = capture . getFrames ( arg ) . poll ( arg ) ;
this . bindAddress = bindAddress ;
_context = sslContext ;
this . elements . add ( arg ) ;
_sslContextFactory . setExcludeCipherSuites ( arg ) ;
_sslContextFactory . setExcludeCipherSuites ( arg ) ;
<unk> = filter ;
this . <unk> = new String [ ] { val } ;
_delegate . <unk> ( arg ) ;
_sslContextFactory . setIncludeCipherSuites ( arg ) ;
_sslContextFactory . setIncludeCipherSuites ( arg ) ;
_sslContextFactory . setSslKeyManagerFactoryAlgorithm ( arg ) ;
_sslContextFactory . setKeyManagerPassword ( arg ) ;
_sslContextFactory . <unk> ( arg ) ;
_sslContextFactory . setKeystore ( arg ) ;
this . <unk> = new Password ( arg ) . toString ( arg ) ;
_sslContextFactory . setKeystorePassword ( arg ) ;
_sslContextFactory . setKeystoreType ( arg ) ;
<unk> = ns ;
_dbAdaptor . <unk> ( arg ) ;
_sslContextFactory . setProtocol ( arg ) ;
_sslContextFactory . setProvider ( arg ) ;
setProvider ( arg ) ;
<unk> = <unk> ;
<unk> ( arg ) ;
_scanInterval = scanInterval ;
_sslContextFactory . setSecureRandomAlgorithm ( arg ) ;
_sslContextFactory . setSecureRandomAlgorithm ( arg ) ;
_sslContextFactory . setSecureRandomAlgorithm ( arg ) ;
this . _server . setStopTimeout ( arg ) ;
this . _server . setStopTimeout ( arg ) ;
_serverPort = null ;
_sslContextFactory . setSslKeyManagerFactoryAlgorithm ( arg ) ;
_sslContextFactory . setSslKeyManagerFactoryAlgorithm ( arg ) ;
_sslContextFactory . setTrustManagerFactoryAlgorithm ( arg ) ;
_sslContextFactory . setTrustManagerFactoryAlgorithm ( arg ) ;
this . _stderr = stream == System . err ? null : stream ;
_sslContextFactory . setTrustManagerFactoryAlgorithm ( arg ) ;
_sslContextFactory . <unk> ( arg ) ;
_sslContextFactory . setTruststore ( arg ) ;
_sslContextFactory . setTruststorePassword ( arg ) ;
_sslContextFactory . setTruststoreType ( arg ) ;
headers . put ( arg ) ;
this . <unk> = basePath . <unk> ( arg ) ;
this . remote = session . getRemote ( arg ) ;
this . cleanClose = false ;
this . cleanClose = false ;
this . _configurationManager = <unk> ;
getConnection ( arg ) . write ( arg ) ;
this . session . getRemote ( arg ) . sendStringByFuture ( arg ) ;
this . session . getRemote ( arg ) . sendStringByFuture ( arg ) ;
this . session . getRemote ( arg ) . sendStringByFuture ( arg ) ;
latch . countDown ( arg ) ;
this . session = null ;
this . session = null ;
this . connectTimeout = <unk> ;
this . connectTimeout = <unk> ;
<unk> = connection ;
this . session = null ;
this . session = null ;
this . connectionState = ConnectionState . CLOSED ;
this . connectionState = ConnectionState . <unk> ;
this . ioState . setState ( arg ) ;
this . ioState . setState ( arg ) ;
this . ioState . setState ( arg ) ;
this . ioState . setState ( arg ) ;
this . _contextAttributes = <unk> ;
this . _contexts = contexts ;
this . _defaultLifeCycleGoal = <unk> ;
_defaultsDescriptor = <unk> ;
_deploymentManager = <unk> ;
this . _edges . remove ( arg ) ;
this . _edges = <unk> ;
_endPoint = endpoint ;
_extractWars = <unk> ;
this . finRsvOp = ( byte ) ( ( finRsvOp & 0x7F ) | ( fin ? 0x80 : 0x00 ) ) ;
this . <unk> = false ;
<unk> = true ;
this . ioState . onOpened ( arg ) ;
this . _jettyEnvXml = <unk> ;
this . listener = listener ;
if ( ! this . listener . compareAndSet ( arg ) ) throw new IllegalStateException ( arg ) ;
this . requestListeners . add ( arg ) ;
this . requestListeners . add ( arg ) ;
this . requestListeners . add ( arg ) ;
this . requestListeners . add ( arg ) ;
this . requestListeners . add ( arg ) ;
this . requestListeners . add ( arg ) ;
return this . method . invoke ( arg ) ;
this . method = method . asString ( arg ) ;
_monitoredDir = <unk> ;
this . _nodes . add ( arg ) ;
this . _nodes . remove ( arg ) ;
this . _nodes = <unk> ;
onEvent . <unk> ( arg ) ;
this . finRsvOp = ( byte ) ( ( finRsvOp & <unk> ) | ( op & 0x0F ) ) ;
_parentLoaderPriority = <unk> ;
this . payloadLength = length ;
this . port = serverSocket . getLocalPort ( arg ) ;
this . promise = result ;
this . promise = context ;
this . properties . putAll ( arg ) ;
_recursive = recursive ;
this . roles = new ArrayList < <unk> > ( arg ) ;
this . finRsvOp = ( byte ) ( ( finRsvOp & <unk> ) | ( <unk> ? 0x40 : 0x00 ) ) ;
flagsInUse = ( byte ) ( flagsInUse | 0x40 ) ;
flagsInUse = ( byte ) ( flagsInUse | 0x40 ) ;
this . finRsvOp = ( byte ) ( ( finRsvOp & <unk> ) | ( <unk> ? 0x20 : 0x00 ) ) ;
flagsInUse = ( byte ) ( flagsInUse | 0x20 ) ;
flagsInUse = ( byte ) ( flagsInUse | 0x20 ) ;
this . finRsvOp = ( byte ) ( ( finRsvOp & <unk> ) | ( <unk> ? 0x10 : 0x00 ) ) ;
flagsInUse = ( byte ) ( flagsInUse | 0x10 ) ;
flagsInUse = ( byte ) ( flagsInUse | 0x10 ) ;
_scanInterval = scanInterval ;
this . _scheme = scheme ;
this . _scheme = scheme ;
this . server = <unk> . getInstance ( arg ) ;
this . _serverPort = connector . getLocalPort ( arg ) ;
this . _serverPort = connector . getLocalPort ( arg ) ;
_servers . clear ( arg ) ;
this . remote = this . session . <unk> ( arg ) ;
this . session . getRemote ( arg ) . sendBytes ( arg ) ;
this . session . getRemote ( arg ) . sendBytes ( arg ) ;
this . session . getRemote ( arg ) . sendBytes ( arg ) ;
this . session . getRemote ( arg ) . sendString ( arg ) ;
this . session . getRemote ( arg ) . sendString ( arg ) ;
this . session . getRemote ( arg ) . sendString ( arg ) ;
this . session . getRemote ( arg ) . sendString ( arg ) ;
connection . setIdleTimeout ( arg ) ;
_timestamp = <unk> ;
this . uri = null ;
this . uri = null ;
this . _useStandardBindings = <unk> ;
this . version = <unk> . <unk> ( arg ) ;
this . <unk> . <unk> ( arg ) ;
_writeTimeout = <unk> ;
threads [ i ] . start ( arg ) ;
threadPool . execute ( arg ) ;
executor . execute ( arg ) ;
threadPool . setStopTimeout ( arg ) ;
threadPool = Executors . <unk> ( arg ) ;
TimeUnit . MILLISECONDS . sleep ( arg ) ;
threads = _acceptorThreads ;
fail ( arg ) ;
fail ( arg ) ;
fail ( arg ) ;
throw x ;
throw x ;
Assert . fail ( arg ) ;
throw new MessageTooLargeException ( arg ) ;
throw new InvalidSignatureException ( arg ) ;
throw new InvalidSignatureException ( arg ) ;
<unk> = true ;
return consumed ;
throw new <unk> ( arg ) ;
send ( arg ) ;
reset ( arg ) ;
return null ;
throw new MessageTooLargeException ( arg ) ;
throw new MessageTooLargeException ( arg ) ;
throw new MessageTooLargeException ( arg ) ;
throw new RuntimeIOException ( arg ) ;
LOG . debug ( arg ) ;
throw new Authentication . Failed ( arg ) ;
throw new SessionException ( arg ) ;
offer ( arg ) ;
throw new ParseException ( arg ) ;
throw new ParseException ( arg ) ;
throw new ProtocolException ( arg ) ;
throw new ProtocolException ( arg ) ;
throw new ProtocolException ( arg ) ;
throw new ProtocolException ( arg ) ;
if ( len >= 0 ) throw x ;
if ( timer != null ) timer . schedule ( arg ) ;
tld = iter . next ( arg ) ;
if ( ! tmpDir . exists ( arg ) ) assertTrue ( arg ) ;
to_flush = flushMask ( arg ) ;
int <unk> = _connections . size ( arg ) + <unk> ;
tp . execute ( arg ) ;
tp . execute ( arg ) ;
tp . execute ( arg ) ;
tp . execute ( arg ) ;
tp . execute ( arg ) ;
tp . setIdleTimeout ( arg ) ;
tp . setIdleTimeout ( arg ) ;
tp . setStopTimeout ( arg ) ;
<unk> [ ] <unk> = <unk> . <unk> ( arg ) ;
tsocket . getSession ( arg ) . close ( arg ) ;
tsocket . getSession ( arg ) . close ( arg ) ;
<unk> = ( myUserTransaction == null ? <span class="fail">FAIL</span> : <span <unk> myUserTransaction +</span> ) ;
BufferUtil . flipToFlush ( arg ) ;
type = <unk> ;
<unk> = e . getValue ( arg ) . <unk> ( arg ) ;
<unk> ( arg ) ;
if ( _open . compareAndSet ( arg ) ) _selector . destroyEndPoint ( arg ) ;
_connectionStats . <unk> ( arg ) ;
if ( set = _status . compareAndSet ( arg ) ) done ( arg ) ;
url = BundleFileLocatorHelperFactory . getFactory ( arg ) . getHelper ( arg ) . getFileURL ( arg ) ;
url = BundleFileLocatorHelperFactory . getFactory ( arg ) . getHelper ( arg ) . getFileURL ( arg ) ;
url = ( ( <unk> ) <unk> . <unk> ) . getFileURL ( arg ) ;
url = context . evaluate ( arg ) ;
url = Resource . toURL ( arg ) ;
url = file . toURI ( arg ) . toURL ( arg ) ;
<unk> [ i ] = elements . get ( arg ) . toURI ( arg ) . toURL ( arg ) ;
System . out . println ( arg ) ;
v [ i ] = <unk> ( arg ) ;
vClass [ 0 ] = ( Class < ? > ) type . get ( arg ) ;
if ( pushSynHeadersValid != null ) <unk> ( arg ) ;
value = _configuration . getIdMap ( arg ) . get ( arg ) ;
<unk> ( arg ) . succeeded ( arg ) ;
version = request . getHeaderInt ( arg ) ;
webAppContext . setAttribute ( arg ) ;
webAppContext . setAttribute ( arg ) ;
webAppContext . setConfigurationClasses ( arg ) ;
webAppContext . setConfigurationClasses ( arg ) ;
webAppContext . setDefaultsDescriptor ( arg ) ;
webAppContext . setDefaultsDescriptor ( arg ) ;
webAppContext . setVirtualHosts ( arg ) ;
webAppContext . setVirtualHosts ( arg ) ;
_webInfIncludeJarPattern = pattern ;
_webInfJars . addAll ( arg ) ;
<unk> . <unk> ( arg ) ;
notifyClose ( arg ) ;
notifyClose ( arg ) ;
if ( <unk> == null ) websocket . onConnect ( arg ) ;
websocket = acceptor . doWebSocketConnect ( arg ) ;
websocket = acceptor . doWebSocketConnect ( arg ) ;
websocket = acceptor . doWebSocketConnect ( arg ) ;
websocket = acceptor . doWebSocketConnect ( arg ) ;
while ( arg ) Thread . sleep ( arg ) ;
while ( arg ) ;
while ( arg ) _excludedUA . add ( arg ) ;
while ( arg ) _fieldList . remove ( arg ) ;
while ( arg ) convertor = _convertors . get ( arg ) ;
while ( arg ) _parser . parseNext ( arg ) ;
while ( arg ) if ( parseNext ( arg ) < 0 ) return ;
parse ( arg ) ;
wrappedResponse . noCompression ( arg ) ;
wrappedResponse . noCompression ( arg ) ;
wrapper . setHandler ( arg ) ;
write ( arg ) . get ( arg ) ;
write ( arg ) . get ( arg ) ;
terminateConnection ( arg ) ;
terminateConnection ( arg ) ;
flusher . close ( arg ) ;
writeBytes . <unk> ( arg ) ;
<unk> ( arg ) ;
write ( arg ) ;
write ( arg ) ;
write ( arg ) ;
written = out instanceof HttpOutput ? ( ( HttpOutput ) out ) . isWritten ( arg ) : HttpConnection . getCurrentConnection ( arg ) . getGenerator ( arg ) . isContentWritten ( arg ) ;
written = out instanceof HttpOutput ? ( ( HttpOutput ) out ) . isWritten ( arg ) : true ;
written = out instanceof HttpOutput ? ( ( HttpOutput ) out ) . isWritten ( arg ) : HttpConnection . getCurrentConnection ( arg ) . getGenerator ( arg ) . isWritten ( arg ) ;
written = out instanceof HttpOutput ? ( ( HttpOutput ) out ) . isWritten ( arg ) : AbstractHttpConnection . getCurrentConnection ( arg ) . getGenerator ( arg ) . isWritten ( arg ) ;
ws . getConnection ( arg ) . sendMessage ( arg ) ;
ws . getConnection ( arg ) . sendMessage ( arg ) ;
<unk> = element ;
LOG . debug ( arg ) ;
xml = _config . getBaseHome ( arg ) . getFile ( arg ) ;
<unk> . getProperties ( arg ) . putAll ( arg ) ;
_xmlConfigurations . add ( arg ) ;
_xmlConfigurations . add ( arg ) ;
_xmlConfigurations . add ( arg ) ;
_xmlConfigurations . add ( arg ) ;
configuredXmls . add ( arg ) ;
configuredXmls = <unk> ( arg ) ;
year = year % 10000 ;
