AbstractResourceProvider provider = ( AbstractResourceProvider ) AbstractControllerResourceProvider . getResourceProvider ( arg ) ;
AbstractResourceProvider provider = ( AbstractResourceProvider ) AbstractResourceProvider . getResourceProvider ( arg ) ;
AbstractResourceProvider provider = ( AbstractResourceProvider ) AbstractResourceProvider . getResourceProvider ( arg ) ;
AbstractResourceProvider provider = ( AbstractResourceProvider ) AbstractResourceProvider . getResourceProvider ( arg ) ;
AbstractResourceProvider provider = ( AbstractResourceProvider ) AbstractResourceProvider . getResourceProvider ( arg ) ;
AbstractResourceProvider provider = ( AbstractResourceProvider ) AbstractResourceProvider . getResourceProvider ( arg ) ;
ActionDBAccessor db = mock ( arg ) ;
ActionDBAccessor db = new <unk> ( arg ) ;
<unk> db = mock ( arg ) ;
ActionManager am = new ActionManager ( arg ) ;
ActionManager am = new ActionManager ( arg ) ;
ActionManager am = new ActionManager ( arg ) ;
ActionManager am = new ActionManager ( arg ) ;
ActionManager am = new ActionManager ( arg ) ;
ActionManager am = new ActionManager ( arg ) ;
ActionManager am = new ActionManager ( arg ) ;
ActionManager am = new ActionManager ( arg ) ;
ActionManager am = new ActionManager ( arg ) ;
ActionManager am = new ActionManager ( arg ) ;
ActionManager am = new ActionManager ( arg ) ;
ActionManager am = new ActionManager ( arg ) ;
ActionManager am = new ActionManager ( arg ) ;
ActionManager am = new ActionManager ( arg ) ;
<unk> server = injector . getInstance ( arg ) ;
Assert . assertNull ( arg ) ;
Assert . assertTrue ( arg ) ;
Assert . assertTrue ( arg ) ;
BasePredicate [ ] predicates = <unk> . getPredicates ( arg ) ;
BasePredicate [ ] predicates = predicate . getPredicates ( arg ) ;
BasePredicate internalPredicate = <unk> ( arg ) ;
BasePredicate predicate ;
BasePredicate predicate = predicates . get ( arg ) ;
BindAuthenticator <unk> = new BindAuthenticator ( arg ) ;
Blueprint bp = ( Blueprint ) <unk> . <unk> ( arg ) ;
Blueprint bp = Blueprints . getInstance ( arg ) . getBlueprint ( arg ) ;
Blueprint bp = context . getBlueprint ( arg ) ;
Blueprint bp = new Blueprint ( arg ) ;
Blueprint bp = this . <unk> ( arg ) ;
Blueprint bp = this . <unk> ( arg ) ;
Blueprint bpx = this . getBlueprint ( arg ) ;
Blueprints . getInstance ( arg ) . addBlueprint ( arg ) ;
Blueprints . getInstance ( arg ) . <unk> ( arg ) ;
Boolean <unk> = false ;
BufferedReader <unk> = new BufferedReader ( arg ) ;
Class <unk> = Class . <unk> ( arg ) ;
<unk> response = service . path ( arg ) . queryParam ( arg ) . accept ( arg ) . type ( arg ) . post ( arg ) ;
Cluster c = Clusters . getInstance ( arg ) . getClusterByID ( arg ) ;
Cluster c = Clusters . getInstance ( arg ) . getClusterByID ( arg ) ;
Cluster c = Clusters . getInstance ( arg ) . getClusterByName ( arg ) ;
Cluster cls = new Cluster ( arg ) ;
Cluster cls = new Cluster ( arg ) ;
Cluster cluster = Clusters . getInstance ( arg ) . getClusterByID ( arg ) ;
Cluster cluster = Clusters . getInstance ( arg ) . getClusterByName ( arg ) ;
Cluster cluster = clusters . getCluster ( arg ) ;
ClusterController controller = new ClusterControllerImpl ( arg ) ;
ClusterController controller = new ClusterControllerImpl ( arg ) ;
ClusterController controller = new ClusterControllerImpl ( arg ) ;
ClusterController controller = new ClusterControllerImpl ( arg ) ;
ClusterController controller = new ClusterControllerImpl ( arg ) ;
ClusterController controller = new ClusterControllerImpl ( arg ) ;
ClusterController controller = new ClusterControllerImpl ( arg ) ;
ClusterController controller = new ClusterControllerImpl ( arg ) ;
ClusterController controller = new ClusterControllerImpl ( arg ) ;
ClusterController controller = new ClusterControllerImpl ( arg ) ;
ClusterController controller = new ClusterControllerImpl ( arg ) ;
ClusterController controller = new ClusterControllerImpl ( arg ) ;
ClusterController controller = new ClusterControllerImpl ( arg ) ;
ClusterController controller = new ClusterControllerImpl ( arg ) ;
ClusterController controller = new ClusterControllerImpl ( arg ) ;
ClusterController controller = new ClusterControllerImpl ( arg ) ;
ClusterController controller = new ClusterControllerImpl ( arg ) ;
ClusterController controller = new ClusterControllerImpl ( arg ) ;
ClusterController controller = new ClusterControllerImpl ( arg ) ;
ClusterController controller = new ClusterControllerImpl ( arg ) ;
ClusterControllerImpl controller = new ClusterControllerImpl ( arg ) ;
ClusterControllerImpl controller = new ClusterControllerImpl ( arg ) ;
ClusterControllerImpl controller = new ClusterControllerImpl ( arg ) ;
ClusterControllerImpl controller = new ClusterControllerImpl ( arg ) ;
ClusterControllerImpl controller = new ClusterControllerImpl ( arg ) ;
ClusterControllerImpl controller = new ClusterControllerImpl ( arg ) ;
ClusterControllerImpl controller = new ClusterControllerImpl ( arg ) ;
ClusterControllerImpl controller = new ClusterControllerImpl ( arg ) ;
ClusterControllerImpl controller = new ClusterControllerImpl ( arg ) ;
ClusterControllerImpl controller = new ClusterControllerImpl ( arg ) ;
ClusterDefinition c = Clusters . getInstance ( arg ) . getClusterDefinition ( arg ) ;
ClusterDefinition c = Clusters . getInstance ( arg ) . operational_clusters . get ( arg ) . getLatestClusterDefinition ( arg ) ;
ClusterFSM clusterFsm = StateMachineInvoker . <unk> ( arg ) ;
ClusterFSM <unk> = StateMachineInvoker . <unk> ( arg ) ;
ClusterIdAndRev <unk> = new ClusterIdAndRev ( arg ) ;
ClusterImpl cluster = ( ClusterImpl ) getCluster ( arg ) ;
<unk> <unk> = <unk> ( arg ) ;
Clusters . getInstance ( arg ) . deleteCluster ( arg ) ;
Clusters . getInstance ( arg ) . <unk> ( arg ) ;
Clusters <unk> = Clusters . getInstance ( arg ) ;
Clusters clusters = injector . getInstance ( arg ) ;
Clusters fsm = mock ( arg ) ;
Clusters fsm = mock ( arg ) ;
Clusters fsm = new ClustersImpl ( arg ) ;
Clusters fsm = new ClustersImpl ( arg ) ;
<unk> < Resource > <unk> = new HashSet < Resource > ( arg ) ;
<unk> line = parser . parse ( arg ) ;
ConcurrentHashMap < Integer , Blueprint > <unk> = this . <unk> . get ( arg ) ;
ConcurrentHashMap < String , Node > all_nodes = Nodes . getInstance ( arg ) . getNodes ( arg ) ;
Config config = cluster . getDesiredConfig ( arg ) ;
Config config = cluster . getDesiredConfig ( arg ) ;
Config config = cluster . getDesiredConfig ( arg ) ;
Config config = cluster . getDesiredConfig ( arg ) ;
Config config = cluster . getDesiredConfig ( arg ) ;
Config config = cluster . getDesiredConfig ( arg ) ;
Config config = cluster . getDesiredConfig ( arg ) ;
Config config = cluster . getDesiredConfig ( arg ) ;
Config config = cluster . getDesiredConfig ( arg ) ;
Config config = clusters . getCluster ( arg ) . getDesiredConfig ( arg ) ;
Config config = clusters . <unk> ( arg ) . getDesiredConfig ( arg ) ;
Config config = service . getCluster ( arg ) . getDesiredConfig ( arg ) ;
<unk> <unk> = <unk> . get ( arg ) ;
Context <unk> = new Context ( arg ) ;
Controller controller = Controller . getInstance ( arg ) ;
ControllerResponse <unk> = new ControllerResponse ( arg ) ;
ExecutionCommand cmd = s . <unk> ( arg ) . get ( arg ) ;
ExecutionCommandWrapper . applyCustomConfig ( arg ) ;
ExecutionCommandWrapper . applyCustomConfig ( arg ) ;
ExecutionCommandWrapper . applyCustomConfig ( arg ) ;
ExecutionCommandWrapper . applyCustomConfig ( arg ) ;
ExecutionCommandWrapper . applyCustomConfig ( arg ) ;
ExecutionCommandWrapper . applyCustomConfig ( arg ) ;
<unk> . <unk> ( arg ) ;
GangliaPropertyProvider <unk> = new GangliaPropertyProvider ( arg ) ;
HDFSPluginImpl <unk> = new HDFSPluginImpl ( arg ) ;
HeartBeatResponse heartBeatResponse = new HeartBeatResponse ( arg ) ;
Host host = clusters . <unk> ( arg ) . get ( arg ) ;
HostHeartbeatTimedOutEvent e = new HostHeartbeatTimedOutEvent ( arg ) ;
HostResponse <unk> = null ;
Injector injector = Guice . createInjector ( arg ) ;
Injector injector = Guice . createInjector ( arg ) ;
InstalledOrStartedComponents <unk> = new InstalledOrStartedComponents ( arg ) ;
InstalledOrStartedComponents componentStates = new InstalledOrStartedComponents ( arg ) ;
Integer <unk> = Integer . valueOf ( arg ) ;
Iterable < Resource > iterable = controller . getResources ( arg ) ;
Iterable < Resource > iterable = controller . getResources ( arg ) ;
Iterable < Resource > iterable = controller . getResources ( arg ) ;
Iterable < Resource > iterable = controller . getResources ( arg ) ;
Iterable < Resource > resources = getResources ( arg ) ;
<unk> < Map . Entry < PropertyId , Object >> <unk> = map . entrySet ( arg ) . iterator ( arg ) ;
<unk> list ;
LOG . debug ( arg ) ;
LOG . info ( arg ) ;
LOG . info ( arg ) ;
LOG . info ( arg ) ;
LOG . info ( arg ) ;
LOG . info ( arg ) ;
LOG . info ( arg ) ;
LOG . info ( arg ) ;
LOG . info ( arg ) ;
LOG . info ( arg ) ;
LOG . info ( arg ) ;
LOG . info ( arg ) ;
LOG . info ( arg ) ;
LOG . info ( arg ) ;
List < <unk> > <unk> = <unk> ( arg ) ;
List < BasePredicate > <unk> = new LinkedList < BasePredicate > ( arg ) ;
List < BasePredicate > <unk> = new LinkedList < BasePredicate > ( arg ) ;
List < BasePredicate > predicates = <unk> . <unk> ( arg ) ;
List < BlueprintInformation > list ;
List < BlueprintInformation > list = Blueprints . getInstance ( arg ) . <unk> ( arg ) ;
List < Cluster > clusters = clusterFsm . <unk> ( arg ) ;
List < Cluster > clusters = clusterFsm . <unk> ( arg ) ;
List < ClusterDefinition > searchResults = null ;
List < <unk> > <unk> = heartbeat . <unk> ( arg ) ;
List < ExecutionCommand > execCmdList = this . commandsToSend . get ( arg ) ;
List < GrantedAuthority > <unk> = new ArrayList < GrantedAuthority > ( arg ) ;
List < Host > allHosts = fsm . getAllHosts ( arg ) ;
List < Host > allHosts = fsm . getHosts ( arg ) ;
List < Node > list = Nodes . getInstance ( arg ) . <unk> ( arg ) ;
List < Resource > listResources = Collections . singletonList ( arg ) ;
List < Resource > listResources = Collections . singletonList ( arg ) ;
List < Resource > listResources = Collections . singletonList ( arg ) ;
List < Resource > listResources = Collections . singletonList ( arg ) ;
List < Resource > listResources = Collections . singletonList ( arg ) ;
List < Resource > listResources = Collections . singletonList ( arg ) ;
List < Resource > listResources = Collections . singletonList ( arg ) ;
List < Resource > listResources = Collections . singletonList ( arg ) ;
List < <unk> > <unk> = heartbeat . <unk> ( arg ) ;
List < ServiceComponentHost > <unk> = cluster . getServiceComponentHosts ( arg ) ;
List < ServiceComponentHost > <unk> = null ;
List < ServiceConfigEntity > list = <unk> . <unk> ( arg ) ;
List < <unk> > list = Stacks . getInstance ( arg ) . <unk> ( arg ) ;
List < Stage > stages = db . getAllStages ( arg ) ;
List < Stage > stages = db . <unk> ( arg ) ;
List < Stage > stages = db . <unk> ( arg ) ;
List < Stage > stages = <unk> . <unk> ( arg ) ;
List < String > allHosts = fsm . getAllHosts ( arg ) ;
List < String > hosts = Arrays . <unk> ( arg ) ;
List < String > hosts = new ArrayList < String > ( arg ) ;
List < String > <unk> = clsDef . <unk> ( arg ) ;
List < String > nodeRoles = Nodes . getInstance ( arg ) . getNode ( arg ) . getNodeState ( arg ) . getNodeRoleNames ( arg ) ;
List < String > nodeRoles = <unk> . getNode ( arg ) . getNodeState ( arg ) . getNodeRoleNames ( arg ) ;
Log . debug ( arg ) ;
Log . info ( arg ) ;
Log . info ( arg ) ;
Map . Entry < Resource . Type , Set < Map < String , Object <unk> entry = mapProperties . entrySet ( arg ) . iterator ( arg ) . next ( arg ) ;
Map < PropertyId , Object > mapProperties = new HashMap < PropertyId , Object > ( arg ) ;
Map < PropertyId , Object > <unk> = parser . parse ( arg ) ;
Map < PropertyId , Object > properties = new HashMap < PropertyId , Object > ( arg ) ;
Map < PropertyId , Object > properties = new LinkedHashMap < PropertyId , Object > ( arg ) ;
Map < PropertyId , Object > resourceProperties = new HashMap < PropertyId , Object > ( arg ) ;
Map < PropertyId , Object > resourceProperties = new HashMap < PropertyId , Object > ( arg ) ;
Map < PropertyId , Object > resourceProperties = new HashMap < PropertyId , Object > ( arg ) ;
Map < PropertyId , PropertyId > <unk> = new HashMap < PropertyId , PropertyId > ( arg ) ;
Map < PropertyId , String > mapProperties = new HashMap < PropertyId , String > ( arg ) ;
Map < PropertyId , String > mapProperties = new HashMap < PropertyId , String > ( arg ) ;
Map < PropertyId , String > <unk> = <unk> . get ( arg ) ;
Map < PropertyId , String > properties = new LinkedHashMap < PropertyId , String > ( arg ) ;
Map < PropertyId , String > properties = new LinkedHashMap < PropertyId , String > ( arg ) ;
Map < PropertyId , String > resourceProperties = new HashMap < PropertyId , String > ( arg ) ;
Map < PropertyId , String > resourceProperties = new HashMap < PropertyId , String > ( arg ) ;
Map < PropertyId , String > resourceProperties = new HashMap < PropertyId , String > ( arg ) ;
Map < PropertyId , String > resourceProperties = new HashMap < PropertyId , String > ( arg ) ;
Map < PropertyId , String > resourceProperties = new HashMap < PropertyId , String > ( arg ) ;
Map < PropertyId , String > resourceProperties = new HashMap < PropertyId , String > ( arg ) ;
Map < PropertyId , TemporalInfo > <unk> = request . <unk> ( arg ) ;
Map < PropertyId , TemporalInfo > mapProperties ;
Map < Resource . Type , String > <unk> = m_resource . getIds ( arg ) ;
Map < Resource . Type , String > mapResourceIds = resource . getIds ( arg ) ;
Map < Resource . Type , String > mapResourceIds = resource . getIds ( arg ) ;
Map < ServiceComponent , Set < ServiceComponentHost >> <unk> = new HashMap < ServiceComponent , Set < ServiceComponentHost >> ( arg ) ;
Map < String , Config > configs = cluster . getDesiredConfigsByType ( arg ) ;
Map < String , Config > configs = cluster . getDesiredConfigsByType ( arg ) ;
Map < String , Config > <unk> = new HashMap < String , Config > ( arg ) ;
Map < String , DesiredConfig > actual = sch . getActualConfigs ( arg ) ;
Map < String , DesiredConfig > <unk> = sch . getActualConfigs ( arg ) ;
Map < String , List < String >> clusterHostInfo = StageUtils . getClusterHostInfo ( arg ) ;
Map < String , List < String >> clusterHostInfo = StageUtils . getClusterHostInfo ( arg ) ;
Map < String , List < String >> clusterHostInfo = <unk> . <unk> ( arg ) ;
Map < String , Map < String , Object >> categories = resource . getCategories ( arg ) ;
Map < String , Map < String , String >> configTags = findConfigurationPropertiesWithOverrides ( arg ) ;
Map < String , Map < String , String >> configTags = findConfigurationPropertiesWithOverrides ( arg ) ;
Map < String , Map < String , String >> configTags = findConfigurationPropertiesWithOverrides ( arg ) ;
Map < String , Object > map = <unk> ( arg ) ;
Map < String , PropertyId > <unk> = Properties . getKeyPropertyIds ( arg ) ;
Map < String , <unk> > <unk> = <unk> . get ( arg ) ;
Map < String , RoleStats > <unk> = new <unk> < String , RoleStats > ( arg ) ;
Map < String , Set < String >> categories = schema . getCategories ( arg ) ;
Map < String , String > mergedConfig = ExecutionCommandWrapper . getMergedConfig ( arg ) ;
Map < String , String > mergedConfig = ExecutionCommandWrapper . getMergedConfig ( arg ) ;
Map < String , String > mergedConfig = getMergedConfig ( arg ) ;
Map < String , String > properties = categories . get ( arg ) ;
Map < String , String > properties = categories . get ( arg ) ;
<unk> healthStatus = null ;
NodeInfo info = new NodeInfo ( arg ) ;
NodeInfo info = new NodeInfo ( arg ) ;
Nodes . getInstance ( arg ) . <unk> ( arg ) ;
Nodes . getInstance ( arg ) . getNodes ( arg ) . get ( arg ) . getNodeState ( arg ) . getNodeRoleNames ( arg ) . add ( arg ) ;
Nodes . getInstance ( arg ) . getNodes ( arg ) . put ( arg ) ;
Nodes . getInstance ( arg ) . <unk> ( arg ) ;
<unk> <unk> = <unk> . <unk> ( arg ) ;
<unk> . accept ( arg ) ;
<unk> . accept ( arg ) ;
<unk> . accept ( arg ) ;
<unk> . accept ( arg ) ;
<unk> . accept ( arg ) ;
PREDICATE_3 . accept ( arg ) ;
PREDICATE_3 . accept ( arg ) ;
PREDICATE_4 . accept ( arg ) ;
PREDICATE_4 . accept ( arg ) ;
<unk> . accept ( arg ) ;
<unk> . accept ( arg ) ;
<unk> . accept ( arg ) ;
<unk> . accept ( arg ) ;
Predicate internalPredicate = pb . property ( arg ) . equals ( arg ) . and ( arg ) . property ( arg ) . equals ( arg ) . and ( arg ) . property ( arg ) . equals ( arg ) . toPredicate ( arg ) ;
Predicate predicate = getPredicate ( arg ) ;
Predicate predicate = new PredicateBuilder ( arg ) . property ( arg ) . equals ( arg ) . toPredicate ( arg ) ;
Predicate predicate = pb . property ( arg ) . equals ( arg ) . and ( arg ) . property ( arg ) . equals ( arg ) . and ( arg ) . property ( arg ) . equals ( arg ) . toPredicate ( arg ) ;
PredicateBuilder . PredicateBuilderPredicate pbPredicate = null ;
PredicateBuilder . PredicateBuilderWithPredicate pbWithPredicate = null ;
PropertyId <unk> = PropertyHelper . getPropertyId ( arg ) ;
PropertyId <unk> = PropertyHelper . getPropertyId ( arg ) ;
PropertyId p1 = new PropertyIdImpl ( arg ) ;
PropertyId p1 = new PropertyIdImpl ( arg ) ;
PropertyId p1 = new PropertyIdImpl ( arg ) ;
PropertyId p1 = new PropertyIdImpl ( arg ) ;
PropertyId p1 = new PropertyIdImpl ( arg ) ;
PropertyId p1 = new PropertyIdImpl ( arg ) ;
PropertyId p1 = new PropertyIdImpl ( arg ) ;
PropertyId p1 = new PropertyIdImpl ( arg ) ;
PropertyId p1 = new PropertyIdImpl ( arg ) ;
PropertyId p1 = new PropertyIdImpl ( arg ) ;
PropertyId p1 = new PropertyIdImpl ( arg ) ;
PropertyId p1 = new PropertyIdImpl ( arg ) ;
PropertyId p1 = new PropertyIdImpl ( arg ) ;
PropertyId p1 = new PropertyIdImpl ( arg ) ;
PropertyId p1 = new PropertyIdImpl ( arg ) ;
PropertyId p1 = new PropertyIdImpl ( arg ) ;
PropertyId p1 = new PropertyIdImpl ( arg ) ;
PropertyId p1 = new PropertyIdImpl ( arg ) ;
PropertyId p1 = new PropertyIdImpl ( arg ) ;
PropertyId p1 = new PropertyIdImpl ( arg ) ;
PropertyId p1 = new PropertyIdImpl ( arg ) ;
PropertyId p1 = new PropertyIdImpl ( arg ) ;
PropertyId p1 = new PropertyIdImpl ( arg ) ;
PropertyId p1 = new PropertyIdImpl ( arg ) ;
PropertyId <unk> = Properties . getPropertyId ( arg ) ;
PropertyId prop = PropertyHelper . getPropertyId ( arg ) ;
PropertyId <unk> = PropertyHelper . getPropertyId ( arg ) ;
PropertyId <unk> = PropertyHelper . getPropertyId ( arg ) ;
PropertyId <unk> = PropertyHelper . getPropertyId ( arg ) ;
PropertyId propertyId = Properties . getPropertyId ( arg ) ;
PropertyId propertyId = PropertyHelper . getPropertyId ( arg ) ;
PropertyId subResource = PropertyHelper . getPropertyId ( arg ) ;
PropertyIdImpl propertyId = new PropertyIdImpl ( arg ) ;
<unk> query = entityManager . createQuery ( arg ) ;
<unk> < <unk> > <unk> = <unk> ( arg ) ;
Request . TemporalInfo <unk> = request . <unk> ( arg ) ;
Request request = new RequestImpl ( arg ) ;
Request request = new RequestImpl ( arg ) ;
Request request = new RequestImpl ( arg ) ;
RequestBody body = parser . parse ( arg ) ;
RequestBody body = parser . parse ( arg ) ;
RequestBody body = parser . parse ( arg ) ;
RequestBody body = parser . parse ( arg ) ;
RequestBody body = parser . parse ( arg ) ;
RequestBody body = parser . parse ( arg ) ;
RequestBody body = parser . parse ( arg ) ;
RequestBody body = parser . parse ( arg ) ;
RequestBody body = parser . parse ( arg ) ;
RequestBody body = parser . parse ( arg ) ;
RequestBody body = parser . parse ( arg ) ;
RequestStatus <unk> = RequestStatus . <unk> ;
RequestStatusResponse resp = controller . updateServices ( arg ) ;
RequestStatusResponse resp = controller . updateServices ( arg ) ;
RequestStatusResponse resp = controller . updateServices ( arg ) ;
RequestStatusResponse resp = controller . updateServices ( arg ) ;
RequestStatusResponse response = controller . createActions ( arg ) ;
RequestStatusResponse response = controller . createActions ( arg ) ;
RequestStatusResponse response = controller . createActions ( arg ) ;
RequestStatusResponse trackAction = controller . updateCluster ( arg ) ;
RequestStatusResponse trackAction = controller . updateComponents ( arg ) ;
RequestStatusResponse trackAction = controller . updateServices ( arg ) ;
RequestStatusResponse trackAction = controller . updateServices ( arg ) ;
RequestStatusResponse trackAction = controller . updateServices ( arg ) ;
RequestStatusResponse trackAction = controller . updateServices ( arg ) ;
RequestStatusResponse trackAction = controller . updateServices ( arg ) ;
RequestStatusResponse trackAction = controller . updateServices ( arg ) ;
ResourceDefinition r = entry . getValue ( arg ) ;
ResourceDefinition resource = createMock ( arg ) ;
ResourceDefinition resource = createMock ( arg ) ;
ResourceDefinition resource = createMock ( arg ) ;
ResourceDefinition resource = createMock ( arg ) ;
ResourceDefinition resourceDef = createStrictMock ( arg ) ;
ResourceDefinition resourceDef = createStrictMock ( arg ) ;
ResourceDefinition resourceDef = createStrictMock ( arg ) ;
ResourceDefinition resourceDef = createStrictMock ( arg ) ;
ResourceDefinition resourceDef = createStrictMock ( arg ) ;
ResourceDefinition resourceDef = createStrictMock ( arg ) ;
ResourceDefinition resourceDef = createStrictMock ( arg ) ;
ResourceDefinition resourceDef = createStrictMock ( arg ) ;
ResourceDefinition resourceDef = createStrictMock ( arg ) ;
ResourceDefinition resourceDef = createStrictMock ( arg ) ;
ResourceDefinition resourceDef = createStrictMock ( arg ) ;
ResourceDefinition resourceDef = createStrictMock ( arg ) ;
ResourceDefinition resourceDef = createStrictMock ( arg ) ;
ResourceDefinition resourceDef = createStrictMock ( arg ) ;
ResourceDefinition resourceDef = createStrictMock ( arg ) ;
ResourceDefinition resourceDef = createStrictMock ( arg ) ;
ResourceDefinition resourceDef = createStrictMock ( arg ) ;
ResourceDefinition resourceDef = createStrictMock ( arg ) ;
ResourceDefinition resourceDef = createStrictMock ( arg ) ;
ResourceDefinition resourceDef = createStrictMock ( arg ) ;
ResourceDefinition resourceDef = createStrictMock ( arg ) ;
ResourceDefinition resourceDef = createStrictMock ( arg ) ;
ResourceDefinition resourceDef = createStrictMock ( arg ) ;
ResourceDefinition resourceDef = createStrictMock ( arg ) ;
ResourceDefinition resourceDef = createStrictMock ( arg ) ;
ResourceDefinition resourceDef = createStrictMock ( arg ) ;
ResourceDefinition resourceDef = createStrictMock ( arg ) ;
ResourceDefinition resourceDef = createStrictMock ( arg ) ;
ResourceDefinition resourceDef = createStrictMock ( arg ) ;
ResourceDefinition resourceDef = createStrictMock ( arg ) ;
ResourceDefinition resourceDef = createStrictMock ( arg ) ;
ResourceDefinition resourceDefinition = createStrictMock ( arg ) ;
ResourceDefinition subResource = m_resourceDefinition . getSubResources ( arg ) . get ( arg ) ;
ResourceInstance instance = new ResourceInstanceImpl ( arg ) ;
ResourceInstance instance = new ResourceInstanceImpl ( arg ) ;
ResourceInstance instance = new TestQuery ( arg ) ;
ResourceInstance instance = new TestQuery ( arg ) ;
ResourceInstance subResource = m_resource . getSubResources ( arg ) . get ( arg ) ;
ResourceProvider provider = AbstractControllerResourceProvider . getResourceProvider ( arg ) ;
ResourceProvider provider = AbstractResourceProvider . getResourceProvider ( arg ) ;
ResourceProvider provider = AbstractResourceProvider . getResourceProvider ( arg ) ;
ResourceProvider provider = AbstractResourceProvider . getResourceProvider ( arg ) ;
ResourceProvider provider = AbstractResourceProvider . getResourceProvider ( arg ) ;
ResourceProvider provider = AbstractResourceProvider . getResourceProvider ( arg ) ;
ResourceProvider provider = AbstractResourceProvider . getResourceProvider ( arg ) ;
ResourceProvider provider = AbstractResourceProvider . getResourceProvider ( arg ) ;
ResourceProvider provider = AbstractResourceProvider . getResourceProvider ( arg ) ;
ResourceProvider provider = AbstractResourceProvider . getResourceProvider ( arg ) ;
ResourceProvider provider = AbstractResourceProvider . getResourceProvider ( arg ) ;
ResourceProvider provider = AbstractResourceProvider . getResourceProvider ( arg ) ;
ResourceProvider provider = AbstractResourceProvider . getResourceProvider ( arg ) ;
ResourceProvider provider = AbstractResourceProvider . getResourceProvider ( arg ) ;
ResourceProvider provider = AbstractResourceProvider . getResourceProvider ( arg ) ;
ResourceProvider provider = AbstractResourceProvider . getResourceProvider ( arg ) ;
ResourceProvider provider = AbstractResourceProvider . getResourceProvider ( arg ) ;
ResourceProvider provider = AbstractResourceProvider . getResourceProvider ( arg ) ;
ResourceProvider provider = AbstractResourceProvider . getResourceProvider ( arg ) ;
ResourceProvider provider = AbstractResourceProvider . getResourceProvider ( arg ) ;
ResourceProvider provider = AbstractResourceProvider . getResourceProvider ( arg ) ;
ResourceProvider provider = AbstractResourceProvider . getResourceProvider ( arg ) ;
ResourceProvider provider = AbstractResourceProvider . getResourceProvider ( arg ) ;
ResourceProvider provider = AbstractResourceProvider . getResourceProvider ( arg ) ;
ResourceProvider provider = AbstractResourceProvider . getResourceProvider ( arg ) ;
ResourceProvider provider = AbstractResourceProvider . getResourceProvider ( arg ) ;
ResourceProvider provider = AbstractResourceProvider . getResourceProvider ( arg ) ;
ResourceProvider provider = AbstractResourceProvider . getResourceProvider ( arg ) ;
ResourceProvider provider = AbstractResourceProvider . getResourceProvider ( arg ) ;
ResourceProvider provider = AbstractResourceProvider . getResourceProvider ( arg ) ;
ResourceProvider provider = AbstractResourceProvider . getResourceProvider ( arg ) ;
ResourceProvider provider = AbstractResourceProvider . getResourceProvider ( arg ) ;
ResourceProvider provider = AbstractResourceProvider . getResourceProvider ( arg ) ;
ResourceProvider provider = AbstractResourceProvider . getResourceProvider ( arg ) ;
ResourceProvider provider = AbstractResourceProvider . getResourceProvider ( arg ) ;
ResourceProvider provider = AbstractResourceProvider . getResourceProvider ( arg ) ;
ResourceProvider provider = AbstractResourceProvider . getResourceProvider ( arg ) ;
ResourceProvider provider = AbstractResourceProvider . getResourceProvider ( arg ) ;
ResourceProvider provider = AbstractResourceProvider . getResourceProvider ( arg ) ;
ResourceProvider provider = AbstractResourceProvider . getResourceProvider ( arg ) ;
ResourceProvider provider = AbstractResourceProvider . getResourceProvider ( arg ) ;
ResourceProvider provider = AbstractResourceProvider . getResourceProvider ( arg ) ;
ResourceProvider provider = AbstractResourceProvider . getResourceProvider ( arg ) ;
ResourceProvider provider = resourceProviders . get ( arg ) ;
ResourceProvider provider = resourceProviders . get ( arg ) ;
ResourceProvider provider = resourceProviders . get ( arg ) ;
Result <unk> = createStrictMock ( arg ) ;
Result result ;
Result result = new CreateHandler ( arg ) . handleRequest ( arg ) ;
Result result = new CreateHandler ( arg ) . handleRequest ( arg ) ;
Result result = new DeleteHandler ( arg ) . handleRequest ( arg ) ;
Result result = new DeleteHandler ( arg ) . handleRequest ( arg ) ;
Result result = new UpdateHandler ( arg ) . handleRequest ( arg ) ;
Result result = new UpdateHandler ( arg ) . handleRequest ( arg ) ;
Role firstRole = operand . getFirstRole ( arg ) ;
Role firstRole = operand . getFirstRole ( arg ) ;
Role firstRole = operand . getNextRole ( arg ) ;
Role role = operand . getNextRole ( arg ) ;
Role role = operand . getNextRole ( arg ) ;
RoleCommandOrder rco = new RoleCommandOrder ( arg ) ;
RoleCommandOrder rco = new RoleCommandOrder ( arg ) ;
RoleCommandOrder rco = new RoleCommandOrder ( arg ) ;
RoleCommandOrder rco = new RoleCommandOrder ( arg ) ;
RoleCommandOrder rco = this . <unk> ( arg ) ;
RoleToNodesMap <unk> = new RoleToNodesMap ( arg ) ;
RoleToNodesMapEntry e = new RoleToNodesMapEntry ( arg ) ;
<unk> schema = getClusterController ( arg ) . getSchema ( arg ) ;
Service s = new ServiceImpl ( arg ) ;
Service s = new ServiceImpl ( arg ) ;
Service service = operand . getAssociatedService ( arg ) ;
Service service = operand . getAssociatedService ( arg ) ;
Service service = operand . getAssociatedService ( arg ) ;
Service service = operand . getNextService ( arg ) ;
Service service = operand . getNextService ( arg ) ;
ServiceComponentHostEvent event ;
ServiceComponentHostEvent event ;
ServiceComponentHostEvent event ;
ServiceComponentHostEvent <unk> = <unk> ( arg ) ;
ServiceComponentHostEvent <unk> = new ServiceComponentHostEvent ( arg ) ;
ServiceComponentHostImpl impl = createNewServiceComponentHost ( arg ) ;
ServiceComponentHostImpl impl = createNewServiceComponentHost ( arg ) ;
<unk> <unk> = null ;
ServiceComponentHostState actual = c1 . <unk> ( arg ) ;
ServiceComponentHostState oldState = getState ( arg ) ;
<unk> service = operand . <unk> ( arg ) ;
ServiceImpl service = ( ServiceImpl ) operand . getAssociatedService ( arg ) ;
Set < BasePredicate > setPredicates = new HashSet < BasePredicate > ( arg ) ;
Set < HostRequest > requests = new HashSet < HostRequest > ( arg ) ;
Set < HostResponse > resps = controller . getHosts ( arg ) ;
Set < Map < PropertyId , Object >> setProps = parser . parse ( arg ) ;
Set < Map < PropertyId , Object >> setProps = parser . parse ( arg ) ;
Set < Map < PropertyId , Object >> setProps = parser . parse ( arg ) ;
Set < Map < PropertyId , Object >> setProps = parser . parse ( arg ) ;
Set < Map < PropertyId , Object >> <unk> = new HashSet < Map < PropertyId , Object >> ( arg ) ;
Set < Map < String , Object >> setProperties = new HashSet < Map < String , Object >> ( arg ) ;
Set < NamedPropertySet > <unk> = body . getPropertySets ( arg ) ;
Set < NamedPropertySet > setProperties = body . getPropertySets ( arg ) ;
Set < NamedPropertySet > setProperties = body . getPropertySets ( arg ) ;
Set < NamedPropertySet > setProps = body . getPropertySets ( arg ) ;
Set < NamedPropertySet > setProps = body . getPropertySets ( arg ) ;
Set < NamedPropertySet > setProps = body . getPropertySets ( arg ) ;
Set < NamedPropertySet > setProps2 = body . getPropertySets ( arg ) ;
Set < NamedPropertySet > setProps2 = body . getPropertySets ( arg ) ;
Set < NamedPropertySet > setProps2 = body . getPropertySets ( arg ) ;
Set < NamedPropertySet > setProps2 = body . getPropertySets ( arg ) ;
Set < NamedPropertySet > setProps2 = body . getPropertySets ( arg ) ;
Set < NamedPropertySet > setProps2 = body . getPropertySets ( arg ) ;
Set < NamedPropertySet > setProps2 = body . getPropertySets ( arg ) ;
Set < NamedPropertySet > <unk> = request . <unk> ( arg ) ;
Set < <unk> > response = null ;
Set < Predicate > setPredicates = new HashSet < Predicate > ( arg ) ;
Set < Predicate > setPredicates = new HashSet < Predicate > ( arg ) ;
Set < PropertyId > ids = <unk> . getPropertyIds ( arg ) ;
Set < PropertyId > ids = <unk> . getPropertyIds ( arg ) ;
Set < PropertyId > propertyIds = new HashSet < PropertyId > ( arg ) ;
Set < PropertyId > propertyIds = new HashSet < PropertyId > ( arg ) ;
Set < PropertyId > propertyIds = new HashSet < PropertyId > ( arg ) ;
Set < PropertyId > <unk> = new HashSet < PropertyId > ( arg ) ;
Set < PropertyId > requestedIds = PropertyHelper . getRequestPropertyIds ( arg ) ;
Set < PropertyId > requestedIds = request . getPropertyIds ( arg ) ;
Set < PropertyId > requestedIds = request . getPropertyIds ( arg ) ;
Set < PropertyId > requestedIds = request . getPropertyIds ( arg ) ;
Set < PropertyId > requestedIds = request . getPropertyIds ( arg ) ;
Set < Resource > <unk> = null ;
Set < Resource > keepers = new HashSet < Resource > ( arg ) ;
Set < Resource > <unk> = <unk> ( arg ) ;
Set < Resource > resourceSet = Collections . singleton ( arg ) ;
Set < Resource > resourceSet = Collections . singleton ( arg ) ;
Set < Resource > resourceSet = Collections . singleton ( arg ) ;
Set < Resource > resourceSet = Collections . singleton ( arg ) ;
Set < Resource > resources = new HashSet < Resource > ( arg ) ;
Set < ServiceComponentResponse > response = controller . getComponents ( arg ) ;
Set < ServiceComponentResponse > resps = controller . getComponents ( arg ) ;
Set < ServiceComponentResponse > resps = controller . getComponents ( arg ) ;
Set < ServiceResponse > r = controller . getServices ( arg ) ;
Set < ServiceResponse > resp = controller . getServices ( arg ) ;
Set < ServiceResponse > response = controller . getServices ( arg ) ;
Set < <unk> > response = null ;
Set < <unk> > response = null ;
Set < <unk> > response = null ;
Set < <unk> > response = null ;
Set < String > ids = PropertyHelper . getRequestPropertyIds ( arg ) ;
Set < String > ids = PropertyHelper . getRequestPropertyIds ( arg ) ;
Set < String > ids = PropertyHelper . getRequestPropertyIds ( arg ) ;
Set < String > propertyIds = PropertyHelper . getRequestPropertyIds ( arg ) ;
Set < String > propertyIds = request . getPropertyIds ( arg ) ;
Set < String > requestedIds = PropertyHelper . getRequestPropertyIds ( arg ) ;
Set < String > requestedIds = PropertyHelper . getRequestPropertyIds ( arg ) ;
Set < String > requestedIds = PropertyHelper . getRequestPropertyIds ( arg ) ;
Set < String > requestedIds = PropertyHelper . getRequestPropertyIds ( arg ) ;
Set < String > requestedIds = PropertyHelper . getRequestPropertyIds ( arg ) ;
Set < String > requestedIds = PropertyHelper . getRequestPropertyIds ( arg ) ;
Set < String > requestedIds = PropertyHelper . getRequestPropertyIds ( arg ) ;
Set < String > requestedIds = PropertyHelper . getRequestPropertyIds ( arg ) ;
Set < UserRequest > requests = new HashSet < UserRequest > ( arg ) ;
<unk> . <unk> ( arg ) ;
Stack bp = Blueprints . getInstance ( arg ) . getStack ( arg ) ;
Stack bp = Stacks . getInstance ( arg ) . getStack ( arg ) ;
Stack bp = this . getStack ( arg ) ;
StackVersion stackVersion = new StackVersion ( arg ) ;
Stage stage = db . getAction ( arg ) ;
Stage stage = new Stage ( arg ) ;
Stage <unk> = db . getAction ( arg ) ;
State oldSchState = <unk> . getDesiredState ( arg ) ;
State oldSchState = sch . getDesiredState ( arg ) ;
State oldSchState = sch . getDesiredState ( arg ) ;
State oldSchState = sch . getDesiredState ( arg ) ;
State oldState = sch . getDesiredState ( arg ) ;
StateMachineInvoker . deleteCluster ( arg ) ;
StateMachineInvoker . getAMBARIEventHandler ( arg ) . handle ( arg ) ;
StateMachineInvoker . getAMBARIEventHandler ( arg ) . handle ( arg ) ;
StateMachineInvoker . getAMBARIEventHandler ( arg ) . handle ( arg ) ;
StateMachineInvoker . getAMBARIEventHandler ( arg ) . handle ( arg ) ;
StateMachineInvoker . getAMBARIEventHandler ( arg ) . handle ( arg ) ;
StateMachineInvoker . getAMBARIEventHandler ( arg ) . handle ( arg ) ;
StateMachineInvoker . getAMBARIEventHandler ( arg ) . handle ( arg ) ;
StateMachineInvoker . getAMBARIEventHandler ( arg ) . handle ( arg ) ;
StateMachineInvoker . getAMBARIEventHandler ( arg ) . handle ( arg ) ;
StateMachineInvoker . getAMBARIEventHandler ( arg ) . handle ( arg ) ;
StateMachineInvoker . getAMBARIEventHandler ( arg ) . handle ( arg ) ;
StateMachineInvoker . getAMBARIEventHandler ( arg ) . handle ( arg ) ;
StateMachineInvoker . getAMBARIEventHandler ( arg ) . handle ( arg ) ;
StateMachineInvoker . getAMBARIEventHandler ( arg ) . handle ( arg ) ;
StateMachineInvoker . getAMBARIEventHandler ( arg ) . handle ( arg ) ;
StateMachineInvoker . getAMBARIEventHandler ( arg ) . handle ( arg ) ;
StateMachineInvoker . getAMBARIEventHandler ( arg ) . handle ( arg ) ;
StateMachineInvoker . getAMBARIEventHandler ( arg ) . handle ( arg ) ;
StateMachineInvoker . getAMBARIEventHandler ( arg ) . handle ( arg ) ;
StateMachineInvoker . getAMBARIEventHandler ( arg ) . handle ( arg ) ;
StateMachineInvoker . getAMBARIEventHandler ( arg ) . handle ( arg ) ;
StateMachineInvoker . getAMBARIEventHandler ( arg ) . handle ( arg ) ;
StateMachineInvoker . getAMBARIEventHandler ( arg ) . handle ( arg ) ;
StateMachineInvoker . getAMBARIEventHandler ( arg ) . handle ( arg ) ;
StateMachineInvoker . getAMBARIEventHandler ( arg ) . handle ( arg ) ;
StateMachineInvoker . getAMBARIEventHandler ( arg ) . handle ( arg ) ;
StateMachineInvoker . getAMBARIEventHandler ( arg ) . handle ( arg ) ;
StateMachineInvoker . setAMBARIDispatcher ( arg ) ;
StateMachineInvoker . setAMBARIDispatcher ( arg ) ;
StateMachineInvoker . setAMBARIDispatcher ( arg ) ;
StateMachineInvoker . <unk> ( arg ) ;
StateMachineInvoker . <unk> ( arg ) ;
String [ ] <unk> = <unk> . get ( arg ) ;
String attributes = host . getPropertyValue ( arg ) ;
String attributes = host . getPropertyValue ( arg ) ;
String blueprintName = line . getOptionValue ( arg ) ;
String blueprintName = line . getOptionValue ( arg ) ;
String <unk> = Nodes . getInstance ( arg ) . getNodes ( arg ) . get ( arg ) . getNodeState ( arg ) . getClusterID ( arg ) ;
String clusterID = <unk> ( arg ) ;
String clusterId = null ;
String clusterName = Nodes . getInstance ( arg ) . getNode ( arg ) . getNodeState ( arg ) . <unk> ( arg ) ;
String clusterName = resource . getPropertyValue ( arg ) ;
String clusterName = resource . getPropertyValue ( arg ) ;
String <unk> = cls . getClusterDefinition ( arg ) . getName ( arg ) ;
String commands [ ] = new String [ <unk> ] ;
String commands [ ] = new String [ 8 ] ;
String commands [ ] = new String [ 9 ] ;
String componentName = PIG ;
String componentName = sc1 ;
String componentName = sc1 ;
String componentName = sc1 ;
String <unk> = <unk> . <unk> ( arg ) . <unk> ( arg ) ;
String hostName = <unk> . getPropertyValue ( arg ) ;
String id = r . getPropertyValue ( arg ) ;
String <unk> = this . <unk> ( arg ) ;
String <unk> = configs . getConfigsMap ( arg ) . get ( arg ) ;
String path = <unk> ;
String <unk> = <unk> . get ( arg ) ;
String query = ( String ) mapProperties . remove ( arg ) ;
String <unk> = getClusterController ( arg ) . getSchema ( arg ) . <unk> ( arg ) ;
String ret = <unk> responseId +  N + <unk> <unk> +  N + <unk> hostname +  N ;
String <unk> = cmd . getRole ( arg ) . toString ( arg ) ;
String <unk> = c . getRole ( arg ) . toString ( arg ) ;
String <unk> = Clusters . getInstance ( arg ) . <unk> ( arg ) ;
String serviceName = PIG ;
String serviceName = s1 ;
String serviceName = s1 ;
String serviceName = s1 ;
String serviceName = s1 ;
String <unk> = <unk> . getPropertyIds ( arg ) . iterator ( arg ) . next ( arg ) . <unk> ( arg ) ;
String <unk> = <unk> . get ( arg ) ;
StringBuilder sb = new StringBuilder ( arg ) ;
<unk> . <unk> . <unk> ( arg ) ;
TestHostResourceProvider resourceProvider = ( TestHostResourceProvider ) providerModule . getResourceProvider ( arg ) ;
TestHostResourceProvider resourceProvider = ( TestHostResourceProvider ) providerModule . getResourceProvider ( arg ) ;
TestHostResourceProvider resourceProvider = ( TestHostResourceProvider ) providerModule . getResourceProvider ( arg ) ;
TestHostResourceProvider resourceProvider = ( TestHostResourceProvider ) providerModule . getResourceProvider ( arg ) ;
TestHostResourceProvider resourceProvider = ( TestHostResourceProvider ) providerModule . getResourceProvider ( arg ) ;
TestResourceProvider resourceProvider = ( TestResourceProvider ) providerModule . getResourceProvider ( arg ) ;
TestResourceProvider resourceProvider = ( TestResourceProvider ) providerModule . getResourceProvider ( arg ) ;
TestResourceProvider resourceProvider = ( TestResourceProvider ) providerModule . getResourceProvider ( arg ) ;
TestResourceProvider resourceProvider = ( TestResourceProvider ) providerModule . getResourceProvider ( arg ) ;
TestResourceProvider resourceProvider = ( TestResourceProvider ) providerModule . getResourceProvider ( arg ) ;
TestResourceProvider resourceProvider = ( TestResourceProvider ) providerModule . getResourceProvider ( arg ) ;
TestResourceProvider resourceProvider = ( TestResourceProvider ) providerModule . getResourceProvider ( arg ) ;
TestResourceProvider resourceProvider = ( TestResourceProvider ) providerModule . getResourceProvider ( arg ) ;
TestResourceProvider resourceProvider = ( TestResourceProvider ) providerModule . getResourceProvider ( arg ) ;
TestResourceProvider resourceProvider = ( TestResourceProvider ) providerModule . getResourceProvider ( arg ) ;
Thread . sleep ( arg ) ;
Thread . sleep ( arg ) ;
Thread . sleep ( arg ) ;
Thread . sleep ( arg ) ;
TrackActionResponse response = createNiceMock ( arg ) ;
TrackActionResponse response = createNiceMock ( arg ) ;
TrackActionResponse response = createNiceMock ( arg ) ;
TrackActionResponse response = createNiceMock ( arg ) ;
TrackActionResponse response = createNiceMock ( arg ) ;
TrackActionResponse trackAction = controller . updateComponents ( arg ) ;
TrackActionResponse trackAction = controller . updateHostComponents ( arg ) ;
TrackActionResponse trackAction = controller . updateServices ( arg ) ;
TreeNode < Resource > <unk> = <unk> . addChild ( arg ) ;
TreeNode < Resource > node = result . <unk> ( arg ) . addChild ( arg ) ;
TypedQuery < ServiceConfigEntity > query = entityManager . createQuery ( arg ) ;
TypedQuery < ServiceConfigEntity > query = entityManager . createQuery ( arg ) ;
URL blueprintUrl ;
URL blueprintUrl = new URL ( arg ) ;
<unk> <unk> = new URL ( arg ) . <unk> ( arg ) ;
<unk> <unk> = null ;
WebAppContext <unk> = new WebAppContext ( arg ) ;
action . setServerName ( arg ) ;
action . setServerName ( arg ) ;
<unk> . setServerName ( arg ) ;
actionManager . actionResponse ( arg ) ;
<unk> . setServerName ( arg ) ;
addAction ( arg ) ;
addAction ( arg ) ;
addBlueprint ( arg ) ;
agentEnv . <unk> ( arg ) ;
agentEnv = <unk> ;
<unk> . addAll ( arg ) ;
all_nodes . get ( arg ) . getNodeState ( arg ) . setClusterName ( arg ) ;
am . actionResponse ( arg ) ;
am . actionResponse ( arg ) ;
<unk> = injector . getInstance ( arg ) ;
amc . createComponents ( arg ) ;
amc . createComponents ( arg ) ;
amc . createComponents ( arg ) ;
amc . createComponents ( arg ) ;
amc . createHosts ( arg ) ;
amc . createHosts ( arg ) ;
amc . createHosts ( arg ) ;
assertEquals ( arg ) ;
assertEquals ( arg ) ;
assertEquals ( arg ) ;
<unk> ( arg ) ;
assertNotNull ( arg ) ;
assertNotNull ( arg ) ;
assertNotSame ( arg ) ;
assertNotSame ( arg ) ;
assertNotSame ( arg ) ;
assertNull ( arg ) ;
assertTrue ( arg ) ;
<unk> = injector . getInstance ( arg ) ;
<unk> ( arg ) . to ( arg ) ;
<unk> ( arg ) . <unk> ( arg ) . to ( arg ) ;
body . <unk> ( arg ) ;
body = parser . parse ( arg ) ;
body = parser . parse ( arg ) ;
body = parser . parse ( arg ) ;
body = parser . parse ( arg ) ;
body = parser . parse ( arg ) ;
body = parser . parse ( arg ) ;
body = parser . parse ( arg ) ;
body = parser . parse ( arg ) ;
boolean <unk> = <unk> ( arg ) ;
boolean <unk> = componentStates . <unk> ( arg ) ;
bp = Blueprints . getInstance ( arg ) . getBlueprint ( arg ) ;
bp = Blueprints . getInstance ( arg ) . getBlueprint ( arg ) ;
bp = Blueprints . getInstance ( arg ) . getStack ( arg ) ;
bp = Blueprints . getInstance ( arg ) . getStack ( arg ) ;
bp = Blueprints . getInstance ( arg ) . getStack ( arg ) ;
bp = Blueprints . getInstance ( arg ) . getStack ( arg ) ;
bp = Stacks . getInstance ( arg ) . getStack ( arg ) ;
bp = Stacks . getInstance ( arg ) . getStack ( arg ) ;
bp = context . getBlueprint ( arg ) ;
bp = stacks . getStack ( arg ) ;
bp = this . stacks . get ( arg ) . get ( arg ) ;
bpx = this . getBlueprint ( arg ) ;
bpx = this . getBlueprint ( arg ) ;
c . addDesiredConfig ( arg ) ;
c . put ( arg ) ;
c . put ( arg ) ;
c . put ( arg ) ;
c . put ( arg ) ;
c . put ( arg ) ;
c . put ( arg ) ;
c . put ( arg ) ;
c1 . addHost ( arg ) ;
c1 . addHost ( arg ) ;
c1 . <unk> ( arg ) ;
<unk> = new ArrayList < ConfigPropertiesCategory > ( arg ) ;
<unk> . setActiveServices ( arg ) ;
<unk> ( arg ) ;
cls . <unk> ( arg ) ;
cls . <unk> ( arg ) ;
clsDef . setActiveServices ( arg ) ;
clsDef . setActiveServices ( arg ) ;
clsDef . setBlueprintName ( arg ) ;
clsDef . setBlueprintName ( arg ) ;
clsDef . setBlueprintRevision ( arg ) ;
clsDef . setBlueprintRevision ( arg ) ;
clsDef . setNodeRangeExpressions ( arg ) ;
<unk> . <unk> ( arg ) ;
cluster . addDesiredConfig ( arg ) ;
clusterDefinitionList . put ( arg ) ;
clusterFSM . <unk> ( arg ) ;
clusterFSM . <unk> ( arg ) ;
clusterFsm . <unk> ( arg ) ;
clusterRev = Clusters . getInstance ( arg ) . getClusterByName ( arg ) . <unk> ( arg ) ;
clusters . getHost ( arg ) . <unk> ( arg ) ;
clusters . mapHostToCluster ( arg ) ;
clusters . mapHostToCluster ( arg ) ;
clusters = null ;
<unk> . setCommand ( arg ) ;
<unk> . setCommand ( arg ) ;
<unk> . setCommand ( arg ) ;
commands [ <unk> ] = this . passwordFile . toString ( arg ) ;
commands [ 8 ] = this . passwordFile . toString ( arg ) ;
commands [ 9 ] = this . passwordFile . toString ( arg ) ;
<unk> . <unk> ( arg ) ;
componentEntity = entity ;
<unk> . add ( arg ) ;
componentStates . <unk> ( arg ) ;
config = <unk> . <unk> ( arg ) ;
<unk> . <unk> ( arg ) ;
configs . <unk> ( arg ) ;
configs = injector . getInstance ( arg ) ;
controller . <unk> ( arg ) ;
controller . createComponents ( arg ) ;
controller . createComponents ( arg ) ;
controller . createComponents ( arg ) ;
controller . createComponents ( arg ) ;
controller . createComponents ( arg ) ;
controller . createComponents ( arg ) ;
controller . createComponents ( arg ) ;
controller . createComponents ( arg ) ;
controller . createComponents ( arg ) ;
controller . createComponents ( arg ) ;
controller . createComponents ( arg ) ;
controller . createComponents ( arg ) ;
controller . createHost ( arg ) ;
controller . createHost ( arg ) ;
controller . createHost ( arg ) ;
controller . <unk> ( arg ) ;
controller . createHosts ( arg ) ;
controller . createHosts ( arg ) ;
controller . createHosts ( arg ) ;
controller . createHosts ( arg ) ;
controller . createHosts ( arg ) ;
controller . createHosts ( arg ) ;
controller . createHosts ( arg ) ;
controller . createResources ( arg ) ;
controller . createServices ( arg ) ;
controller . createServices ( arg ) ;
controller . createServices ( arg ) ;
controller . createServices ( arg ) ;
controller . createServices ( arg ) ;
controller . createServices ( arg ) ;
controller . createServices ( arg ) ;
controller . createServices ( arg ) ;
controller . createServices ( arg ) ;
controller . createServices ( arg ) ;
controller . createServices ( arg ) ;
controller . createServices ( arg ) ;
controller . deleteHosts ( arg ) ;
controller . deleteHosts ( arg ) ;
controller . deleteHosts ( arg ) ;
controller . deleteHosts ( arg ) ;
controller . deleteHosts ( arg ) ;
controller . deleteHosts ( arg ) ;
controller . deleteResources ( arg ) ;
controller . getComponents ( arg ) ;
controller . getResources ( arg ) ;
controller . getResources ( arg ) ;
controller . getServices ( arg ) ;
controller . getServices ( arg ) ;
controller . updateCluster ( arg ) ;
controller . updateCluster ( arg ) ;
controller . updateCluster ( arg ) ;
controller . updateCluster ( arg ) ;
controller . updateCluster ( arg ) ;
controller . updateCluster ( arg ) ;
controller . updateCluster ( arg ) ;
controller . updateCluster ( arg ) ;
controller . updateCluster ( arg ) ;
controller . updateCluster ( arg ) ;
controller . updateCluster ( arg ) ;
controller . updateCluster ( arg ) ;
controller . updateCluster ( arg ) ;
controller . updateCluster ( arg ) ;
controller . updateCluster ( arg ) ;
controller . updateCluster ( arg ) ;
controller . updateCluster ( arg ) ;
controller . updateCluster ( arg ) ;
controller . updateCluster ( arg ) ;
controller . updateCluster ( arg ) ;
controller . updateCluster ( arg ) ;
controller . updateCluster ( arg ) ;
controller . updateCluster ( arg ) ;
controller . updateComponents ( arg ) ;
controller . updateComponents ( arg ) ;
controller . updateComponents ( arg ) ;
controller . updateResources ( arg ) ;
controller . updateServices ( arg ) ;
controller . updateServices ( arg ) ;
controller . updateServices ( arg ) ;
controller . updateServices ( arg ) ;
controller . updateServices ( arg ) ;
controller . updateServices ( arg ) ;
controller . updateServices ( arg ) ;
controller . updateServices ( arg ) ;
controller . updateServices ( arg ) ;
controller . updateServices ( arg ) ;
controller . updateServices ( arg ) ;
controller . updateServices ( arg ) ;
controller . updateServices ( arg ) ;
<unk> ( arg ) ;
createInstallAction ( arg ) ;
createInstallAction ( arg ) ;
<unk> ( arg ) ;
db = injector . getInstance ( arg ) ;
defn . setDefinition ( arg ) ;
defn . setDefinition ( arg ) ;
defn . <unk> ( arg ) ;
dependencies . get ( arg ) . add ( arg ) ;
dependencies . get ( arg ) . addAll ( arg ) ;
e . printStackTrace ( arg ) ;
e . printStackTrace ( arg ) ;
e . printStackTrace ( arg ) ;
e . printStackTrace ( arg ) ;
e . printStackTrace ( arg ) ;
e . printStackTrace ( arg ) ;
e . printStackTrace ( arg ) ;
entityManager . <unk> ( arg ) . <unk> ( arg ) ;
entityManager . persist ( arg ) ;
entityManager . persist ( arg ) ;
entityManager . persist ( arg ) ;
entityManager . persist ( arg ) ;
entityManager . persist ( arg ) ;
entityManager . persist ( arg ) ;
entityManager . persist ( arg ) ;
entityManager . persist ( arg ) ;
entityManager . persist ( arg ) ;
entityManager . persist ( arg ) ;
entityManager . persist ( arg ) ;
entityManager . persist ( arg ) ;
entityManager . persist ( arg ) ;
entityManager . persist ( arg ) ;
entityManager . persist ( arg ) ;
entityManager . remove ( arg ) ;
entityManager . remove ( arg ) ;
entityManager . remove ( arg ) ;
entityManager . remove ( arg ) ;
entityManager . remove ( arg ) ;
entityManager . remove ( arg ) ;
entityManager . remove ( arg ) ;
entityManager . remove ( arg ) ;
entityManager . remove ( arg ) ;
entityManager . remove ( arg ) ;
entityManager . remove ( arg ) ;
entityManager . remove ( arg ) ;
entityManager . remove ( arg ) ;
entityManager . remove ( arg ) ;
entityManager . remove ( arg ) ;
event = new ServiceComponentHostInstallEvent ( arg ) ;
event = new ServiceComponentHostInstallEvent ( arg ) ;
event = new ServiceComponentHostInstallEvent ( arg ) ;
event = new ServiceComponentHostStartEvent ( arg ) ;
event = new ServiceComponentHostStartEvent ( arg ) ;
event = new ServiceComponentHostStartEvent ( arg ) ;
event = new ServiceComponentHostStopEvent ( arg ) ;
event = new ServiceComponentHostStopEvent ( arg ) ;
event = new ServiceComponentHostStopEvent ( arg ) ;
<unk> = e ;
execCmd . <unk> ( arg ) ;
execCmd . <unk> ( arg ) ;
execCmdList = new ArrayList < ExecutionCommand > ( arg ) ;
expect ( arg ) . andReturn ( arg ) . <unk> ( arg ) ;
expect ( arg ) . andReturn ( arg ) ;
expect ( arg ) . andReturn ( arg ) ;
expect ( arg ) . andReturn ( arg ) ;
<unk> . <unk> ( arg ) ;
fsm . <unk> ( arg ) ;
<unk> . deleteCluster ( arg ) ;
getClusterController ( arg ) . deleteResources ( arg ) ;
getClusterController ( arg ) . updateResources ( arg ) ;
getManagementController ( arg ) . createComponents ( arg ) ;
getManagementController ( arg ) . createHosts ( arg ) ;
getManagementController ( arg ) . createServices ( arg ) ;
getManagementController ( arg ) . deleteComponents ( arg ) ;
getManagementController ( arg ) . <unk> ( arg ) ;
getManagementController ( arg ) . deleteHosts ( arg ) ;
getManagementController ( arg ) . deleteServices ( arg ) ;
getManagementController ( arg ) . updateComponents ( arg ) ;
getManagementController ( arg ) . updateHostComponents ( arg ) ;
getManagementController ( arg ) . <unk> ( arg ) ;
getManagementController ( arg ) . updateServices ( arg ) ;
<unk> . <unk> ( arg ) ;
heartBeatResponse = new HeartBeatResponse ( arg ) ;
host . getHealthStatus ( arg ) . setHealthStatus ( arg ) ;
host . getHealthStatus ( arg ) . setHealthStatus ( arg ) ;
host . getHealthStatus ( arg ) . setHealthStatus ( arg ) ;
host = <unk> ( arg ) ;
<unk> . <unk> ( arg ) ;
hostComponentEntity = entity ;
<unk> . <unk> ( arg ) ;
hostName = <unk> . keySet ( arg ) . iterator ( arg ) . next ( arg ) ;
<unk> . <unk> ( arg ) ;
id = <unk> ( arg ) ;
ids . add ( arg ) ;
if ( ! Arrays . equals ( arg ) ) return false ;
if ( ! <unk> . <unk> ( arg ) ) <unk> . add ( arg ) ;
if ( clusterName != null ? ! clusterName . equals ( arg ) : that . clusterName != null ) return false ;
if ( clusterName != null ? ! clusterName . equals ( arg ) : that . clusterName != null ) return false ;
if ( clusterName != null ? ! clusterName . equals ( arg ) : that . clusterName != null ) return false ;
if ( clusterName != null ? ! clusterName . equals ( arg ) : that . clusterName != null ) return false ;
if ( clusterName != null ? ! clusterName . equals ( arg ) : that . clusterName != null ) return false ;
if ( clusterName != null ? ! clusterName . equals ( arg ) : that . clusterName != null ) return false ;
if ( clusterName != null ? ! clusterName . equals ( arg ) : that . clusterName != null ) return false ;
if ( clusterName != null ? ! clusterName . equals ( arg ) : that . clusterName != null ) return false ;
if ( command != null ? ! command . equals ( arg ) : that . command != null ) return false ;
if ( hostState != <unk> . getState ( arg ) && scaner != null ) scaner . updateHBaseMaster ( arg ) ;
if ( hostState != <unk> . getState ( arg ) ) scaner . updateHBaseMaster ( arg ) ;
if ( <unk> == null ) LOG . info ( arg ) ;
if ( <unk> . <unk> ( arg ) ) return true ;
if ( lastHeartbeatTime != null ? ! lastHeartbeatTime . equals ( arg ) : that . lastHeartbeatTime != null ) return false ;
if ( node . getNodeState ( arg ) . getClusterID ( arg ) != null ) clusterID = node . getNodeState ( arg ) . getClusterID ( arg ) ;
if ( null == pi . getValue ( arg ) ) continue ;
if ( null == pi . getValue ( arg ) || pi . getValue ( arg ) . isEmpty ( arg ) ) continue ;
if ( services == null || services . isEmpty ( arg ) ) return ;
if ( typeName != null ? ! typeName . equals ( arg ) : that . typeName != null ) return false ;
info . <unk> ( arg ) ;
<unk> ( arg ) ;
int clusterRev = Clusters . getInstance ( arg ) . getClusterByName ( arg ) . <unk> ( arg ) ;
int result = clusterName != null ? clusterName . hashCode ( arg ) : 0 ;
int result = clusterName != null ? clusterName . hashCode ( arg ) : 0 ;
int result = clusterName != null ? clusterName . hashCode ( arg ) : 0 ;
int result = clusterName != null ? clusterName . hashCode ( arg ) : 0 ;
int result = clusterName != null ? clusterName . hashCode ( arg ) : 0 ;
int result = clusterName != null ? clusterName . hashCode ( arg ) : 0 ;
int result = clusterName != null ? clusterName . hashCode ( arg ) : 0 ;
int result = clusterName != null ? clusterName . hashCode ( arg ) : 0 ;
int result = clusterName != null ? clusterName . hashCode ( arg ) : 0 ;
int result = clusterName != null ? clusterName . hashCode ( arg ) : 0 ;
int result = clusterName != null ? clusterName . hashCode ( arg ) : 0 ;
int result = m_query . hashCode ( arg ) ;
int result = predicates != null ? Arrays . hashCode ( arg ) : 0 ;
int result = predicates != null ? new HashSet < BasePredicate > ( arg ) . hashCode ( arg ) : 0 ;
<unk> <unk> hostname ;
isDeleted = Boolean . valueOf ( arg ) ;
<unk> = new HashMap < String , Map < String , String >> ( arg ) ;
<unk> . add ( arg ) ;
<unk> = fsm . getHost ( arg ) . getLastHeartbeatTime ( arg ) ;
list . add ( arg ) ;
list . add ( arg ) ;
list . addAll ( arg ) ;
list = Nodes . getInstance ( arg ) . <unk> ( arg ) ;
list = Stacks . getInstance ( arg ) . <unk> ( arg ) ;
loadPlugins ( arg ) ;
loadPlugins ( arg ) ;
log . error ( arg ) ;
log . error ( arg ) ;
log . error ( arg ) ;
log . error ( arg ) ;
log . info ( arg ) ;
log . info ( arg ) ;
log . info ( arg ) ;
<unk> ( arg ) ;
long id = <unk> ( arg ) ;
long requestId = actionManager . <unk> ( arg ) ;
long requestId = requestCounter . incrementAndGet ( arg ) ;
long requestId = requestCounter . incrementAndGet ( arg ) ;
long requestId = requestCounter . incrementAndGet ( arg ) ;
long <unk> = hostState . <unk> ( arg ) ;
m_listChildren . add ( arg ) ;
m_listChildren . add ( arg ) ;
m_mapCategoryTemporalInfo . put ( arg ) ;
m_mapCategoryTemporalInfo . put ( arg ) ;
<unk> = new HashMap < String , String > ( arg ) ;
<unk> . put ( arg ) ;
m_mapSubResources . put ( arg ) ;
<unk> = pageRequest ;
m_setQueryProperties . add ( arg ) ;
m_userPredicate = predicate ;
<unk> . <unk> ( arg ) ;
mapProperties = new HashMap < PropertyId , TemporalInfo > ( arg ) ;
<unk> . add ( arg ) ;
<unk> . <unk> ( arg ) ;
newcd . setActiveServices ( arg ) ;
newcd . setBlueprintName ( arg ) ;
newcd . setBlueprintRevision ( arg ) ;
newcd . setNodeRangeExpressions ( arg ) ;
<unk> . add ( arg ) ;
org . apache . ambari . server . controller . spi . Request serverRequest = createStrictMock ( arg ) ;
org . apache . ambari . server . controller . spi . Request serverRequest = createStrictMock ( arg ) ;
pbPredicate = null ;
pbPredicate = pb . property ( arg ) . equals ( arg ) ;
pbWithPredicate = null ;
pbWithPredicate = pb . property ( arg ) . equals ( arg ) ;
<unk> = false ;
predicate . getPredicate ( arg ) . accept ( arg ) ;
predicate = ( m_userPredicate == null ) ? internalPredicate : new <unk> ( arg ) ;
predicate = new PredicateBuilder ( arg ) . property ( arg ) . equals ( arg ) . toPredicate ( arg ) ;
predicates [ <unk> ] . accept ( arg ) ;
printClusterBlueprint ( arg ) ;
printClusterBlueprint ( arg ) ;
<unk> ( arg ) ;
properties = gson . fromJson ( arg ) ;
properties = new LinkedHashMap < PropertyId , Object > ( arg ) ;
propertyId = propertyId . <unk> ( arg ) ;
provider . createResources ( arg ) ;
provider . deleteResources ( arg ) ;
provider . updateResources ( arg ) ;
<unk> = <unk> ;
<unk> ( arg ) ;
r . <unk> ( arg ) ;
<unk> . <unk> ( arg ) ;
requestId = Long . valueOf ( arg ) ;
requestId = new Long ( arg ) ;
<unk> = instance ;
<unk> ( arg ) ;
resource . getQuery ( arg ) . addProperty ( arg ) ;
resource . getQuery ( arg ) . addProperty ( arg ) ;
resource . getQuery ( arg ) . <unk> ( arg ) ;
resourceProviders . put ( arg ) ;
resp = controller . getServices ( arg ) ;
response . setCommand ( arg ) ;
response = configs . getConfigsMap ( arg ) ;
response = controller . createActions ( arg ) ;
response = service . path ( arg ) . accept ( arg ) . type ( arg ) . post ( arg ) ;
response = service . path ( arg ) . queryParam ( arg ) . accept ( arg ) . type ( arg ) . post ( arg ) ;
resps = controller . getComponents ( arg ) ;
resps = controller . getComponents ( arg ) ;
resps = controller . getComponents ( arg ) ;
resps = controller . getComponents ( arg ) ;
resps = controller . getComponents ( arg ) ;
resps = controller . getComponents ( arg ) ;
resps = controller . getHosts ( arg ) ;
result = 31 * result + ( command != null ? Arrays . hashCode ( arg ) : 0 ) ;
result = 31 * result + ( command != null ? command . hashCode ( arg ) : 0 ) ;
result = 31 * result + ( hostComponentMappingId != null ? hostComponentMappingId . hashCode ( arg ) : 0 ) ;
result = 31 * result + ( lastHeartbeatTime != null ? lastHeartbeatTime . <unk> ( arg ) : 0 ) ;
result = 31 * result + ( lastRegistrationTime != null ? lastRegistrationTime . hashCode ( arg ) : 0 ) ;
result = 31 * result + ( serviceEnabled != null ? serviceEnabled . hashCode ( arg ) : 0 ) ;
result = 31 * result + ( taskId != null ? taskId . hashCode ( arg ) : 0 ) ;
result = 31 * result + ( typeName != null ? typeName . hashCode ( arg ) : 0 ) ;
result = 31 * result + m_mapQueryProperties . hashCode ( arg ) ;
result = 31 * result + resourceIds . hashCode ( arg ) ;
retryCountForRole . incr ( arg ) ;
retryCountForRole . incr ( arg ) ;
retryCountForRole . reset ( arg ) ;
retryCountForRole . reset ( arg ) ;
retryCountForRole . reset ( arg ) ;
retryCountForRole . reset ( arg ) ;
return  + requestId +-+ <unk> ;
return ( arg ) AbstractControllerResourceProvider . getResourceProvider ( arg ) ;
return 0 ;
return AbstractResourceProvider . getResourceProvider ( arg ) ;
return ClusterState . ACTIVE ;
return ClusterState . INACTIVE ;
return ClusterState . STARTING ;
return ClusterState . STOPPING ;
return Clusters . getInstance ( arg ) . getClusterDefinition ( arg ) ;
return Clusters . getInstance ( arg ) . <unk> ( arg ) ;
return Clusters . getInstance ( arg ) . <unk> ( arg ) ;
return Clusters . getInstance ( arg ) . getClusterState ( arg ) ;
return Clusters . getInstance ( arg ) . updateCluster ( arg ) ;
return Collections . <unk> ;
return Collections . <unk> ( arg ) ;
return Collections . <unk> ( arg ) ;
return Collections . <unk> ( arg ) ;
return <unk> + properties . <unk> ( arg ) ;
return Nodes . getInstance ( arg ) . getNode ( arg ) ;
return Nodes . getInstance ( arg ) . getNodes ( arg ) . get ( arg ) . getNodeState ( arg ) . getNodeRoleNames ( arg ) ;
return <unk> ;
return PropertyHelper . getKeyPropertyIds ( arg ) ;
return <unk> . getResourceProvider ( arg ) ;
return ServiceState . ACTIVE ;
return Stacks . getInstance ( arg ) . <unk> ( arg ) ;
return Stacks . getInstance ( arg ) . getStack ( arg ) ;
return Stacks . getInstance ( arg ) . <unk> ( arg ) ;
return <unk> . equals ( arg ) ;
return <unk> +-+ role ;
return <unk> ;
return <unk> this . <unk> +  <unk> this . mountpount +  <unk> this . <unk> +  <unk> this . <unk> +  <unk> this . <unk> ;
return <unk> ;
return blueprintName ;
return blueprintRevision ;
return c . equals ( arg ) ;
return c ;
return cls . getClusterDefinition ( arg ) ;
return cluster . getClusterDefinition ( arg ) . getName ( arg ) ;
return cluster . getClusterState ( arg ) ;
return cluster ;
return <unk> . equals ( arg ) &&! ( pageRequest != null ? ! pageRequest . equals ( arg ) : query . pageRequest != null ) && <unk> . equals ( arg ) && resourceDefinition . equals ( arg ) && resourceIds . equals ( arg ) &&! ( userPredicate != null ? ! userPredicate . equals ( arg ) : query . userPredicate != null ) ;
return clusterDefinitionList . get ( arg ) ;
return clusterDefinitionList . get ( arg ) ;
return <unk> . get ( arg ) ;
return clusterId ;
return <unk> ;
return <unk> ;
return command ;
return <unk> ;
return componentEntity ;
return componentName ;
return <unk> ;
return <unk> ;
return <unk> ;
return <unk> ;
return db . getAction ( arg ) ;
return <unk> . getName ( arg ) ;
return <unk> ;
return desiredStackVersion ;
return desiredStackVersion ;
return desiredStackVersion ;
return desiredState ;
return desiredState ;
return <unk> ;
return <unk> ;
return entityManager . find ( arg ) ;
return entityManager . find ( arg ) ;
return entityManager . find ( arg ) ;
return entityManager . find ( arg ) ;
return entityManager . find ( arg ) ;
return entityManager . find ( arg ) ;
return entityManager . find ( arg ) ;
return entityManager . find ( arg ) ;
return entityManager . find ( arg ) ;
return entityManager . find ( arg ) ;
return entityManager . find ( arg ) ;
return entityManager . find ( arg ) ;
return entityManager . find ( arg ) ;
return entityManager . find ( arg ) ;
return entityManager . find ( arg ) ;
return entityManager . merge ( arg ) ;
return entityManager . merge ( arg ) ;
return entityManager . merge ( arg ) ;
return entityManager . merge ( arg ) ;
return entityManager . merge ( arg ) ;
return entityManager . merge ( arg ) ;
return entityManager . merge ( arg ) ;
return entityManager . merge ( arg ) ;
return entityManager . merge ( arg ) ;
return entityManager . merge ( arg ) ;
return entityManager . merge ( arg ) ;
return entityManager . merge ( arg ) ;
return entityManager . merge ( arg ) ;
return entityManager . merge ( arg ) ;
return entityManager . merge ( arg ) ;
return entityManager ;
return event ;
return generator ( arg ) . prop ( arg ) . descriptions ( arg ) ;
return generator ( arg ) . prop ( arg ) . generator ( arg ) . prop ( arg ) . descriptions ( arg ) ;
return getHttpBodyParser ( arg ) . parse ( arg ) ;
return getIds ( arg ) . get ( arg ) == null ;
return getManagementController ( arg ) . deleteComponents ( arg ) ;
return getManagementController ( arg ) . deleteServices ( arg ) ;
return getManagementController ( arg ) . getComponents ( arg ) ;
return getManagementController ( arg ) . getHosts ( arg ) ;
return getManagementController ( arg ) . <unk> ( arg ) ;
return getManagementController ( arg ) . getServices ( arg ) ;
return getManagementController ( arg ) . updateCluster ( arg ) ;
return getManagementController ( arg ) . updateComponents ( arg ) ;
return getManagementController ( arg ) . updateServices ( arg ) ;
return <unk> ( arg ) ;
return getResources ( arg ) ;
return getRoleState ( arg ) == RoleState . STOPPING || getRoleState ( arg ) == RoleState . STOPPED ;
return gson . < List < <unk> >> fromJson ( arg ) ;
return handleRequest ( arg ) ;
return healthStatus ;
return <unk> ;
return hostComponentEntity ;
return hostName ;
return hostName ;
return <unk> . getLastHeartbeatTime ( arg ) ;
return <unk> ;
return <unk> ;
return isDeleted ;
return isDeleted ;
return keepers ;
return keyPropertyIds . get ( arg ) ;
return keyPropertyIds ;
return keyPropertyIds ;
return lastHeartbeatTime ;
return lastRegistrationTime ;
return <unk> ;
return list ;
return list ;
return <unk> ;
return <unk> ;
return m_body ;
return m_body == null ? Collections . < PropertyId , Object > emptyMap ( arg ) : getHttpBodyParser ( arg ) . parse ( arg ) ;
return m_body == null ? Collections . < PropertyId , String > emptyMap ( arg ) : getHttpBodyParser ( arg ) . parse ( arg ) ;
return m_listChildren ;
return <unk> . equals ( arg ) && m_mapCategoryTemporalInfo . equals ( arg ) && m_mapPropertyTemporalInfo . equals ( arg ) && m_mapQueryProperties . equals ( arg ) && m_mapSubResources . equals ( arg ) && m_resource . equals ( arg ) && m_userPredicate == null ? that . m_userPredicate == null : m_userPredicate . equals ( arg ) ;
return m_mapResourceIds . equals ( arg ) && m_query . equals ( arg ) && m_resourceDefinition . equals ( arg ) && m_mapSubResources == null ? that . m_mapSubResources == null : m_mapSubResources . equals ( arg ) ;
return m_mapResourceIds . equals ( arg ) && m_query == that . m_query && m_resourceDefinition . equals ( arg ) && m_mapSubResources == null ? that . m_mapSubResources == null : m_mapSubResources . equals ( arg ) ;
return m_mapResourceIds . equals ( arg ) && m_query == that . m_query && m_resourceDefinition . equals ( arg ) && m_mapSubResources == null ? that . m_mapSubResources == null : m_mapSubResources . equals ( arg ) ;
return m_mapResourceIds . equals ( arg ) && m_resourceDefinition . equals ( arg ) && m_mapSubResources == null ? that . m_mapSubResources == null : m_mapSubResources . equals ( arg ) && m_mapQuerySubResources == null ? that . m_mapQuerySubResources == null : m_mapQuerySubResources . equals ( arg ) && m_mapCategoryTemporalInfo . equals ( arg ) && m_mapPropertyTemporalInfo . equals ( arg ) && m_setQueryProperties . equals ( arg ) && m_userPredicate == null ? that . m_userPredicate == null : m_userPredicate . equals ( arg ) ;
return m_mapResourceIds . equals ( arg ) && m_resourceDefinition . equals ( arg ) && m_mapSubResources == null ? that . m_mapSubResources == null : m_mapSubResources . equals ( arg ) && m_mapQuerySubResources == null ? that . m_mapQuerySubResources == null : m_mapQuerySubResources . equals ( arg ) && m_mapCategoryTemporalInfo . equals ( arg ) && m_mapPropertyTemporalInfo . equals ( arg ) && m_setQueryProperties . equals ( arg ) && m_userPredicate == null ? that . m_userPredicate == null : m_userPredicate . equals ( arg ) ;
return <unk> . get ( arg ) ;
return <unk> ;
return m_query ;
return m_query ;
return m_requestFactory ;
return m_requestFactory ;
return m_requestFactory ;
return m_requestFactory ;
return m_requestFactory ;
return m_requestFactory ;
return m_requestFactory ;
return m_requestFactory ;
return <unk> ;
return m_resource ;
return m_resourceDef ;
return m_resourceDef ;
return m_resourceDef ;
return m_resourceDef ;
return m_resourceDef ;
return m_resourceDef ;
return m_resourceDef ;
return m_resourceDef ;
return m_resourceDef ;
return <unk> ;
return <unk> . <unk> ( arg ) ;
return manifest . hashCode ( arg ) ;
return <unk> this . <unk> +  N + <unk> this . <unk> +  N + <unk> this . <unk> +  N ;
return myState == RoleState . STARTING ;
return myState == RoleState . STARTING || myState == RoleState . ACTIVE ;
return myState == RoleState . STOPPING ;
return myState == RoleState . STOPPING || myState == RoleState . INACTIVE ;
return myState == RoleState . STOPPING || myState == RoleState . STOPPED ;
return myState == ServiceState . ACTIVE ;
return new <unk> ( arg ) ;
return new ClusterControllerImpl ( arg ) ;
return new ConfigPropertiesCategory ( arg ) ;
return new <unk> ( arg ) ;
return new <unk> ( arg ) ;
return new <unk> ( arg ) ;
return new <unk> ( arg ) ;
return new <unk> ( arg ) ;
return new <unk> ( arg ) ;
return new <unk> ( arg ) ;
return new <unk> ( arg ) ;
return new <unk> ( arg ) ;
return new <unk> ( arg ) ;
return new PredicateBuilderPredicate ( arg ) ;
return new <unk> ( arg ) ;
return new PredicateBuilderWithPredicate ( arg ) ;
return new <unk> ( arg ) ;
return new PropertyIdImpl ( arg ) ;
return new RequestImpl ( arg ) ;
return new <unk> ( arg ) ;
return new RoleToNodesMapEntry ( arg ) ;
return null ;
return null ;
return null ;
return null ;
return null ;
return <unk> ;
return <unk> ;
return osType . equals ( arg ) || osType . equals ( arg ) || osType . equals ( arg ) || osType . equals ( arg ) || osType . equals ( arg ) || osType . equals ( arg ) || osType . equals ( arg ) || osType . equals ( arg ) ;
return osType ;
return <unk> ;
return pbPredicate == null ? null : pbPredicate . toPredicate ( arg ) ;
return pbWithPredicate == null ? null : pbWithPredicate . toPredicate ( arg ) ;
return plugins . get ( arg ) ;
return plugins . keySet ( arg ) ;
return predicate . getPropertyIds ( arg ) ;
return <unk> ;
return <unk> == <unk> . <unk> . <unk> ;
return propertyValue != null && getValue ( arg ) . compareTo ( arg ) < 0 ;
return propertyValue != null && getValue ( arg ) . compareTo ( arg ) <unk> 0 ;
return propertyValue != null && getValue ( arg ) . compareTo ( arg ) == 0 ;
return propertyValue != null && getValue ( arg ) . compareTo ( arg ) > 0 ;
return propertyValue != null && getValue ( arg ) . compareTo ( arg ) <unk> 0 ;
return <unk> ;
return request <unk> <unk> && eq ( arg ) && eq ( arg ) && eq ( arg ) && eq ( arg ) && eq ( arg ) && eq ( arg ) ;
return <unk> ;
return ret ;
return ret ;
return ret ;
return role . hashCode ( arg ) ;
return role ;
return role ;
return role ;
return s . equals ( arg ) ;
return safeToRemove ;
return safeToRemove ;
return sb . toString ( arg ) ;
return <unk> . get ( arg ) ;
return selectedInd ;
return serviceComponent . getServiceComponentHosts ( arg ) . keySet ( arg ) . iterator ( arg ) . next ( arg ) ;
return serviceComponent . getServiceComponentHosts ( arg ) . keySet ( arg ) . iterator ( arg ) . next ( arg ) ;
return <unk> ;
return serviceName ;
return <unk> ;
return <unk> +-+ stackVersion ;
return stackVersion ;
return <unk> ;
return <unk> ;
return <unk> ;
return taskId +   + role +   + <unk> +   + <unk> ;
return this . commandsToSend . get ( arg ) ;
return this . <unk> ;
return this . manifest . equals ( arg ) ;
return this . mountpount ;
return this . operational_clusters . get ( arg ) . getClusterDefinition ( arg ) ;
return this . operational_clusters . get ( arg ) . getClusterState ( arg ) ;
return this . operational_clusters . get ( arg ) . getLatestClusterDefinition ( arg ) ;
return this . plugins . get ( arg ) ;
return this . plugins . keySet ( arg ) ;
return this . role . equals ( arg ) ;
return this . stackVersion ;
return this ;
return this ;
return <unk> ;
return true ;
return typeName ;
return typeName ;
return versionTag ;
s = new ServiceImpl ( arg ) ;
<unk> ( arg ) ;
<unk> ( arg ) ;
sb . append ( arg ) . append ( arg ) ;
sb . append ( arg ) . append ( arg ) ;
sb . append ( arg ) . append ( arg ) ;
sb . append ( arg ) . append ( arg ) ;
sb . append ( arg ) . append ( arg ) ;
sb . append ( arg ) ;
<unk> = new <unk> ( arg ) ;
sch . setDesiredState ( arg ) ;
sch . setDesiredState ( arg ) ;
sch . setDesiredState ( arg ) ;
sch = new ServiceComponentHostImpl ( arg ) ;
searchResults = Clusters . getInstance ( arg ) . <unk> ( arg ) ;
searchResults = Clusters . getInstance ( arg ) . <unk> ( arg ) ;
selectedInd = <unk> ;
<unk> . <unk> ( arg ) ;
service . removeAllComponents ( arg ) ;
service . removeAllComponents ( arg ) ;
service = <unk> ;
<unk> . <unk> ( arg ) . <unk> ( arg ) ;
serviceName = s1 ;
<unk> ( arg ) ;
<unk> ( arg ) ;
<unk> ( arg ) ;
short responseId = ( short ) ( <unk> . <unk> ( arg ) + <unk> ) ;
stages = db . getAllStages ( arg ) ;
stateMachineInvoker . getAMBARIEventHandler ( arg ) . handle ( arg ) ;
stateMachineInvoker . getAMBARIEventHandler ( arg ) . handle ( arg ) ;
stateMachineInvoker . getAMBARIEventHandler ( arg ) . handle ( arg ) ;
stateMachineInvoker . getAMBARIEventHandler ( arg ) . handle ( arg ) ;
<unk> . put ( arg ) ;
<unk> ( arg ) ;
this . blueprintName = blueprintName ;
this . blueprintRevision = blueprintRevision ;
this . <unk> = <unk> ;
this . <unk> = true ;
this . getNodeState ( arg ) . setClusterID ( arg ) ;
this . getNodeState ( arg ) . setClusterName ( arg ) ;
this . nodeState . setClusterID ( arg ) ;
this . nodeState . setClusterName ( arg ) ;
this . role = role ;
this . role = role ;
this . role = role ;
this . serverName = serverName ;
this . <unk> . put ( arg ) ;
this . versionTag = versionTag ;
throw new AmbariException ( arg ) ;
throw new AmbariException ( arg ) ;
throw new AmbariException ( arg ) ;
throw new AmbariException ( arg ) ;
throw new AmbariException ( arg ) ;
throw new AmbariException ( arg ) ;
throw new AmbariException ( arg ) ;
throw new AmbariException ( arg ) ;
throw new AmbariException ( arg ) ;
throw new AmbariException ( arg ) ;
throw new AmbariException ( arg ) ;
throw new AmbariException ( arg ) ;
throw new AmbariException ( arg ) ;
throw new AmbariException ( arg ) ;
throw new AmbariException ( arg ) ;
throw new AmbariException ( arg ) ;
throw new AmbariException ( arg ) ;
throw new AmbariException ( arg ) ;
throw new AmbariException ( arg ) ;
throw new AmbariException ( arg ) ;
throw new AmbariException ( arg ) ;
throw new AmbariException ( arg ) ;
throw new AmbariException ( arg ) ;
throw new AmbariException ( arg ) ;
throw new AmbariException ( arg ) ;
throw new AmbariException ( arg ) ;
throw new AmbariException ( arg ) ;
throw new AmbariException ( arg ) ;
throw new AmbariException ( arg ) ;
throw new AmbariException ( arg ) ;
throw new AmbariException ( arg ) ;
throw new AmbariException ( arg ) ;
throw new AmbariException ( arg ) ;
throw new AmbariException ( arg ) ;
throw new AmbariException ( arg ) ;
throw new AmbariException ( arg ) ;
throw new AmbariException ( arg ) ;
throw new AmbariException ( arg ) ;
throw new AmbariException ( arg ) ;
throw new AmbariException ( arg ) ;
throw new <unk> ( arg ) ;
throw new <unk> ( arg ) ;
throw new <unk> ( arg ) ;
throw new InvalidStateTransitonException ( arg ) ;
throw new InvalidStateTransitonException ( arg ) ;
throw new <unk> ( arg ) ;
throw new <unk> ( arg ) ;
throw new <unk> ( arg ) ;
throw new <unk> ( arg ) ;
trackAction = controller . updateCluster ( arg ) ;
trackAction = controller . updateCluster ( arg ) ;
trackAction = controller . updateCluster ( arg ) ;
trackAction = controller . updateCluster ( arg ) ;
trackAction = controller . updateCluster ( arg ) ;
trackAction = controller . updateComponents ( arg ) ;
trackAction = controller . updateServices ( arg ) ;
trackAction = controller . updateServices ( arg ) ;
trackAction = controller . updateServices ( arg ) ;
trackAction = controller . updateServices ( arg ) ;
typeName = type ;
typeName = type ;
<unk> ( arg ) ;
<unk> ( arg ) ;
verifyHost ( arg ) ;
verifyHost ( arg ) ;
workflowUpdateNumCompletedPS . <unk> ( arg ) ;
workflowUpdateNumCompletedPS . <unk> ( arg ) ;
