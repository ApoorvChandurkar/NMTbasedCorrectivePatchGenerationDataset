return properties == null ? Collections . < PropertyConfig > emptyList ( arg ) : properties ;
return resources == null ? Collections . < ResourceConfig > emptyList ( arg ) : resources ;
expect ( arg ) . andReturn ( arg ) . anyTimes ( arg ) ;
this . hosts = hosts != null ? hosts . getBytes ( arg ) : null ;
if ( isClientOnlyComponent ( arg ) || state . equals ( arg ) ) continue ;
if ( null != request . getClusterName ( arg ) ) setResourceProperty ( arg ) ;
if ( null != clusterName ) clusters . mapHostToCluster ( arg ) ;
return yarn ;
return viewInstanceEntity == null ? null : Collections . unmodifiableMap ( arg ) ;
return viewInstanceEntity == null ? null : Collections . unmodifiableMap ( arg ) ;
final Set < String > candidateHosts ;
Assert . assertSame ( arg ) ;
assertNull ( arg ) ;
throw new ServiceFormattedException ( arg ) ;
expect ( arg ) . andThrow ( arg ) ;
nonFailsafeHandlers . add ( arg ) ;
return serviceConfigVersionResponse ;
expect ( arg ) . andReturn ( arg ) . anyTimes ( arg ) ;
expect ( arg ) . andReturn ( arg ) . anyTimes ( arg ) ;
expect ( arg ) . andReturn ( arg ) . anyTimes ( arg ) ;
String value = properties . get ( arg ) . toString ( arg ) ;
throw new SystemException ( arg ) ;
throw new SystemException ( arg ) ;
expect ( arg ) . andReturn ( arg ) . anyTimes ( arg ) ;
expect ( arg ) . andReturn ( arg ) . times ( arg ) ;
expect ( arg ) . andReturn ( arg ) . times ( arg ) ;
fos . flush ( arg ) ;
properties = ambariMetaInfo . getServiceProperties ( arg ) ;
Set < PropertyInfo > properties = ambariMetaInfo . getServiceProperties ( arg ) ;
assertNull ( arg ) ;
Assert . assertEquals ( [{"os":"redhat7","baseurls":[{"id":"HDP-2.2.0.1-885","type":"HDP","baseurl":"http:
return queryResponse == null ? new QueryResponseImpl ( arg ) : queryResponse ;
hostStates . put ( arg ) ;
hostStates . get ( arg ) . add ( arg ) ;
org . apache . ambari . server . controller . spi . RequestStatus status = provider . createResources ( arg ) ;
org . apache . ambari . server . controller . spi . RequestStatus status = upgradeResourceProvider . createResources ( arg ) ;
Collection < String > hosts = new LinkedHashSet < String > ( arg ) ;
return getKeyNumber ( arg ) ;
